// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_342_000)
{
    // 39E8 003F;	
    // (㧨) CJK UNIFIED IDEOGRAPH-39E8	[FB80 B9E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_001)
{
    // 39E8 0061;	
    // (㧨) CJK UNIFIED IDEOGRAPH-39E8	[FB80 B9E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_002)
{
    // 39E8 0041;	
    // (㧨) CJK UNIFIED IDEOGRAPH-39E8	[FB80 B9E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_003)
{
    // 39E8 0062;	
    // (㧨) CJK UNIFIED IDEOGRAPH-39E8	[FB80 B9E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_004)
{
    // 39E9 0021;	
    // (㧩) CJK UNIFIED IDEOGRAPH-39E9	[FB80 B9E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_005)
{
    // 39E9 003F;	
    // (㧩) CJK UNIFIED IDEOGRAPH-39E9	[FB80 B9E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_006)
{
    // 39E9 0061;	
    // (㧩) CJK UNIFIED IDEOGRAPH-39E9	[FB80 B9E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_007)
{
    // 39E9 0041;	
    // (㧩) CJK UNIFIED IDEOGRAPH-39E9	[FB80 B9E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_008)
{
    // 39E9 0062;	
    // (㧩) CJK UNIFIED IDEOGRAPH-39E9	[FB80 B9E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_009)
{
    // 39EA 0021;	
    // (㧪) CJK UNIFIED IDEOGRAPH-39EA	[FB80 B9EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_010)
{
    // 39EA 003F;	
    // (㧪) CJK UNIFIED IDEOGRAPH-39EA	[FB80 B9EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_011)
{
    // 39EA 0061;	
    // (㧪) CJK UNIFIED IDEOGRAPH-39EA	[FB80 B9EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_012)
{
    // 39EA 0041;	
    // (㧪) CJK UNIFIED IDEOGRAPH-39EA	[FB80 B9EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_013)
{
    // 39EA 0062;	
    // (㧪) CJK UNIFIED IDEOGRAPH-39EA	[FB80 B9EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_014)
{
    // 39EB 0021;	
    // (㧫) CJK UNIFIED IDEOGRAPH-39EB	[FB80 B9EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_015)
{
    // 39EB 003F;	
    // (㧫) CJK UNIFIED IDEOGRAPH-39EB	[FB80 B9EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_016)
{
    // 39EB 0061;	
    // (㧫) CJK UNIFIED IDEOGRAPH-39EB	[FB80 B9EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_017)
{
    // 39EB 0041;	
    // (㧫) CJK UNIFIED IDEOGRAPH-39EB	[FB80 B9EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_018)
{
    // 39EB 0062;	
    // (㧫) CJK UNIFIED IDEOGRAPH-39EB	[FB80 B9EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_019)
{
    // 39EC 0021;	
    // (㧬) CJK UNIFIED IDEOGRAPH-39EC	[FB80 B9EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_020)
{
    // 39EC 003F;	
    // (㧬) CJK UNIFIED IDEOGRAPH-39EC	[FB80 B9EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_021)
{
    // 39EC 0061;	
    // (㧬) CJK UNIFIED IDEOGRAPH-39EC	[FB80 B9EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_022)
{
    // 39EC 0041;	
    // (㧬) CJK UNIFIED IDEOGRAPH-39EC	[FB80 B9EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_023)
{
    // 39EC 0062;	
    // (㧬) CJK UNIFIED IDEOGRAPH-39EC	[FB80 B9EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_024)
{
    // 39ED 0021;	
    // (㧭) CJK UNIFIED IDEOGRAPH-39ED	[FB80 B9ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_025)
{
    // 39ED 003F;	
    // (㧭) CJK UNIFIED IDEOGRAPH-39ED	[FB80 B9ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_026)
{
    // 39ED 0061;	
    // (㧭) CJK UNIFIED IDEOGRAPH-39ED	[FB80 B9ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_027)
{
    // 39ED 0041;	
    // (㧭) CJK UNIFIED IDEOGRAPH-39ED	[FB80 B9ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_028)
{
    // 39ED 0062;	
    // (㧭) CJK UNIFIED IDEOGRAPH-39ED	[FB80 B9ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_029)
{
    // 39EE 0021;	
    // (㧮) CJK UNIFIED IDEOGRAPH-39EE	[FB80 B9EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_030)
{
    // 39EE 003F;	
    // (㧮) CJK UNIFIED IDEOGRAPH-39EE	[FB80 B9EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_031)
{
    // 39EE 0061;	
    // (㧮) CJK UNIFIED IDEOGRAPH-39EE	[FB80 B9EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_032)
{
    // 39EE 0041;	
    // (㧮) CJK UNIFIED IDEOGRAPH-39EE	[FB80 B9EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_033)
{
    // 39EE 0062;	
    // (㧮) CJK UNIFIED IDEOGRAPH-39EE	[FB80 B9EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_034)
{
    // 39EF 0021;	
    // (㧯) CJK UNIFIED IDEOGRAPH-39EF	[FB80 B9EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_035)
{
    // 39EF 003F;	
    // (㧯) CJK UNIFIED IDEOGRAPH-39EF	[FB80 B9EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_036)
{
    // 39EF 0061;	
    // (㧯) CJK UNIFIED IDEOGRAPH-39EF	[FB80 B9EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_037)
{
    // 39EF 0041;	
    // (㧯) CJK UNIFIED IDEOGRAPH-39EF	[FB80 B9EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_038)
{
    // 39EF 0062;	
    // (㧯) CJK UNIFIED IDEOGRAPH-39EF	[FB80 B9EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_039)
{
    // 39F0 0021;	
    // (㧰) CJK UNIFIED IDEOGRAPH-39F0	[FB80 B9F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_040)
{
    // 39F0 003F;	
    // (㧰) CJK UNIFIED IDEOGRAPH-39F0	[FB80 B9F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_041)
{
    // 39F0 0061;	
    // (㧰) CJK UNIFIED IDEOGRAPH-39F0	[FB80 B9F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_042)
{
    // 39F0 0041;	
    // (㧰) CJK UNIFIED IDEOGRAPH-39F0	[FB80 B9F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_043)
{
    // 39F0 0062;	
    // (㧰) CJK UNIFIED IDEOGRAPH-39F0	[FB80 B9F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_044)
{
    // 39F1 0021;	
    // (㧱) CJK UNIFIED IDEOGRAPH-39F1	[FB80 B9F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_045)
{
    // 39F1 003F;	
    // (㧱) CJK UNIFIED IDEOGRAPH-39F1	[FB80 B9F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_046)
{
    // 39F1 0061;	
    // (㧱) CJK UNIFIED IDEOGRAPH-39F1	[FB80 B9F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_047)
{
    // 39F1 0041;	
    // (㧱) CJK UNIFIED IDEOGRAPH-39F1	[FB80 B9F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_048)
{
    // 39F1 0062;	
    // (㧱) CJK UNIFIED IDEOGRAPH-39F1	[FB80 B9F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_049)
{
    // 39F2 0021;	
    // (㧲) CJK UNIFIED IDEOGRAPH-39F2	[FB80 B9F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_050)
{
    // 39F2 003F;	
    // (㧲) CJK UNIFIED IDEOGRAPH-39F2	[FB80 B9F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_051)
{
    // 39F2 0061;	
    // (㧲) CJK UNIFIED IDEOGRAPH-39F2	[FB80 B9F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_052)
{
    // 39F2 0041;	
    // (㧲) CJK UNIFIED IDEOGRAPH-39F2	[FB80 B9F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_053)
{
    // 39F2 0062;	
    // (㧲) CJK UNIFIED IDEOGRAPH-39F2	[FB80 B9F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_054)
{
    // 39F3 0021;	
    // (㧳) CJK UNIFIED IDEOGRAPH-39F3	[FB80 B9F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_055)
{
    // 39F3 003F;	
    // (㧳) CJK UNIFIED IDEOGRAPH-39F3	[FB80 B9F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_056)
{
    // 39F3 0061;	
    // (㧳) CJK UNIFIED IDEOGRAPH-39F3	[FB80 B9F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_057)
{
    // 39F3 0041;	
    // (㧳) CJK UNIFIED IDEOGRAPH-39F3	[FB80 B9F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_058)
{
    // 39F3 0062;	
    // (㧳) CJK UNIFIED IDEOGRAPH-39F3	[FB80 B9F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_059)
{
    // 39F4 0021;	
    // (㧴) CJK UNIFIED IDEOGRAPH-39F4	[FB80 B9F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_060)
{
    // 39F4 003F;	
    // (㧴) CJK UNIFIED IDEOGRAPH-39F4	[FB80 B9F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_061)
{
    // 39F4 0061;	
    // (㧴) CJK UNIFIED IDEOGRAPH-39F4	[FB80 B9F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_062)
{
    // 39F4 0041;	
    // (㧴) CJK UNIFIED IDEOGRAPH-39F4	[FB80 B9F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_063)
{
    // 39F4 0062;	
    // (㧴) CJK UNIFIED IDEOGRAPH-39F4	[FB80 B9F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_064)
{
    // 39F5 0021;	
    // (㧵) CJK UNIFIED IDEOGRAPH-39F5	[FB80 B9F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_065)
{
    // 39F5 003F;	
    // (㧵) CJK UNIFIED IDEOGRAPH-39F5	[FB80 B9F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_066)
{
    // 39F5 0061;	
    // (㧵) CJK UNIFIED IDEOGRAPH-39F5	[FB80 B9F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_067)
{
    // 39F5 0041;	
    // (㧵) CJK UNIFIED IDEOGRAPH-39F5	[FB80 B9F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_068)
{
    // 39F5 0062;	
    // (㧵) CJK UNIFIED IDEOGRAPH-39F5	[FB80 B9F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_069)
{
    // 39F6 0021;	
    // (㧶) CJK UNIFIED IDEOGRAPH-39F6	[FB80 B9F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_070)
{
    // 39F6 003F;	
    // (㧶) CJK UNIFIED IDEOGRAPH-39F6	[FB80 B9F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_071)
{
    // 39F6 0061;	
    // (㧶) CJK UNIFIED IDEOGRAPH-39F6	[FB80 B9F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_072)
{
    // 39F6 0041;	
    // (㧶) CJK UNIFIED IDEOGRAPH-39F6	[FB80 B9F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_073)
{
    // 39F6 0062;	
    // (㧶) CJK UNIFIED IDEOGRAPH-39F6	[FB80 B9F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_074)
{
    // 39F7 0021;	
    // (㧷) CJK UNIFIED IDEOGRAPH-39F7	[FB80 B9F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_075)
{
    // 39F7 003F;	
    // (㧷) CJK UNIFIED IDEOGRAPH-39F7	[FB80 B9F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_076)
{
    // 39F7 0061;	
    // (㧷) CJK UNIFIED IDEOGRAPH-39F7	[FB80 B9F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_077)
{
    // 39F7 0041;	
    // (㧷) CJK UNIFIED IDEOGRAPH-39F7	[FB80 B9F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_078)
{
    // 39F7 0062;	
    // (㧷) CJK UNIFIED IDEOGRAPH-39F7	[FB80 B9F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_079)
{
    // 39F8 0021;	
    // (㧸) CJK UNIFIED IDEOGRAPH-39F8	[FB80 B9F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_080)
{
    // 39F8 003F;	
    // (㧸) CJK UNIFIED IDEOGRAPH-39F8	[FB80 B9F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_081)
{
    // 39F8 0061;	
    // (㧸) CJK UNIFIED IDEOGRAPH-39F8	[FB80 B9F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_082)
{
    // 39F8 0041;	
    // (㧸) CJK UNIFIED IDEOGRAPH-39F8	[FB80 B9F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_083)
{
    // 39F8 0062;	
    // (㧸) CJK UNIFIED IDEOGRAPH-39F8	[FB80 B9F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_084)
{
    // 39F9 0021;	
    // (㧹) CJK UNIFIED IDEOGRAPH-39F9	[FB80 B9F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_085)
{
    // 39F9 003F;	
    // (㧹) CJK UNIFIED IDEOGRAPH-39F9	[FB80 B9F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_086)
{
    // 39F9 0061;	
    // (㧹) CJK UNIFIED IDEOGRAPH-39F9	[FB80 B9F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_087)
{
    // 39F9 0041;	
    // (㧹) CJK UNIFIED IDEOGRAPH-39F9	[FB80 B9F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_088)
{
    // 39F9 0062;	
    // (㧹) CJK UNIFIED IDEOGRAPH-39F9	[FB80 B9F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_089)
{
    // 39FA 0021;	
    // (㧺) CJK UNIFIED IDEOGRAPH-39FA	[FB80 B9FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_090)
{
    // 39FA 003F;	
    // (㧺) CJK UNIFIED IDEOGRAPH-39FA	[FB80 B9FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_091)
{
    // 39FA 0061;	
    // (㧺) CJK UNIFIED IDEOGRAPH-39FA	[FB80 B9FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_092)
{
    // 39FA 0041;	
    // (㧺) CJK UNIFIED IDEOGRAPH-39FA	[FB80 B9FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_093)
{
    // 39FA 0062;	
    // (㧺) CJK UNIFIED IDEOGRAPH-39FA	[FB80 B9FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_094)
{
    // 39FB 0021;	
    // (㧻) CJK UNIFIED IDEOGRAPH-39FB	[FB80 B9FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_095)
{
    // 39FB 003F;	
    // (㧻) CJK UNIFIED IDEOGRAPH-39FB	[FB80 B9FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_096)
{
    // 39FB 0061;	
    // (㧻) CJK UNIFIED IDEOGRAPH-39FB	[FB80 B9FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_097)
{
    // 39FB 0041;	
    // (㧻) CJK UNIFIED IDEOGRAPH-39FB	[FB80 B9FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_098)
{
    // 39FB 0062;	
    // (㧻) CJK UNIFIED IDEOGRAPH-39FB	[FB80 B9FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_099)
{
    // 39FC 0021;	
    // (㧼) CJK UNIFIED IDEOGRAPH-39FC	[FB80 B9FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_100)
{
    // 39FC 003F;	
    // (㧼) CJK UNIFIED IDEOGRAPH-39FC	[FB80 B9FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_101)
{
    // 39FC 0061;	
    // (㧼) CJK UNIFIED IDEOGRAPH-39FC	[FB80 B9FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_102)
{
    // 39FC 0041;	
    // (㧼) CJK UNIFIED IDEOGRAPH-39FC	[FB80 B9FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_103)
{
    // 39FC 0062;	
    // (㧼) CJK UNIFIED IDEOGRAPH-39FC	[FB80 B9FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_104)
{
    // 39FD 0021;	
    // (㧽) CJK UNIFIED IDEOGRAPH-39FD	[FB80 B9FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_105)
{
    // 39FD 003F;	
    // (㧽) CJK UNIFIED IDEOGRAPH-39FD	[FB80 B9FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_106)
{
    // 39FD 0061;	
    // (㧽) CJK UNIFIED IDEOGRAPH-39FD	[FB80 B9FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_107)
{
    // 39FD 0041;	
    // (㧽) CJK UNIFIED IDEOGRAPH-39FD	[FB80 B9FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_108)
{
    // 39FD 0062;	
    // (㧽) CJK UNIFIED IDEOGRAPH-39FD	[FB80 B9FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_109)
{
    // 39FE 0021;	
    // (㧾) CJK UNIFIED IDEOGRAPH-39FE	[FB80 B9FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_110)
{
    // 39FE 003F;	
    // (㧾) CJK UNIFIED IDEOGRAPH-39FE	[FB80 B9FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_111)
{
    // 39FE 0061;	
    // (㧾) CJK UNIFIED IDEOGRAPH-39FE	[FB80 B9FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_112)
{
    // 39FE 0041;	
    // (㧾) CJK UNIFIED IDEOGRAPH-39FE	[FB80 B9FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_113)
{
    // 39FE 0062;	
    // (㧾) CJK UNIFIED IDEOGRAPH-39FE	[FB80 B9FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_114)
{
    // 39FF 0021;	
    // (㧿) CJK UNIFIED IDEOGRAPH-39FF	[FB80 B9FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_115)
{
    // 39FF 003F;	
    // (㧿) CJK UNIFIED IDEOGRAPH-39FF	[FB80 B9FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB9FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_116)
{
    // 39FF 0061;	
    // (㧿) CJK UNIFIED IDEOGRAPH-39FF	[FB80 B9FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_117)
{
    // 39FF 0041;	
    // (㧿) CJK UNIFIED IDEOGRAPH-39FF	[FB80 B9FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x39FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_118)
{
    // 39FF 0062;	
    // (㧿) CJK UNIFIED IDEOGRAPH-39FF	[FB80 B9FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x39FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB9FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_119)
{
    // 3A00 0021;	
    // (㨀) CJK UNIFIED IDEOGRAPH-3A00	[FB80 BA00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_120)
{
    // 3A00 003F;	
    // (㨀) CJK UNIFIED IDEOGRAPH-3A00	[FB80 BA00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_121)
{
    // 3A00 0061;	
    // (㨀) CJK UNIFIED IDEOGRAPH-3A00	[FB80 BA00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_122)
{
    // 3A00 0041;	
    // (㨀) CJK UNIFIED IDEOGRAPH-3A00	[FB80 BA00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_123)
{
    // 3A00 0062;	
    // (㨀) CJK UNIFIED IDEOGRAPH-3A00	[FB80 BA00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_124)
{
    // 3A01 0021;	
    // (㨁) CJK UNIFIED IDEOGRAPH-3A01	[FB80 BA01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_125)
{
    // 3A01 003F;	
    // (㨁) CJK UNIFIED IDEOGRAPH-3A01	[FB80 BA01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_126)
{
    // 3A01 0061;	
    // (㨁) CJK UNIFIED IDEOGRAPH-3A01	[FB80 BA01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_127)
{
    // 3A01 0041;	
    // (㨁) CJK UNIFIED IDEOGRAPH-3A01	[FB80 BA01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_128)
{
    // 3A01 0062;	
    // (㨁) CJK UNIFIED IDEOGRAPH-3A01	[FB80 BA01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_129)
{
    // 3A02 0021;	
    // (㨂) CJK UNIFIED IDEOGRAPH-3A02	[FB80 BA02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_130)
{
    // 3A02 003F;	
    // (㨂) CJK UNIFIED IDEOGRAPH-3A02	[FB80 BA02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_131)
{
    // 3A02 0061;	
    // (㨂) CJK UNIFIED IDEOGRAPH-3A02	[FB80 BA02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_132)
{
    // 3A02 0041;	
    // (㨂) CJK UNIFIED IDEOGRAPH-3A02	[FB80 BA02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_133)
{
    // 3A02 0062;	
    // (㨂) CJK UNIFIED IDEOGRAPH-3A02	[FB80 BA02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_134)
{
    // 3A03 0021;	
    // (㨃) CJK UNIFIED IDEOGRAPH-3A03	[FB80 BA03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_135)
{
    // 3A03 003F;	
    // (㨃) CJK UNIFIED IDEOGRAPH-3A03	[FB80 BA03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_136)
{
    // 3A03 0061;	
    // (㨃) CJK UNIFIED IDEOGRAPH-3A03	[FB80 BA03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_137)
{
    // 3A03 0041;	
    // (㨃) CJK UNIFIED IDEOGRAPH-3A03	[FB80 BA03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_138)
{
    // 3A03 0062;	
    // (㨃) CJK UNIFIED IDEOGRAPH-3A03	[FB80 BA03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_139)
{
    // 3A04 0021;	
    // (㨄) CJK UNIFIED IDEOGRAPH-3A04	[FB80 BA04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_140)
{
    // 3A04 003F;	
    // (㨄) CJK UNIFIED IDEOGRAPH-3A04	[FB80 BA04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_141)
{
    // 3A04 0061;	
    // (㨄) CJK UNIFIED IDEOGRAPH-3A04	[FB80 BA04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_142)
{
    // 3A04 0041;	
    // (㨄) CJK UNIFIED IDEOGRAPH-3A04	[FB80 BA04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_143)
{
    // 3A04 0062;	
    // (㨄) CJK UNIFIED IDEOGRAPH-3A04	[FB80 BA04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_144)
{
    // 3A05 0021;	
    // (㨅) CJK UNIFIED IDEOGRAPH-3A05	[FB80 BA05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_145)
{
    // 3A05 003F;	
    // (㨅) CJK UNIFIED IDEOGRAPH-3A05	[FB80 BA05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_146)
{
    // 3A05 0061;	
    // (㨅) CJK UNIFIED IDEOGRAPH-3A05	[FB80 BA05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_147)
{
    // 3A05 0041;	
    // (㨅) CJK UNIFIED IDEOGRAPH-3A05	[FB80 BA05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_148)
{
    // 3A05 0062;	
    // (㨅) CJK UNIFIED IDEOGRAPH-3A05	[FB80 BA05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_149)
{
    // 3A06 0021;	
    // (㨆) CJK UNIFIED IDEOGRAPH-3A06	[FB80 BA06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_150)
{
    // 3A06 003F;	
    // (㨆) CJK UNIFIED IDEOGRAPH-3A06	[FB80 BA06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_151)
{
    // 3A06 0061;	
    // (㨆) CJK UNIFIED IDEOGRAPH-3A06	[FB80 BA06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_152)
{
    // 3A06 0041;	
    // (㨆) CJK UNIFIED IDEOGRAPH-3A06	[FB80 BA06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_153)
{
    // 3A06 0062;	
    // (㨆) CJK UNIFIED IDEOGRAPH-3A06	[FB80 BA06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_154)
{
    // 3A07 0021;	
    // (㨇) CJK UNIFIED IDEOGRAPH-3A07	[FB80 BA07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_155)
{
    // 3A07 003F;	
    // (㨇) CJK UNIFIED IDEOGRAPH-3A07	[FB80 BA07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_156)
{
    // 3A07 0061;	
    // (㨇) CJK UNIFIED IDEOGRAPH-3A07	[FB80 BA07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_157)
{
    // 3A07 0041;	
    // (㨇) CJK UNIFIED IDEOGRAPH-3A07	[FB80 BA07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_158)
{
    // 3A07 0062;	
    // (㨇) CJK UNIFIED IDEOGRAPH-3A07	[FB80 BA07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_159)
{
    // 3A08 0021;	
    // (㨈) CJK UNIFIED IDEOGRAPH-3A08	[FB80 BA08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_160)
{
    // 3A08 003F;	
    // (㨈) CJK UNIFIED IDEOGRAPH-3A08	[FB80 BA08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_161)
{
    // 3A08 0061;	
    // (㨈) CJK UNIFIED IDEOGRAPH-3A08	[FB80 BA08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_162)
{
    // 3A08 0041;	
    // (㨈) CJK UNIFIED IDEOGRAPH-3A08	[FB80 BA08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_163)
{
    // 3A08 0062;	
    // (㨈) CJK UNIFIED IDEOGRAPH-3A08	[FB80 BA08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_164)
{
    // 3A09 0021;	
    // (㨉) CJK UNIFIED IDEOGRAPH-3A09	[FB80 BA09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_165)
{
    // 3A09 003F;	
    // (㨉) CJK UNIFIED IDEOGRAPH-3A09	[FB80 BA09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_166)
{
    // 3A09 0061;	
    // (㨉) CJK UNIFIED IDEOGRAPH-3A09	[FB80 BA09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_167)
{
    // 3A09 0041;	
    // (㨉) CJK UNIFIED IDEOGRAPH-3A09	[FB80 BA09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_168)
{
    // 3A09 0062;	
    // (㨉) CJK UNIFIED IDEOGRAPH-3A09	[FB80 BA09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_169)
{
    // 3A0A 0021;	
    // (㨊) CJK UNIFIED IDEOGRAPH-3A0A	[FB80 BA0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_170)
{
    // 3A0A 003F;	
    // (㨊) CJK UNIFIED IDEOGRAPH-3A0A	[FB80 BA0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_171)
{
    // 3A0A 0061;	
    // (㨊) CJK UNIFIED IDEOGRAPH-3A0A	[FB80 BA0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_172)
{
    // 3A0A 0041;	
    // (㨊) CJK UNIFIED IDEOGRAPH-3A0A	[FB80 BA0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_173)
{
    // 3A0A 0062;	
    // (㨊) CJK UNIFIED IDEOGRAPH-3A0A	[FB80 BA0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_174)
{
    // 3A0B 0021;	
    // (㨋) CJK UNIFIED IDEOGRAPH-3A0B	[FB80 BA0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_175)
{
    // 3A0B 003F;	
    // (㨋) CJK UNIFIED IDEOGRAPH-3A0B	[FB80 BA0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_176)
{
    // 3A0B 0061;	
    // (㨋) CJK UNIFIED IDEOGRAPH-3A0B	[FB80 BA0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_177)
{
    // 3A0B 0041;	
    // (㨋) CJK UNIFIED IDEOGRAPH-3A0B	[FB80 BA0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_178)
{
    // 3A0B 0062;	
    // (㨋) CJK UNIFIED IDEOGRAPH-3A0B	[FB80 BA0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_179)
{
    // 3A0C 0021;	
    // (㨌) CJK UNIFIED IDEOGRAPH-3A0C	[FB80 BA0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_180)
{
    // 3A0C 003F;	
    // (㨌) CJK UNIFIED IDEOGRAPH-3A0C	[FB80 BA0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_181)
{
    // 3A0C 0061;	
    // (㨌) CJK UNIFIED IDEOGRAPH-3A0C	[FB80 BA0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_182)
{
    // 3A0C 0041;	
    // (㨌) CJK UNIFIED IDEOGRAPH-3A0C	[FB80 BA0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_183)
{
    // 3A0C 0062;	
    // (㨌) CJK UNIFIED IDEOGRAPH-3A0C	[FB80 BA0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_184)
{
    // 3A0D 0021;	
    // (㨍) CJK UNIFIED IDEOGRAPH-3A0D	[FB80 BA0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_185)
{
    // 3A0D 003F;	
    // (㨍) CJK UNIFIED IDEOGRAPH-3A0D	[FB80 BA0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_186)
{
    // 3A0D 0061;	
    // (㨍) CJK UNIFIED IDEOGRAPH-3A0D	[FB80 BA0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_187)
{
    // 3A0D 0041;	
    // (㨍) CJK UNIFIED IDEOGRAPH-3A0D	[FB80 BA0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_188)
{
    // 3A0D 0062;	
    // (㨍) CJK UNIFIED IDEOGRAPH-3A0D	[FB80 BA0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_189)
{
    // 3A0E 0021;	
    // (㨎) CJK UNIFIED IDEOGRAPH-3A0E	[FB80 BA0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_190)
{
    // 3A0E 003F;	
    // (㨎) CJK UNIFIED IDEOGRAPH-3A0E	[FB80 BA0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_191)
{
    // 3A0E 0061;	
    // (㨎) CJK UNIFIED IDEOGRAPH-3A0E	[FB80 BA0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_192)
{
    // 3A0E 0041;	
    // (㨎) CJK UNIFIED IDEOGRAPH-3A0E	[FB80 BA0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_193)
{
    // 3A0E 0062;	
    // (㨎) CJK UNIFIED IDEOGRAPH-3A0E	[FB80 BA0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_194)
{
    // 3A0F 0021;	
    // (㨏) CJK UNIFIED IDEOGRAPH-3A0F	[FB80 BA0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_195)
{
    // 3A0F 003F;	
    // (㨏) CJK UNIFIED IDEOGRAPH-3A0F	[FB80 BA0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_196)
{
    // 3A0F 0061;	
    // (㨏) CJK UNIFIED IDEOGRAPH-3A0F	[FB80 BA0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_197)
{
    // 3A0F 0041;	
    // (㨏) CJK UNIFIED IDEOGRAPH-3A0F	[FB80 BA0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_198)
{
    // 3A0F 0062;	
    // (㨏) CJK UNIFIED IDEOGRAPH-3A0F	[FB80 BA0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_199)
{
    // 3A10 0021;	
    // (㨐) CJK UNIFIED IDEOGRAPH-3A10	[FB80 BA10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_200)
{
    // 3A10 003F;	
    // (㨐) CJK UNIFIED IDEOGRAPH-3A10	[FB80 BA10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_201)
{
    // 3A10 0061;	
    // (㨐) CJK UNIFIED IDEOGRAPH-3A10	[FB80 BA10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_202)
{
    // 3A10 0041;	
    // (㨐) CJK UNIFIED IDEOGRAPH-3A10	[FB80 BA10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_203)
{
    // 3A10 0062;	
    // (㨐) CJK UNIFIED IDEOGRAPH-3A10	[FB80 BA10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_204)
{
    // 3A11 0021;	
    // (㨑) CJK UNIFIED IDEOGRAPH-3A11	[FB80 BA11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_205)
{
    // 3A11 003F;	
    // (㨑) CJK UNIFIED IDEOGRAPH-3A11	[FB80 BA11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_206)
{
    // 3A11 0061;	
    // (㨑) CJK UNIFIED IDEOGRAPH-3A11	[FB80 BA11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_207)
{
    // 3A11 0041;	
    // (㨑) CJK UNIFIED IDEOGRAPH-3A11	[FB80 BA11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_208)
{
    // 3A11 0062;	
    // (㨑) CJK UNIFIED IDEOGRAPH-3A11	[FB80 BA11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_209)
{
    // 3A12 0021;	
    // (㨒) CJK UNIFIED IDEOGRAPH-3A12	[FB80 BA12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_210)
{
    // 3A12 003F;	
    // (㨒) CJK UNIFIED IDEOGRAPH-3A12	[FB80 BA12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_211)
{
    // 3A12 0061;	
    // (㨒) CJK UNIFIED IDEOGRAPH-3A12	[FB80 BA12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_212)
{
    // 3A12 0041;	
    // (㨒) CJK UNIFIED IDEOGRAPH-3A12	[FB80 BA12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_213)
{
    // 3A12 0062;	
    // (㨒) CJK UNIFIED IDEOGRAPH-3A12	[FB80 BA12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_214)
{
    // 3A13 0021;	
    // (㨓) CJK UNIFIED IDEOGRAPH-3A13	[FB80 BA13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_215)
{
    // 3A13 003F;	
    // (㨓) CJK UNIFIED IDEOGRAPH-3A13	[FB80 BA13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_216)
{
    // 3A13 0061;	
    // (㨓) CJK UNIFIED IDEOGRAPH-3A13	[FB80 BA13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_217)
{
    // 3A13 0041;	
    // (㨓) CJK UNIFIED IDEOGRAPH-3A13	[FB80 BA13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_218)
{
    // 3A13 0062;	
    // (㨓) CJK UNIFIED IDEOGRAPH-3A13	[FB80 BA13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_219)
{
    // 3A14 0021;	
    // (㨔) CJK UNIFIED IDEOGRAPH-3A14	[FB80 BA14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_220)
{
    // 3A14 003F;	
    // (㨔) CJK UNIFIED IDEOGRAPH-3A14	[FB80 BA14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_221)
{
    // 3A14 0061;	
    // (㨔) CJK UNIFIED IDEOGRAPH-3A14	[FB80 BA14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_222)
{
    // 3A14 0041;	
    // (㨔) CJK UNIFIED IDEOGRAPH-3A14	[FB80 BA14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_223)
{
    // 3A14 0062;	
    // (㨔) CJK UNIFIED IDEOGRAPH-3A14	[FB80 BA14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_224)
{
    // 3A15 0021;	
    // (㨕) CJK UNIFIED IDEOGRAPH-3A15	[FB80 BA15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_225)
{
    // 3A15 003F;	
    // (㨕) CJK UNIFIED IDEOGRAPH-3A15	[FB80 BA15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_226)
{
    // 3A15 0061;	
    // (㨕) CJK UNIFIED IDEOGRAPH-3A15	[FB80 BA15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_227)
{
    // 3A15 0041;	
    // (㨕) CJK UNIFIED IDEOGRAPH-3A15	[FB80 BA15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_228)
{
    // 3A15 0062;	
    // (㨕) CJK UNIFIED IDEOGRAPH-3A15	[FB80 BA15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_229)
{
    // 3A16 0021;	
    // (㨖) CJK UNIFIED IDEOGRAPH-3A16	[FB80 BA16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_230)
{
    // 3A16 003F;	
    // (㨖) CJK UNIFIED IDEOGRAPH-3A16	[FB80 BA16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_231)
{
    // 3A16 0061;	
    // (㨖) CJK UNIFIED IDEOGRAPH-3A16	[FB80 BA16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_232)
{
    // 3A16 0041;	
    // (㨖) CJK UNIFIED IDEOGRAPH-3A16	[FB80 BA16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_233)
{
    // 3A16 0062;	
    // (㨖) CJK UNIFIED IDEOGRAPH-3A16	[FB80 BA16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_234)
{
    // 3A17 0021;	
    // (㨗) CJK UNIFIED IDEOGRAPH-3A17	[FB80 BA17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_235)
{
    // 3A17 003F;	
    // (㨗) CJK UNIFIED IDEOGRAPH-3A17	[FB80 BA17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_236)
{
    // 3A17 0061;	
    // (㨗) CJK UNIFIED IDEOGRAPH-3A17	[FB80 BA17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_237)
{
    // 3A17 0041;	
    // (㨗) CJK UNIFIED IDEOGRAPH-3A17	[FB80 BA17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_238)
{
    // 3A17 0062;	
    // (㨗) CJK UNIFIED IDEOGRAPH-3A17	[FB80 BA17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_239)
{
    // 3A18 0021;	
    // (㨘) CJK UNIFIED IDEOGRAPH-3A18	[FB80 BA18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_240)
{
    // 3A18 003F;	
    // (㨘) CJK UNIFIED IDEOGRAPH-3A18	[FB80 BA18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_241)
{
    // 3A18 0061;	
    // (㨘) CJK UNIFIED IDEOGRAPH-3A18	[FB80 BA18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_242)
{
    // 3A18 0041;	
    // (㨘) CJK UNIFIED IDEOGRAPH-3A18	[FB80 BA18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_243)
{
    // 3A18 0062;	
    // (㨘) CJK UNIFIED IDEOGRAPH-3A18	[FB80 BA18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_244)
{
    // 3A19 0021;	
    // (㨙) CJK UNIFIED IDEOGRAPH-3A19	[FB80 BA19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_245)
{
    // 3A19 003F;	
    // (㨙) CJK UNIFIED IDEOGRAPH-3A19	[FB80 BA19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_246)
{
    // 3A19 0061;	
    // (㨙) CJK UNIFIED IDEOGRAPH-3A19	[FB80 BA19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_247)
{
    // 3A19 0041;	
    // (㨙) CJK UNIFIED IDEOGRAPH-3A19	[FB80 BA19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_248)
{
    // 3A19 0062;	
    // (㨙) CJK UNIFIED IDEOGRAPH-3A19	[FB80 BA19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_249)
{
    // 3A1A 0021;	
    // (㨚) CJK UNIFIED IDEOGRAPH-3A1A	[FB80 BA1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_250)
{
    // 3A1A 003F;	
    // (㨚) CJK UNIFIED IDEOGRAPH-3A1A	[FB80 BA1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_251)
{
    // 3A1A 0061;	
    // (㨚) CJK UNIFIED IDEOGRAPH-3A1A	[FB80 BA1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_252)
{
    // 3A1A 0041;	
    // (㨚) CJK UNIFIED IDEOGRAPH-3A1A	[FB80 BA1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_253)
{
    // 3A1A 0062;	
    // (㨚) CJK UNIFIED IDEOGRAPH-3A1A	[FB80 BA1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_254)
{
    // 3A1B 0021;	
    // (㨛) CJK UNIFIED IDEOGRAPH-3A1B	[FB80 BA1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_255)
{
    // 3A1B 003F;	
    // (㨛) CJK UNIFIED IDEOGRAPH-3A1B	[FB80 BA1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_256)
{
    // 3A1B 0061;	
    // (㨛) CJK UNIFIED IDEOGRAPH-3A1B	[FB80 BA1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_257)
{
    // 3A1B 0041;	
    // (㨛) CJK UNIFIED IDEOGRAPH-3A1B	[FB80 BA1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_258)
{
    // 3A1B 0062;	
    // (㨛) CJK UNIFIED IDEOGRAPH-3A1B	[FB80 BA1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_259)
{
    // 3A1C 0021;	
    // (㨜) CJK UNIFIED IDEOGRAPH-3A1C	[FB80 BA1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_260)
{
    // 3A1C 003F;	
    // (㨜) CJK UNIFIED IDEOGRAPH-3A1C	[FB80 BA1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_261)
{
    // 3A1C 0061;	
    // (㨜) CJK UNIFIED IDEOGRAPH-3A1C	[FB80 BA1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_262)
{
    // 3A1C 0041;	
    // (㨜) CJK UNIFIED IDEOGRAPH-3A1C	[FB80 BA1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_263)
{
    // 3A1C 0062;	
    // (㨜) CJK UNIFIED IDEOGRAPH-3A1C	[FB80 BA1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_264)
{
    // 3A1D 0021;	
    // (㨝) CJK UNIFIED IDEOGRAPH-3A1D	[FB80 BA1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_265)
{
    // 3A1D 003F;	
    // (㨝) CJK UNIFIED IDEOGRAPH-3A1D	[FB80 BA1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_266)
{
    // 3A1D 0061;	
    // (㨝) CJK UNIFIED IDEOGRAPH-3A1D	[FB80 BA1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_267)
{
    // 3A1D 0041;	
    // (㨝) CJK UNIFIED IDEOGRAPH-3A1D	[FB80 BA1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_268)
{
    // 3A1D 0062;	
    // (㨝) CJK UNIFIED IDEOGRAPH-3A1D	[FB80 BA1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_269)
{
    // 3A1E 0021;	
    // (㨞) CJK UNIFIED IDEOGRAPH-3A1E	[FB80 BA1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_270)
{
    // 3A1E 003F;	
    // (㨞) CJK UNIFIED IDEOGRAPH-3A1E	[FB80 BA1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_271)
{
    // 3A1E 0061;	
    // (㨞) CJK UNIFIED IDEOGRAPH-3A1E	[FB80 BA1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_272)
{
    // 3A1E 0041;	
    // (㨞) CJK UNIFIED IDEOGRAPH-3A1E	[FB80 BA1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_273)
{
    // 3A1E 0062;	
    // (㨞) CJK UNIFIED IDEOGRAPH-3A1E	[FB80 BA1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_274)
{
    // 3A1F 0021;	
    // (㨟) CJK UNIFIED IDEOGRAPH-3A1F	[FB80 BA1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_275)
{
    // 3A1F 003F;	
    // (㨟) CJK UNIFIED IDEOGRAPH-3A1F	[FB80 BA1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_276)
{
    // 3A1F 0061;	
    // (㨟) CJK UNIFIED IDEOGRAPH-3A1F	[FB80 BA1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_277)
{
    // 3A1F 0041;	
    // (㨟) CJK UNIFIED IDEOGRAPH-3A1F	[FB80 BA1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_278)
{
    // 3A1F 0062;	
    // (㨟) CJK UNIFIED IDEOGRAPH-3A1F	[FB80 BA1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_279)
{
    // 3A20 0021;	
    // (㨠) CJK UNIFIED IDEOGRAPH-3A20	[FB80 BA20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_280)
{
    // 3A20 003F;	
    // (㨠) CJK UNIFIED IDEOGRAPH-3A20	[FB80 BA20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_281)
{
    // 3A20 0061;	
    // (㨠) CJK UNIFIED IDEOGRAPH-3A20	[FB80 BA20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_282)
{
    // 3A20 0041;	
    // (㨠) CJK UNIFIED IDEOGRAPH-3A20	[FB80 BA20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_283)
{
    // 3A20 0062;	
    // (㨠) CJK UNIFIED IDEOGRAPH-3A20	[FB80 BA20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_284)
{
    // 3A21 0021;	
    // (㨡) CJK UNIFIED IDEOGRAPH-3A21	[FB80 BA21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_285)
{
    // 3A21 003F;	
    // (㨡) CJK UNIFIED IDEOGRAPH-3A21	[FB80 BA21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_286)
{
    // 3A21 0061;	
    // (㨡) CJK UNIFIED IDEOGRAPH-3A21	[FB80 BA21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_287)
{
    // 3A21 0041;	
    // (㨡) CJK UNIFIED IDEOGRAPH-3A21	[FB80 BA21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_288)
{
    // 3A21 0062;	
    // (㨡) CJK UNIFIED IDEOGRAPH-3A21	[FB80 BA21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_289)
{
    // 3A22 0021;	
    // (㨢) CJK UNIFIED IDEOGRAPH-3A22	[FB80 BA22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_290)
{
    // 3A22 003F;	
    // (㨢) CJK UNIFIED IDEOGRAPH-3A22	[FB80 BA22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_291)
{
    // 3A22 0061;	
    // (㨢) CJK UNIFIED IDEOGRAPH-3A22	[FB80 BA22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_292)
{
    // 3A22 0041;	
    // (㨢) CJK UNIFIED IDEOGRAPH-3A22	[FB80 BA22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_293)
{
    // 3A22 0062;	
    // (㨢) CJK UNIFIED IDEOGRAPH-3A22	[FB80 BA22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_294)
{
    // 3A23 0021;	
    // (㨣) CJK UNIFIED IDEOGRAPH-3A23	[FB80 BA23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_295)
{
    // 3A23 003F;	
    // (㨣) CJK UNIFIED IDEOGRAPH-3A23	[FB80 BA23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_296)
{
    // 3A23 0061;	
    // (㨣) CJK UNIFIED IDEOGRAPH-3A23	[FB80 BA23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_297)
{
    // 3A23 0041;	
    // (㨣) CJK UNIFIED IDEOGRAPH-3A23	[FB80 BA23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_298)
{
    // 3A23 0062;	
    // (㨣) CJK UNIFIED IDEOGRAPH-3A23	[FB80 BA23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_299)
{
    // 3A24 0021;	
    // (㨤) CJK UNIFIED IDEOGRAPH-3A24	[FB80 BA24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_300)
{
    // 3A24 003F;	
    // (㨤) CJK UNIFIED IDEOGRAPH-3A24	[FB80 BA24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_301)
{
    // 3A24 0061;	
    // (㨤) CJK UNIFIED IDEOGRAPH-3A24	[FB80 BA24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_302)
{
    // 3A24 0041;	
    // (㨤) CJK UNIFIED IDEOGRAPH-3A24	[FB80 BA24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_303)
{
    // 3A24 0062;	
    // (㨤) CJK UNIFIED IDEOGRAPH-3A24	[FB80 BA24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_304)
{
    // 3A25 0021;	
    // (㨥) CJK UNIFIED IDEOGRAPH-3A25	[FB80 BA25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_305)
{
    // 3A25 003F;	
    // (㨥) CJK UNIFIED IDEOGRAPH-3A25	[FB80 BA25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_306)
{
    // 3A25 0061;	
    // (㨥) CJK UNIFIED IDEOGRAPH-3A25	[FB80 BA25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_307)
{
    // 3A25 0041;	
    // (㨥) CJK UNIFIED IDEOGRAPH-3A25	[FB80 BA25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_308)
{
    // 3A25 0062;	
    // (㨥) CJK UNIFIED IDEOGRAPH-3A25	[FB80 BA25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_309)
{
    // 3A26 0021;	
    // (㨦) CJK UNIFIED IDEOGRAPH-3A26	[FB80 BA26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_310)
{
    // 3A26 003F;	
    // (㨦) CJK UNIFIED IDEOGRAPH-3A26	[FB80 BA26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_311)
{
    // 3A26 0061;	
    // (㨦) CJK UNIFIED IDEOGRAPH-3A26	[FB80 BA26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_312)
{
    // 3A26 0041;	
    // (㨦) CJK UNIFIED IDEOGRAPH-3A26	[FB80 BA26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_313)
{
    // 3A26 0062;	
    // (㨦) CJK UNIFIED IDEOGRAPH-3A26	[FB80 BA26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_314)
{
    // 3A27 0021;	
    // (㨧) CJK UNIFIED IDEOGRAPH-3A27	[FB80 BA27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_315)
{
    // 3A27 003F;	
    // (㨧) CJK UNIFIED IDEOGRAPH-3A27	[FB80 BA27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_316)
{
    // 3A27 0061;	
    // (㨧) CJK UNIFIED IDEOGRAPH-3A27	[FB80 BA27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_317)
{
    // 3A27 0041;	
    // (㨧) CJK UNIFIED IDEOGRAPH-3A27	[FB80 BA27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_318)
{
    // 3A27 0062;	
    // (㨧) CJK UNIFIED IDEOGRAPH-3A27	[FB80 BA27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_319)
{
    // 3A28 0021;	
    // (㨨) CJK UNIFIED IDEOGRAPH-3A28	[FB80 BA28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_320)
{
    // 3A28 003F;	
    // (㨨) CJK UNIFIED IDEOGRAPH-3A28	[FB80 BA28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_321)
{
    // 3A28 0061;	
    // (㨨) CJK UNIFIED IDEOGRAPH-3A28	[FB80 BA28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_322)
{
    // 3A28 0041;	
    // (㨨) CJK UNIFIED IDEOGRAPH-3A28	[FB80 BA28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_323)
{
    // 3A28 0062;	
    // (㨨) CJK UNIFIED IDEOGRAPH-3A28	[FB80 BA28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_324)
{
    // 3A29 0021;	
    // (㨩) CJK UNIFIED IDEOGRAPH-3A29	[FB80 BA29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_325)
{
    // 3A29 003F;	
    // (㨩) CJK UNIFIED IDEOGRAPH-3A29	[FB80 BA29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_326)
{
    // 3A29 0061;	
    // (㨩) CJK UNIFIED IDEOGRAPH-3A29	[FB80 BA29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_327)
{
    // 3A29 0041;	
    // (㨩) CJK UNIFIED IDEOGRAPH-3A29	[FB80 BA29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_328)
{
    // 3A29 0062;	
    // (㨩) CJK UNIFIED IDEOGRAPH-3A29	[FB80 BA29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_329)
{
    // 3A2A 0021;	
    // (㨪) CJK UNIFIED IDEOGRAPH-3A2A	[FB80 BA2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_330)
{
    // 3A2A 003F;	
    // (㨪) CJK UNIFIED IDEOGRAPH-3A2A	[FB80 BA2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_331)
{
    // 3A2A 0061;	
    // (㨪) CJK UNIFIED IDEOGRAPH-3A2A	[FB80 BA2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_332)
{
    // 3A2A 0041;	
    // (㨪) CJK UNIFIED IDEOGRAPH-3A2A	[FB80 BA2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_333)
{
    // 3A2A 0062;	
    // (㨪) CJK UNIFIED IDEOGRAPH-3A2A	[FB80 BA2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_334)
{
    // 3A2B 0021;	
    // (㨫) CJK UNIFIED IDEOGRAPH-3A2B	[FB80 BA2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_335)
{
    // 3A2B 003F;	
    // (㨫) CJK UNIFIED IDEOGRAPH-3A2B	[FB80 BA2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_336)
{
    // 3A2B 0061;	
    // (㨫) CJK UNIFIED IDEOGRAPH-3A2B	[FB80 BA2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_337)
{
    // 3A2B 0041;	
    // (㨫) CJK UNIFIED IDEOGRAPH-3A2B	[FB80 BA2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_338)
{
    // 3A2B 0062;	
    // (㨫) CJK UNIFIED IDEOGRAPH-3A2B	[FB80 BA2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_339)
{
    // 3A2C 0021;	
    // (㨬) CJK UNIFIED IDEOGRAPH-3A2C	[FB80 BA2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_340)
{
    // 3A2C 003F;	
    // (㨬) CJK UNIFIED IDEOGRAPH-3A2C	[FB80 BA2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_341)
{
    // 3A2C 0061;	
    // (㨬) CJK UNIFIED IDEOGRAPH-3A2C	[FB80 BA2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_342)
{
    // 3A2C 0041;	
    // (㨬) CJK UNIFIED IDEOGRAPH-3A2C	[FB80 BA2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_343)
{
    // 3A2C 0062;	
    // (㨬) CJK UNIFIED IDEOGRAPH-3A2C	[FB80 BA2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_344)
{
    // 3A2D 0021;	
    // (㨭) CJK UNIFIED IDEOGRAPH-3A2D	[FB80 BA2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_345)
{
    // 3A2D 003F;	
    // (㨭) CJK UNIFIED IDEOGRAPH-3A2D	[FB80 BA2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_346)
{
    // 3A2D 0061;	
    // (㨭) CJK UNIFIED IDEOGRAPH-3A2D	[FB80 BA2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_347)
{
    // 3A2D 0041;	
    // (㨭) CJK UNIFIED IDEOGRAPH-3A2D	[FB80 BA2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_348)
{
    // 3A2D 0062;	
    // (㨭) CJK UNIFIED IDEOGRAPH-3A2D	[FB80 BA2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_349)
{
    // 3A2E 0021;	
    // (㨮) CJK UNIFIED IDEOGRAPH-3A2E	[FB80 BA2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_350)
{
    // 2F8C2 0021;	
    // (㨮) CJK COMPATIBILITY IDEOGRAPH-2F8C2	[FB80 BA2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_351)
{
    // 3A2E 003F;	
    // (㨮) CJK UNIFIED IDEOGRAPH-3A2E	[FB80 BA2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_352)
{
    // 2F8C2 003F;	
    // (㨮) CJK COMPATIBILITY IDEOGRAPH-2F8C2	[FB80 BA2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_353)
{
    // 3A2E 0061;	
    // (㨮) CJK UNIFIED IDEOGRAPH-3A2E	[FB80 BA2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_354)
{
    // 2F8C2 0061;	
    // (㨮) CJK COMPATIBILITY IDEOGRAPH-2F8C2	[FB80 BA2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_355)
{
    // 3A2E 0041;	
    // (㨮) CJK UNIFIED IDEOGRAPH-3A2E	[FB80 BA2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_356)
{
    // 2F8C2 0041;	
    // (㨮) CJK COMPATIBILITY IDEOGRAPH-2F8C2	[FB80 BA2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_357)
{
    // 3A2E 0062;	
    // (㨮) CJK UNIFIED IDEOGRAPH-3A2E	[FB80 BA2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_358)
{
    // 2F8C2 0062;	
    // (㨮) CJK COMPATIBILITY IDEOGRAPH-2F8C2	[FB80 BA2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_359)
{
    // 3A2F 0021;	
    // (㨯) CJK UNIFIED IDEOGRAPH-3A2F	[FB80 BA2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_360)
{
    // 3A2F 003F;	
    // (㨯) CJK UNIFIED IDEOGRAPH-3A2F	[FB80 BA2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_361)
{
    // 3A2F 0061;	
    // (㨯) CJK UNIFIED IDEOGRAPH-3A2F	[FB80 BA2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_362)
{
    // 3A2F 0041;	
    // (㨯) CJK UNIFIED IDEOGRAPH-3A2F	[FB80 BA2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_363)
{
    // 3A2F 0062;	
    // (㨯) CJK UNIFIED IDEOGRAPH-3A2F	[FB80 BA2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_364)
{
    // 3A30 0021;	
    // (㨰) CJK UNIFIED IDEOGRAPH-3A30	[FB80 BA30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_365)
{
    // 3A30 003F;	
    // (㨰) CJK UNIFIED IDEOGRAPH-3A30	[FB80 BA30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_366)
{
    // 3A30 0061;	
    // (㨰) CJK UNIFIED IDEOGRAPH-3A30	[FB80 BA30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_367)
{
    // 3A30 0041;	
    // (㨰) CJK UNIFIED IDEOGRAPH-3A30	[FB80 BA30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_368)
{
    // 3A30 0062;	
    // (㨰) CJK UNIFIED IDEOGRAPH-3A30	[FB80 BA30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_369)
{
    // 3A31 0021;	
    // (㨱) CJK UNIFIED IDEOGRAPH-3A31	[FB80 BA31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_370)
{
    // 3A31 003F;	
    // (㨱) CJK UNIFIED IDEOGRAPH-3A31	[FB80 BA31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_371)
{
    // 3A31 0061;	
    // (㨱) CJK UNIFIED IDEOGRAPH-3A31	[FB80 BA31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_372)
{
    // 3A31 0041;	
    // (㨱) CJK UNIFIED IDEOGRAPH-3A31	[FB80 BA31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_373)
{
    // 3A31 0062;	
    // (㨱) CJK UNIFIED IDEOGRAPH-3A31	[FB80 BA31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_374)
{
    // 3A32 0021;	
    // (㨲) CJK UNIFIED IDEOGRAPH-3A32	[FB80 BA32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_375)
{
    // 3A32 003F;	
    // (㨲) CJK UNIFIED IDEOGRAPH-3A32	[FB80 BA32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_376)
{
    // 3A32 0061;	
    // (㨲) CJK UNIFIED IDEOGRAPH-3A32	[FB80 BA32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_377)
{
    // 3A32 0041;	
    // (㨲) CJK UNIFIED IDEOGRAPH-3A32	[FB80 BA32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_378)
{
    // 3A32 0062;	
    // (㨲) CJK UNIFIED IDEOGRAPH-3A32	[FB80 BA32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_379)
{
    // 3A33 0021;	
    // (㨳) CJK UNIFIED IDEOGRAPH-3A33	[FB80 BA33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_380)
{
    // 3A33 003F;	
    // (㨳) CJK UNIFIED IDEOGRAPH-3A33	[FB80 BA33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_381)
{
    // 3A33 0061;	
    // (㨳) CJK UNIFIED IDEOGRAPH-3A33	[FB80 BA33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_382)
{
    // 3A33 0041;	
    // (㨳) CJK UNIFIED IDEOGRAPH-3A33	[FB80 BA33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_383)
{
    // 3A33 0062;	
    // (㨳) CJK UNIFIED IDEOGRAPH-3A33	[FB80 BA33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_384)
{
    // 3A34 0021;	
    // (㨴) CJK UNIFIED IDEOGRAPH-3A34	[FB80 BA34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_385)
{
    // 3A34 003F;	
    // (㨴) CJK UNIFIED IDEOGRAPH-3A34	[FB80 BA34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_386)
{
    // 3A34 0061;	
    // (㨴) CJK UNIFIED IDEOGRAPH-3A34	[FB80 BA34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_387)
{
    // 3A34 0041;	
    // (㨴) CJK UNIFIED IDEOGRAPH-3A34	[FB80 BA34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_388)
{
    // 3A34 0062;	
    // (㨴) CJK UNIFIED IDEOGRAPH-3A34	[FB80 BA34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_389)
{
    // 3A35 0021;	
    // (㨵) CJK UNIFIED IDEOGRAPH-3A35	[FB80 BA35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_390)
{
    // 3A35 003F;	
    // (㨵) CJK UNIFIED IDEOGRAPH-3A35	[FB80 BA35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_391)
{
    // 3A35 0061;	
    // (㨵) CJK UNIFIED IDEOGRAPH-3A35	[FB80 BA35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_392)
{
    // 3A35 0041;	
    // (㨵) CJK UNIFIED IDEOGRAPH-3A35	[FB80 BA35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_393)
{
    // 3A35 0062;	
    // (㨵) CJK UNIFIED IDEOGRAPH-3A35	[FB80 BA35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_394)
{
    // 3A36 0021;	
    // (㨶) CJK UNIFIED IDEOGRAPH-3A36	[FB80 BA36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_395)
{
    // 3A36 003F;	
    // (㨶) CJK UNIFIED IDEOGRAPH-3A36	[FB80 BA36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_396)
{
    // 3A36 0061;	
    // (㨶) CJK UNIFIED IDEOGRAPH-3A36	[FB80 BA36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_397)
{
    // 3A36 0041;	
    // (㨶) CJK UNIFIED IDEOGRAPH-3A36	[FB80 BA36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_398)
{
    // 3A36 0062;	
    // (㨶) CJK UNIFIED IDEOGRAPH-3A36	[FB80 BA36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_399)
{
    // 3A37 0021;	
    // (㨷) CJK UNIFIED IDEOGRAPH-3A37	[FB80 BA37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_400)
{
    // 3A37 003F;	
    // (㨷) CJK UNIFIED IDEOGRAPH-3A37	[FB80 BA37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_401)
{
    // 3A37 0061;	
    // (㨷) CJK UNIFIED IDEOGRAPH-3A37	[FB80 BA37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_402)
{
    // 3A37 0041;	
    // (㨷) CJK UNIFIED IDEOGRAPH-3A37	[FB80 BA37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_403)
{
    // 3A37 0062;	
    // (㨷) CJK UNIFIED IDEOGRAPH-3A37	[FB80 BA37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_404)
{
    // 3A38 0021;	
    // (㨸) CJK UNIFIED IDEOGRAPH-3A38	[FB80 BA38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_405)
{
    // 3A38 003F;	
    // (㨸) CJK UNIFIED IDEOGRAPH-3A38	[FB80 BA38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_406)
{
    // 3A38 0061;	
    // (㨸) CJK UNIFIED IDEOGRAPH-3A38	[FB80 BA38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_407)
{
    // 3A38 0041;	
    // (㨸) CJK UNIFIED IDEOGRAPH-3A38	[FB80 BA38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_408)
{
    // 3A38 0062;	
    // (㨸) CJK UNIFIED IDEOGRAPH-3A38	[FB80 BA38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_409)
{
    // 3A39 0021;	
    // (㨹) CJK UNIFIED IDEOGRAPH-3A39	[FB80 BA39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_410)
{
    // 3A39 003F;	
    // (㨹) CJK UNIFIED IDEOGRAPH-3A39	[FB80 BA39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_411)
{
    // 3A39 0061;	
    // (㨹) CJK UNIFIED IDEOGRAPH-3A39	[FB80 BA39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_412)
{
    // 3A39 0041;	
    // (㨹) CJK UNIFIED IDEOGRAPH-3A39	[FB80 BA39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_413)
{
    // 3A39 0062;	
    // (㨹) CJK UNIFIED IDEOGRAPH-3A39	[FB80 BA39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_414)
{
    // 3A3A 0021;	
    // (㨺) CJK UNIFIED IDEOGRAPH-3A3A	[FB80 BA3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_415)
{
    // 3A3A 003F;	
    // (㨺) CJK UNIFIED IDEOGRAPH-3A3A	[FB80 BA3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_416)
{
    // 3A3A 0061;	
    // (㨺) CJK UNIFIED IDEOGRAPH-3A3A	[FB80 BA3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_417)
{
    // 3A3A 0041;	
    // (㨺) CJK UNIFIED IDEOGRAPH-3A3A	[FB80 BA3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_418)
{
    // 3A3A 0062;	
    // (㨺) CJK UNIFIED IDEOGRAPH-3A3A	[FB80 BA3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_419)
{
    // 3A3B 0021;	
    // (㨻) CJK UNIFIED IDEOGRAPH-3A3B	[FB80 BA3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_420)
{
    // 3A3B 003F;	
    // (㨻) CJK UNIFIED IDEOGRAPH-3A3B	[FB80 BA3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_421)
{
    // 3A3B 0061;	
    // (㨻) CJK UNIFIED IDEOGRAPH-3A3B	[FB80 BA3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_422)
{
    // 3A3B 0041;	
    // (㨻) CJK UNIFIED IDEOGRAPH-3A3B	[FB80 BA3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_423)
{
    // 3A3B 0062;	
    // (㨻) CJK UNIFIED IDEOGRAPH-3A3B	[FB80 BA3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_424)
{
    // 3A3C 0021;	
    // (㨼) CJK UNIFIED IDEOGRAPH-3A3C	[FB80 BA3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_425)
{
    // 3A3C 003F;	
    // (㨼) CJK UNIFIED IDEOGRAPH-3A3C	[FB80 BA3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_426)
{
    // 3A3C 0061;	
    // (㨼) CJK UNIFIED IDEOGRAPH-3A3C	[FB80 BA3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_427)
{
    // 3A3C 0041;	
    // (㨼) CJK UNIFIED IDEOGRAPH-3A3C	[FB80 BA3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_428)
{
    // 3A3C 0062;	
    // (㨼) CJK UNIFIED IDEOGRAPH-3A3C	[FB80 BA3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_429)
{
    // 3A3D 0021;	
    // (㨽) CJK UNIFIED IDEOGRAPH-3A3D	[FB80 BA3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_430)
{
    // 3A3D 003F;	
    // (㨽) CJK UNIFIED IDEOGRAPH-3A3D	[FB80 BA3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_431)
{
    // 3A3D 0061;	
    // (㨽) CJK UNIFIED IDEOGRAPH-3A3D	[FB80 BA3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_432)
{
    // 3A3D 0041;	
    // (㨽) CJK UNIFIED IDEOGRAPH-3A3D	[FB80 BA3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_433)
{
    // 3A3D 0062;	
    // (㨽) CJK UNIFIED IDEOGRAPH-3A3D	[FB80 BA3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_434)
{
    // 3A3E 0021;	
    // (㨾) CJK UNIFIED IDEOGRAPH-3A3E	[FB80 BA3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_435)
{
    // 3A3E 003F;	
    // (㨾) CJK UNIFIED IDEOGRAPH-3A3E	[FB80 BA3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_436)
{
    // 3A3E 0061;	
    // (㨾) CJK UNIFIED IDEOGRAPH-3A3E	[FB80 BA3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_437)
{
    // 3A3E 0041;	
    // (㨾) CJK UNIFIED IDEOGRAPH-3A3E	[FB80 BA3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_438)
{
    // 3A3E 0062;	
    // (㨾) CJK UNIFIED IDEOGRAPH-3A3E	[FB80 BA3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_439)
{
    // 3A3F 0021;	
    // (㨿) CJK UNIFIED IDEOGRAPH-3A3F	[FB80 BA3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_440)
{
    // 3A3F 003F;	
    // (㨿) CJK UNIFIED IDEOGRAPH-3A3F	[FB80 BA3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_441)
{
    // 3A3F 0061;	
    // (㨿) CJK UNIFIED IDEOGRAPH-3A3F	[FB80 BA3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_442)
{
    // 3A3F 0041;	
    // (㨿) CJK UNIFIED IDEOGRAPH-3A3F	[FB80 BA3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_443)
{
    // 3A3F 0062;	
    // (㨿) CJK UNIFIED IDEOGRAPH-3A3F	[FB80 BA3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_444)
{
    // 3A40 0021;	
    // (㩀) CJK UNIFIED IDEOGRAPH-3A40	[FB80 BA40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_445)
{
    // 3A40 003F;	
    // (㩀) CJK UNIFIED IDEOGRAPH-3A40	[FB80 BA40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_446)
{
    // 3A40 0061;	
    // (㩀) CJK UNIFIED IDEOGRAPH-3A40	[FB80 BA40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_447)
{
    // 3A40 0041;	
    // (㩀) CJK UNIFIED IDEOGRAPH-3A40	[FB80 BA40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_448)
{
    // 3A40 0062;	
    // (㩀) CJK UNIFIED IDEOGRAPH-3A40	[FB80 BA40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_449)
{
    // 3A41 0021;	
    // (㩁) CJK UNIFIED IDEOGRAPH-3A41	[FB80 BA41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_450)
{
    // 3A41 003F;	
    // (㩁) CJK UNIFIED IDEOGRAPH-3A41	[FB80 BA41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_451)
{
    // 3A41 0061;	
    // (㩁) CJK UNIFIED IDEOGRAPH-3A41	[FB80 BA41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_452)
{
    // 3A41 0041;	
    // (㩁) CJK UNIFIED IDEOGRAPH-3A41	[FB80 BA41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_453)
{
    // 3A41 0062;	
    // (㩁) CJK UNIFIED IDEOGRAPH-3A41	[FB80 BA41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_454)
{
    // 3A42 0021;	
    // (㩂) CJK UNIFIED IDEOGRAPH-3A42	[FB80 BA42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_455)
{
    // 3A42 003F;	
    // (㩂) CJK UNIFIED IDEOGRAPH-3A42	[FB80 BA42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_456)
{
    // 3A42 0061;	
    // (㩂) CJK UNIFIED IDEOGRAPH-3A42	[FB80 BA42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_457)
{
    // 3A42 0041;	
    // (㩂) CJK UNIFIED IDEOGRAPH-3A42	[FB80 BA42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_458)
{
    // 3A42 0062;	
    // (㩂) CJK UNIFIED IDEOGRAPH-3A42	[FB80 BA42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_459)
{
    // 3A43 0021;	
    // (㩃) CJK UNIFIED IDEOGRAPH-3A43	[FB80 BA43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_460)
{
    // 3A43 003F;	
    // (㩃) CJK UNIFIED IDEOGRAPH-3A43	[FB80 BA43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_461)
{
    // 3A43 0061;	
    // (㩃) CJK UNIFIED IDEOGRAPH-3A43	[FB80 BA43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_462)
{
    // 3A43 0041;	
    // (㩃) CJK UNIFIED IDEOGRAPH-3A43	[FB80 BA43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_463)
{
    // 3A43 0062;	
    // (㩃) CJK UNIFIED IDEOGRAPH-3A43	[FB80 BA43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_464)
{
    // 3A44 0021;	
    // (㩄) CJK UNIFIED IDEOGRAPH-3A44	[FB80 BA44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_465)
{
    // 3A44 003F;	
    // (㩄) CJK UNIFIED IDEOGRAPH-3A44	[FB80 BA44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_466)
{
    // 3A44 0061;	
    // (㩄) CJK UNIFIED IDEOGRAPH-3A44	[FB80 BA44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_467)
{
    // 3A44 0041;	
    // (㩄) CJK UNIFIED IDEOGRAPH-3A44	[FB80 BA44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_468)
{
    // 3A44 0062;	
    // (㩄) CJK UNIFIED IDEOGRAPH-3A44	[FB80 BA44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_469)
{
    // 3A45 0021;	
    // (㩅) CJK UNIFIED IDEOGRAPH-3A45	[FB80 BA45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_470)
{
    // 3A45 003F;	
    // (㩅) CJK UNIFIED IDEOGRAPH-3A45	[FB80 BA45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_471)
{
    // 3A45 0061;	
    // (㩅) CJK UNIFIED IDEOGRAPH-3A45	[FB80 BA45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_472)
{
    // 3A45 0041;	
    // (㩅) CJK UNIFIED IDEOGRAPH-3A45	[FB80 BA45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_473)
{
    // 3A45 0062;	
    // (㩅) CJK UNIFIED IDEOGRAPH-3A45	[FB80 BA45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_474)
{
    // 3A46 0021;	
    // (㩆) CJK UNIFIED IDEOGRAPH-3A46	[FB80 BA46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_475)
{
    // 3A46 003F;	
    // (㩆) CJK UNIFIED IDEOGRAPH-3A46	[FB80 BA46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_476)
{
    // 3A46 0061;	
    // (㩆) CJK UNIFIED IDEOGRAPH-3A46	[FB80 BA46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_477)
{
    // 3A46 0041;	
    // (㩆) CJK UNIFIED IDEOGRAPH-3A46	[FB80 BA46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_478)
{
    // 3A46 0062;	
    // (㩆) CJK UNIFIED IDEOGRAPH-3A46	[FB80 BA46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_479)
{
    // 3A47 0021;	
    // (㩇) CJK UNIFIED IDEOGRAPH-3A47	[FB80 BA47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_480)
{
    // 3A47 003F;	
    // (㩇) CJK UNIFIED IDEOGRAPH-3A47	[FB80 BA47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_481)
{
    // 3A47 0061;	
    // (㩇) CJK UNIFIED IDEOGRAPH-3A47	[FB80 BA47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_482)
{
    // 3A47 0041;	
    // (㩇) CJK UNIFIED IDEOGRAPH-3A47	[FB80 BA47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_483)
{
    // 3A47 0062;	
    // (㩇) CJK UNIFIED IDEOGRAPH-3A47	[FB80 BA47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_484)
{
    // 3A48 0021;	
    // (㩈) CJK UNIFIED IDEOGRAPH-3A48	[FB80 BA48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_485)
{
    // 3A48 003F;	
    // (㩈) CJK UNIFIED IDEOGRAPH-3A48	[FB80 BA48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_486)
{
    // 3A48 0061;	
    // (㩈) CJK UNIFIED IDEOGRAPH-3A48	[FB80 BA48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_487)
{
    // 3A48 0041;	
    // (㩈) CJK UNIFIED IDEOGRAPH-3A48	[FB80 BA48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_488)
{
    // 3A48 0062;	
    // (㩈) CJK UNIFIED IDEOGRAPH-3A48	[FB80 BA48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_489)
{
    // 3A49 0021;	
    // (㩉) CJK UNIFIED IDEOGRAPH-3A49	[FB80 BA49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_490)
{
    // 3A49 003F;	
    // (㩉) CJK UNIFIED IDEOGRAPH-3A49	[FB80 BA49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_491)
{
    // 3A49 0061;	
    // (㩉) CJK UNIFIED IDEOGRAPH-3A49	[FB80 BA49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_492)
{
    // 3A49 0041;	
    // (㩉) CJK UNIFIED IDEOGRAPH-3A49	[FB80 BA49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_493)
{
    // 3A49 0062;	
    // (㩉) CJK UNIFIED IDEOGRAPH-3A49	[FB80 BA49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_494)
{
    // 3A4A 0021;	
    // (㩊) CJK UNIFIED IDEOGRAPH-3A4A	[FB80 BA4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_495)
{
    // 3A4A 003F;	
    // (㩊) CJK UNIFIED IDEOGRAPH-3A4A	[FB80 BA4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_496)
{
    // 3A4A 0061;	
    // (㩊) CJK UNIFIED IDEOGRAPH-3A4A	[FB80 BA4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_497)
{
    // 3A4A 0041;	
    // (㩊) CJK UNIFIED IDEOGRAPH-3A4A	[FB80 BA4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_498)
{
    // 3A4A 0062;	
    // (㩊) CJK UNIFIED IDEOGRAPH-3A4A	[FB80 BA4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_342_499)
{
    // 3A4B 0021;	
    // (㩋) CJK UNIFIED IDEOGRAPH-3A4B	[FB80 BA4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

