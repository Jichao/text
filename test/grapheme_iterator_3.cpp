// Warning! This file is autogenerated.
#include <boost/text/grapheme_iterator.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(grapheme, iterator_3)
{
    // ÷ 1F3FB ÷ 1160 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 1160 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 11A8 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ AC00 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ AC00 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ AC01 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ AC01 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 1F1E6 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 261D ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 261D ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 1F3FB ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB × 200D ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB × 0308 × 200D ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 1F3FB ÷ 2640 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 2640 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 1F466 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ 0378 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ 0378 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F3FB ÷ D800 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F3FB × 0308 ÷ D800 ÷	
    // ÷ [0.2] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F3FB, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 0020 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 0020 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 000D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 000D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 000A ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 000A ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 0001 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 0001 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0300 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0308 × 0300 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 200D ÷ 0600 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 0600 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0903 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0308 × 0903 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 200D ÷ 1100 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 1100 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 1160 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 1160 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 11A8 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ AC00 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ AC00 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ AC01 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ AC01 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 1F1E6 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 261D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 261D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 1F3FB ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 200D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0308 × 200D ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 200D × 2640 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [11.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0308 ÷ 2640 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 1F466 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [11.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ 0378 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ 0378 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 200D ÷ D800 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 200D × 0308 ÷ D800 ÷	
    // ÷ [0.2] ZERO WIDTH JOINER (ZWJ) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x200D, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x200D, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 0020 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 000D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 000D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 000A ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 000A ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 0001 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 0300 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 0308 × 0300 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 2640 ÷ 0600 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 0903 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 0308 × 0903 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 2640 ÷ 1100 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 1160 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 11A8 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ AC00 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ AC01 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 1F1E6 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 261D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 261D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 1F3FB ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 200D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 × 0308 × 200D ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 2640 ÷ 2640 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 1F466 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ 0378 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 2640 ÷ D800 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 2640 × 0308 ÷ D800 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 0020 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 000D ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 000D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 000A ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 000A ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 0001 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0300 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0308 × 0300 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 1F466 ÷ 0600 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0903 ÷	
    // ÷ [0.2] BOY (EBG) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0308 × 0903 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 1F466 ÷ 1100 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 1160 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 11A8 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ AC00 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ AC01 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 1F1E6 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 261D ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 261D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 1F3FB ÷	
    // ÷ [0.2] BOY (EBG) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0308 × 1F3FB ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 1F466 × 200D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 × 0308 × 200D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 1F466 ÷ 2640 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 1F466 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ 0378 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 1F466 ÷ D800 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 1F466 × 0308 ÷ D800 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 0020 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 000D ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 000D ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 000A ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 000A ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 0001 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 0300 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 0308 × 0300 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 0378 ÷ 0600 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 0903 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 0308 × 0903 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 0378 ÷ 1100 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 1160 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 11A8 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ AC00 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ AC01 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 1F1E6 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 261D ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 261D ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 1F3FB ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 200D ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 × 0308 × 200D ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }

    // ÷ 0378 ÷ 2640 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 1F466 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ 0378 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ 0378 ÷ D800 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ 0378 × 0308 ÷ D800 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }

    // ÷ D800 ÷ 0020 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 0020 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 000D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 000D ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 000A ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 000A ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0001 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 0001 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0300 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 × 0300 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0600 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 0600 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0903 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 × 0903 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 1100 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;
        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

    // ÷ D800 ÷ 0308 ÷ 1100 ÷	
    // ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;
        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0xD800, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }

}
