// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_022_000)
{
    // B3C0;B3C0;1103 1168 11BF;B3C0;1103 1168 11BF; 
    // (돀; 돀; 돀; 돀; 돀; ) HANGUL SYLLABLE DYEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_001)
{
    // B3C1;B3C1;1103 1168 11C0;B3C1;1103 1168 11C0; 
    // (돁; 돁; 돁; 돁; 돁; ) HANGUL SYLLABLE DYET
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_002)
{
    // B3C2;B3C2;1103 1168 11C1;B3C2;1103 1168 11C1; 
    // (돂; 돂; 돂; 돂; 돂; ) HANGUL SYLLABLE DYEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_003)
{
    // B3C3;B3C3;1103 1168 11C2;B3C3;1103 1168 11C2; 
    // (돃; 돃; 돃; 돃; 돃; ) HANGUL SYLLABLE DYEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_004)
{
    // B3C4;B3C4;1103 1169;B3C4;1103 1169; 
    // (도; 도; 도; 도; 도; ) HANGUL SYLLABLE DO
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_005)
{
    // B3C5;B3C5;1103 1169 11A8;B3C5;1103 1169 11A8; 
    // (독; 독; 독; 독; 독; ) HANGUL SYLLABLE DOG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_006)
{
    // B3C6;B3C6;1103 1169 11A9;B3C6;1103 1169 11A9; 
    // (돆; 돆; 돆; 돆; 돆; ) HANGUL SYLLABLE DOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_007)
{
    // B3C7;B3C7;1103 1169 11AA;B3C7;1103 1169 11AA; 
    // (돇; 돇; 돇; 돇; 돇; ) HANGUL SYLLABLE DOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_008)
{
    // B3C8;B3C8;1103 1169 11AB;B3C8;1103 1169 11AB; 
    // (돈; 돈; 돈; 돈; 돈; ) HANGUL SYLLABLE DON
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_009)
{
    // B3C9;B3C9;1103 1169 11AC;B3C9;1103 1169 11AC; 
    // (돉; 돉; 돉; 돉; 돉; ) HANGUL SYLLABLE DONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB3C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3C9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_010)
{
    // B3CA;B3CA;1103 1169 11AD;B3CA;1103 1169 11AD; 
    // (돊; 돊; 돊; 돊; 돊; ) HANGUL SYLLABLE DONH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_011)
{
    // B3CB;B3CB;1103 1169 11AE;B3CB;1103 1169 11AE; 
    // (돋; 돋; 돋; 돋; 돋; ) HANGUL SYLLABLE DOD
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_012)
{
    // B3CC;B3CC;1103 1169 11AF;B3CC;1103 1169 11AF; 
    // (돌; 돌; 돌; 돌; 돌; ) HANGUL SYLLABLE DOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_013)
{
    // B3CD;B3CD;1103 1169 11B0;B3CD;1103 1169 11B0; 
    // (돍; 돍; 돍; 돍; 돍; ) HANGUL SYLLABLE DOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_014)
{
    // B3CE;B3CE;1103 1169 11B1;B3CE;1103 1169 11B1; 
    // (돎; 돎; 돎; 돎; 돎; ) HANGUL SYLLABLE DOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_015)
{
    // B3CF;B3CF;1103 1169 11B2;B3CF;1103 1169 11B2; 
    // (돏; 돏; 돏; 돏; 돏; ) HANGUL SYLLABLE DOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB3CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3CF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_016)
{
    // B3D0;B3D0;1103 1169 11B3;B3D0;1103 1169 11B3; 
    // (돐; 돐; 돐; 돐; 돐; ) HANGUL SYLLABLE DOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_017)
{
    // B3D1;B3D1;1103 1169 11B4;B3D1;1103 1169 11B4; 
    // (돑; 돑; 돑; 돑; 돑; ) HANGUL SYLLABLE DOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_018)
{
    // B3D2;B3D2;1103 1169 11B5;B3D2;1103 1169 11B5; 
    // (돒; 돒; 돒; 돒; 돒; ) HANGUL SYLLABLE DOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_019)
{
    // B3D3;B3D3;1103 1169 11B6;B3D3;1103 1169 11B6; 
    // (돓; 돓; 돓; 돓; 돓; ) HANGUL SYLLABLE DOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_020)
{
    // B3D4;B3D4;1103 1169 11B7;B3D4;1103 1169 11B7; 
    // (돔; 돔; 돔; 돔; 돔; ) HANGUL SYLLABLE DOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_021)
{
    // B3D5;B3D5;1103 1169 11B8;B3D5;1103 1169 11B8; 
    // (돕; 돕; 돕; 돕; 돕; ) HANGUL SYLLABLE DOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_022)
{
    // B3D6;B3D6;1103 1169 11B9;B3D6;1103 1169 11B9; 
    // (돖; 돖; 돖; 돖; 돖; ) HANGUL SYLLABLE DOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_023)
{
    // B3D7;B3D7;1103 1169 11BA;B3D7;1103 1169 11BA; 
    // (돗; 돗; 돗; 돗; 돗; ) HANGUL SYLLABLE DOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_024)
{
    // B3D8;B3D8;1103 1169 11BB;B3D8;1103 1169 11BB; 
    // (돘; 돘; 돘; 돘; 돘; ) HANGUL SYLLABLE DOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_025)
{
    // B3D9;B3D9;1103 1169 11BC;B3D9;1103 1169 11BC; 
    // (동; 동; 동; 동; 동; ) HANGUL SYLLABLE DONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3D9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_026)
{
    // B3DA;B3DA;1103 1169 11BD;B3DA;1103 1169 11BD; 
    // (돚; 돚; 돚; 돚; 돚; ) HANGUL SYLLABLE DOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_027)
{
    // B3DB;B3DB;1103 1169 11BE;B3DB;1103 1169 11BE; 
    // (돛; 돛; 돛; 돛; 돛; ) HANGUL SYLLABLE DOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_028)
{
    // B3DC;B3DC;1103 1169 11BF;B3DC;1103 1169 11BF; 
    // (돜; 돜; 돜; 돜; 돜; ) HANGUL SYLLABLE DOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_029)
{
    // B3DD;B3DD;1103 1169 11C0;B3DD;1103 1169 11C0; 
    // (돝; 돝; 돝; 돝; 돝; ) HANGUL SYLLABLE DOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_030)
{
    // B3DE;B3DE;1103 1169 11C1;B3DE;1103 1169 11C1; 
    // (돞; 돞; 돞; 돞; 돞; ) HANGUL SYLLABLE DOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_031)
{
    // B3DF;B3DF;1103 1169 11C2;B3DF;1103 1169 11C2; 
    // (돟; 돟; 돟; 돟; 돟; ) HANGUL SYLLABLE DOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3DF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_032)
{
    // B3E0;B3E0;1103 116A;B3E0;1103 116A; 
    // (돠; 돠; 돠; 돠; 돠; ) HANGUL SYLLABLE DWA
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_033)
{
    // B3E1;B3E1;1103 116A 11A8;B3E1;1103 116A 11A8; 
    // (돡; 돡; 돡; 돡; 돡; ) HANGUL SYLLABLE DWAG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_034)
{
    // B3E2;B3E2;1103 116A 11A9;B3E2;1103 116A 11A9; 
    // (돢; 돢; 돢; 돢; 돢; ) HANGUL SYLLABLE DWAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_035)
{
    // B3E3;B3E3;1103 116A 11AA;B3E3;1103 116A 11AA; 
    // (돣; 돣; 돣; 돣; 돣; ) HANGUL SYLLABLE DWAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_036)
{
    // B3E4;B3E4;1103 116A 11AB;B3E4;1103 116A 11AB; 
    // (돤; 돤; 돤; 돤; 돤; ) HANGUL SYLLABLE DWAN
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_037)
{
    // B3E5;B3E5;1103 116A 11AC;B3E5;1103 116A 11AC; 
    // (돥; 돥; 돥; 돥; 돥; ) HANGUL SYLLABLE DWANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_038)
{
    // B3E6;B3E6;1103 116A 11AD;B3E6;1103 116A 11AD; 
    // (돦; 돦; 돦; 돦; 돦; ) HANGUL SYLLABLE DWANH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_039)
{
    // B3E7;B3E7;1103 116A 11AE;B3E7;1103 116A 11AE; 
    // (돧; 돧; 돧; 돧; 돧; ) HANGUL SYLLABLE DWAD
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_040)
{
    // B3E8;B3E8;1103 116A 11AF;B3E8;1103 116A 11AF; 
    // (돨; 돨; 돨; 돨; 돨; ) HANGUL SYLLABLE DWAL
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_041)
{
    // B3E9;B3E9;1103 116A 11B0;B3E9;1103 116A 11B0; 
    // (돩; 돩; 돩; 돩; 돩; ) HANGUL SYLLABLE DWALG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3E9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_042)
{
    // B3EA;B3EA;1103 116A 11B1;B3EA;1103 116A 11B1; 
    // (돪; 돪; 돪; 돪; 돪; ) HANGUL SYLLABLE DWALM
    {
        std::array<uint32_t, 1> const source = {{ 0xB3EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3EA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_043)
{
    // B3EB;B3EB;1103 116A 11B2;B3EB;1103 116A 11B2; 
    // (돫; 돫; 돫; 돫; 돫; ) HANGUL SYLLABLE DWALB
    {
        std::array<uint32_t, 1> const source = {{ 0xB3EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3EB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_044)
{
    // B3EC;B3EC;1103 116A 11B3;B3EC;1103 116A 11B3; 
    // (돬; 돬; 돬; 돬; 돬; ) HANGUL SYLLABLE DWALS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3EC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_045)
{
    // B3ED;B3ED;1103 116A 11B4;B3ED;1103 116A 11B4; 
    // (돭; 돭; 돭; 돭; 돭; ) HANGUL SYLLABLE DWALT
    {
        std::array<uint32_t, 1> const source = {{ 0xB3ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3ED }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_046)
{
    // B3EE;B3EE;1103 116A 11B5;B3EE;1103 116A 11B5; 
    // (돮; 돮; 돮; 돮; 돮; ) HANGUL SYLLABLE DWALP
    {
        std::array<uint32_t, 1> const source = {{ 0xB3EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3EE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_047)
{
    // B3EF;B3EF;1103 116A 11B6;B3EF;1103 116A 11B6; 
    // (돯; 돯; 돯; 돯; 돯; ) HANGUL SYLLABLE DWALH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3EF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_048)
{
    // B3F0;B3F0;1103 116A 11B7;B3F0;1103 116A 11B7; 
    // (돰; 돰; 돰; 돰; 돰; ) HANGUL SYLLABLE DWAM
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_049)
{
    // B3F1;B3F1;1103 116A 11B8;B3F1;1103 116A 11B8; 
    // (돱; 돱; 돱; 돱; 돱; ) HANGUL SYLLABLE DWAB
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_050)
{
    // B3F2;B3F2;1103 116A 11B9;B3F2;1103 116A 11B9; 
    // (돲; 돲; 돲; 돲; 돲; ) HANGUL SYLLABLE DWABS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_051)
{
    // B3F3;B3F3;1103 116A 11BA;B3F3;1103 116A 11BA; 
    // (돳; 돳; 돳; 돳; 돳; ) HANGUL SYLLABLE DWAS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_052)
{
    // B3F4;B3F4;1103 116A 11BB;B3F4;1103 116A 11BB; 
    // (돴; 돴; 돴; 돴; 돴; ) HANGUL SYLLABLE DWASS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_053)
{
    // B3F5;B3F5;1103 116A 11BC;B3F5;1103 116A 11BC; 
    // (돵; 돵; 돵; 돵; 돵; ) HANGUL SYLLABLE DWANG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_054)
{
    // B3F6;B3F6;1103 116A 11BD;B3F6;1103 116A 11BD; 
    // (돶; 돶; 돶; 돶; 돶; ) HANGUL SYLLABLE DWAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_055)
{
    // B3F7;B3F7;1103 116A 11BE;B3F7;1103 116A 11BE; 
    // (돷; 돷; 돷; 돷; 돷; ) HANGUL SYLLABLE DWAC
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_056)
{
    // B3F8;B3F8;1103 116A 11BF;B3F8;1103 116A 11BF; 
    // (돸; 돸; 돸; 돸; 돸; ) HANGUL SYLLABLE DWAK
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_057)
{
    // B3F9;B3F9;1103 116A 11C0;B3F9;1103 116A 11C0; 
    // (돹; 돹; 돹; 돹; 돹; ) HANGUL SYLLABLE DWAT
    {
        std::array<uint32_t, 1> const source = {{ 0xB3F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3F9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_058)
{
    // B3FA;B3FA;1103 116A 11C1;B3FA;1103 116A 11C1; 
    // (돺; 돺; 돺; 돺; 돺; ) HANGUL SYLLABLE DWAP
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_059)
{
    // B3FB;B3FB;1103 116A 11C2;B3FB;1103 116A 11C2; 
    // (돻; 돻; 돻; 돻; 돻; ) HANGUL SYLLABLE DWAH
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_060)
{
    // B3FC;B3FC;1103 116B;B3FC;1103 116B; 
    // (돼; 돼; 돼; 돼; 돼; ) HANGUL SYLLABLE DWAE
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_061)
{
    // B3FD;B3FD;1103 116B 11A8;B3FD;1103 116B 11A8; 
    // (돽; 돽; 돽; 돽; 돽; ) HANGUL SYLLABLE DWAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_062)
{
    // B3FE;B3FE;1103 116B 11A9;B3FE;1103 116B 11A9; 
    // (돾; 돾; 돾; 돾; 돾; ) HANGUL SYLLABLE DWAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_063)
{
    // B3FF;B3FF;1103 116B 11AA;B3FF;1103 116B 11AA; 
    // (돿; 돿; 돿; 돿; 돿; ) HANGUL SYLLABLE DWAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB3FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB3FF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_064)
{
    // B400;B400;1103 116B 11AB;B400;1103 116B 11AB; 
    // (됀; 됀; 됀; 됀; 됀; ) HANGUL SYLLABLE DWAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB400 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB400 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_065)
{
    // B401;B401;1103 116B 11AC;B401;1103 116B 11AC; 
    // (됁; 됁; 됁; 됁; 됁; ) HANGUL SYLLABLE DWAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB401 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB401 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_066)
{
    // B402;B402;1103 116B 11AD;B402;1103 116B 11AD; 
    // (됂; 됂; 됂; 됂; 됂; ) HANGUL SYLLABLE DWAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB402 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB402 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_067)
{
    // B403;B403;1103 116B 11AE;B403;1103 116B 11AE; 
    // (됃; 됃; 됃; 됃; 됃; ) HANGUL SYLLABLE DWAED
    {
        std::array<uint32_t, 1> const source = {{ 0xB403 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB403 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_068)
{
    // B404;B404;1103 116B 11AF;B404;1103 116B 11AF; 
    // (됄; 됄; 됄; 됄; 됄; ) HANGUL SYLLABLE DWAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB404 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB404 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_069)
{
    // B405;B405;1103 116B 11B0;B405;1103 116B 11B0; 
    // (됅; 됅; 됅; 됅; 됅; ) HANGUL SYLLABLE DWAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB405 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB405 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_070)
{
    // B406;B406;1103 116B 11B1;B406;1103 116B 11B1; 
    // (됆; 됆; 됆; 됆; 됆; ) HANGUL SYLLABLE DWAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB406 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB406 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_071)
{
    // B407;B407;1103 116B 11B2;B407;1103 116B 11B2; 
    // (됇; 됇; 됇; 됇; 됇; ) HANGUL SYLLABLE DWAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB407 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB407 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_072)
{
    // B408;B408;1103 116B 11B3;B408;1103 116B 11B3; 
    // (됈; 됈; 됈; 됈; 됈; ) HANGUL SYLLABLE DWAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xB408 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB408 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_073)
{
    // B409;B409;1103 116B 11B4;B409;1103 116B 11B4; 
    // (됉; 됉; 됉; 됉; 됉; ) HANGUL SYLLABLE DWAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xB409 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB409 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_074)
{
    // B40A;B40A;1103 116B 11B5;B40A;1103 116B 11B5; 
    // (됊; 됊; 됊; 됊; 됊; ) HANGUL SYLLABLE DWAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xB40A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_075)
{
    // B40B;B40B;1103 116B 11B6;B40B;1103 116B 11B6; 
    // (됋; 됋; 됋; 됋; 됋; ) HANGUL SYLLABLE DWAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xB40B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_076)
{
    // B40C;B40C;1103 116B 11B7;B40C;1103 116B 11B7; 
    // (됌; 됌; 됌; 됌; 됌; ) HANGUL SYLLABLE DWAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xB40C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_077)
{
    // B40D;B40D;1103 116B 11B8;B40D;1103 116B 11B8; 
    // (됍; 됍; 됍; 됍; 됍; ) HANGUL SYLLABLE DWAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xB40D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_078)
{
    // B40E;B40E;1103 116B 11B9;B40E;1103 116B 11B9; 
    // (됎; 됎; 됎; 됎; 됎; ) HANGUL SYLLABLE DWAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB40E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_079)
{
    // B40F;B40F;1103 116B 11BA;B40F;1103 116B 11BA; 
    // (됏; 됏; 됏; 됏; 됏; ) HANGUL SYLLABLE DWAES
    {
        std::array<uint32_t, 1> const source = {{ 0xB40F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB40F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_080)
{
    // B410;B410;1103 116B 11BB;B410;1103 116B 11BB; 
    // (됐; 됐; 됐; 됐; 됐; ) HANGUL SYLLABLE DWAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xB410 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB410 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_081)
{
    // B411;B411;1103 116B 11BC;B411;1103 116B 11BC; 
    // (됑; 됑; 됑; 됑; 됑; ) HANGUL SYLLABLE DWAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xB411 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB411 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_082)
{
    // B412;B412;1103 116B 11BD;B412;1103 116B 11BD; 
    // (됒; 됒; 됒; 됒; 됒; ) HANGUL SYLLABLE DWAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB412 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB412 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_083)
{
    // B413;B413;1103 116B 11BE;B413;1103 116B 11BE; 
    // (됓; 됓; 됓; 됓; 됓; ) HANGUL SYLLABLE DWAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xB413 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB413 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_084)
{
    // B414;B414;1103 116B 11BF;B414;1103 116B 11BF; 
    // (됔; 됔; 됔; 됔; 됔; ) HANGUL SYLLABLE DWAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB414 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB414 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_085)
{
    // B415;B415;1103 116B 11C0;B415;1103 116B 11C0; 
    // (됕; 됕; 됕; 됕; 됕; ) HANGUL SYLLABLE DWAET
    {
        std::array<uint32_t, 1> const source = {{ 0xB415 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB415 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_086)
{
    // B416;B416;1103 116B 11C1;B416;1103 116B 11C1; 
    // (됖; 됖; 됖; 됖; 됖; ) HANGUL SYLLABLE DWAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB416 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB416 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_087)
{
    // B417;B417;1103 116B 11C2;B417;1103 116B 11C2; 
    // (됗; 됗; 됗; 됗; 됗; ) HANGUL SYLLABLE DWAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB417 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB417 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_088)
{
    // B418;B418;1103 116C;B418;1103 116C; 
    // (되; 되; 되; 되; 되; ) HANGUL SYLLABLE DOE
    {
        std::array<uint32_t, 1> const source = {{ 0xB418 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB418 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_089)
{
    // B419;B419;1103 116C 11A8;B419;1103 116C 11A8; 
    // (됙; 됙; 됙; 됙; 됙; ) HANGUL SYLLABLE DOEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB419 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB419 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_090)
{
    // B41A;B41A;1103 116C 11A9;B41A;1103 116C 11A9; 
    // (됚; 됚; 됚; 됚; 됚; ) HANGUL SYLLABLE DOEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB41A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_091)
{
    // B41B;B41B;1103 116C 11AA;B41B;1103 116C 11AA; 
    // (됛; 됛; 됛; 됛; 됛; ) HANGUL SYLLABLE DOEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB41B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_092)
{
    // B41C;B41C;1103 116C 11AB;B41C;1103 116C 11AB; 
    // (된; 된; 된; 된; 된; ) HANGUL SYLLABLE DOEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB41C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_093)
{
    // B41D;B41D;1103 116C 11AC;B41D;1103 116C 11AC; 
    // (됝; 됝; 됝; 됝; 됝; ) HANGUL SYLLABLE DOENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB41D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_094)
{
    // B41E;B41E;1103 116C 11AD;B41E;1103 116C 11AD; 
    // (됞; 됞; 됞; 됞; 됞; ) HANGUL SYLLABLE DOENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB41E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_095)
{
    // B41F;B41F;1103 116C 11AE;B41F;1103 116C 11AE; 
    // (됟; 됟; 됟; 됟; 됟; ) HANGUL SYLLABLE DOED
    {
        std::array<uint32_t, 1> const source = {{ 0xB41F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB41F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_096)
{
    // B420;B420;1103 116C 11AF;B420;1103 116C 11AF; 
    // (될; 될; 될; 될; 될; ) HANGUL SYLLABLE DOEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB420 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB420 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_097)
{
    // B421;B421;1103 116C 11B0;B421;1103 116C 11B0; 
    // (됡; 됡; 됡; 됡; 됡; ) HANGUL SYLLABLE DOELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB421 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB421 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_098)
{
    // B422;B422;1103 116C 11B1;B422;1103 116C 11B1; 
    // (됢; 됢; 됢; 됢; 됢; ) HANGUL SYLLABLE DOELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB422 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB422 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_099)
{
    // B423;B423;1103 116C 11B2;B423;1103 116C 11B2; 
    // (됣; 됣; 됣; 됣; 됣; ) HANGUL SYLLABLE DOELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB423 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB423 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_100)
{
    // B424;B424;1103 116C 11B3;B424;1103 116C 11B3; 
    // (됤; 됤; 됤; 됤; 됤; ) HANGUL SYLLABLE DOELS
    {
        std::array<uint32_t, 1> const source = {{ 0xB424 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB424 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_101)
{
    // B425;B425;1103 116C 11B4;B425;1103 116C 11B4; 
    // (됥; 됥; 됥; 됥; 됥; ) HANGUL SYLLABLE DOELT
    {
        std::array<uint32_t, 1> const source = {{ 0xB425 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB425 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_102)
{
    // B426;B426;1103 116C 11B5;B426;1103 116C 11B5; 
    // (됦; 됦; 됦; 됦; 됦; ) HANGUL SYLLABLE DOELP
    {
        std::array<uint32_t, 1> const source = {{ 0xB426 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB426 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_103)
{
    // B427;B427;1103 116C 11B6;B427;1103 116C 11B6; 
    // (됧; 됧; 됧; 됧; 됧; ) HANGUL SYLLABLE DOELH
    {
        std::array<uint32_t, 1> const source = {{ 0xB427 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB427 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_104)
{
    // B428;B428;1103 116C 11B7;B428;1103 116C 11B7; 
    // (됨; 됨; 됨; 됨; 됨; ) HANGUL SYLLABLE DOEM
    {
        std::array<uint32_t, 1> const source = {{ 0xB428 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB428 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_105)
{
    // B429;B429;1103 116C 11B8;B429;1103 116C 11B8; 
    // (됩; 됩; 됩; 됩; 됩; ) HANGUL SYLLABLE DOEB
    {
        std::array<uint32_t, 1> const source = {{ 0xB429 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB429 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_106)
{
    // B42A;B42A;1103 116C 11B9;B42A;1103 116C 11B9; 
    // (됪; 됪; 됪; 됪; 됪; ) HANGUL SYLLABLE DOEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB42A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_107)
{
    // B42B;B42B;1103 116C 11BA;B42B;1103 116C 11BA; 
    // (됫; 됫; 됫; 됫; 됫; ) HANGUL SYLLABLE DOES
    {
        std::array<uint32_t, 1> const source = {{ 0xB42B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_108)
{
    // B42C;B42C;1103 116C 11BB;B42C;1103 116C 11BB; 
    // (됬; 됬; 됬; 됬; 됬; ) HANGUL SYLLABLE DOESS
    {
        std::array<uint32_t, 1> const source = {{ 0xB42C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_109)
{
    // B42D;B42D;1103 116C 11BC;B42D;1103 116C 11BC; 
    // (됭; 됭; 됭; 됭; 됭; ) HANGUL SYLLABLE DOENG
    {
        std::array<uint32_t, 1> const source = {{ 0xB42D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_110)
{
    // B42E;B42E;1103 116C 11BD;B42E;1103 116C 11BD; 
    // (됮; 됮; 됮; 됮; 됮; ) HANGUL SYLLABLE DOEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB42E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_111)
{
    // B42F;B42F;1103 116C 11BE;B42F;1103 116C 11BE; 
    // (됯; 됯; 됯; 됯; 됯; ) HANGUL SYLLABLE DOEC
    {
        std::array<uint32_t, 1> const source = {{ 0xB42F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB42F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_112)
{
    // B430;B430;1103 116C 11BF;B430;1103 116C 11BF; 
    // (됰; 됰; 됰; 됰; 됰; ) HANGUL SYLLABLE DOEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB430 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB430 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_113)
{
    // B431;B431;1103 116C 11C0;B431;1103 116C 11C0; 
    // (됱; 됱; 됱; 됱; 됱; ) HANGUL SYLLABLE DOET
    {
        std::array<uint32_t, 1> const source = {{ 0xB431 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB431 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_114)
{
    // B432;B432;1103 116C 11C1;B432;1103 116C 11C1; 
    // (됲; 됲; 됲; 됲; 됲; ) HANGUL SYLLABLE DOEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB432 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB432 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_115)
{
    // B433;B433;1103 116C 11C2;B433;1103 116C 11C2; 
    // (됳; 됳; 됳; 됳; 됳; ) HANGUL SYLLABLE DOEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB433 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB433 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_116)
{
    // B434;B434;1103 116D;B434;1103 116D; 
    // (됴; 됴; 됴; 됴; 됴; ) HANGUL SYLLABLE DYO
    {
        std::array<uint32_t, 1> const source = {{ 0xB434 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB434 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_117)
{
    // B435;B435;1103 116D 11A8;B435;1103 116D 11A8; 
    // (됵; 됵; 됵; 됵; 됵; ) HANGUL SYLLABLE DYOG
    {
        std::array<uint32_t, 1> const source = {{ 0xB435 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB435 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_118)
{
    // B436;B436;1103 116D 11A9;B436;1103 116D 11A9; 
    // (됶; 됶; 됶; 됶; 됶; ) HANGUL SYLLABLE DYOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB436 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB436 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_119)
{
    // B437;B437;1103 116D 11AA;B437;1103 116D 11AA; 
    // (됷; 됷; 됷; 됷; 됷; ) HANGUL SYLLABLE DYOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB437 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB437 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_120)
{
    // B438;B438;1103 116D 11AB;B438;1103 116D 11AB; 
    // (됸; 됸; 됸; 됸; 됸; ) HANGUL SYLLABLE DYON
    {
        std::array<uint32_t, 1> const source = {{ 0xB438 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB438 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_121)
{
    // B439;B439;1103 116D 11AC;B439;1103 116D 11AC; 
    // (됹; 됹; 됹; 됹; 됹; ) HANGUL SYLLABLE DYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB439 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB439 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_122)
{
    // B43A;B43A;1103 116D 11AD;B43A;1103 116D 11AD; 
    // (됺; 됺; 됺; 됺; 됺; ) HANGUL SYLLABLE DYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xB43A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_123)
{
    // B43B;B43B;1103 116D 11AE;B43B;1103 116D 11AE; 
    // (됻; 됻; 됻; 됻; 됻; ) HANGUL SYLLABLE DYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xB43B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_124)
{
    // B43C;B43C;1103 116D 11AF;B43C;1103 116D 11AF; 
    // (됼; 됼; 됼; 됼; 됼; ) HANGUL SYLLABLE DYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB43C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_125)
{
    // B43D;B43D;1103 116D 11B0;B43D;1103 116D 11B0; 
    // (됽; 됽; 됽; 됽; 됽; ) HANGUL SYLLABLE DYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB43D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_126)
{
    // B43E;B43E;1103 116D 11B1;B43E;1103 116D 11B1; 
    // (됾; 됾; 됾; 됾; 됾; ) HANGUL SYLLABLE DYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB43E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_127)
{
    // B43F;B43F;1103 116D 11B2;B43F;1103 116D 11B2; 
    // (됿; 됿; 됿; 됿; 됿; ) HANGUL SYLLABLE DYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB43F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB43F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_128)
{
    // B440;B440;1103 116D 11B3;B440;1103 116D 11B3; 
    // (둀; 둀; 둀; 둀; 둀; ) HANGUL SYLLABLE DYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB440 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB440 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_129)
{
    // B441;B441;1103 116D 11B4;B441;1103 116D 11B4; 
    // (둁; 둁; 둁; 둁; 둁; ) HANGUL SYLLABLE DYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB441 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB441 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_130)
{
    // B442;B442;1103 116D 11B5;B442;1103 116D 11B5; 
    // (둂; 둂; 둂; 둂; 둂; ) HANGUL SYLLABLE DYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB442 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB442 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_131)
{
    // B443;B443;1103 116D 11B6;B443;1103 116D 11B6; 
    // (둃; 둃; 둃; 둃; 둃; ) HANGUL SYLLABLE DYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB443 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB443 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_132)
{
    // B444;B444;1103 116D 11B7;B444;1103 116D 11B7; 
    // (둄; 둄; 둄; 둄; 둄; ) HANGUL SYLLABLE DYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB444 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB444 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_133)
{
    // B445;B445;1103 116D 11B8;B445;1103 116D 11B8; 
    // (둅; 둅; 둅; 둅; 둅; ) HANGUL SYLLABLE DYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB445 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB445 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_134)
{
    // B446;B446;1103 116D 11B9;B446;1103 116D 11B9; 
    // (둆; 둆; 둆; 둆; 둆; ) HANGUL SYLLABLE DYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB446 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB446 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_135)
{
    // B447;B447;1103 116D 11BA;B447;1103 116D 11BA; 
    // (둇; 둇; 둇; 둇; 둇; ) HANGUL SYLLABLE DYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB447 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB447 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_136)
{
    // B448;B448;1103 116D 11BB;B448;1103 116D 11BB; 
    // (둈; 둈; 둈; 둈; 둈; ) HANGUL SYLLABLE DYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB448 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB448 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_137)
{
    // B449;B449;1103 116D 11BC;B449;1103 116D 11BC; 
    // (둉; 둉; 둉; 둉; 둉; ) HANGUL SYLLABLE DYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB449 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB449 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_138)
{
    // B44A;B44A;1103 116D 11BD;B44A;1103 116D 11BD; 
    // (둊; 둊; 둊; 둊; 둊; ) HANGUL SYLLABLE DYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB44A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_139)
{
    // B44B;B44B;1103 116D 11BE;B44B;1103 116D 11BE; 
    // (둋; 둋; 둋; 둋; 둋; ) HANGUL SYLLABLE DYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB44B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_140)
{
    // B44C;B44C;1103 116D 11BF;B44C;1103 116D 11BF; 
    // (둌; 둌; 둌; 둌; 둌; ) HANGUL SYLLABLE DYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB44C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_141)
{
    // B44D;B44D;1103 116D 11C0;B44D;1103 116D 11C0; 
    // (둍; 둍; 둍; 둍; 둍; ) HANGUL SYLLABLE DYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB44D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_142)
{
    // B44E;B44E;1103 116D 11C1;B44E;1103 116D 11C1; 
    // (둎; 둎; 둎; 둎; 둎; ) HANGUL SYLLABLE DYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB44E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_143)
{
    // B44F;B44F;1103 116D 11C2;B44F;1103 116D 11C2; 
    // (둏; 둏; 둏; 둏; 둏; ) HANGUL SYLLABLE DYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB44F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB44F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_144)
{
    // B450;B450;1103 116E;B450;1103 116E; 
    // (두; 두; 두; 두; 두; ) HANGUL SYLLABLE DU
    {
        std::array<uint32_t, 1> const source = {{ 0xB450 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB450 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_145)
{
    // B451;B451;1103 116E 11A8;B451;1103 116E 11A8; 
    // (둑; 둑; 둑; 둑; 둑; ) HANGUL SYLLABLE DUG
    {
        std::array<uint32_t, 1> const source = {{ 0xB451 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB451 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_146)
{
    // B452;B452;1103 116E 11A9;B452;1103 116E 11A9; 
    // (둒; 둒; 둒; 둒; 둒; ) HANGUL SYLLABLE DUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB452 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB452 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_147)
{
    // B453;B453;1103 116E 11AA;B453;1103 116E 11AA; 
    // (둓; 둓; 둓; 둓; 둓; ) HANGUL SYLLABLE DUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB453 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB453 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_148)
{
    // B454;B454;1103 116E 11AB;B454;1103 116E 11AB; 
    // (둔; 둔; 둔; 둔; 둔; ) HANGUL SYLLABLE DUN
    {
        std::array<uint32_t, 1> const source = {{ 0xB454 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB454 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_149)
{
    // B455;B455;1103 116E 11AC;B455;1103 116E 11AC; 
    // (둕; 둕; 둕; 둕; 둕; ) HANGUL SYLLABLE DUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB455 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB455 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_150)
{
    // B456;B456;1103 116E 11AD;B456;1103 116E 11AD; 
    // (둖; 둖; 둖; 둖; 둖; ) HANGUL SYLLABLE DUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xB456 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB456 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_151)
{
    // B457;B457;1103 116E 11AE;B457;1103 116E 11AE; 
    // (둗; 둗; 둗; 둗; 둗; ) HANGUL SYLLABLE DUD
    {
        std::array<uint32_t, 1> const source = {{ 0xB457 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB457 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_152)
{
    // B458;B458;1103 116E 11AF;B458;1103 116E 11AF; 
    // (둘; 둘; 둘; 둘; 둘; ) HANGUL SYLLABLE DUL
    {
        std::array<uint32_t, 1> const source = {{ 0xB458 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB458 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_153)
{
    // B459;B459;1103 116E 11B0;B459;1103 116E 11B0; 
    // (둙; 둙; 둙; 둙; 둙; ) HANGUL SYLLABLE DULG
    {
        std::array<uint32_t, 1> const source = {{ 0xB459 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB459 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_154)
{
    // B45A;B45A;1103 116E 11B1;B45A;1103 116E 11B1; 
    // (둚; 둚; 둚; 둚; 둚; ) HANGUL SYLLABLE DULM
    {
        std::array<uint32_t, 1> const source = {{ 0xB45A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_155)
{
    // B45B;B45B;1103 116E 11B2;B45B;1103 116E 11B2; 
    // (둛; 둛; 둛; 둛; 둛; ) HANGUL SYLLABLE DULB
    {
        std::array<uint32_t, 1> const source = {{ 0xB45B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_156)
{
    // B45C;B45C;1103 116E 11B3;B45C;1103 116E 11B3; 
    // (둜; 둜; 둜; 둜; 둜; ) HANGUL SYLLABLE DULS
    {
        std::array<uint32_t, 1> const source = {{ 0xB45C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_157)
{
    // B45D;B45D;1103 116E 11B4;B45D;1103 116E 11B4; 
    // (둝; 둝; 둝; 둝; 둝; ) HANGUL SYLLABLE DULT
    {
        std::array<uint32_t, 1> const source = {{ 0xB45D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_158)
{
    // B45E;B45E;1103 116E 11B5;B45E;1103 116E 11B5; 
    // (둞; 둞; 둞; 둞; 둞; ) HANGUL SYLLABLE DULP
    {
        std::array<uint32_t, 1> const source = {{ 0xB45E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_159)
{
    // B45F;B45F;1103 116E 11B6;B45F;1103 116E 11B6; 
    // (둟; 둟; 둟; 둟; 둟; ) HANGUL SYLLABLE DULH
    {
        std::array<uint32_t, 1> const source = {{ 0xB45F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB45F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_160)
{
    // B460;B460;1103 116E 11B7;B460;1103 116E 11B7; 
    // (둠; 둠; 둠; 둠; 둠; ) HANGUL SYLLABLE DUM
    {
        std::array<uint32_t, 1> const source = {{ 0xB460 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB460 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_161)
{
    // B461;B461;1103 116E 11B8;B461;1103 116E 11B8; 
    // (둡; 둡; 둡; 둡; 둡; ) HANGUL SYLLABLE DUB
    {
        std::array<uint32_t, 1> const source = {{ 0xB461 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB461 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_162)
{
    // B462;B462;1103 116E 11B9;B462;1103 116E 11B9; 
    // (둢; 둢; 둢; 둢; 둢; ) HANGUL SYLLABLE DUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB462 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB462 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_163)
{
    // B463;B463;1103 116E 11BA;B463;1103 116E 11BA; 
    // (둣; 둣; 둣; 둣; 둣; ) HANGUL SYLLABLE DUS
    {
        std::array<uint32_t, 1> const source = {{ 0xB463 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB463 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_164)
{
    // B464;B464;1103 116E 11BB;B464;1103 116E 11BB; 
    // (둤; 둤; 둤; 둤; 둤; ) HANGUL SYLLABLE DUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB464 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB464 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_165)
{
    // B465;B465;1103 116E 11BC;B465;1103 116E 11BC; 
    // (둥; 둥; 둥; 둥; 둥; ) HANGUL SYLLABLE DUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xB465 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB465 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_166)
{
    // B466;B466;1103 116E 11BD;B466;1103 116E 11BD; 
    // (둦; 둦; 둦; 둦; 둦; ) HANGUL SYLLABLE DUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB466 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB466 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_167)
{
    // B467;B467;1103 116E 11BE;B467;1103 116E 11BE; 
    // (둧; 둧; 둧; 둧; 둧; ) HANGUL SYLLABLE DUC
    {
        std::array<uint32_t, 1> const source = {{ 0xB467 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB467 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_168)
{
    // B468;B468;1103 116E 11BF;B468;1103 116E 11BF; 
    // (둨; 둨; 둨; 둨; 둨; ) HANGUL SYLLABLE DUK
    {
        std::array<uint32_t, 1> const source = {{ 0xB468 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB468 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_169)
{
    // B469;B469;1103 116E 11C0;B469;1103 116E 11C0; 
    // (둩; 둩; 둩; 둩; 둩; ) HANGUL SYLLABLE DUT
    {
        std::array<uint32_t, 1> const source = {{ 0xB469 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB469 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_170)
{
    // B46A;B46A;1103 116E 11C1;B46A;1103 116E 11C1; 
    // (둪; 둪; 둪; 둪; 둪; ) HANGUL SYLLABLE DUP
    {
        std::array<uint32_t, 1> const source = {{ 0xB46A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_171)
{
    // B46B;B46B;1103 116E 11C2;B46B;1103 116E 11C2; 
    // (둫; 둫; 둫; 둫; 둫; ) HANGUL SYLLABLE DUH
    {
        std::array<uint32_t, 1> const source = {{ 0xB46B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_172)
{
    // B46C;B46C;1103 116F;B46C;1103 116F; 
    // (둬; 둬; 둬; 둬; 둬; ) HANGUL SYLLABLE DWEO
    {
        std::array<uint32_t, 1> const source = {{ 0xB46C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_173)
{
    // B46D;B46D;1103 116F 11A8;B46D;1103 116F 11A8; 
    // (둭; 둭; 둭; 둭; 둭; ) HANGUL SYLLABLE DWEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xB46D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_174)
{
    // B46E;B46E;1103 116F 11A9;B46E;1103 116F 11A9; 
    // (둮; 둮; 둮; 둮; 둮; ) HANGUL SYLLABLE DWEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB46E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_175)
{
    // B46F;B46F;1103 116F 11AA;B46F;1103 116F 11AA; 
    // (둯; 둯; 둯; 둯; 둯; ) HANGUL SYLLABLE DWEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB46F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB46F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_176)
{
    // B470;B470;1103 116F 11AB;B470;1103 116F 11AB; 
    // (둰; 둰; 둰; 둰; 둰; ) HANGUL SYLLABLE DWEON
    {
        std::array<uint32_t, 1> const source = {{ 0xB470 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB470 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_177)
{
    // B471;B471;1103 116F 11AC;B471;1103 116F 11AC; 
    // (둱; 둱; 둱; 둱; 둱; ) HANGUL SYLLABLE DWEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB471 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB471 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_178)
{
    // B472;B472;1103 116F 11AD;B472;1103 116F 11AD; 
    // (둲; 둲; 둲; 둲; 둲; ) HANGUL SYLLABLE DWEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xB472 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB472 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_179)
{
    // B473;B473;1103 116F 11AE;B473;1103 116F 11AE; 
    // (둳; 둳; 둳; 둳; 둳; ) HANGUL SYLLABLE DWEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xB473 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB473 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_180)
{
    // B474;B474;1103 116F 11AF;B474;1103 116F 11AF; 
    // (둴; 둴; 둴; 둴; 둴; ) HANGUL SYLLABLE DWEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xB474 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB474 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_181)
{
    // B475;B475;1103 116F 11B0;B475;1103 116F 11B0; 
    // (둵; 둵; 둵; 둵; 둵; ) HANGUL SYLLABLE DWEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xB475 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB475 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_182)
{
    // B476;B476;1103 116F 11B1;B476;1103 116F 11B1; 
    // (둶; 둶; 둶; 둶; 둶; ) HANGUL SYLLABLE DWEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xB476 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB476 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_183)
{
    // B477;B477;1103 116F 11B2;B477;1103 116F 11B2; 
    // (둷; 둷; 둷; 둷; 둷; ) HANGUL SYLLABLE DWEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xB477 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB477 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_184)
{
    // B478;B478;1103 116F 11B3;B478;1103 116F 11B3; 
    // (둸; 둸; 둸; 둸; 둸; ) HANGUL SYLLABLE DWEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xB478 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB478 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_185)
{
    // B479;B479;1103 116F 11B4;B479;1103 116F 11B4; 
    // (둹; 둹; 둹; 둹; 둹; ) HANGUL SYLLABLE DWEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xB479 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB479 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_186)
{
    // B47A;B47A;1103 116F 11B5;B47A;1103 116F 11B5; 
    // (둺; 둺; 둺; 둺; 둺; ) HANGUL SYLLABLE DWEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xB47A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_187)
{
    // B47B;B47B;1103 116F 11B6;B47B;1103 116F 11B6; 
    // (둻; 둻; 둻; 둻; 둻; ) HANGUL SYLLABLE DWEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xB47B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_188)
{
    // B47C;B47C;1103 116F 11B7;B47C;1103 116F 11B7; 
    // (둼; 둼; 둼; 둼; 둼; ) HANGUL SYLLABLE DWEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xB47C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_189)
{
    // B47D;B47D;1103 116F 11B8;B47D;1103 116F 11B8; 
    // (둽; 둽; 둽; 둽; 둽; ) HANGUL SYLLABLE DWEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xB47D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_190)
{
    // B47E;B47E;1103 116F 11B9;B47E;1103 116F 11B9; 
    // (둾; 둾; 둾; 둾; 둾; ) HANGUL SYLLABLE DWEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB47E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_191)
{
    // B47F;B47F;1103 116F 11BA;B47F;1103 116F 11BA; 
    // (둿; 둿; 둿; 둿; 둿; ) HANGUL SYLLABLE DWEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xB47F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB47F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_192)
{
    // B480;B480;1103 116F 11BB;B480;1103 116F 11BB; 
    // (뒀; 뒀; 뒀; 뒀; 뒀; ) HANGUL SYLLABLE DWEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB480 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB480 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_193)
{
    // B481;B481;1103 116F 11BC;B481;1103 116F 11BC; 
    // (뒁; 뒁; 뒁; 뒁; 뒁; ) HANGUL SYLLABLE DWEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xB481 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB481 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_194)
{
    // B482;B482;1103 116F 11BD;B482;1103 116F 11BD; 
    // (뒂; 뒂; 뒂; 뒂; 뒂; ) HANGUL SYLLABLE DWEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB482 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB482 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_195)
{
    // B483;B483;1103 116F 11BE;B483;1103 116F 11BE; 
    // (뒃; 뒃; 뒃; 뒃; 뒃; ) HANGUL SYLLABLE DWEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xB483 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB483 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_196)
{
    // B484;B484;1103 116F 11BF;B484;1103 116F 11BF; 
    // (뒄; 뒄; 뒄; 뒄; 뒄; ) HANGUL SYLLABLE DWEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xB484 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB484 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_197)
{
    // B485;B485;1103 116F 11C0;B485;1103 116F 11C0; 
    // (뒅; 뒅; 뒅; 뒅; 뒅; ) HANGUL SYLLABLE DWEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xB485 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB485 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_198)
{
    // B486;B486;1103 116F 11C1;B486;1103 116F 11C1; 
    // (뒆; 뒆; 뒆; 뒆; 뒆; ) HANGUL SYLLABLE DWEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xB486 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB486 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_022_199)
{
    // B487;B487;1103 116F 11C2;B487;1103 116F 11C2; 
    // (뒇; 뒇; 뒇; 뒇; 뒇; ) HANGUL SYLLABLE DWEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xB487 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB487 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


