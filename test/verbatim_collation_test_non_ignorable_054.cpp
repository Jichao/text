// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_054_000)
{
    // 1F06F 0041;	
    // (üÅØ) DOMINO TILE VERTICAL-01-05	[124A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06F, 0x0041 };
    uint32_t const ces[9] = { 0x124A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_001)
{
    // 1F06F 0062;	
    // (üÅØ) DOMINO TILE VERTICAL-01-05	[124A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06F, 0x0062 };
    uint32_t const ces[9] = { 0x124A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_002)
{
    // 1F070 0021;	
    // (üÅ∞) DOMINO TILE VERTICAL-01-06	[124B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F070, 0x0021 };
    uint32_t const ces[9] = { 0x124B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_003)
{
    // 1F070 003F;	
    // (üÅ∞) DOMINO TILE VERTICAL-01-06	[124B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F070, 0x003F };
    uint32_t const ces[9] = { 0x124B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_004)
{
    // 1F070 0061;	
    // (üÅ∞) DOMINO TILE VERTICAL-01-06	[124B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F070, 0x0061 };
    uint32_t const ces[9] = { 0x124B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_005)
{
    // 1F070 0041;	
    // (üÅ∞) DOMINO TILE VERTICAL-01-06	[124B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F070, 0x0041 };
    uint32_t const ces[9] = { 0x124B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_006)
{
    // 1F070 0062;	
    // (üÅ∞) DOMINO TILE VERTICAL-01-06	[124B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F070, 0x0062 };
    uint32_t const ces[9] = { 0x124B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_007)
{
    // 1F071 0021;	
    // (üÅ±) DOMINO TILE VERTICAL-02-00	[124C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F071, 0x0021 };
    uint32_t const ces[9] = { 0x124C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_008)
{
    // 1F071 003F;	
    // (üÅ±) DOMINO TILE VERTICAL-02-00	[124C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F071, 0x003F };
    uint32_t const ces[9] = { 0x124C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_009)
{
    // 1F071 0061;	
    // (üÅ±) DOMINO TILE VERTICAL-02-00	[124C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F071, 0x0061 };
    uint32_t const ces[9] = { 0x124C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_010)
{
    // 1F071 0041;	
    // (üÅ±) DOMINO TILE VERTICAL-02-00	[124C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F071, 0x0041 };
    uint32_t const ces[9] = { 0x124C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_011)
{
    // 1F071 0062;	
    // (üÅ±) DOMINO TILE VERTICAL-02-00	[124C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F071, 0x0062 };
    uint32_t const ces[9] = { 0x124C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_012)
{
    // 1F072 0021;	
    // (üÅ≤) DOMINO TILE VERTICAL-02-01	[124D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F072, 0x0021 };
    uint32_t const ces[9] = { 0x124D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_013)
{
    // 1F072 003F;	
    // (üÅ≤) DOMINO TILE VERTICAL-02-01	[124D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F072, 0x003F };
    uint32_t const ces[9] = { 0x124D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_014)
{
    // 1F072 0061;	
    // (üÅ≤) DOMINO TILE VERTICAL-02-01	[124D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F072, 0x0061 };
    uint32_t const ces[9] = { 0x124D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_015)
{
    // 1F072 0041;	
    // (üÅ≤) DOMINO TILE VERTICAL-02-01	[124D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F072, 0x0041 };
    uint32_t const ces[9] = { 0x124D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_016)
{
    // 1F072 0062;	
    // (üÅ≤) DOMINO TILE VERTICAL-02-01	[124D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F072, 0x0062 };
    uint32_t const ces[9] = { 0x124D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_017)
{
    // 1F073 0021;	
    // (üÅ≥) DOMINO TILE VERTICAL-02-02	[124E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F073, 0x0021 };
    uint32_t const ces[9] = { 0x124E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_018)
{
    // 1F073 003F;	
    // (üÅ≥) DOMINO TILE VERTICAL-02-02	[124E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F073, 0x003F };
    uint32_t const ces[9] = { 0x124E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_019)
{
    // 1F073 0061;	
    // (üÅ≥) DOMINO TILE VERTICAL-02-02	[124E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F073, 0x0061 };
    uint32_t const ces[9] = { 0x124E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_020)
{
    // 1F073 0041;	
    // (üÅ≥) DOMINO TILE VERTICAL-02-02	[124E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F073, 0x0041 };
    uint32_t const ces[9] = { 0x124E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_021)
{
    // 1F073 0062;	
    // (üÅ≥) DOMINO TILE VERTICAL-02-02	[124E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F073, 0x0062 };
    uint32_t const ces[9] = { 0x124E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_022)
{
    // 1F074 0021;	
    // (üÅ¥) DOMINO TILE VERTICAL-02-03	[124F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F074, 0x0021 };
    uint32_t const ces[9] = { 0x124F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_023)
{
    // 1F074 003F;	
    // (üÅ¥) DOMINO TILE VERTICAL-02-03	[124F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F074, 0x003F };
    uint32_t const ces[9] = { 0x124F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_024)
{
    // 1F074 0061;	
    // (üÅ¥) DOMINO TILE VERTICAL-02-03	[124F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F074, 0x0061 };
    uint32_t const ces[9] = { 0x124F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_025)
{
    // 1F074 0041;	
    // (üÅ¥) DOMINO TILE VERTICAL-02-03	[124F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F074, 0x0041 };
    uint32_t const ces[9] = { 0x124F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_026)
{
    // 1F074 0062;	
    // (üÅ¥) DOMINO TILE VERTICAL-02-03	[124F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F074, 0x0062 };
    uint32_t const ces[9] = { 0x124F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_027)
{
    // 1F075 0021;	
    // (üÅµ) DOMINO TILE VERTICAL-02-04	[1250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F075, 0x0021 };
    uint32_t const ces[9] = { 0x1250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_028)
{
    // 1F075 003F;	
    // (üÅµ) DOMINO TILE VERTICAL-02-04	[1250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F075, 0x003F };
    uint32_t const ces[9] = { 0x1250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_029)
{
    // 1F075 0061;	
    // (üÅµ) DOMINO TILE VERTICAL-02-04	[1250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F075, 0x0061 };
    uint32_t const ces[9] = { 0x1250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_030)
{
    // 1F075 0041;	
    // (üÅµ) DOMINO TILE VERTICAL-02-04	[1250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F075, 0x0041 };
    uint32_t const ces[9] = { 0x1250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_031)
{
    // 1F075 0062;	
    // (üÅµ) DOMINO TILE VERTICAL-02-04	[1250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F075, 0x0062 };
    uint32_t const ces[9] = { 0x1250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_032)
{
    // 1F076 0021;	
    // (üÅ∂) DOMINO TILE VERTICAL-02-05	[1251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F076, 0x0021 };
    uint32_t const ces[9] = { 0x1251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_033)
{
    // 1F076 003F;	
    // (üÅ∂) DOMINO TILE VERTICAL-02-05	[1251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F076, 0x003F };
    uint32_t const ces[9] = { 0x1251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_034)
{
    // 1F076 0061;	
    // (üÅ∂) DOMINO TILE VERTICAL-02-05	[1251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F076, 0x0061 };
    uint32_t const ces[9] = { 0x1251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_035)
{
    // 1F076 0041;	
    // (üÅ∂) DOMINO TILE VERTICAL-02-05	[1251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F076, 0x0041 };
    uint32_t const ces[9] = { 0x1251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_036)
{
    // 1F076 0062;	
    // (üÅ∂) DOMINO TILE VERTICAL-02-05	[1251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F076, 0x0062 };
    uint32_t const ces[9] = { 0x1251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_037)
{
    // 1F077 0021;	
    // (üÅ∑) DOMINO TILE VERTICAL-02-06	[1252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F077, 0x0021 };
    uint32_t const ces[9] = { 0x1252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_038)
{
    // 1F077 003F;	
    // (üÅ∑) DOMINO TILE VERTICAL-02-06	[1252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F077, 0x003F };
    uint32_t const ces[9] = { 0x1252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_039)
{
    // 1F077 0061;	
    // (üÅ∑) DOMINO TILE VERTICAL-02-06	[1252 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F077, 0x0061 };
    uint32_t const ces[9] = { 0x1252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_040)
{
    // 1F077 0041;	
    // (üÅ∑) DOMINO TILE VERTICAL-02-06	[1252 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F077, 0x0041 };
    uint32_t const ces[9] = { 0x1252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_041)
{
    // 1F077 0062;	
    // (üÅ∑) DOMINO TILE VERTICAL-02-06	[1252 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F077, 0x0062 };
    uint32_t const ces[9] = { 0x1252, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_042)
{
    // 1F078 0021;	
    // (üÅ∏) DOMINO TILE VERTICAL-03-00	[1253 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F078, 0x0021 };
    uint32_t const ces[9] = { 0x1253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_043)
{
    // 1F078 003F;	
    // (üÅ∏) DOMINO TILE VERTICAL-03-00	[1253 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F078, 0x003F };
    uint32_t const ces[9] = { 0x1253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_044)
{
    // 1F078 0061;	
    // (üÅ∏) DOMINO TILE VERTICAL-03-00	[1253 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F078, 0x0061 };
    uint32_t const ces[9] = { 0x1253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_045)
{
    // 1F078 0041;	
    // (üÅ∏) DOMINO TILE VERTICAL-03-00	[1253 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F078, 0x0041 };
    uint32_t const ces[9] = { 0x1253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_046)
{
    // 1F078 0062;	
    // (üÅ∏) DOMINO TILE VERTICAL-03-00	[1253 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F078, 0x0062 };
    uint32_t const ces[9] = { 0x1253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_047)
{
    // 1F079 0021;	
    // (üÅπ) DOMINO TILE VERTICAL-03-01	[1254 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F079, 0x0021 };
    uint32_t const ces[9] = { 0x1254, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_048)
{
    // 1F079 003F;	
    // (üÅπ) DOMINO TILE VERTICAL-03-01	[1254 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F079, 0x003F };
    uint32_t const ces[9] = { 0x1254, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_049)
{
    // 1F079 0061;	
    // (üÅπ) DOMINO TILE VERTICAL-03-01	[1254 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F079, 0x0061 };
    uint32_t const ces[9] = { 0x1254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_050)
{
    // 1F079 0041;	
    // (üÅπ) DOMINO TILE VERTICAL-03-01	[1254 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F079, 0x0041 };
    uint32_t const ces[9] = { 0x1254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_051)
{
    // 1F079 0062;	
    // (üÅπ) DOMINO TILE VERTICAL-03-01	[1254 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F079, 0x0062 };
    uint32_t const ces[9] = { 0x1254, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_052)
{
    // 1F07A 0021;	
    // (üÅ∫) DOMINO TILE VERTICAL-03-02	[1255 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07A, 0x0021 };
    uint32_t const ces[9] = { 0x1255, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_053)
{
    // 1F07A 003F;	
    // (üÅ∫) DOMINO TILE VERTICAL-03-02	[1255 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07A, 0x003F };
    uint32_t const ces[9] = { 0x1255, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_054)
{
    // 1F07A 0061;	
    // (üÅ∫) DOMINO TILE VERTICAL-03-02	[1255 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07A, 0x0061 };
    uint32_t const ces[9] = { 0x1255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_055)
{
    // 1F07A 0041;	
    // (üÅ∫) DOMINO TILE VERTICAL-03-02	[1255 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07A, 0x0041 };
    uint32_t const ces[9] = { 0x1255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_056)
{
    // 1F07A 0062;	
    // (üÅ∫) DOMINO TILE VERTICAL-03-02	[1255 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07A, 0x0062 };
    uint32_t const ces[9] = { 0x1255, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_057)
{
    // 1F07B 0021;	
    // (üÅª) DOMINO TILE VERTICAL-03-03	[1256 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07B, 0x0021 };
    uint32_t const ces[9] = { 0x1256, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_058)
{
    // 1F07B 003F;	
    // (üÅª) DOMINO TILE VERTICAL-03-03	[1256 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07B, 0x003F };
    uint32_t const ces[9] = { 0x1256, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_059)
{
    // 1F07B 0061;	
    // (üÅª) DOMINO TILE VERTICAL-03-03	[1256 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07B, 0x0061 };
    uint32_t const ces[9] = { 0x1256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_060)
{
    // 1F07B 0041;	
    // (üÅª) DOMINO TILE VERTICAL-03-03	[1256 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07B, 0x0041 };
    uint32_t const ces[9] = { 0x1256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_061)
{
    // 1F07B 0062;	
    // (üÅª) DOMINO TILE VERTICAL-03-03	[1256 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07B, 0x0062 };
    uint32_t const ces[9] = { 0x1256, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_062)
{
    // 1F07C 0021;	
    // (üÅº) DOMINO TILE VERTICAL-03-04	[1257 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07C, 0x0021 };
    uint32_t const ces[9] = { 0x1257, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_063)
{
    // 1F07C 003F;	
    // (üÅº) DOMINO TILE VERTICAL-03-04	[1257 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07C, 0x003F };
    uint32_t const ces[9] = { 0x1257, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_064)
{
    // 1F07C 0061;	
    // (üÅº) DOMINO TILE VERTICAL-03-04	[1257 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07C, 0x0061 };
    uint32_t const ces[9] = { 0x1257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_065)
{
    // 1F07C 0041;	
    // (üÅº) DOMINO TILE VERTICAL-03-04	[1257 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07C, 0x0041 };
    uint32_t const ces[9] = { 0x1257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_066)
{
    // 1F07C 0062;	
    // (üÅº) DOMINO TILE VERTICAL-03-04	[1257 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07C, 0x0062 };
    uint32_t const ces[9] = { 0x1257, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_067)
{
    // 1F07D 0021;	
    // (üÅΩ) DOMINO TILE VERTICAL-03-05	[1258 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07D, 0x0021 };
    uint32_t const ces[9] = { 0x1258, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_068)
{
    // 1F07D 003F;	
    // (üÅΩ) DOMINO TILE VERTICAL-03-05	[1258 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07D, 0x003F };
    uint32_t const ces[9] = { 0x1258, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_069)
{
    // 1F07D 0061;	
    // (üÅΩ) DOMINO TILE VERTICAL-03-05	[1258 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07D, 0x0061 };
    uint32_t const ces[9] = { 0x1258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_070)
{
    // 1F07D 0041;	
    // (üÅΩ) DOMINO TILE VERTICAL-03-05	[1258 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07D, 0x0041 };
    uint32_t const ces[9] = { 0x1258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_071)
{
    // 1F07D 0062;	
    // (üÅΩ) DOMINO TILE VERTICAL-03-05	[1258 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07D, 0x0062 };
    uint32_t const ces[9] = { 0x1258, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_072)
{
    // 1F07E 0021;	
    // (üÅæ) DOMINO TILE VERTICAL-03-06	[1259 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07E, 0x0021 };
    uint32_t const ces[9] = { 0x1259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_073)
{
    // 1F07E 003F;	
    // (üÅæ) DOMINO TILE VERTICAL-03-06	[1259 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07E, 0x003F };
    uint32_t const ces[9] = { 0x1259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_074)
{
    // 1F07E 0061;	
    // (üÅæ) DOMINO TILE VERTICAL-03-06	[1259 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07E, 0x0061 };
    uint32_t const ces[9] = { 0x1259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_075)
{
    // 1F07E 0041;	
    // (üÅæ) DOMINO TILE VERTICAL-03-06	[1259 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07E, 0x0041 };
    uint32_t const ces[9] = { 0x1259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_076)
{
    // 1F07E 0062;	
    // (üÅæ) DOMINO TILE VERTICAL-03-06	[1259 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07E, 0x0062 };
    uint32_t const ces[9] = { 0x1259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_077)
{
    // 1F07F 0021;	
    // (üÅø) DOMINO TILE VERTICAL-04-00	[125A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07F, 0x0021 };
    uint32_t const ces[9] = { 0x125A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_078)
{
    // 1F07F 003F;	
    // (üÅø) DOMINO TILE VERTICAL-04-00	[125A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07F, 0x003F };
    uint32_t const ces[9] = { 0x125A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_079)
{
    // 1F07F 0061;	
    // (üÅø) DOMINO TILE VERTICAL-04-00	[125A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07F, 0x0061 };
    uint32_t const ces[9] = { 0x125A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_080)
{
    // 1F07F 0041;	
    // (üÅø) DOMINO TILE VERTICAL-04-00	[125A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F07F, 0x0041 };
    uint32_t const ces[9] = { 0x125A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_081)
{
    // 1F07F 0062;	
    // (üÅø) DOMINO TILE VERTICAL-04-00	[125A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F07F, 0x0062 };
    uint32_t const ces[9] = { 0x125A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_082)
{
    // 1F080 0021;	
    // (üÇÄ) DOMINO TILE VERTICAL-04-01	[125B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F080, 0x0021 };
    uint32_t const ces[9] = { 0x125B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_083)
{
    // 1F080 003F;	
    // (üÇÄ) DOMINO TILE VERTICAL-04-01	[125B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F080, 0x003F };
    uint32_t const ces[9] = { 0x125B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_084)
{
    // 1F080 0061;	
    // (üÇÄ) DOMINO TILE VERTICAL-04-01	[125B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F080, 0x0061 };
    uint32_t const ces[9] = { 0x125B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_085)
{
    // 1F080 0041;	
    // (üÇÄ) DOMINO TILE VERTICAL-04-01	[125B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F080, 0x0041 };
    uint32_t const ces[9] = { 0x125B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_086)
{
    // 1F080 0062;	
    // (üÇÄ) DOMINO TILE VERTICAL-04-01	[125B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F080, 0x0062 };
    uint32_t const ces[9] = { 0x125B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_087)
{
    // 1F081 0021;	
    // (üÇÅ) DOMINO TILE VERTICAL-04-02	[125C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F081, 0x0021 };
    uint32_t const ces[9] = { 0x125C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_088)
{
    // 1F081 003F;	
    // (üÇÅ) DOMINO TILE VERTICAL-04-02	[125C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F081, 0x003F };
    uint32_t const ces[9] = { 0x125C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_089)
{
    // 1F081 0061;	
    // (üÇÅ) DOMINO TILE VERTICAL-04-02	[125C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F081, 0x0061 };
    uint32_t const ces[9] = { 0x125C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_090)
{
    // 1F081 0041;	
    // (üÇÅ) DOMINO TILE VERTICAL-04-02	[125C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F081, 0x0041 };
    uint32_t const ces[9] = { 0x125C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_091)
{
    // 1F081 0062;	
    // (üÇÅ) DOMINO TILE VERTICAL-04-02	[125C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F081, 0x0062 };
    uint32_t const ces[9] = { 0x125C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_092)
{
    // 1F082 0021;	
    // (üÇÇ) DOMINO TILE VERTICAL-04-03	[125D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F082, 0x0021 };
    uint32_t const ces[9] = { 0x125D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_093)
{
    // 1F082 003F;	
    // (üÇÇ) DOMINO TILE VERTICAL-04-03	[125D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F082, 0x003F };
    uint32_t const ces[9] = { 0x125D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_094)
{
    // 1F082 0061;	
    // (üÇÇ) DOMINO TILE VERTICAL-04-03	[125D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F082, 0x0061 };
    uint32_t const ces[9] = { 0x125D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_095)
{
    // 1F082 0041;	
    // (üÇÇ) DOMINO TILE VERTICAL-04-03	[125D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F082, 0x0041 };
    uint32_t const ces[9] = { 0x125D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_096)
{
    // 1F082 0062;	
    // (üÇÇ) DOMINO TILE VERTICAL-04-03	[125D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F082, 0x0062 };
    uint32_t const ces[9] = { 0x125D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_097)
{
    // 1F083 0021;	
    // (üÇÉ) DOMINO TILE VERTICAL-04-04	[125E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F083, 0x0021 };
    uint32_t const ces[9] = { 0x125E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_098)
{
    // 1F083 003F;	
    // (üÇÉ) DOMINO TILE VERTICAL-04-04	[125E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F083, 0x003F };
    uint32_t const ces[9] = { 0x125E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_099)
{
    // 1F083 0061;	
    // (üÇÉ) DOMINO TILE VERTICAL-04-04	[125E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F083, 0x0061 };
    uint32_t const ces[9] = { 0x125E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_100)
{
    // 1F083 0041;	
    // (üÇÉ) DOMINO TILE VERTICAL-04-04	[125E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F083, 0x0041 };
    uint32_t const ces[9] = { 0x125E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_101)
{
    // 1F083 0062;	
    // (üÇÉ) DOMINO TILE VERTICAL-04-04	[125E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F083, 0x0062 };
    uint32_t const ces[9] = { 0x125E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_102)
{
    // 1F084 0021;	
    // (üÇÑ) DOMINO TILE VERTICAL-04-05	[125F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F084, 0x0021 };
    uint32_t const ces[9] = { 0x125F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_103)
{
    // 1F084 003F;	
    // (üÇÑ) DOMINO TILE VERTICAL-04-05	[125F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F084, 0x003F };
    uint32_t const ces[9] = { 0x125F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_104)
{
    // 1F084 0061;	
    // (üÇÑ) DOMINO TILE VERTICAL-04-05	[125F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F084, 0x0061 };
    uint32_t const ces[9] = { 0x125F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_105)
{
    // 1F084 0041;	
    // (üÇÑ) DOMINO TILE VERTICAL-04-05	[125F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F084, 0x0041 };
    uint32_t const ces[9] = { 0x125F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_106)
{
    // 1F084 0062;	
    // (üÇÑ) DOMINO TILE VERTICAL-04-05	[125F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F084, 0x0062 };
    uint32_t const ces[9] = { 0x125F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_107)
{
    // 1F085 0021;	
    // (üÇÖ) DOMINO TILE VERTICAL-04-06	[1260 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F085, 0x0021 };
    uint32_t const ces[9] = { 0x1260, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_108)
{
    // 1F085 003F;	
    // (üÇÖ) DOMINO TILE VERTICAL-04-06	[1260 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F085, 0x003F };
    uint32_t const ces[9] = { 0x1260, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_109)
{
    // 1F085 0061;	
    // (üÇÖ) DOMINO TILE VERTICAL-04-06	[1260 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F085, 0x0061 };
    uint32_t const ces[9] = { 0x1260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_110)
{
    // 1F085 0041;	
    // (üÇÖ) DOMINO TILE VERTICAL-04-06	[1260 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F085, 0x0041 };
    uint32_t const ces[9] = { 0x1260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_111)
{
    // 1F085 0062;	
    // (üÇÖ) DOMINO TILE VERTICAL-04-06	[1260 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F085, 0x0062 };
    uint32_t const ces[9] = { 0x1260, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_112)
{
    // 1F086 0021;	
    // (üÇÜ) DOMINO TILE VERTICAL-05-00	[1261 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F086, 0x0021 };
    uint32_t const ces[9] = { 0x1261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_113)
{
    // 1F086 003F;	
    // (üÇÜ) DOMINO TILE VERTICAL-05-00	[1261 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F086, 0x003F };
    uint32_t const ces[9] = { 0x1261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_114)
{
    // 1F086 0061;	
    // (üÇÜ) DOMINO TILE VERTICAL-05-00	[1261 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F086, 0x0061 };
    uint32_t const ces[9] = { 0x1261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_115)
{
    // 1F086 0041;	
    // (üÇÜ) DOMINO TILE VERTICAL-05-00	[1261 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F086, 0x0041 };
    uint32_t const ces[9] = { 0x1261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_116)
{
    // 1F086 0062;	
    // (üÇÜ) DOMINO TILE VERTICAL-05-00	[1261 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F086, 0x0062 };
    uint32_t const ces[9] = { 0x1261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_117)
{
    // 1F087 0021;	
    // (üÇá) DOMINO TILE VERTICAL-05-01	[1262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F087, 0x0021 };
    uint32_t const ces[9] = { 0x1262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_118)
{
    // 1F087 003F;	
    // (üÇá) DOMINO TILE VERTICAL-05-01	[1262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F087, 0x003F };
    uint32_t const ces[9] = { 0x1262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_119)
{
    // 1F087 0061;	
    // (üÇá) DOMINO TILE VERTICAL-05-01	[1262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F087, 0x0061 };
    uint32_t const ces[9] = { 0x1262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_120)
{
    // 1F087 0041;	
    // (üÇá) DOMINO TILE VERTICAL-05-01	[1262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F087, 0x0041 };
    uint32_t const ces[9] = { 0x1262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_121)
{
    // 1F087 0062;	
    // (üÇá) DOMINO TILE VERTICAL-05-01	[1262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F087, 0x0062 };
    uint32_t const ces[9] = { 0x1262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_122)
{
    // 1F088 0021;	
    // (üÇà) DOMINO TILE VERTICAL-05-02	[1263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F088, 0x0021 };
    uint32_t const ces[9] = { 0x1263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_123)
{
    // 1F088 003F;	
    // (üÇà) DOMINO TILE VERTICAL-05-02	[1263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F088, 0x003F };
    uint32_t const ces[9] = { 0x1263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_124)
{
    // 1F088 0061;	
    // (üÇà) DOMINO TILE VERTICAL-05-02	[1263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F088, 0x0061 };
    uint32_t const ces[9] = { 0x1263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_125)
{
    // 1F088 0041;	
    // (üÇà) DOMINO TILE VERTICAL-05-02	[1263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F088, 0x0041 };
    uint32_t const ces[9] = { 0x1263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_126)
{
    // 1F088 0062;	
    // (üÇà) DOMINO TILE VERTICAL-05-02	[1263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F088, 0x0062 };
    uint32_t const ces[9] = { 0x1263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_127)
{
    // 1F089 0021;	
    // (üÇâ) DOMINO TILE VERTICAL-05-03	[1264 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F089, 0x0021 };
    uint32_t const ces[9] = { 0x1264, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_128)
{
    // 1F089 003F;	
    // (üÇâ) DOMINO TILE VERTICAL-05-03	[1264 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F089, 0x003F };
    uint32_t const ces[9] = { 0x1264, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_129)
{
    // 1F089 0061;	
    // (üÇâ) DOMINO TILE VERTICAL-05-03	[1264 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F089, 0x0061 };
    uint32_t const ces[9] = { 0x1264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_130)
{
    // 1F089 0041;	
    // (üÇâ) DOMINO TILE VERTICAL-05-03	[1264 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F089, 0x0041 };
    uint32_t const ces[9] = { 0x1264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_131)
{
    // 1F089 0062;	
    // (üÇâ) DOMINO TILE VERTICAL-05-03	[1264 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F089, 0x0062 };
    uint32_t const ces[9] = { 0x1264, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_132)
{
    // 1F08A 0021;	
    // (üÇä) DOMINO TILE VERTICAL-05-04	[1265 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08A, 0x0021 };
    uint32_t const ces[9] = { 0x1265, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_133)
{
    // 1F08A 003F;	
    // (üÇä) DOMINO TILE VERTICAL-05-04	[1265 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08A, 0x003F };
    uint32_t const ces[9] = { 0x1265, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_134)
{
    // 1F08A 0061;	
    // (üÇä) DOMINO TILE VERTICAL-05-04	[1265 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08A, 0x0061 };
    uint32_t const ces[9] = { 0x1265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_135)
{
    // 1F08A 0041;	
    // (üÇä) DOMINO TILE VERTICAL-05-04	[1265 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08A, 0x0041 };
    uint32_t const ces[9] = { 0x1265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_136)
{
    // 1F08A 0062;	
    // (üÇä) DOMINO TILE VERTICAL-05-04	[1265 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08A, 0x0062 };
    uint32_t const ces[9] = { 0x1265, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_137)
{
    // 1F08B 0021;	
    // (üÇã) DOMINO TILE VERTICAL-05-05	[1266 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08B, 0x0021 };
    uint32_t const ces[9] = { 0x1266, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_138)
{
    // 1F08B 003F;	
    // (üÇã) DOMINO TILE VERTICAL-05-05	[1266 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08B, 0x003F };
    uint32_t const ces[9] = { 0x1266, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_139)
{
    // 1F08B 0061;	
    // (üÇã) DOMINO TILE VERTICAL-05-05	[1266 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08B, 0x0061 };
    uint32_t const ces[9] = { 0x1266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_140)
{
    // 1F08B 0041;	
    // (üÇã) DOMINO TILE VERTICAL-05-05	[1266 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08B, 0x0041 };
    uint32_t const ces[9] = { 0x1266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_141)
{
    // 1F08B 0062;	
    // (üÇã) DOMINO TILE VERTICAL-05-05	[1266 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08B, 0x0062 };
    uint32_t const ces[9] = { 0x1266, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_142)
{
    // 1F08C 0021;	
    // (üÇå) DOMINO TILE VERTICAL-05-06	[1267 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08C, 0x0021 };
    uint32_t const ces[9] = { 0x1267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_143)
{
    // 1F08C 003F;	
    // (üÇå) DOMINO TILE VERTICAL-05-06	[1267 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08C, 0x003F };
    uint32_t const ces[9] = { 0x1267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_144)
{
    // 1F08C 0061;	
    // (üÇå) DOMINO TILE VERTICAL-05-06	[1267 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08C, 0x0061 };
    uint32_t const ces[9] = { 0x1267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_145)
{
    // 1F08C 0041;	
    // (üÇå) DOMINO TILE VERTICAL-05-06	[1267 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08C, 0x0041 };
    uint32_t const ces[9] = { 0x1267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_146)
{
    // 1F08C 0062;	
    // (üÇå) DOMINO TILE VERTICAL-05-06	[1267 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08C, 0x0062 };
    uint32_t const ces[9] = { 0x1267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_147)
{
    // 1F08D 0021;	
    // (üÇç) DOMINO TILE VERTICAL-06-00	[1268 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08D, 0x0021 };
    uint32_t const ces[9] = { 0x1268, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_148)
{
    // 1F08D 003F;	
    // (üÇç) DOMINO TILE VERTICAL-06-00	[1268 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08D, 0x003F };
    uint32_t const ces[9] = { 0x1268, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_149)
{
    // 1F08D 0061;	
    // (üÇç) DOMINO TILE VERTICAL-06-00	[1268 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08D, 0x0061 };
    uint32_t const ces[9] = { 0x1268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_150)
{
    // 1F08D 0041;	
    // (üÇç) DOMINO TILE VERTICAL-06-00	[1268 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08D, 0x0041 };
    uint32_t const ces[9] = { 0x1268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_151)
{
    // 1F08D 0062;	
    // (üÇç) DOMINO TILE VERTICAL-06-00	[1268 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08D, 0x0062 };
    uint32_t const ces[9] = { 0x1268, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_152)
{
    // 1F08E 0021;	
    // (üÇé) DOMINO TILE VERTICAL-06-01	[1269 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08E, 0x0021 };
    uint32_t const ces[9] = { 0x1269, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_153)
{
    // 1F08E 003F;	
    // (üÇé) DOMINO TILE VERTICAL-06-01	[1269 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08E, 0x003F };
    uint32_t const ces[9] = { 0x1269, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_154)
{
    // 1F08E 0061;	
    // (üÇé) DOMINO TILE VERTICAL-06-01	[1269 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08E, 0x0061 };
    uint32_t const ces[9] = { 0x1269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_155)
{
    // 1F08E 0041;	
    // (üÇé) DOMINO TILE VERTICAL-06-01	[1269 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08E, 0x0041 };
    uint32_t const ces[9] = { 0x1269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_156)
{
    // 1F08E 0062;	
    // (üÇé) DOMINO TILE VERTICAL-06-01	[1269 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08E, 0x0062 };
    uint32_t const ces[9] = { 0x1269, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_157)
{
    // 1F08F 0021;	
    // (üÇè) DOMINO TILE VERTICAL-06-02	[126A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08F, 0x0021 };
    uint32_t const ces[9] = { 0x126A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_158)
{
    // 1F08F 003F;	
    // (üÇè) DOMINO TILE VERTICAL-06-02	[126A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08F, 0x003F };
    uint32_t const ces[9] = { 0x126A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_159)
{
    // 1F08F 0061;	
    // (üÇè) DOMINO TILE VERTICAL-06-02	[126A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08F, 0x0061 };
    uint32_t const ces[9] = { 0x126A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_160)
{
    // 1F08F 0041;	
    // (üÇè) DOMINO TILE VERTICAL-06-02	[126A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F08F, 0x0041 };
    uint32_t const ces[9] = { 0x126A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_161)
{
    // 1F08F 0062;	
    // (üÇè) DOMINO TILE VERTICAL-06-02	[126A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F08F, 0x0062 };
    uint32_t const ces[9] = { 0x126A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_162)
{
    // 1F090 0021;	
    // (üÇê) DOMINO TILE VERTICAL-06-03	[126B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F090, 0x0021 };
    uint32_t const ces[9] = { 0x126B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_163)
{
    // 1F090 003F;	
    // (üÇê) DOMINO TILE VERTICAL-06-03	[126B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F090, 0x003F };
    uint32_t const ces[9] = { 0x126B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_164)
{
    // 1F090 0061;	
    // (üÇê) DOMINO TILE VERTICAL-06-03	[126B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F090, 0x0061 };
    uint32_t const ces[9] = { 0x126B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_165)
{
    // 1F090 0041;	
    // (üÇê) DOMINO TILE VERTICAL-06-03	[126B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F090, 0x0041 };
    uint32_t const ces[9] = { 0x126B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_166)
{
    // 1F090 0062;	
    // (üÇê) DOMINO TILE VERTICAL-06-03	[126B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F090, 0x0062 };
    uint32_t const ces[9] = { 0x126B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_167)
{
    // 1F091 0021;	
    // (üÇë) DOMINO TILE VERTICAL-06-04	[126C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F091, 0x0021 };
    uint32_t const ces[9] = { 0x126C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_168)
{
    // 1F091 003F;	
    // (üÇë) DOMINO TILE VERTICAL-06-04	[126C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F091, 0x003F };
    uint32_t const ces[9] = { 0x126C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_169)
{
    // 1F091 0061;	
    // (üÇë) DOMINO TILE VERTICAL-06-04	[126C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F091, 0x0061 };
    uint32_t const ces[9] = { 0x126C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_170)
{
    // 1F091 0041;	
    // (üÇë) DOMINO TILE VERTICAL-06-04	[126C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F091, 0x0041 };
    uint32_t const ces[9] = { 0x126C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_171)
{
    // 1F091 0062;	
    // (üÇë) DOMINO TILE VERTICAL-06-04	[126C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F091, 0x0062 };
    uint32_t const ces[9] = { 0x126C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_172)
{
    // 1F092 0021;	
    // (üÇí) DOMINO TILE VERTICAL-06-05	[126D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F092, 0x0021 };
    uint32_t const ces[9] = { 0x126D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_173)
{
    // 1F092 003F;	
    // (üÇí) DOMINO TILE VERTICAL-06-05	[126D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F092, 0x003F };
    uint32_t const ces[9] = { 0x126D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_174)
{
    // 1F092 0061;	
    // (üÇí) DOMINO TILE VERTICAL-06-05	[126D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F092, 0x0061 };
    uint32_t const ces[9] = { 0x126D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_175)
{
    // 1F092 0041;	
    // (üÇí) DOMINO TILE VERTICAL-06-05	[126D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F092, 0x0041 };
    uint32_t const ces[9] = { 0x126D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_176)
{
    // 1F092 0062;	
    // (üÇí) DOMINO TILE VERTICAL-06-05	[126D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F092, 0x0062 };
    uint32_t const ces[9] = { 0x126D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_177)
{
    // 1F093 0021;	
    // (üÇì) DOMINO TILE VERTICAL-06-06	[126E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F093, 0x0021 };
    uint32_t const ces[9] = { 0x126E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_178)
{
    // 1F093 003F;	
    // (üÇì) DOMINO TILE VERTICAL-06-06	[126E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F093, 0x003F };
    uint32_t const ces[9] = { 0x126E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_179)
{
    // 1F093 0061;	
    // (üÇì) DOMINO TILE VERTICAL-06-06	[126E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F093, 0x0061 };
    uint32_t const ces[9] = { 0x126E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_180)
{
    // 1F093 0041;	
    // (üÇì) DOMINO TILE VERTICAL-06-06	[126E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F093, 0x0041 };
    uint32_t const ces[9] = { 0x126E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_181)
{
    // 1F093 0062;	
    // (üÇì) DOMINO TILE VERTICAL-06-06	[126E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F093, 0x0062 };
    uint32_t const ces[9] = { 0x126E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_182)
{
    // 1F0A0 0021;	
    // (üÇ†) PLAYING CARD BACK	[126F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A0, 0x0021 };
    uint32_t const ces[9] = { 0x126F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_183)
{
    // 1F0A0 003F;	
    // (üÇ†) PLAYING CARD BACK	[126F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A0, 0x003F };
    uint32_t const ces[9] = { 0x126F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_184)
{
    // 1F0A0 0061;	
    // (üÇ†) PLAYING CARD BACK	[126F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A0, 0x0061 };
    uint32_t const ces[9] = { 0x126F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_185)
{
    // 1F0A0 0041;	
    // (üÇ†) PLAYING CARD BACK	[126F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A0, 0x0041 };
    uint32_t const ces[9] = { 0x126F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_186)
{
    // 1F0A0 0062;	
    // (üÇ†) PLAYING CARD BACK	[126F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A0, 0x0062 };
    uint32_t const ces[9] = { 0x126F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_187)
{
    // 1F0A1 0021;	
    // (üÇ°) PLAYING CARD ACE OF SPADES	[1270 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A1, 0x0021 };
    uint32_t const ces[9] = { 0x1270, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_188)
{
    // 1F0A1 003F;	
    // (üÇ°) PLAYING CARD ACE OF SPADES	[1270 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A1, 0x003F };
    uint32_t const ces[9] = { 0x1270, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_189)
{
    // 1F0A1 0061;	
    // (üÇ°) PLAYING CARD ACE OF SPADES	[1270 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A1, 0x0061 };
    uint32_t const ces[9] = { 0x1270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_190)
{
    // 1F0A1 0041;	
    // (üÇ°) PLAYING CARD ACE OF SPADES	[1270 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A1, 0x0041 };
    uint32_t const ces[9] = { 0x1270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_191)
{
    // 1F0A1 0062;	
    // (üÇ°) PLAYING CARD ACE OF SPADES	[1270 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A1, 0x0062 };
    uint32_t const ces[9] = { 0x1270, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_192)
{
    // 1F0A2 0021;	
    // (üÇ¢) PLAYING CARD TWO OF SPADES	[1271 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A2, 0x0021 };
    uint32_t const ces[9] = { 0x1271, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_193)
{
    // 1F0A2 003F;	
    // (üÇ¢) PLAYING CARD TWO OF SPADES	[1271 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A2, 0x003F };
    uint32_t const ces[9] = { 0x1271, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_194)
{
    // 1F0A2 0061;	
    // (üÇ¢) PLAYING CARD TWO OF SPADES	[1271 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A2, 0x0061 };
    uint32_t const ces[9] = { 0x1271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_195)
{
    // 1F0A2 0041;	
    // (üÇ¢) PLAYING CARD TWO OF SPADES	[1271 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A2, 0x0041 };
    uint32_t const ces[9] = { 0x1271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_196)
{
    // 1F0A2 0062;	
    // (üÇ¢) PLAYING CARD TWO OF SPADES	[1271 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A2, 0x0062 };
    uint32_t const ces[9] = { 0x1271, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_197)
{
    // 1F0A3 0021;	
    // (üÇ£) PLAYING CARD THREE OF SPADES	[1272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A3, 0x0021 };
    uint32_t const ces[9] = { 0x1272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_198)
{
    // 1F0A3 003F;	
    // (üÇ£) PLAYING CARD THREE OF SPADES	[1272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A3, 0x003F };
    uint32_t const ces[9] = { 0x1272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_199)
{
    // 1F0A3 0061;	
    // (üÇ£) PLAYING CARD THREE OF SPADES	[1272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A3, 0x0061 };
    uint32_t const ces[9] = { 0x1272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_200)
{
    // 1F0A3 0041;	
    // (üÇ£) PLAYING CARD THREE OF SPADES	[1272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A3, 0x0041 };
    uint32_t const ces[9] = { 0x1272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_201)
{
    // 1F0A3 0062;	
    // (üÇ£) PLAYING CARD THREE OF SPADES	[1272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A3, 0x0062 };
    uint32_t const ces[9] = { 0x1272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_202)
{
    // 1F0A4 0021;	
    // (üÇ§) PLAYING CARD FOUR OF SPADES	[1273 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A4, 0x0021 };
    uint32_t const ces[9] = { 0x1273, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_203)
{
    // 1F0A4 003F;	
    // (üÇ§) PLAYING CARD FOUR OF SPADES	[1273 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A4, 0x003F };
    uint32_t const ces[9] = { 0x1273, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_204)
{
    // 1F0A4 0061;	
    // (üÇ§) PLAYING CARD FOUR OF SPADES	[1273 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A4, 0x0061 };
    uint32_t const ces[9] = { 0x1273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_205)
{
    // 1F0A4 0041;	
    // (üÇ§) PLAYING CARD FOUR OF SPADES	[1273 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A4, 0x0041 };
    uint32_t const ces[9] = { 0x1273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_206)
{
    // 1F0A4 0062;	
    // (üÇ§) PLAYING CARD FOUR OF SPADES	[1273 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A4, 0x0062 };
    uint32_t const ces[9] = { 0x1273, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_207)
{
    // 1F0A5 0021;	
    // (üÇ•) PLAYING CARD FIVE OF SPADES	[1274 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A5, 0x0021 };
    uint32_t const ces[9] = { 0x1274, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_208)
{
    // 1F0A5 003F;	
    // (üÇ•) PLAYING CARD FIVE OF SPADES	[1274 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A5, 0x003F };
    uint32_t const ces[9] = { 0x1274, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_209)
{
    // 1F0A5 0061;	
    // (üÇ•) PLAYING CARD FIVE OF SPADES	[1274 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A5, 0x0061 };
    uint32_t const ces[9] = { 0x1274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_210)
{
    // 1F0A5 0041;	
    // (üÇ•) PLAYING CARD FIVE OF SPADES	[1274 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A5, 0x0041 };
    uint32_t const ces[9] = { 0x1274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_211)
{
    // 1F0A5 0062;	
    // (üÇ•) PLAYING CARD FIVE OF SPADES	[1274 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A5, 0x0062 };
    uint32_t const ces[9] = { 0x1274, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_212)
{
    // 1F0A6 0021;	
    // (üÇ¶) PLAYING CARD SIX OF SPADES	[1275 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A6, 0x0021 };
    uint32_t const ces[9] = { 0x1275, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_213)
{
    // 1F0A6 003F;	
    // (üÇ¶) PLAYING CARD SIX OF SPADES	[1275 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A6, 0x003F };
    uint32_t const ces[9] = { 0x1275, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_214)
{
    // 1F0A6 0061;	
    // (üÇ¶) PLAYING CARD SIX OF SPADES	[1275 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A6, 0x0061 };
    uint32_t const ces[9] = { 0x1275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_215)
{
    // 1F0A6 0041;	
    // (üÇ¶) PLAYING CARD SIX OF SPADES	[1275 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A6, 0x0041 };
    uint32_t const ces[9] = { 0x1275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_216)
{
    // 1F0A6 0062;	
    // (üÇ¶) PLAYING CARD SIX OF SPADES	[1275 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A6, 0x0062 };
    uint32_t const ces[9] = { 0x1275, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_217)
{
    // 1F0A7 0021;	
    // (üÇß) PLAYING CARD SEVEN OF SPADES	[1276 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A7, 0x0021 };
    uint32_t const ces[9] = { 0x1276, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_218)
{
    // 1F0A7 003F;	
    // (üÇß) PLAYING CARD SEVEN OF SPADES	[1276 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A7, 0x003F };
    uint32_t const ces[9] = { 0x1276, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_219)
{
    // 1F0A7 0061;	
    // (üÇß) PLAYING CARD SEVEN OF SPADES	[1276 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A7, 0x0061 };
    uint32_t const ces[9] = { 0x1276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_220)
{
    // 1F0A7 0041;	
    // (üÇß) PLAYING CARD SEVEN OF SPADES	[1276 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A7, 0x0041 };
    uint32_t const ces[9] = { 0x1276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_221)
{
    // 1F0A7 0062;	
    // (üÇß) PLAYING CARD SEVEN OF SPADES	[1276 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A7, 0x0062 };
    uint32_t const ces[9] = { 0x1276, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_222)
{
    // 1F0A8 0021;	
    // (üÇ®) PLAYING CARD EIGHT OF SPADES	[1277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A8, 0x0021 };
    uint32_t const ces[9] = { 0x1277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_223)
{
    // 1F0A8 003F;	
    // (üÇ®) PLAYING CARD EIGHT OF SPADES	[1277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A8, 0x003F };
    uint32_t const ces[9] = { 0x1277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_224)
{
    // 1F0A8 0061;	
    // (üÇ®) PLAYING CARD EIGHT OF SPADES	[1277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A8, 0x0061 };
    uint32_t const ces[9] = { 0x1277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_225)
{
    // 1F0A8 0041;	
    // (üÇ®) PLAYING CARD EIGHT OF SPADES	[1277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A8, 0x0041 };
    uint32_t const ces[9] = { 0x1277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_226)
{
    // 1F0A8 0062;	
    // (üÇ®) PLAYING CARD EIGHT OF SPADES	[1277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A8, 0x0062 };
    uint32_t const ces[9] = { 0x1277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_227)
{
    // 1F0A9 0021;	
    // (üÇ©) PLAYING CARD NINE OF SPADES	[1278 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A9, 0x0021 };
    uint32_t const ces[9] = { 0x1278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_228)
{
    // 1F0A9 003F;	
    // (üÇ©) PLAYING CARD NINE OF SPADES	[1278 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A9, 0x003F };
    uint32_t const ces[9] = { 0x1278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_229)
{
    // 1F0A9 0061;	
    // (üÇ©) PLAYING CARD NINE OF SPADES	[1278 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A9, 0x0061 };
    uint32_t const ces[9] = { 0x1278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_230)
{
    // 1F0A9 0041;	
    // (üÇ©) PLAYING CARD NINE OF SPADES	[1278 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0A9, 0x0041 };
    uint32_t const ces[9] = { 0x1278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_231)
{
    // 1F0A9 0062;	
    // (üÇ©) PLAYING CARD NINE OF SPADES	[1278 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A9, 0x0062 };
    uint32_t const ces[9] = { 0x1278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_232)
{
    // 1F0AA 0021;	
    // (üÇ™) PLAYING CARD TEN OF SPADES	[1279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AA, 0x0021 };
    uint32_t const ces[9] = { 0x1279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_233)
{
    // 1F0AA 003F;	
    // (üÇ™) PLAYING CARD TEN OF SPADES	[1279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AA, 0x003F };
    uint32_t const ces[9] = { 0x1279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_234)
{
    // 1F0AA 0061;	
    // (üÇ™) PLAYING CARD TEN OF SPADES	[1279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AA, 0x0061 };
    uint32_t const ces[9] = { 0x1279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_235)
{
    // 1F0AA 0041;	
    // (üÇ™) PLAYING CARD TEN OF SPADES	[1279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0AA, 0x0041 };
    uint32_t const ces[9] = { 0x1279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_236)
{
    // 1F0AA 0062;	
    // (üÇ™) PLAYING CARD TEN OF SPADES	[1279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AA, 0x0062 };
    uint32_t const ces[9] = { 0x1279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_237)
{
    // 1F0AB 0021;	
    // (üÇ´) PLAYING CARD JACK OF SPADES	[127A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AB, 0x0021 };
    uint32_t const ces[9] = { 0x127A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_238)
{
    // 1F0AB 003F;	
    // (üÇ´) PLAYING CARD JACK OF SPADES	[127A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AB, 0x003F };
    uint32_t const ces[9] = { 0x127A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_239)
{
    // 1F0AB 0061;	
    // (üÇ´) PLAYING CARD JACK OF SPADES	[127A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AB, 0x0061 };
    uint32_t const ces[9] = { 0x127A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_240)
{
    // 1F0AB 0041;	
    // (üÇ´) PLAYING CARD JACK OF SPADES	[127A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0AB, 0x0041 };
    uint32_t const ces[9] = { 0x127A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_241)
{
    // 1F0AB 0062;	
    // (üÇ´) PLAYING CARD JACK OF SPADES	[127A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AB, 0x0062 };
    uint32_t const ces[9] = { 0x127A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_242)
{
    // 1F0AC 0021;	
    // (üÇ¨) PLAYING CARD KNIGHT OF SPADES	[127B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AC, 0x0021 };
    uint32_t const ces[9] = { 0x127B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_243)
{
    // 1F0AC 003F;	
    // (üÇ¨) PLAYING CARD KNIGHT OF SPADES	[127B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AC, 0x003F };
    uint32_t const ces[9] = { 0x127B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_244)
{
    // 1F0AC 0061;	
    // (üÇ¨) PLAYING CARD KNIGHT OF SPADES	[127B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AC, 0x0061 };
    uint32_t const ces[9] = { 0x127B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_245)
{
    // 1F0AC 0041;	
    // (üÇ¨) PLAYING CARD KNIGHT OF SPADES	[127B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0AC, 0x0041 };
    uint32_t const ces[9] = { 0x127B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_246)
{
    // 1F0AC 0062;	
    // (üÇ¨) PLAYING CARD KNIGHT OF SPADES	[127B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AC, 0x0062 };
    uint32_t const ces[9] = { 0x127B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_247)
{
    // 1F0AD 0021;	
    // (üÇ≠) PLAYING CARD QUEEN OF SPADES	[127C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AD, 0x0021 };
    uint32_t const ces[9] = { 0x127C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_248)
{
    // 1F0AD 003F;	
    // (üÇ≠) PLAYING CARD QUEEN OF SPADES	[127C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AD, 0x003F };
    uint32_t const ces[9] = { 0x127C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_249)
{
    // 1F0AD 0061;	
    // (üÇ≠) PLAYING CARD QUEEN OF SPADES	[127C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AD, 0x0061 };
    uint32_t const ces[9] = { 0x127C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_250)
{
    // 1F0AD 0041;	
    // (üÇ≠) PLAYING CARD QUEEN OF SPADES	[127C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0AD, 0x0041 };
    uint32_t const ces[9] = { 0x127C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_251)
{
    // 1F0AD 0062;	
    // (üÇ≠) PLAYING CARD QUEEN OF SPADES	[127C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AD, 0x0062 };
    uint32_t const ces[9] = { 0x127C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_252)
{
    // 1F0AE 0021;	
    // (üÇÆ) PLAYING CARD KING OF SPADES	[127D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AE, 0x0021 };
    uint32_t const ces[9] = { 0x127D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_253)
{
    // 1F0AE 003F;	
    // (üÇÆ) PLAYING CARD KING OF SPADES	[127D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AE, 0x003F };
    uint32_t const ces[9] = { 0x127D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_254)
{
    // 1F0AE 0061;	
    // (üÇÆ) PLAYING CARD KING OF SPADES	[127D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AE, 0x0061 };
    uint32_t const ces[9] = { 0x127D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_255)
{
    // 1F0AE 0041;	
    // (üÇÆ) PLAYING CARD KING OF SPADES	[127D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0AE, 0x0041 };
    uint32_t const ces[9] = { 0x127D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_256)
{
    // 1F0AE 0062;	
    // (üÇÆ) PLAYING CARD KING OF SPADES	[127D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0AE, 0x0062 };
    uint32_t const ces[9] = { 0x127D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_257)
{
    // 1F0B1 0021;	
    // (üÇ±) PLAYING CARD ACE OF HEARTS	[127E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B1, 0x0021 };
    uint32_t const ces[9] = { 0x127E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_258)
{
    // 1F0B1 003F;	
    // (üÇ±) PLAYING CARD ACE OF HEARTS	[127E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B1, 0x003F };
    uint32_t const ces[9] = { 0x127E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_259)
{
    // 1F0B1 0061;	
    // (üÇ±) PLAYING CARD ACE OF HEARTS	[127E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B1, 0x0061 };
    uint32_t const ces[9] = { 0x127E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_260)
{
    // 1F0B1 0041;	
    // (üÇ±) PLAYING CARD ACE OF HEARTS	[127E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B1, 0x0041 };
    uint32_t const ces[9] = { 0x127E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_261)
{
    // 1F0B1 0062;	
    // (üÇ±) PLAYING CARD ACE OF HEARTS	[127E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B1, 0x0062 };
    uint32_t const ces[9] = { 0x127E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_262)
{
    // 1F0B2 0021;	
    // (üÇ≤) PLAYING CARD TWO OF HEARTS	[127F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B2, 0x0021 };
    uint32_t const ces[9] = { 0x127F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_263)
{
    // 1F0B2 003F;	
    // (üÇ≤) PLAYING CARD TWO OF HEARTS	[127F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B2, 0x003F };
    uint32_t const ces[9] = { 0x127F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_264)
{
    // 1F0B2 0061;	
    // (üÇ≤) PLAYING CARD TWO OF HEARTS	[127F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B2, 0x0061 };
    uint32_t const ces[9] = { 0x127F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_265)
{
    // 1F0B2 0041;	
    // (üÇ≤) PLAYING CARD TWO OF HEARTS	[127F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B2, 0x0041 };
    uint32_t const ces[9] = { 0x127F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_266)
{
    // 1F0B2 0062;	
    // (üÇ≤) PLAYING CARD TWO OF HEARTS	[127F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B2, 0x0062 };
    uint32_t const ces[9] = { 0x127F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_267)
{
    // 1F0B3 0021;	
    // (üÇ≥) PLAYING CARD THREE OF HEARTS	[1280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B3, 0x0021 };
    uint32_t const ces[9] = { 0x1280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_268)
{
    // 1F0B3 003F;	
    // (üÇ≥) PLAYING CARD THREE OF HEARTS	[1280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B3, 0x003F };
    uint32_t const ces[9] = { 0x1280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_269)
{
    // 1F0B3 0061;	
    // (üÇ≥) PLAYING CARD THREE OF HEARTS	[1280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B3, 0x0061 };
    uint32_t const ces[9] = { 0x1280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_270)
{
    // 1F0B3 0041;	
    // (üÇ≥) PLAYING CARD THREE OF HEARTS	[1280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B3, 0x0041 };
    uint32_t const ces[9] = { 0x1280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_271)
{
    // 1F0B3 0062;	
    // (üÇ≥) PLAYING CARD THREE OF HEARTS	[1280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B3, 0x0062 };
    uint32_t const ces[9] = { 0x1280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_272)
{
    // 1F0B4 0021;	
    // (üÇ¥) PLAYING CARD FOUR OF HEARTS	[1281 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B4, 0x0021 };
    uint32_t const ces[9] = { 0x1281, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_273)
{
    // 1F0B4 003F;	
    // (üÇ¥) PLAYING CARD FOUR OF HEARTS	[1281 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B4, 0x003F };
    uint32_t const ces[9] = { 0x1281, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_274)
{
    // 1F0B4 0061;	
    // (üÇ¥) PLAYING CARD FOUR OF HEARTS	[1281 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B4, 0x0061 };
    uint32_t const ces[9] = { 0x1281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_275)
{
    // 1F0B4 0041;	
    // (üÇ¥) PLAYING CARD FOUR OF HEARTS	[1281 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B4, 0x0041 };
    uint32_t const ces[9] = { 0x1281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_276)
{
    // 1F0B4 0062;	
    // (üÇ¥) PLAYING CARD FOUR OF HEARTS	[1281 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B4, 0x0062 };
    uint32_t const ces[9] = { 0x1281, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_277)
{
    // 1F0B5 0021;	
    // (üÇµ) PLAYING CARD FIVE OF HEARTS	[1282 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B5, 0x0021 };
    uint32_t const ces[9] = { 0x1282, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_278)
{
    // 1F0B5 003F;	
    // (üÇµ) PLAYING CARD FIVE OF HEARTS	[1282 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B5, 0x003F };
    uint32_t const ces[9] = { 0x1282, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_279)
{
    // 1F0B5 0061;	
    // (üÇµ) PLAYING CARD FIVE OF HEARTS	[1282 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B5, 0x0061 };
    uint32_t const ces[9] = { 0x1282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_280)
{
    // 1F0B5 0041;	
    // (üÇµ) PLAYING CARD FIVE OF HEARTS	[1282 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B5, 0x0041 };
    uint32_t const ces[9] = { 0x1282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_281)
{
    // 1F0B5 0062;	
    // (üÇµ) PLAYING CARD FIVE OF HEARTS	[1282 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B5, 0x0062 };
    uint32_t const ces[9] = { 0x1282, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_282)
{
    // 1F0B6 0021;	
    // (üÇ∂) PLAYING CARD SIX OF HEARTS	[1283 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B6, 0x0021 };
    uint32_t const ces[9] = { 0x1283, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_283)
{
    // 1F0B6 003F;	
    // (üÇ∂) PLAYING CARD SIX OF HEARTS	[1283 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B6, 0x003F };
    uint32_t const ces[9] = { 0x1283, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_284)
{
    // 1F0B6 0061;	
    // (üÇ∂) PLAYING CARD SIX OF HEARTS	[1283 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B6, 0x0061 };
    uint32_t const ces[9] = { 0x1283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_285)
{
    // 1F0B6 0041;	
    // (üÇ∂) PLAYING CARD SIX OF HEARTS	[1283 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B6, 0x0041 };
    uint32_t const ces[9] = { 0x1283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_286)
{
    // 1F0B6 0062;	
    // (üÇ∂) PLAYING CARD SIX OF HEARTS	[1283 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B6, 0x0062 };
    uint32_t const ces[9] = { 0x1283, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_287)
{
    // 1F0B7 0021;	
    // (üÇ∑) PLAYING CARD SEVEN OF HEARTS	[1284 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B7, 0x0021 };
    uint32_t const ces[9] = { 0x1284, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_288)
{
    // 1F0B7 003F;	
    // (üÇ∑) PLAYING CARD SEVEN OF HEARTS	[1284 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B7, 0x003F };
    uint32_t const ces[9] = { 0x1284, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_289)
{
    // 1F0B7 0061;	
    // (üÇ∑) PLAYING CARD SEVEN OF HEARTS	[1284 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B7, 0x0061 };
    uint32_t const ces[9] = { 0x1284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_290)
{
    // 1F0B7 0041;	
    // (üÇ∑) PLAYING CARD SEVEN OF HEARTS	[1284 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B7, 0x0041 };
    uint32_t const ces[9] = { 0x1284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_291)
{
    // 1F0B7 0062;	
    // (üÇ∑) PLAYING CARD SEVEN OF HEARTS	[1284 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B7, 0x0062 };
    uint32_t const ces[9] = { 0x1284, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_292)
{
    // 1F0B8 0021;	
    // (üÇ∏) PLAYING CARD EIGHT OF HEARTS	[1285 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B8, 0x0021 };
    uint32_t const ces[9] = { 0x1285, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_293)
{
    // 1F0B8 003F;	
    // (üÇ∏) PLAYING CARD EIGHT OF HEARTS	[1285 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B8, 0x003F };
    uint32_t const ces[9] = { 0x1285, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_294)
{
    // 1F0B8 0061;	
    // (üÇ∏) PLAYING CARD EIGHT OF HEARTS	[1285 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B8, 0x0061 };
    uint32_t const ces[9] = { 0x1285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_295)
{
    // 1F0B8 0041;	
    // (üÇ∏) PLAYING CARD EIGHT OF HEARTS	[1285 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B8, 0x0041 };
    uint32_t const ces[9] = { 0x1285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_296)
{
    // 1F0B8 0062;	
    // (üÇ∏) PLAYING CARD EIGHT OF HEARTS	[1285 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B8, 0x0062 };
    uint32_t const ces[9] = { 0x1285, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_297)
{
    // 1F0B9 0021;	
    // (üÇπ) PLAYING CARD NINE OF HEARTS	[1286 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B9, 0x0021 };
    uint32_t const ces[9] = { 0x1286, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_298)
{
    // 1F0B9 003F;	
    // (üÇπ) PLAYING CARD NINE OF HEARTS	[1286 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B9, 0x003F };
    uint32_t const ces[9] = { 0x1286, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_299)
{
    // 1F0B9 0061;	
    // (üÇπ) PLAYING CARD NINE OF HEARTS	[1286 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B9, 0x0061 };
    uint32_t const ces[9] = { 0x1286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_300)
{
    // 1F0B9 0041;	
    // (üÇπ) PLAYING CARD NINE OF HEARTS	[1286 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0B9, 0x0041 };
    uint32_t const ces[9] = { 0x1286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_301)
{
    // 1F0B9 0062;	
    // (üÇπ) PLAYING CARD NINE OF HEARTS	[1286 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B9, 0x0062 };
    uint32_t const ces[9] = { 0x1286, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_302)
{
    // 1F0BA 0021;	
    // (üÇ∫) PLAYING CARD TEN OF HEARTS	[1287 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BA, 0x0021 };
    uint32_t const ces[9] = { 0x1287, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_303)
{
    // 1F0BA 003F;	
    // (üÇ∫) PLAYING CARD TEN OF HEARTS	[1287 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BA, 0x003F };
    uint32_t const ces[9] = { 0x1287, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_304)
{
    // 1F0BA 0061;	
    // (üÇ∫) PLAYING CARD TEN OF HEARTS	[1287 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BA, 0x0061 };
    uint32_t const ces[9] = { 0x1287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_305)
{
    // 1F0BA 0041;	
    // (üÇ∫) PLAYING CARD TEN OF HEARTS	[1287 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BA, 0x0041 };
    uint32_t const ces[9] = { 0x1287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_306)
{
    // 1F0BA 0062;	
    // (üÇ∫) PLAYING CARD TEN OF HEARTS	[1287 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BA, 0x0062 };
    uint32_t const ces[9] = { 0x1287, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_307)
{
    // 1F0BB 0021;	
    // (üÇª) PLAYING CARD JACK OF HEARTS	[1288 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BB, 0x0021 };
    uint32_t const ces[9] = { 0x1288, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_308)
{
    // 1F0BB 003F;	
    // (üÇª) PLAYING CARD JACK OF HEARTS	[1288 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BB, 0x003F };
    uint32_t const ces[9] = { 0x1288, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_309)
{
    // 1F0BB 0061;	
    // (üÇª) PLAYING CARD JACK OF HEARTS	[1288 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BB, 0x0061 };
    uint32_t const ces[9] = { 0x1288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_310)
{
    // 1F0BB 0041;	
    // (üÇª) PLAYING CARD JACK OF HEARTS	[1288 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BB, 0x0041 };
    uint32_t const ces[9] = { 0x1288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_311)
{
    // 1F0BB 0062;	
    // (üÇª) PLAYING CARD JACK OF HEARTS	[1288 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BB, 0x0062 };
    uint32_t const ces[9] = { 0x1288, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_312)
{
    // 1F0BC 0021;	
    // (üÇº) PLAYING CARD KNIGHT OF HEARTS	[1289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BC, 0x0021 };
    uint32_t const ces[9] = { 0x1289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_313)
{
    // 1F0BC 003F;	
    // (üÇº) PLAYING CARD KNIGHT OF HEARTS	[1289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BC, 0x003F };
    uint32_t const ces[9] = { 0x1289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_314)
{
    // 1F0BC 0061;	
    // (üÇº) PLAYING CARD KNIGHT OF HEARTS	[1289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BC, 0x0061 };
    uint32_t const ces[9] = { 0x1289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_315)
{
    // 1F0BC 0041;	
    // (üÇº) PLAYING CARD KNIGHT OF HEARTS	[1289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BC, 0x0041 };
    uint32_t const ces[9] = { 0x1289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_316)
{
    // 1F0BC 0062;	
    // (üÇº) PLAYING CARD KNIGHT OF HEARTS	[1289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BC, 0x0062 };
    uint32_t const ces[9] = { 0x1289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_317)
{
    // 1F0BD 0021;	
    // (üÇΩ) PLAYING CARD QUEEN OF HEARTS	[128A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BD, 0x0021 };
    uint32_t const ces[9] = { 0x128A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_318)
{
    // 1F0BD 003F;	
    // (üÇΩ) PLAYING CARD QUEEN OF HEARTS	[128A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BD, 0x003F };
    uint32_t const ces[9] = { 0x128A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_319)
{
    // 1F0BD 0061;	
    // (üÇΩ) PLAYING CARD QUEEN OF HEARTS	[128A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BD, 0x0061 };
    uint32_t const ces[9] = { 0x128A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_320)
{
    // 1F0BD 0041;	
    // (üÇΩ) PLAYING CARD QUEEN OF HEARTS	[128A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BD, 0x0041 };
    uint32_t const ces[9] = { 0x128A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_321)
{
    // 1F0BD 0062;	
    // (üÇΩ) PLAYING CARD QUEEN OF HEARTS	[128A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BD, 0x0062 };
    uint32_t const ces[9] = { 0x128A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_322)
{
    // 1F0BE 0021;	
    // (üÇæ) PLAYING CARD KING OF HEARTS	[128B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BE, 0x0021 };
    uint32_t const ces[9] = { 0x128B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_323)
{
    // 1F0BE 003F;	
    // (üÇæ) PLAYING CARD KING OF HEARTS	[128B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BE, 0x003F };
    uint32_t const ces[9] = { 0x128B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_324)
{
    // 1F0BE 0061;	
    // (üÇæ) PLAYING CARD KING OF HEARTS	[128B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BE, 0x0061 };
    uint32_t const ces[9] = { 0x128B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_325)
{
    // 1F0BE 0041;	
    // (üÇæ) PLAYING CARD KING OF HEARTS	[128B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BE, 0x0041 };
    uint32_t const ces[9] = { 0x128B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_326)
{
    // 1F0BE 0062;	
    // (üÇæ) PLAYING CARD KING OF HEARTS	[128B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BE, 0x0062 };
    uint32_t const ces[9] = { 0x128B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_327)
{
    // 1F0BF 0021;	
    // (üÇø) PLAYING CARD RED JOKER	[128C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BF, 0x0021 };
    uint32_t const ces[9] = { 0x128C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_328)
{
    // 1F0BF 003F;	
    // (üÇø) PLAYING CARD RED JOKER	[128C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BF, 0x003F };
    uint32_t const ces[9] = { 0x128C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_329)
{
    // 1F0BF 0061;	
    // (üÇø) PLAYING CARD RED JOKER	[128C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BF, 0x0061 };
    uint32_t const ces[9] = { 0x128C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_330)
{
    // 1F0BF 0041;	
    // (üÇø) PLAYING CARD RED JOKER	[128C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0BF, 0x0041 };
    uint32_t const ces[9] = { 0x128C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_331)
{
    // 1F0BF 0062;	
    // (üÇø) PLAYING CARD RED JOKER	[128C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0BF, 0x0062 };
    uint32_t const ces[9] = { 0x128C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_332)
{
    // 1F0C1 0021;	
    // (üÉÅ) PLAYING CARD ACE OF DIAMONDS	[128D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C1, 0x0021 };
    uint32_t const ces[9] = { 0x128D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_333)
{
    // 1F0C1 003F;	
    // (üÉÅ) PLAYING CARD ACE OF DIAMONDS	[128D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C1, 0x003F };
    uint32_t const ces[9] = { 0x128D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_334)
{
    // 1F0C1 0061;	
    // (üÉÅ) PLAYING CARD ACE OF DIAMONDS	[128D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C1, 0x0061 };
    uint32_t const ces[9] = { 0x128D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_335)
{
    // 1F0C1 0041;	
    // (üÉÅ) PLAYING CARD ACE OF DIAMONDS	[128D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C1, 0x0041 };
    uint32_t const ces[9] = { 0x128D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_336)
{
    // 1F0C1 0062;	
    // (üÉÅ) PLAYING CARD ACE OF DIAMONDS	[128D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C1, 0x0062 };
    uint32_t const ces[9] = { 0x128D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_337)
{
    // 1F0C2 0021;	
    // (üÉÇ) PLAYING CARD TWO OF DIAMONDS	[128E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C2, 0x0021 };
    uint32_t const ces[9] = { 0x128E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_338)
{
    // 1F0C2 003F;	
    // (üÉÇ) PLAYING CARD TWO OF DIAMONDS	[128E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C2, 0x003F };
    uint32_t const ces[9] = { 0x128E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_339)
{
    // 1F0C2 0061;	
    // (üÉÇ) PLAYING CARD TWO OF DIAMONDS	[128E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C2, 0x0061 };
    uint32_t const ces[9] = { 0x128E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_340)
{
    // 1F0C2 0041;	
    // (üÉÇ) PLAYING CARD TWO OF DIAMONDS	[128E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C2, 0x0041 };
    uint32_t const ces[9] = { 0x128E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_341)
{
    // 1F0C2 0062;	
    // (üÉÇ) PLAYING CARD TWO OF DIAMONDS	[128E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C2, 0x0062 };
    uint32_t const ces[9] = { 0x128E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_342)
{
    // 1F0C3 0021;	
    // (üÉÉ) PLAYING CARD THREE OF DIAMONDS	[128F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C3, 0x0021 };
    uint32_t const ces[9] = { 0x128F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_343)
{
    // 1F0C3 003F;	
    // (üÉÉ) PLAYING CARD THREE OF DIAMONDS	[128F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C3, 0x003F };
    uint32_t const ces[9] = { 0x128F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_344)
{
    // 1F0C3 0061;	
    // (üÉÉ) PLAYING CARD THREE OF DIAMONDS	[128F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C3, 0x0061 };
    uint32_t const ces[9] = { 0x128F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_345)
{
    // 1F0C3 0041;	
    // (üÉÉ) PLAYING CARD THREE OF DIAMONDS	[128F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C3, 0x0041 };
    uint32_t const ces[9] = { 0x128F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_346)
{
    // 1F0C3 0062;	
    // (üÉÉ) PLAYING CARD THREE OF DIAMONDS	[128F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C3, 0x0062 };
    uint32_t const ces[9] = { 0x128F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_347)
{
    // 1F0C4 0021;	
    // (üÉÑ) PLAYING CARD FOUR OF DIAMONDS	[1290 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C4, 0x0021 };
    uint32_t const ces[9] = { 0x1290, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_348)
{
    // 1F0C4 003F;	
    // (üÉÑ) PLAYING CARD FOUR OF DIAMONDS	[1290 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C4, 0x003F };
    uint32_t const ces[9] = { 0x1290, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_349)
{
    // 1F0C4 0061;	
    // (üÉÑ) PLAYING CARD FOUR OF DIAMONDS	[1290 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C4, 0x0061 };
    uint32_t const ces[9] = { 0x1290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_350)
{
    // 1F0C4 0041;	
    // (üÉÑ) PLAYING CARD FOUR OF DIAMONDS	[1290 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C4, 0x0041 };
    uint32_t const ces[9] = { 0x1290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_351)
{
    // 1F0C4 0062;	
    // (üÉÑ) PLAYING CARD FOUR OF DIAMONDS	[1290 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C4, 0x0062 };
    uint32_t const ces[9] = { 0x1290, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_352)
{
    // 1F0C5 0021;	
    // (üÉÖ) PLAYING CARD FIVE OF DIAMONDS	[1291 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C5, 0x0021 };
    uint32_t const ces[9] = { 0x1291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_353)
{
    // 1F0C5 003F;	
    // (üÉÖ) PLAYING CARD FIVE OF DIAMONDS	[1291 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C5, 0x003F };
    uint32_t const ces[9] = { 0x1291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_354)
{
    // 1F0C5 0061;	
    // (üÉÖ) PLAYING CARD FIVE OF DIAMONDS	[1291 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C5, 0x0061 };
    uint32_t const ces[9] = { 0x1291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_355)
{
    // 1F0C5 0041;	
    // (üÉÖ) PLAYING CARD FIVE OF DIAMONDS	[1291 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C5, 0x0041 };
    uint32_t const ces[9] = { 0x1291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_356)
{
    // 1F0C5 0062;	
    // (üÉÖ) PLAYING CARD FIVE OF DIAMONDS	[1291 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C5, 0x0062 };
    uint32_t const ces[9] = { 0x1291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_357)
{
    // 1F0C6 0021;	
    // (üÉÜ) PLAYING CARD SIX OF DIAMONDS	[1292 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C6, 0x0021 };
    uint32_t const ces[9] = { 0x1292, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_358)
{
    // 1F0C6 003F;	
    // (üÉÜ) PLAYING CARD SIX OF DIAMONDS	[1292 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C6, 0x003F };
    uint32_t const ces[9] = { 0x1292, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_359)
{
    // 1F0C6 0061;	
    // (üÉÜ) PLAYING CARD SIX OF DIAMONDS	[1292 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C6, 0x0061 };
    uint32_t const ces[9] = { 0x1292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_360)
{
    // 1F0C6 0041;	
    // (üÉÜ) PLAYING CARD SIX OF DIAMONDS	[1292 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C6, 0x0041 };
    uint32_t const ces[9] = { 0x1292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_361)
{
    // 1F0C6 0062;	
    // (üÉÜ) PLAYING CARD SIX OF DIAMONDS	[1292 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C6, 0x0062 };
    uint32_t const ces[9] = { 0x1292, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_362)
{
    // 1F0C7 0021;	
    // (üÉá) PLAYING CARD SEVEN OF DIAMONDS	[1293 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C7, 0x0021 };
    uint32_t const ces[9] = { 0x1293, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_363)
{
    // 1F0C7 003F;	
    // (üÉá) PLAYING CARD SEVEN OF DIAMONDS	[1293 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C7, 0x003F };
    uint32_t const ces[9] = { 0x1293, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_364)
{
    // 1F0C7 0061;	
    // (üÉá) PLAYING CARD SEVEN OF DIAMONDS	[1293 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C7, 0x0061 };
    uint32_t const ces[9] = { 0x1293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_365)
{
    // 1F0C7 0041;	
    // (üÉá) PLAYING CARD SEVEN OF DIAMONDS	[1293 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C7, 0x0041 };
    uint32_t const ces[9] = { 0x1293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_366)
{
    // 1F0C7 0062;	
    // (üÉá) PLAYING CARD SEVEN OF DIAMONDS	[1293 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C7, 0x0062 };
    uint32_t const ces[9] = { 0x1293, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_367)
{
    // 1F0C8 0021;	
    // (üÉà) PLAYING CARD EIGHT OF DIAMONDS	[1294 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C8, 0x0021 };
    uint32_t const ces[9] = { 0x1294, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_368)
{
    // 1F0C8 003F;	
    // (üÉà) PLAYING CARD EIGHT OF DIAMONDS	[1294 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C8, 0x003F };
    uint32_t const ces[9] = { 0x1294, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_369)
{
    // 1F0C8 0061;	
    // (üÉà) PLAYING CARD EIGHT OF DIAMONDS	[1294 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C8, 0x0061 };
    uint32_t const ces[9] = { 0x1294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_370)
{
    // 1F0C8 0041;	
    // (üÉà) PLAYING CARD EIGHT OF DIAMONDS	[1294 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C8, 0x0041 };
    uint32_t const ces[9] = { 0x1294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_371)
{
    // 1F0C8 0062;	
    // (üÉà) PLAYING CARD EIGHT OF DIAMONDS	[1294 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C8, 0x0062 };
    uint32_t const ces[9] = { 0x1294, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_372)
{
    // 1F0C9 0021;	
    // (üÉâ) PLAYING CARD NINE OF DIAMONDS	[1295 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C9, 0x0021 };
    uint32_t const ces[9] = { 0x1295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_373)
{
    // 1F0C9 003F;	
    // (üÉâ) PLAYING CARD NINE OF DIAMONDS	[1295 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C9, 0x003F };
    uint32_t const ces[9] = { 0x1295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_374)
{
    // 1F0C9 0061;	
    // (üÉâ) PLAYING CARD NINE OF DIAMONDS	[1295 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C9, 0x0061 };
    uint32_t const ces[9] = { 0x1295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_375)
{
    // 1F0C9 0041;	
    // (üÉâ) PLAYING CARD NINE OF DIAMONDS	[1295 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0C9, 0x0041 };
    uint32_t const ces[9] = { 0x1295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_376)
{
    // 1F0C9 0062;	
    // (üÉâ) PLAYING CARD NINE OF DIAMONDS	[1295 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C9, 0x0062 };
    uint32_t const ces[9] = { 0x1295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_377)
{
    // 1F0CA 0021;	
    // (üÉä) PLAYING CARD TEN OF DIAMONDS	[1296 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CA, 0x0021 };
    uint32_t const ces[9] = { 0x1296, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_378)
{
    // 1F0CA 003F;	
    // (üÉä) PLAYING CARD TEN OF DIAMONDS	[1296 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CA, 0x003F };
    uint32_t const ces[9] = { 0x1296, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_379)
{
    // 1F0CA 0061;	
    // (üÉä) PLAYING CARD TEN OF DIAMONDS	[1296 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CA, 0x0061 };
    uint32_t const ces[9] = { 0x1296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_380)
{
    // 1F0CA 0041;	
    // (üÉä) PLAYING CARD TEN OF DIAMONDS	[1296 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CA, 0x0041 };
    uint32_t const ces[9] = { 0x1296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_381)
{
    // 1F0CA 0062;	
    // (üÉä) PLAYING CARD TEN OF DIAMONDS	[1296 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CA, 0x0062 };
    uint32_t const ces[9] = { 0x1296, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_382)
{
    // 1F0CB 0021;	
    // (üÉã) PLAYING CARD JACK OF DIAMONDS	[1297 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CB, 0x0021 };
    uint32_t const ces[9] = { 0x1297, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_383)
{
    // 1F0CB 003F;	
    // (üÉã) PLAYING CARD JACK OF DIAMONDS	[1297 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CB, 0x003F };
    uint32_t const ces[9] = { 0x1297, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_384)
{
    // 1F0CB 0061;	
    // (üÉã) PLAYING CARD JACK OF DIAMONDS	[1297 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CB, 0x0061 };
    uint32_t const ces[9] = { 0x1297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_385)
{
    // 1F0CB 0041;	
    // (üÉã) PLAYING CARD JACK OF DIAMONDS	[1297 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CB, 0x0041 };
    uint32_t const ces[9] = { 0x1297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_386)
{
    // 1F0CB 0062;	
    // (üÉã) PLAYING CARD JACK OF DIAMONDS	[1297 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CB, 0x0062 };
    uint32_t const ces[9] = { 0x1297, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_387)
{
    // 1F0CC 0021;	
    // (üÉå) PLAYING CARD KNIGHT OF DIAMONDS	[1298 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CC, 0x0021 };
    uint32_t const ces[9] = { 0x1298, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_388)
{
    // 1F0CC 003F;	
    // (üÉå) PLAYING CARD KNIGHT OF DIAMONDS	[1298 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CC, 0x003F };
    uint32_t const ces[9] = { 0x1298, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_389)
{
    // 1F0CC 0061;	
    // (üÉå) PLAYING CARD KNIGHT OF DIAMONDS	[1298 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CC, 0x0061 };
    uint32_t const ces[9] = { 0x1298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_390)
{
    // 1F0CC 0041;	
    // (üÉå) PLAYING CARD KNIGHT OF DIAMONDS	[1298 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CC, 0x0041 };
    uint32_t const ces[9] = { 0x1298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_391)
{
    // 1F0CC 0062;	
    // (üÉå) PLAYING CARD KNIGHT OF DIAMONDS	[1298 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CC, 0x0062 };
    uint32_t const ces[9] = { 0x1298, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_392)
{
    // 1F0CD 0021;	
    // (üÉç) PLAYING CARD QUEEN OF DIAMONDS	[1299 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CD, 0x0021 };
    uint32_t const ces[9] = { 0x1299, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_393)
{
    // 1F0CD 003F;	
    // (üÉç) PLAYING CARD QUEEN OF DIAMONDS	[1299 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CD, 0x003F };
    uint32_t const ces[9] = { 0x1299, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_394)
{
    // 1F0CD 0061;	
    // (üÉç) PLAYING CARD QUEEN OF DIAMONDS	[1299 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CD, 0x0061 };
    uint32_t const ces[9] = { 0x1299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_395)
{
    // 1F0CD 0041;	
    // (üÉç) PLAYING CARD QUEEN OF DIAMONDS	[1299 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CD, 0x0041 };
    uint32_t const ces[9] = { 0x1299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_396)
{
    // 1F0CD 0062;	
    // (üÉç) PLAYING CARD QUEEN OF DIAMONDS	[1299 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CD, 0x0062 };
    uint32_t const ces[9] = { 0x1299, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_397)
{
    // 1F0CE 0021;	
    // (üÉé) PLAYING CARD KING OF DIAMONDS	[129A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CE, 0x0021 };
    uint32_t const ces[9] = { 0x129A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_398)
{
    // 1F0CE 003F;	
    // (üÉé) PLAYING CARD KING OF DIAMONDS	[129A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CE, 0x003F };
    uint32_t const ces[9] = { 0x129A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_399)
{
    // 1F0CE 0061;	
    // (üÉé) PLAYING CARD KING OF DIAMONDS	[129A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CE, 0x0061 };
    uint32_t const ces[9] = { 0x129A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_400)
{
    // 1F0CE 0041;	
    // (üÉé) PLAYING CARD KING OF DIAMONDS	[129A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CE, 0x0041 };
    uint32_t const ces[9] = { 0x129A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_401)
{
    // 1F0CE 0062;	
    // (üÉé) PLAYING CARD KING OF DIAMONDS	[129A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CE, 0x0062 };
    uint32_t const ces[9] = { 0x129A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_402)
{
    // 1F0CF 0021;	
    // (üÉè) PLAYING CARD BLACK JOKER	[129B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CF, 0x0021 };
    uint32_t const ces[9] = { 0x129B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_403)
{
    // 1F0CF 003F;	
    // (üÉè) PLAYING CARD BLACK JOKER	[129B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CF, 0x003F };
    uint32_t const ces[9] = { 0x129B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_404)
{
    // 1F0CF 0061;	
    // (üÉè) PLAYING CARD BLACK JOKER	[129B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CF, 0x0061 };
    uint32_t const ces[9] = { 0x129B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_405)
{
    // 1F0CF 0041;	
    // (üÉè) PLAYING CARD BLACK JOKER	[129B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0CF, 0x0041 };
    uint32_t const ces[9] = { 0x129B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_406)
{
    // 1F0CF 0062;	
    // (üÉè) PLAYING CARD BLACK JOKER	[129B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0CF, 0x0062 };
    uint32_t const ces[9] = { 0x129B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_407)
{
    // 1F0D1 0021;	
    // (üÉë) PLAYING CARD ACE OF CLUBS	[129C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D1, 0x0021 };
    uint32_t const ces[9] = { 0x129C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_408)
{
    // 1F0D1 003F;	
    // (üÉë) PLAYING CARD ACE OF CLUBS	[129C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D1, 0x003F };
    uint32_t const ces[9] = { 0x129C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_409)
{
    // 1F0D1 0061;	
    // (üÉë) PLAYING CARD ACE OF CLUBS	[129C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D1, 0x0061 };
    uint32_t const ces[9] = { 0x129C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_410)
{
    // 1F0D1 0041;	
    // (üÉë) PLAYING CARD ACE OF CLUBS	[129C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D1, 0x0041 };
    uint32_t const ces[9] = { 0x129C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_411)
{
    // 1F0D1 0062;	
    // (üÉë) PLAYING CARD ACE OF CLUBS	[129C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D1, 0x0062 };
    uint32_t const ces[9] = { 0x129C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_412)
{
    // 1F0D2 0021;	
    // (üÉí) PLAYING CARD TWO OF CLUBS	[129D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D2, 0x0021 };
    uint32_t const ces[9] = { 0x129D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_413)
{
    // 1F0D2 003F;	
    // (üÉí) PLAYING CARD TWO OF CLUBS	[129D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D2, 0x003F };
    uint32_t const ces[9] = { 0x129D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_414)
{
    // 1F0D2 0061;	
    // (üÉí) PLAYING CARD TWO OF CLUBS	[129D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D2, 0x0061 };
    uint32_t const ces[9] = { 0x129D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_415)
{
    // 1F0D2 0041;	
    // (üÉí) PLAYING CARD TWO OF CLUBS	[129D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D2, 0x0041 };
    uint32_t const ces[9] = { 0x129D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_416)
{
    // 1F0D2 0062;	
    // (üÉí) PLAYING CARD TWO OF CLUBS	[129D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D2, 0x0062 };
    uint32_t const ces[9] = { 0x129D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_417)
{
    // 1F0D3 0021;	
    // (üÉì) PLAYING CARD THREE OF CLUBS	[129E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D3, 0x0021 };
    uint32_t const ces[9] = { 0x129E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_418)
{
    // 1F0D3 003F;	
    // (üÉì) PLAYING CARD THREE OF CLUBS	[129E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D3, 0x003F };
    uint32_t const ces[9] = { 0x129E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_419)
{
    // 1F0D3 0061;	
    // (üÉì) PLAYING CARD THREE OF CLUBS	[129E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D3, 0x0061 };
    uint32_t const ces[9] = { 0x129E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_420)
{
    // 1F0D3 0041;	
    // (üÉì) PLAYING CARD THREE OF CLUBS	[129E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D3, 0x0041 };
    uint32_t const ces[9] = { 0x129E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_421)
{
    // 1F0D3 0062;	
    // (üÉì) PLAYING CARD THREE OF CLUBS	[129E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D3, 0x0062 };
    uint32_t const ces[9] = { 0x129E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_422)
{
    // 1F0D4 0021;	
    // (üÉî) PLAYING CARD FOUR OF CLUBS	[129F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D4, 0x0021 };
    uint32_t const ces[9] = { 0x129F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_423)
{
    // 1F0D4 003F;	
    // (üÉî) PLAYING CARD FOUR OF CLUBS	[129F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D4, 0x003F };
    uint32_t const ces[9] = { 0x129F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_424)
{
    // 1F0D4 0061;	
    // (üÉî) PLAYING CARD FOUR OF CLUBS	[129F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D4, 0x0061 };
    uint32_t const ces[9] = { 0x129F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_425)
{
    // 1F0D4 0041;	
    // (üÉî) PLAYING CARD FOUR OF CLUBS	[129F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D4, 0x0041 };
    uint32_t const ces[9] = { 0x129F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_426)
{
    // 1F0D4 0062;	
    // (üÉî) PLAYING CARD FOUR OF CLUBS	[129F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D4, 0x0062 };
    uint32_t const ces[9] = { 0x129F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_427)
{
    // 1F0D5 0021;	
    // (üÉï) PLAYING CARD FIVE OF CLUBS	[12A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D5, 0x0021 };
    uint32_t const ces[9] = { 0x12A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_428)
{
    // 1F0D5 003F;	
    // (üÉï) PLAYING CARD FIVE OF CLUBS	[12A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D5, 0x003F };
    uint32_t const ces[9] = { 0x12A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_429)
{
    // 1F0D5 0061;	
    // (üÉï) PLAYING CARD FIVE OF CLUBS	[12A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D5, 0x0061 };
    uint32_t const ces[9] = { 0x12A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_430)
{
    // 1F0D5 0041;	
    // (üÉï) PLAYING CARD FIVE OF CLUBS	[12A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D5, 0x0041 };
    uint32_t const ces[9] = { 0x12A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_431)
{
    // 1F0D5 0062;	
    // (üÉï) PLAYING CARD FIVE OF CLUBS	[12A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D5, 0x0062 };
    uint32_t const ces[9] = { 0x12A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_432)
{
    // 1F0D6 0021;	
    // (üÉñ) PLAYING CARD SIX OF CLUBS	[12A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D6, 0x0021 };
    uint32_t const ces[9] = { 0x12A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_433)
{
    // 1F0D6 003F;	
    // (üÉñ) PLAYING CARD SIX OF CLUBS	[12A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D6, 0x003F };
    uint32_t const ces[9] = { 0x12A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_434)
{
    // 1F0D6 0061;	
    // (üÉñ) PLAYING CARD SIX OF CLUBS	[12A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D6, 0x0061 };
    uint32_t const ces[9] = { 0x12A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_435)
{
    // 1F0D6 0041;	
    // (üÉñ) PLAYING CARD SIX OF CLUBS	[12A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D6, 0x0041 };
    uint32_t const ces[9] = { 0x12A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_436)
{
    // 1F0D6 0062;	
    // (üÉñ) PLAYING CARD SIX OF CLUBS	[12A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D6, 0x0062 };
    uint32_t const ces[9] = { 0x12A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_437)
{
    // 1F0D7 0021;	
    // (üÉó) PLAYING CARD SEVEN OF CLUBS	[12A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D7, 0x0021 };
    uint32_t const ces[9] = { 0x12A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_438)
{
    // 1F0D7 003F;	
    // (üÉó) PLAYING CARD SEVEN OF CLUBS	[12A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D7, 0x003F };
    uint32_t const ces[9] = { 0x12A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_439)
{
    // 1F0D7 0061;	
    // (üÉó) PLAYING CARD SEVEN OF CLUBS	[12A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D7, 0x0061 };
    uint32_t const ces[9] = { 0x12A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_440)
{
    // 1F0D7 0041;	
    // (üÉó) PLAYING CARD SEVEN OF CLUBS	[12A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D7, 0x0041 };
    uint32_t const ces[9] = { 0x12A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_441)
{
    // 1F0D7 0062;	
    // (üÉó) PLAYING CARD SEVEN OF CLUBS	[12A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D7, 0x0062 };
    uint32_t const ces[9] = { 0x12A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_442)
{
    // 1F0D8 0021;	
    // (üÉò) PLAYING CARD EIGHT OF CLUBS	[12A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D8, 0x0021 };
    uint32_t const ces[9] = { 0x12A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_443)
{
    // 1F0D8 003F;	
    // (üÉò) PLAYING CARD EIGHT OF CLUBS	[12A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D8, 0x003F };
    uint32_t const ces[9] = { 0x12A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_444)
{
    // 1F0D8 0061;	
    // (üÉò) PLAYING CARD EIGHT OF CLUBS	[12A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D8, 0x0061 };
    uint32_t const ces[9] = { 0x12A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_445)
{
    // 1F0D8 0041;	
    // (üÉò) PLAYING CARD EIGHT OF CLUBS	[12A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D8, 0x0041 };
    uint32_t const ces[9] = { 0x12A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_446)
{
    // 1F0D8 0062;	
    // (üÉò) PLAYING CARD EIGHT OF CLUBS	[12A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D8, 0x0062 };
    uint32_t const ces[9] = { 0x12A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_447)
{
    // 1F0D9 0021;	
    // (üÉô) PLAYING CARD NINE OF CLUBS	[12A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D9, 0x0021 };
    uint32_t const ces[9] = { 0x12A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_448)
{
    // 1F0D9 003F;	
    // (üÉô) PLAYING CARD NINE OF CLUBS	[12A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D9, 0x003F };
    uint32_t const ces[9] = { 0x12A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_449)
{
    // 1F0D9 0061;	
    // (üÉô) PLAYING CARD NINE OF CLUBS	[12A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D9, 0x0061 };
    uint32_t const ces[9] = { 0x12A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_450)
{
    // 1F0D9 0041;	
    // (üÉô) PLAYING CARD NINE OF CLUBS	[12A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0D9, 0x0041 };
    uint32_t const ces[9] = { 0x12A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_451)
{
    // 1F0D9 0062;	
    // (üÉô) PLAYING CARD NINE OF CLUBS	[12A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D9, 0x0062 };
    uint32_t const ces[9] = { 0x12A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_452)
{
    // 1F0DA 0021;	
    // (üÉö) PLAYING CARD TEN OF CLUBS	[12A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DA, 0x0021 };
    uint32_t const ces[9] = { 0x12A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_453)
{
    // 1F0DA 003F;	
    // (üÉö) PLAYING CARD TEN OF CLUBS	[12A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DA, 0x003F };
    uint32_t const ces[9] = { 0x12A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_454)
{
    // 1F0DA 0061;	
    // (üÉö) PLAYING CARD TEN OF CLUBS	[12A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DA, 0x0061 };
    uint32_t const ces[9] = { 0x12A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_455)
{
    // 1F0DA 0041;	
    // (üÉö) PLAYING CARD TEN OF CLUBS	[12A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DA, 0x0041 };
    uint32_t const ces[9] = { 0x12A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_456)
{
    // 1F0DA 0062;	
    // (üÉö) PLAYING CARD TEN OF CLUBS	[12A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DA, 0x0062 };
    uint32_t const ces[9] = { 0x12A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_457)
{
    // 1F0DB 0021;	
    // (üÉõ) PLAYING CARD JACK OF CLUBS	[12A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DB, 0x0021 };
    uint32_t const ces[9] = { 0x12A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_458)
{
    // 1F0DB 003F;	
    // (üÉõ) PLAYING CARD JACK OF CLUBS	[12A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DB, 0x003F };
    uint32_t const ces[9] = { 0x12A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_459)
{
    // 1F0DB 0061;	
    // (üÉõ) PLAYING CARD JACK OF CLUBS	[12A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DB, 0x0061 };
    uint32_t const ces[9] = { 0x12A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_460)
{
    // 1F0DB 0041;	
    // (üÉõ) PLAYING CARD JACK OF CLUBS	[12A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DB, 0x0041 };
    uint32_t const ces[9] = { 0x12A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_461)
{
    // 1F0DB 0062;	
    // (üÉõ) PLAYING CARD JACK OF CLUBS	[12A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DB, 0x0062 };
    uint32_t const ces[9] = { 0x12A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_462)
{
    // 1F0DC 0021;	
    // (üÉú) PLAYING CARD KNIGHT OF CLUBS	[12A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DC, 0x0021 };
    uint32_t const ces[9] = { 0x12A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_463)
{
    // 1F0DC 003F;	
    // (üÉú) PLAYING CARD KNIGHT OF CLUBS	[12A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DC, 0x003F };
    uint32_t const ces[9] = { 0x12A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_464)
{
    // 1F0DC 0061;	
    // (üÉú) PLAYING CARD KNIGHT OF CLUBS	[12A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DC, 0x0061 };
    uint32_t const ces[9] = { 0x12A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_465)
{
    // 1F0DC 0041;	
    // (üÉú) PLAYING CARD KNIGHT OF CLUBS	[12A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DC, 0x0041 };
    uint32_t const ces[9] = { 0x12A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_466)
{
    // 1F0DC 0062;	
    // (üÉú) PLAYING CARD KNIGHT OF CLUBS	[12A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DC, 0x0062 };
    uint32_t const ces[9] = { 0x12A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_467)
{
    // 1F0DD 0021;	
    // (üÉù) PLAYING CARD QUEEN OF CLUBS	[12A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DD, 0x0021 };
    uint32_t const ces[9] = { 0x12A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_468)
{
    // 1F0DD 003F;	
    // (üÉù) PLAYING CARD QUEEN OF CLUBS	[12A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DD, 0x003F };
    uint32_t const ces[9] = { 0x12A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_469)
{
    // 1F0DD 0061;	
    // (üÉù) PLAYING CARD QUEEN OF CLUBS	[12A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DD, 0x0061 };
    uint32_t const ces[9] = { 0x12A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_470)
{
    // 1F0DD 0041;	
    // (üÉù) PLAYING CARD QUEEN OF CLUBS	[12A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DD, 0x0041 };
    uint32_t const ces[9] = { 0x12A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_471)
{
    // 1F0DD 0062;	
    // (üÉù) PLAYING CARD QUEEN OF CLUBS	[12A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DD, 0x0062 };
    uint32_t const ces[9] = { 0x12A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_472)
{
    // 1F0DE 0021;	
    // (üÉû) PLAYING CARD KING OF CLUBS	[12A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DE, 0x0021 };
    uint32_t const ces[9] = { 0x12A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_473)
{
    // 1F0DE 003F;	
    // (üÉû) PLAYING CARD KING OF CLUBS	[12A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DE, 0x003F };
    uint32_t const ces[9] = { 0x12A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_474)
{
    // 1F0DE 0061;	
    // (üÉû) PLAYING CARD KING OF CLUBS	[12A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DE, 0x0061 };
    uint32_t const ces[9] = { 0x12A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_475)
{
    // 1F0DE 0041;	
    // (üÉû) PLAYING CARD KING OF CLUBS	[12A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DE, 0x0041 };
    uint32_t const ces[9] = { 0x12A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_476)
{
    // 1F0DE 0062;	
    // (üÉû) PLAYING CARD KING OF CLUBS	[12A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DE, 0x0062 };
    uint32_t const ces[9] = { 0x12A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_477)
{
    // 1F0DF 0021;	
    // (üÉü) PLAYING CARD WHITE JOKER	[12AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DF, 0x0021 };
    uint32_t const ces[9] = { 0x12AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_478)
{
    // 1F0DF 003F;	
    // (üÉü) PLAYING CARD WHITE JOKER	[12AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DF, 0x003F };
    uint32_t const ces[9] = { 0x12AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_479)
{
    // 1F0DF 0061;	
    // (üÉü) PLAYING CARD WHITE JOKER	[12AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DF, 0x0061 };
    uint32_t const ces[9] = { 0x12AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_480)
{
    // 1F0DF 0041;	
    // (üÉü) PLAYING CARD WHITE JOKER	[12AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0DF, 0x0041 };
    uint32_t const ces[9] = { 0x12AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_481)
{
    // 1F0DF 0062;	
    // (üÉü) PLAYING CARD WHITE JOKER	[12AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0DF, 0x0062 };
    uint32_t const ces[9] = { 0x12AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_482)
{
    // 1F0E0 0021;	
    // (üÉ†) PLAYING CARD FOOL	[12AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E0, 0x0021 };
    uint32_t const ces[9] = { 0x12AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_483)
{
    // 1F0E0 003F;	
    // (üÉ†) PLAYING CARD FOOL	[12AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E0, 0x003F };
    uint32_t const ces[9] = { 0x12AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_484)
{
    // 1F0E0 0061;	
    // (üÉ†) PLAYING CARD FOOL	[12AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E0, 0x0061 };
    uint32_t const ces[9] = { 0x12AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_485)
{
    // 1F0E0 0041;	
    // (üÉ†) PLAYING CARD FOOL	[12AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E0, 0x0041 };
    uint32_t const ces[9] = { 0x12AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_486)
{
    // 1F0E0 0062;	
    // (üÉ†) PLAYING CARD FOOL	[12AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E0, 0x0062 };
    uint32_t const ces[9] = { 0x12AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_487)
{
    // 1F0E1 0021;	
    // (üÉ°) PLAYING CARD TRUMP-1	[12AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E1, 0x0021 };
    uint32_t const ces[9] = { 0x12AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_488)
{
    // 1F0E1 003F;	
    // (üÉ°) PLAYING CARD TRUMP-1	[12AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E1, 0x003F };
    uint32_t const ces[9] = { 0x12AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_489)
{
    // 1F0E1 0061;	
    // (üÉ°) PLAYING CARD TRUMP-1	[12AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E1, 0x0061 };
    uint32_t const ces[9] = { 0x12AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_490)
{
    // 1F0E1 0041;	
    // (üÉ°) PLAYING CARD TRUMP-1	[12AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E1, 0x0041 };
    uint32_t const ces[9] = { 0x12AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_491)
{
    // 1F0E1 0062;	
    // (üÉ°) PLAYING CARD TRUMP-1	[12AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E1, 0x0062 };
    uint32_t const ces[9] = { 0x12AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_492)
{
    // 1F0E2 0021;	
    // (üÉ¢) PLAYING CARD TRUMP-2	[12AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E2, 0x0021 };
    uint32_t const ces[9] = { 0x12AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_493)
{
    // 1F0E2 003F;	
    // (üÉ¢) PLAYING CARD TRUMP-2	[12AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E2, 0x003F };
    uint32_t const ces[9] = { 0x12AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_494)
{
    // 1F0E2 0061;	
    // (üÉ¢) PLAYING CARD TRUMP-2	[12AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E2, 0x0061 };
    uint32_t const ces[9] = { 0x12AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_495)
{
    // 1F0E2 0041;	
    // (üÉ¢) PLAYING CARD TRUMP-2	[12AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F0E2, 0x0041 };
    uint32_t const ces[9] = { 0x12AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_496)
{
    // 1F0E2 0062;	
    // (üÉ¢) PLAYING CARD TRUMP-2	[12AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E2, 0x0062 };
    uint32_t const ces[9] = { 0x12AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_497)
{
    // 1F0E3 0021;	
    // (üÉ£) PLAYING CARD TRUMP-3	[12AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E3, 0x0021 };
    uint32_t const ces[9] = { 0x12AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_498)
{
    // 1F0E3 003F;	
    // (üÉ£) PLAYING CARD TRUMP-3	[12AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E3, 0x003F };
    uint32_t const ces[9] = { 0x12AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_054_499)
{
    // 1F0E3 0061;	
    // (üÉ£) PLAYING CARD TRUMP-3	[12AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E3, 0x0061 };
    uint32_t const ces[9] = { 0x12AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

