// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_139_000)
{
    // 1171F ; [.2D09.0020.0002] 
    // AHOM CONSONANT SIGN MEDIAL LIGATING RA

    uint32_t const cps[1] = { 0x1171f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_001)
{
    // 11720 ; [.2CFB.0020.0002] 
    // AHOM VOWEL SIGN A

    uint32_t const cps[1] = { 0x11720 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_002)
{
    // 11721 ; [.2CFC.0020.0002] 
    // AHOM VOWEL SIGN AA

    uint32_t const cps[1] = { 0x11721 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_003)
{
    // 11722 ; [.2CFD.0020.0002] 
    // AHOM VOWEL SIGN I

    uint32_t const cps[1] = { 0x11722 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_004)
{
    // 11723 ; [.2CFE.0020.0002] 
    // AHOM VOWEL SIGN II

    uint32_t const cps[1] = { 0x11723 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_005)
{
    // 11724 ; [.2CFF.0020.0002] 
    // AHOM VOWEL SIGN U

    uint32_t const cps[1] = { 0x11724 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_006)
{
    // 11725 ; [.2D00.0020.0002] 
    // AHOM VOWEL SIGN UU

    uint32_t const cps[1] = { 0x11725 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_007)
{
    // 11726 ; [.2D01.0020.0002] 
    // AHOM VOWEL SIGN E

    uint32_t const cps[1] = { 0x11726 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_008)
{
    // 11727 ; [.2D02.0020.0002] 
    // AHOM VOWEL SIGN AW

    uint32_t const cps[1] = { 0x11727 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_009)
{
    // 11728 ; [.2D03.0020.0002] 
    // AHOM VOWEL SIGN O

    uint32_t const cps[1] = { 0x11728 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_010)
{
    // 11729 ; [.2D04.0020.0002] 
    // AHOM VOWEL SIGN AI

    uint32_t const cps[1] = { 0x11729 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_011)
{
    // 1172A ; [.2D05.0020.0002] 
    // AHOM VOWEL SIGN AM

    uint32_t const cps[1] = { 0x1172a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_012)
{
    // 1172B ; [.2D06.0020.0002] 
    // AHOM SIGN KILLER

    uint32_t const cps[1] = { 0x1172b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_013)
{
    // 11730 ; [.1CA3.0020.0002] 
    // AHOM DIGIT ZERO

    uint32_t const cps[1] = { 0x11730 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_014)
{
    // 11731 ; [.1CA4.0020.0002] 
    // AHOM DIGIT ONE

    uint32_t const cps[1] = { 0x11731 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_015)
{
    // 11732 ; [.1CA5.0020.0002] 
    // AHOM DIGIT TWO

    uint32_t const cps[1] = { 0x11732 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_016)
{
    // 11733 ; [.1CA6.0020.0002] 
    // AHOM DIGIT THREE

    uint32_t const cps[1] = { 0x11733 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_017)
{
    // 11734 ; [.1CA7.0020.0002] 
    // AHOM DIGIT FOUR

    uint32_t const cps[1] = { 0x11734 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_018)
{
    // 11735 ; [.1CA8.0020.0002] 
    // AHOM DIGIT FIVE

    uint32_t const cps[1] = { 0x11735 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_019)
{
    // 11736 ; [.1CA9.0020.0002] 
    // AHOM DIGIT SIX

    uint32_t const cps[1] = { 0x11736 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_020)
{
    // 11737 ; [.1CAA.0020.0002] 
    // AHOM DIGIT SEVEN

    uint32_t const cps[1] = { 0x11737 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_021)
{
    // 11738 ; [.1CAB.0020.0002] 
    // AHOM DIGIT EIGHT

    uint32_t const cps[1] = { 0x11738 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_022)
{
    // 11739 ; [.1CAC.0020.0002] 
    // AHOM DIGIT NINE

    uint32_t const cps[1] = { 0x11739 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_023)
{
    // 1173A ; [*1BD5.0020.0002] 
    // AHOM NUMBER TEN

    uint32_t const cps[1] = { 0x1173a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_024)
{
    // 1173B ; [*1BD6.0020.0002] 
    // AHOM NUMBER TWENTY

    uint32_t const cps[1] = { 0x1173b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_025)
{
    // 1173C ; [*02BD.0020.0002] 
    // AHOM SIGN SMALL SECTION

    uint32_t const cps[1] = { 0x1173c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_026)
{
    // 1173D ; [*02BE.0020.0002] 
    // AHOM SIGN SECTION

    uint32_t const cps[1] = { 0x1173d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_027)
{
    // 1173E ; [*02E8.0020.0002] 
    // AHOM SIGN RULAI

    uint32_t const cps[1] = { 0x1173e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_028)
{
    // 1173F ; [*0566.0020.0002] 
    // AHOM SYMBOL VI

    uint32_t const cps[1] = { 0x1173f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x566), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_029)
{
    // 118A0 ; [.4530.0020.0008] 
    // WARANG CITI CAPITAL LETTER NGAA

    uint32_t const cps[1] = { 0x118a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4530), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_030)
{
    // 118A1 ; [.4531.0020.0008] 
    // WARANG CITI CAPITAL LETTER A

    uint32_t const cps[1] = { 0x118a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4531), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_031)
{
    // 118A2 ; [.4532.0020.0008] 
    // WARANG CITI CAPITAL LETTER WI

    uint32_t const cps[1] = { 0x118a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4532), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_032)
{
    // 118A3 ; [.4533.0020.0008] 
    // WARANG CITI CAPITAL LETTER YU

    uint32_t const cps[1] = { 0x118a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4533), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_033)
{
    // 118A4 ; [.4534.0020.0008] 
    // WARANG CITI CAPITAL LETTER YA

    uint32_t const cps[1] = { 0x118a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4534), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_034)
{
    // 118A5 ; [.4535.0020.0008] 
    // WARANG CITI CAPITAL LETTER YO

    uint32_t const cps[1] = { 0x118a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4535), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_035)
{
    // 118A6 ; [.4536.0020.0008] 
    // WARANG CITI CAPITAL LETTER II

    uint32_t const cps[1] = { 0x118a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4536), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_036)
{
    // 118A7 ; [.4537.0020.0008] 
    // WARANG CITI CAPITAL LETTER UU

    uint32_t const cps[1] = { 0x118a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4537), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_037)
{
    // 118A8 ; [.4538.0020.0008] 
    // WARANG CITI CAPITAL LETTER E

    uint32_t const cps[1] = { 0x118a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4538), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_038)
{
    // 118A9 ; [.4539.0020.0008] 
    // WARANG CITI CAPITAL LETTER O

    uint32_t const cps[1] = { 0x118a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4539), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_039)
{
    // 118AA ; [.453A.0020.0008] 
    // WARANG CITI CAPITAL LETTER ANG

    uint32_t const cps[1] = { 0x118aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_040)
{
    // 118AB ; [.453B.0020.0008] 
    // WARANG CITI CAPITAL LETTER GA

    uint32_t const cps[1] = { 0x118ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_041)
{
    // 118AC ; [.453C.0020.0008] 
    // WARANG CITI CAPITAL LETTER KO

    uint32_t const cps[1] = { 0x118ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_042)
{
    // 118AD ; [.453D.0020.0008] 
    // WARANG CITI CAPITAL LETTER ENY

    uint32_t const cps[1] = { 0x118ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_043)
{
    // 118AE ; [.453E.0020.0008] 
    // WARANG CITI CAPITAL LETTER YUJ

    uint32_t const cps[1] = { 0x118ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_044)
{
    // 118AF ; [.453F.0020.0008] 
    // WARANG CITI CAPITAL LETTER UC

    uint32_t const cps[1] = { 0x118af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_045)
{
    // 118B0 ; [.4540.0020.0008] 
    // WARANG CITI CAPITAL LETTER ENN

    uint32_t const cps[1] = { 0x118b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4540), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_046)
{
    // 118B1 ; [.4541.0020.0008] 
    // WARANG CITI CAPITAL LETTER ODD

    uint32_t const cps[1] = { 0x118b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4541), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_047)
{
    // 118B2 ; [.4542.0020.0008] 
    // WARANG CITI CAPITAL LETTER TTE

    uint32_t const cps[1] = { 0x118b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4542), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_048)
{
    // 118B3 ; [.4543.0020.0008] 
    // WARANG CITI CAPITAL LETTER NUNG

    uint32_t const cps[1] = { 0x118b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4543), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_049)
{
    // 118B4 ; [.4544.0020.0008] 
    // WARANG CITI CAPITAL LETTER DA

    uint32_t const cps[1] = { 0x118b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4544), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_050)
{
    // 118B5 ; [.4545.0020.0008] 
    // WARANG CITI CAPITAL LETTER AT

    uint32_t const cps[1] = { 0x118b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4545), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_051)
{
    // 118B6 ; [.4546.0020.0008] 
    // WARANG CITI CAPITAL LETTER AM

    uint32_t const cps[1] = { 0x118b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4546), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_052)
{
    // 118B7 ; [.4547.0020.0008] 
    // WARANG CITI CAPITAL LETTER BU

    uint32_t const cps[1] = { 0x118b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4547), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_053)
{
    // 118B8 ; [.4548.0020.0008] 
    // WARANG CITI CAPITAL LETTER PU

    uint32_t const cps[1] = { 0x118b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4548), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_054)
{
    // 118B9 ; [.4549.0020.0008] 
    // WARANG CITI CAPITAL LETTER HIYO

    uint32_t const cps[1] = { 0x118b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4549), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_055)
{
    // 118BA ; [.454A.0020.0008] 
    // WARANG CITI CAPITAL LETTER HOLO

    uint32_t const cps[1] = { 0x118ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_056)
{
    // 118BB ; [.454B.0020.0008] 
    // WARANG CITI CAPITAL LETTER HORR

    uint32_t const cps[1] = { 0x118bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_057)
{
    // 118BC ; [.454C.0020.0008] 
    // WARANG CITI CAPITAL LETTER HAR

    uint32_t const cps[1] = { 0x118bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_058)
{
    // 118BD ; [.454D.0020.0008] 
    // WARANG CITI CAPITAL LETTER SSUU

    uint32_t const cps[1] = { 0x118bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_059)
{
    // 118BE ; [.454E.0020.0008] 
    // WARANG CITI CAPITAL LETTER SII

    uint32_t const cps[1] = { 0x118be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_060)
{
    // 118BF ; [.454F.0020.0008] 
    // WARANG CITI CAPITAL LETTER VIYO

    uint32_t const cps[1] = { 0x118bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_061)
{
    // 118C0 ; [.4530.0020.0002] 
    // WARANG CITI SMALL LETTER NGAA

    uint32_t const cps[1] = { 0x118c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4530), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_062)
{
    // 118C1 ; [.4531.0020.0002] 
    // WARANG CITI SMALL LETTER A

    uint32_t const cps[1] = { 0x118c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4531), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_063)
{
    // 118C2 ; [.4532.0020.0002] 
    // WARANG CITI SMALL LETTER WI

    uint32_t const cps[1] = { 0x118c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4532), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_064)
{
    // 118C3 ; [.4533.0020.0002] 
    // WARANG CITI SMALL LETTER YU

    uint32_t const cps[1] = { 0x118c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4533), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_065)
{
    // 118C4 ; [.4534.0020.0002] 
    // WARANG CITI SMALL LETTER YA

    uint32_t const cps[1] = { 0x118c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4534), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_066)
{
    // 118C5 ; [.4535.0020.0002] 
    // WARANG CITI SMALL LETTER YO

    uint32_t const cps[1] = { 0x118c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4535), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_067)
{
    // 118C6 ; [.4536.0020.0002] 
    // WARANG CITI SMALL LETTER II

    uint32_t const cps[1] = { 0x118c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4536), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_068)
{
    // 118C7 ; [.4537.0020.0002] 
    // WARANG CITI SMALL LETTER UU

    uint32_t const cps[1] = { 0x118c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4537), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_069)
{
    // 118C8 ; [.4538.0020.0002] 
    // WARANG CITI SMALL LETTER E

    uint32_t const cps[1] = { 0x118c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4538), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_070)
{
    // 118C9 ; [.4539.0020.0002] 
    // WARANG CITI SMALL LETTER O

    uint32_t const cps[1] = { 0x118c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4539), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_071)
{
    // 118CA ; [.453A.0020.0002] 
    // WARANG CITI SMALL LETTER ANG

    uint32_t const cps[1] = { 0x118ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_072)
{
    // 118CB ; [.453B.0020.0002] 
    // WARANG CITI SMALL LETTER GA

    uint32_t const cps[1] = { 0x118cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_073)
{
    // 118CC ; [.453C.0020.0002] 
    // WARANG CITI SMALL LETTER KO

    uint32_t const cps[1] = { 0x118cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_074)
{
    // 118CD ; [.453D.0020.0002] 
    // WARANG CITI SMALL LETTER ENY

    uint32_t const cps[1] = { 0x118cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_075)
{
    // 118CE ; [.453E.0020.0002] 
    // WARANG CITI SMALL LETTER YUJ

    uint32_t const cps[1] = { 0x118ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_076)
{
    // 118CF ; [.453F.0020.0002] 
    // WARANG CITI SMALL LETTER UC

    uint32_t const cps[1] = { 0x118cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x453f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_077)
{
    // 118D0 ; [.4540.0020.0002] 
    // WARANG CITI SMALL LETTER ENN

    uint32_t const cps[1] = { 0x118d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4540), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_078)
{
    // 118D1 ; [.4541.0020.0002] 
    // WARANG CITI SMALL LETTER ODD

    uint32_t const cps[1] = { 0x118d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4541), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_079)
{
    // 118D2 ; [.4542.0020.0002] 
    // WARANG CITI SMALL LETTER TTE

    uint32_t const cps[1] = { 0x118d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4542), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_080)
{
    // 118D3 ; [.4543.0020.0002] 
    // WARANG CITI SMALL LETTER NUNG

    uint32_t const cps[1] = { 0x118d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4543), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_081)
{
    // 118D4 ; [.4544.0020.0002] 
    // WARANG CITI SMALL LETTER DA

    uint32_t const cps[1] = { 0x118d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4544), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_082)
{
    // 118D5 ; [.4545.0020.0002] 
    // WARANG CITI SMALL LETTER AT

    uint32_t const cps[1] = { 0x118d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4545), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_083)
{
    // 118D6 ; [.4546.0020.0002] 
    // WARANG CITI SMALL LETTER AM

    uint32_t const cps[1] = { 0x118d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4546), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_084)
{
    // 118D7 ; [.4547.0020.0002] 
    // WARANG CITI SMALL LETTER BU

    uint32_t const cps[1] = { 0x118d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4547), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_085)
{
    // 118D8 ; [.4548.0020.0002] 
    // WARANG CITI SMALL LETTER PU

    uint32_t const cps[1] = { 0x118d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4548), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_086)
{
    // 118D9 ; [.4549.0020.0002] 
    // WARANG CITI SMALL LETTER HIYO

    uint32_t const cps[1] = { 0x118d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4549), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_087)
{
    // 118DA ; [.454A.0020.0002] 
    // WARANG CITI SMALL LETTER HOLO

    uint32_t const cps[1] = { 0x118da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_088)
{
    // 118DB ; [.454B.0020.0002] 
    // WARANG CITI SMALL LETTER HORR

    uint32_t const cps[1] = { 0x118db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_089)
{
    // 118DC ; [.454C.0020.0002] 
    // WARANG CITI SMALL LETTER HAR

    uint32_t const cps[1] = { 0x118dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_090)
{
    // 118DD ; [.454D.0020.0002] 
    // WARANG CITI SMALL LETTER SSUU

    uint32_t const cps[1] = { 0x118dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_091)
{
    // 118DE ; [.454E.0020.0002] 
    // WARANG CITI SMALL LETTER SII

    uint32_t const cps[1] = { 0x118de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_092)
{
    // 118DF ; [.454F.0020.0002] 
    // WARANG CITI SMALL LETTER VIYO

    uint32_t const cps[1] = { 0x118df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x454f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_093)
{
    // 118E0 ; [.1CA3.0020.0002] 
    // WARANG CITI DIGIT ZERO

    uint32_t const cps[1] = { 0x118e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_094)
{
    // 118E1 ; [.1CA4.0020.0002] 
    // WARANG CITI DIGIT ONE

    uint32_t const cps[1] = { 0x118e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_095)
{
    // 118E2 ; [.1CA5.0020.0002] 
    // WARANG CITI DIGIT TWO

    uint32_t const cps[1] = { 0x118e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_096)
{
    // 118E3 ; [.1CA6.0020.0002] 
    // WARANG CITI DIGIT THREE

    uint32_t const cps[1] = { 0x118e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_097)
{
    // 118E4 ; [.1CA7.0020.0002] 
    // WARANG CITI DIGIT FOUR

    uint32_t const cps[1] = { 0x118e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_098)
{
    // 118E5 ; [.1CA8.0020.0002] 
    // WARANG CITI DIGIT FIVE

    uint32_t const cps[1] = { 0x118e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_099)
{
    // 118E6 ; [.1CA9.0020.0002] 
    // WARANG CITI DIGIT SIX

    uint32_t const cps[1] = { 0x118e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_100)
{
    // 118E7 ; [.1CAA.0020.0002] 
    // WARANG CITI DIGIT SEVEN

    uint32_t const cps[1] = { 0x118e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_101)
{
    // 118E8 ; [.1CAB.0020.0002] 
    // WARANG CITI DIGIT EIGHT

    uint32_t const cps[1] = { 0x118e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_102)
{
    // 118E9 ; [.1CAC.0020.0002] 
    // WARANG CITI DIGIT NINE

    uint32_t const cps[1] = { 0x118e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_103)
{
    // 118EA ; [*1BFB.0020.0002] 
    // WARANG CITI NUMBER TEN

    uint32_t const cps[1] = { 0x118ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_104)
{
    // 118EB ; [*1BFC.0020.0002] 
    // WARANG CITI NUMBER TWENTY

    uint32_t const cps[1] = { 0x118eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_105)
{
    // 118EC ; [*1BFD.0020.0002] 
    // WARANG CITI NUMBER THIRTY

    uint32_t const cps[1] = { 0x118ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_106)
{
    // 118ED ; [*1BFE.0020.0002] 
    // WARANG CITI NUMBER FORTY

    uint32_t const cps[1] = { 0x118ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_107)
{
    // 118EE ; [*1BFF.0020.0002] 
    // WARANG CITI NUMBER FIFTY

    uint32_t const cps[1] = { 0x118ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1bff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_108)
{
    // 118EF ; [*1C00.0020.0002] 
    // WARANG CITI NUMBER SIXTY

    uint32_t const cps[1] = { 0x118ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_109)
{
    // 118F0 ; [*1C01.0020.0002] 
    // WARANG CITI NUMBER SEVENTY

    uint32_t const cps[1] = { 0x118f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_110)
{
    // 118F1 ; [*1C02.0020.0002] 
    // WARANG CITI NUMBER EIGHTY

    uint32_t const cps[1] = { 0x118f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_111)
{
    // 118F2 ; [*1C03.0020.0002] 
    // WARANG CITI NUMBER NINETY

    uint32_t const cps[1] = { 0x118f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_112)
{
    // 118FF ; [.452F.0020.0002] 
    // WARANG CITI OM

    uint32_t const cps[1] = { 0x118ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x452f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_113)
{
    // 11A00 ; [.2F5B.0020.0002] 
    // ZANABAZAR SQUARE LETTER A

    uint32_t const cps[1] = { 0x11a00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_114)
{
    // 11A01 ; [.2F5C.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN I

    uint32_t const cps[1] = { 0x11a01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_115)
{
    // 11A02 ; [.2F5D.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN UE

    uint32_t const cps[1] = { 0x11a02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_116)
{
    // 11A03 ; [.2F5E.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN U

    uint32_t const cps[1] = { 0x11a03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_117)
{
    // 11A04 ; [.2F5F.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN E

    uint32_t const cps[1] = { 0x11a04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_118)
{
    // 11A05 ; [.2F60.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN OE

    uint32_t const cps[1] = { 0x11a05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_119)
{
    // 11A06 ; [.2F61.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN O

    uint32_t const cps[1] = { 0x11a06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_120)
{
    // 11A07 ; [.2F62.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN AI

    uint32_t const cps[1] = { 0x11a07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_121)
{
    // 11A08 ; [.2F63.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN AU

    uint32_t const cps[1] = { 0x11a08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_122)
{
    // 11A09 ; [.2F64.0020.0002] 
    // ZANABAZAR SQUARE VOWEL SIGN REVERSED I

    uint32_t const cps[1] = { 0x11a09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_123)
{
    // 11A0A ; [.2F65.0020.0002] 
    // ZANABAZAR SQUARE VOWEL LENGTH MARK

    uint32_t const cps[1] = { 0x11a0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_124)
{
    // 11A0B ; [.2F33.0020.0002] 
    // ZANABAZAR SQUARE LETTER KA

    uint32_t const cps[1] = { 0x11a0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_125)
{
    // 11A0C ; [.2F35.0020.0002] 
    // ZANABAZAR SQUARE LETTER KHA

    uint32_t const cps[1] = { 0x11a0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_126)
{
    // 11A0D ; [.2F36.0020.0002] 
    // ZANABAZAR SQUARE LETTER GA

    uint32_t const cps[1] = { 0x11a0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_127)
{
    // 11A0E ; [.2F37.0020.0002] 
    // ZANABAZAR SQUARE LETTER GHA

    uint32_t const cps[1] = { 0x11a0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_128)
{
    // 11A0F ; [.2F38.0020.0002] 
    // ZANABAZAR SQUARE LETTER NGA

    uint32_t const cps[1] = { 0x11a0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_129)
{
    // 11A10 ; [.2F39.0020.0002] 
    // ZANABAZAR SQUARE LETTER CA

    uint32_t const cps[1] = { 0x11a10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_130)
{
    // 11A11 ; [.2F3A.0020.0002] 
    // ZANABAZAR SQUARE LETTER CHA

    uint32_t const cps[1] = { 0x11a11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_131)
{
    // 11A12 ; [.2F3B.0020.0002] 
    // ZANABAZAR SQUARE LETTER JA

    uint32_t const cps[1] = { 0x11a12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_132)
{
    // 11A13 ; [.2F3C.0020.0002] 
    // ZANABAZAR SQUARE LETTER NYA

    uint32_t const cps[1] = { 0x11a13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_133)
{
    // 11A14 ; [.2F3D.0020.0002] 
    // ZANABAZAR SQUARE LETTER TTA

    uint32_t const cps[1] = { 0x11a14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_134)
{
    // 11A15 ; [.2F3E.0020.0002] 
    // ZANABAZAR SQUARE LETTER TTHA

    uint32_t const cps[1] = { 0x11a15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_135)
{
    // 11A16 ; [.2F3F.0020.0002] 
    // ZANABAZAR SQUARE LETTER DDA

    uint32_t const cps[1] = { 0x11a16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_136)
{
    // 11A17 ; [.2F40.0020.0002] 
    // ZANABAZAR SQUARE LETTER DDHA

    uint32_t const cps[1] = { 0x11a17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_137)
{
    // 11A18 ; [.2F41.0020.0002] 
    // ZANABAZAR SQUARE LETTER NNA

    uint32_t const cps[1] = { 0x11a18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_138)
{
    // 11A19 ; [.2F42.0020.0002] 
    // ZANABAZAR SQUARE LETTER TA

    uint32_t const cps[1] = { 0x11a19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_139)
{
    // 11A1A ; [.2F43.0020.0002] 
    // ZANABAZAR SQUARE LETTER THA

    uint32_t const cps[1] = { 0x11a1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_140)
{
    // 11A1B ; [.2F44.0020.0002] 
    // ZANABAZAR SQUARE LETTER DA

    uint32_t const cps[1] = { 0x11a1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_141)
{
    // 11A1C ; [.2F45.0020.0002] 
    // ZANABAZAR SQUARE LETTER DHA

    uint32_t const cps[1] = { 0x11a1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_142)
{
    // 11A1D ; [.2F46.0020.0002] 
    // ZANABAZAR SQUARE LETTER NA

    uint32_t const cps[1] = { 0x11a1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_143)
{
    // 11A1E ; [.2F47.0020.0002] 
    // ZANABAZAR SQUARE LETTER PA

    uint32_t const cps[1] = { 0x11a1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_144)
{
    // 11A1F ; [.2F48.0020.0002] 
    // ZANABAZAR SQUARE LETTER PHA

    uint32_t const cps[1] = { 0x11a1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_145)
{
    // 11A20 ; [.2F49.0020.0002] 
    // ZANABAZAR SQUARE LETTER BA

    uint32_t const cps[1] = { 0x11a20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_146)
{
    // 11A21 ; [.2F4A.0020.0002] 
    // ZANABAZAR SQUARE LETTER BHA

    uint32_t const cps[1] = { 0x11a21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_147)
{
    // 11A22 ; [.2F4B.0020.0002] 
    // ZANABAZAR SQUARE LETTER MA

    uint32_t const cps[1] = { 0x11a22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_148)
{
    // 11A23 ; [.2F4C.0020.0002] 
    // ZANABAZAR SQUARE LETTER TSA

    uint32_t const cps[1] = { 0x11a23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_139_149)
{
    // 11A24 ; [.2F4D.0020.0002] 
    // ZANABAZAR SQUARE LETTER TSHA

    uint32_t const cps[1] = { 0x11a24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

