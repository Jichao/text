// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_141_000)
{
    // A679 0041;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA679, 0x0041 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_001)
{
    // 042B 0061;	
    // (Ы) CYRILLIC CAPITAL LETTER YERU	[21FA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042B, 0x0061 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_002)
{
    // 042B 0041;	
    // (Ы) CYRILLIC CAPITAL LETTER YERU	[21FA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042B, 0x0041 };
    uint32_t const ces[9] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_003)
{
    // 04F9 0061;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F9, 0x0061 };
    uint32_t const ces[11] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_004)
{
    // 04F9 0041;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04F9, 0x0041 };
    uint32_t const ces[11] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_005)
{
    // 04F8 0061;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F8, 0x0061 };
    uint32_t const ces[11] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_006)
{
    // 04F8 0041;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04F8, 0x0041 };
    uint32_t const ces[11] = { 0x21FA, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_007)
{
    // 044B 0062;	
    // (ы) CYRILLIC SMALL LETTER YERU	[21FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044B, 0x0062 };
    uint32_t const ces[9] = { 0x21FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_008)
{
    // A679 0062;	
    // (ꙹ) COMBINING CYRILLIC LETTER YERU	[21FA 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA679, 0x0062 };
    uint32_t const ces[9] = { 0x21FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_009)
{
    // 042B 0062;	
    // (Ы) CYRILLIC CAPITAL LETTER YERU	[21FA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042B, 0x0062 };
    uint32_t const ces[9] = { 0x21FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_010)
{
    // 04F9 0062;	
    // (ӹ) CYRILLIC SMALL LETTER YERU WITH DIAERESIS	[21FA 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04F9, 0x0062 };
    uint32_t const ces[11] = { 0x21FA, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_011)
{
    // 04F8 0062;	
    // (Ӹ) CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS	[21FA 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04F8, 0x0062 };
    uint32_t const ces[11] = { 0x21FA, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_012)
{
    // 0334 A67A;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA67A };
    uint32_t const ces[8] = { 0x21FE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_013)
{
    // A67A 0334;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA67A, 0x0334 };
    uint32_t const ces[8] = { 0x21FE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_014)
{
    // 044C 0021;	
    // (ь) CYRILLIC SMALL LETTER SOFT SIGN	[21FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044C, 0x0021 };
    uint32_t const ces[9] = { 0x21FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_015)
{
    // A67A 0021;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67A, 0x0021 };
    uint32_t const ces[9] = { 0x21FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_016)
{
    // 042C 0021;	
    // (Ь) CYRILLIC CAPITAL LETTER SOFT SIGN	[21FE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042C, 0x0021 };
    uint32_t const ces[9] = { 0x21FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_017)
{
    // A69D 0021;	
    // (ꚝ) MODIFIER LETTER CYRILLIC SOFT SIGN	[21FE 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69D, 0x0021 };
    uint32_t const ces[9] = { 0x21FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_018)
{
    // 044C 003F;	
    // (ь) CYRILLIC SMALL LETTER SOFT SIGN	[21FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044C, 0x003F };
    uint32_t const ces[9] = { 0x21FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_019)
{
    // A67A 003F;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67A, 0x003F };
    uint32_t const ces[9] = { 0x21FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_020)
{
    // 042C 003F;	
    // (Ь) CYRILLIC CAPITAL LETTER SOFT SIGN	[21FE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042C, 0x003F };
    uint32_t const ces[9] = { 0x21FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_021)
{
    // A69D 003F;	
    // (ꚝ) MODIFIER LETTER CYRILLIC SOFT SIGN	[21FE 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69D, 0x003F };
    uint32_t const ces[9] = { 0x21FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_022)
{
    // 044C 0061;	
    // (ь) CYRILLIC SMALL LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044C, 0x0061 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_023)
{
    // 044C 0041;	
    // (ь) CYRILLIC SMALL LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044C, 0x0041 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_024)
{
    // A67A 0061;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67A, 0x0061 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_025)
{
    // A67A 0041;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA67A, 0x0041 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_026)
{
    // 042C 0061;	
    // (Ь) CYRILLIC CAPITAL LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042C, 0x0061 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_027)
{
    // 042C 0041;	
    // (Ь) CYRILLIC CAPITAL LETTER SOFT SIGN	[21FE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042C, 0x0041 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_028)
{
    // A69D 0061;	
    // (ꚝ) MODIFIER LETTER CYRILLIC SOFT SIGN	[21FE 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69D, 0x0061 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_029)
{
    // A69D 0041;	
    // (ꚝ) MODIFIER LETTER CYRILLIC SOFT SIGN	[21FE 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0xA69D, 0x0041 };
    uint32_t const ces[9] = { 0x21FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_030)
{
    // 044C 0062;	
    // (ь) CYRILLIC SMALL LETTER SOFT SIGN	[21FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044C, 0x0062 };
    uint32_t const ces[9] = { 0x21FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_031)
{
    // A67A 0062;	
    // (ꙺ) COMBINING CYRILLIC LETTER SOFT SIGN	[21FE 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA67A, 0x0062 };
    uint32_t const ces[9] = { 0x21FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_032)
{
    // 042C 0062;	
    // (Ь) CYRILLIC CAPITAL LETTER SOFT SIGN	[21FE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042C, 0x0062 };
    uint32_t const ces[9] = { 0x21FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_033)
{
    // A69D 0062;	
    // (ꚝ) MODIFIER LETTER CYRILLIC SOFT SIGN	[21FE 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA69D, 0x0062 };
    uint32_t const ces[9] = { 0x21FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_034)
{
    // 048D 0021;	
    // (ҍ) CYRILLIC SMALL LETTER SEMISOFT SIGN	[2202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048D, 0x0021 };
    uint32_t const ces[9] = { 0x2202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_035)
{
    // 048C 0021;	
    // (Ҍ) CYRILLIC CAPITAL LETTER SEMISOFT SIGN	[2202 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048C, 0x0021 };
    uint32_t const ces[9] = { 0x2202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_036)
{
    // 048D 003F;	
    // (ҍ) CYRILLIC SMALL LETTER SEMISOFT SIGN	[2202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048D, 0x003F };
    uint32_t const ces[9] = { 0x2202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_037)
{
    // 048C 003F;	
    // (Ҍ) CYRILLIC CAPITAL LETTER SEMISOFT SIGN	[2202 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048C, 0x003F };
    uint32_t const ces[9] = { 0x2202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_038)
{
    // 048D 0061;	
    // (ҍ) CYRILLIC SMALL LETTER SEMISOFT SIGN	[2202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048D, 0x0061 };
    uint32_t const ces[9] = { 0x2202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_039)
{
    // 048D 0041;	
    // (ҍ) CYRILLIC SMALL LETTER SEMISOFT SIGN	[2202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x048D, 0x0041 };
    uint32_t const ces[9] = { 0x2202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_040)
{
    // 048C 0061;	
    // (Ҍ) CYRILLIC CAPITAL LETTER SEMISOFT SIGN	[2202 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048C, 0x0061 };
    uint32_t const ces[9] = { 0x2202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_041)
{
    // 048C 0041;	
    // (Ҍ) CYRILLIC CAPITAL LETTER SEMISOFT SIGN	[2202 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x048C, 0x0041 };
    uint32_t const ces[9] = { 0x2202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_042)
{
    // 048D 0062;	
    // (ҍ) CYRILLIC SMALL LETTER SEMISOFT SIGN	[2202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x048D, 0x0062 };
    uint32_t const ces[9] = { 0x2202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_043)
{
    // 048C 0062;	
    // (Ҍ) CYRILLIC CAPITAL LETTER SEMISOFT SIGN	[2202 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x048C, 0x0062 };
    uint32_t const ces[9] = { 0x2202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_044)
{
    // 0334 2DFA;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFA };
    uint32_t const ces[8] = { 0x2206, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_045)
{
    // 2DFA 0334;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFA, 0x0334 };
    uint32_t const ces[8] = { 0x2206, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_046)
{
    // 0463 0021;	
    // (ѣ) CYRILLIC SMALL LETTER YAT	[2206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0463, 0x0021 };
    uint32_t const ces[9] = { 0x2206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_047)
{
    // 1C87 0021;	
    // (ᲇ) CYRILLIC SMALL LETTER TALL YAT	[2206 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C87, 0x0021 };
    uint32_t const ces[9] = { 0x2206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_048)
{
    // 2DFA 0021;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFA, 0x0021 };
    uint32_t const ces[9] = { 0x2206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_049)
{
    // 0462 0021;	
    // (Ѣ) CYRILLIC CAPITAL LETTER YAT	[2206 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0462, 0x0021 };
    uint32_t const ces[9] = { 0x2206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_050)
{
    // 0463 003F;	
    // (ѣ) CYRILLIC SMALL LETTER YAT	[2206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0463, 0x003F };
    uint32_t const ces[9] = { 0x2206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_051)
{
    // 1C87 003F;	
    // (ᲇ) CYRILLIC SMALL LETTER TALL YAT	[2206 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C87, 0x003F };
    uint32_t const ces[9] = { 0x2206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_052)
{
    // 2DFA 003F;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFA, 0x003F };
    uint32_t const ces[9] = { 0x2206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_053)
{
    // 0462 003F;	
    // (Ѣ) CYRILLIC CAPITAL LETTER YAT	[2206 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0462, 0x003F };
    uint32_t const ces[9] = { 0x2206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_054)
{
    // 0463 0061;	
    // (ѣ) CYRILLIC SMALL LETTER YAT	[2206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0463, 0x0061 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_055)
{
    // 0463 0041;	
    // (ѣ) CYRILLIC SMALL LETTER YAT	[2206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0463, 0x0041 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_056)
{
    // 1C87 0061;	
    // (ᲇ) CYRILLIC SMALL LETTER TALL YAT	[2206 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C87, 0x0061 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_057)
{
    // 2DFA 0061;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFA, 0x0061 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_058)
{
    // 1C87 0041;	
    // (ᲇ) CYRILLIC SMALL LETTER TALL YAT	[2206 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1C87, 0x0041 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_059)
{
    // 2DFA 0041;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFA, 0x0041 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_060)
{
    // 0462 0061;	
    // (Ѣ) CYRILLIC CAPITAL LETTER YAT	[2206 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0462, 0x0061 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_061)
{
    // 0462 0041;	
    // (Ѣ) CYRILLIC CAPITAL LETTER YAT	[2206 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0462, 0x0041 };
    uint32_t const ces[9] = { 0x2206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_062)
{
    // 0463 0062;	
    // (ѣ) CYRILLIC SMALL LETTER YAT	[2206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0463, 0x0062 };
    uint32_t const ces[9] = { 0x2206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_063)
{
    // 1C87 0062;	
    // (ᲇ) CYRILLIC SMALL LETTER TALL YAT	[2206 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1C87, 0x0062 };
    uint32_t const ces[9] = { 0x2206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_064)
{
    // 2DFA 0062;	
    // (ⷺ) COMBINING CYRILLIC LETTER YAT	[2206 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFA, 0x0062 };
    uint32_t const ces[9] = { 0x2206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_065)
{
    // 0462 0062;	
    // (Ѣ) CYRILLIC CAPITAL LETTER YAT	[2206 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0462, 0x0062 };
    uint32_t const ces[9] = { 0x2206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_066)
{
    // A653 0021;	
    // (ꙓ) CYRILLIC SMALL LETTER IOTIFIED YAT	[220A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA653, 0x0021 };
    uint32_t const ces[9] = { 0x220A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_067)
{
    // A652 0021;	
    // (Ꙓ) CYRILLIC CAPITAL LETTER IOTIFIED YAT	[220A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA652, 0x0021 };
    uint32_t const ces[9] = { 0x220A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_068)
{
    // A653 003F;	
    // (ꙓ) CYRILLIC SMALL LETTER IOTIFIED YAT	[220A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA653, 0x003F };
    uint32_t const ces[9] = { 0x220A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_069)
{
    // A652 003F;	
    // (Ꙓ) CYRILLIC CAPITAL LETTER IOTIFIED YAT	[220A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA652, 0x003F };
    uint32_t const ces[9] = { 0x220A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_070)
{
    // A653 0061;	
    // (ꙓ) CYRILLIC SMALL LETTER IOTIFIED YAT	[220A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA653, 0x0061 };
    uint32_t const ces[9] = { 0x220A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_071)
{
    // A653 0041;	
    // (ꙓ) CYRILLIC SMALL LETTER IOTIFIED YAT	[220A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA653, 0x0041 };
    uint32_t const ces[9] = { 0x220A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_072)
{
    // A652 0061;	
    // (Ꙓ) CYRILLIC CAPITAL LETTER IOTIFIED YAT	[220A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA652, 0x0061 };
    uint32_t const ces[9] = { 0x220A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_073)
{
    // A652 0041;	
    // (Ꙓ) CYRILLIC CAPITAL LETTER IOTIFIED YAT	[220A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA652, 0x0041 };
    uint32_t const ces[9] = { 0x220A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_074)
{
    // A653 0062;	
    // (ꙓ) CYRILLIC SMALL LETTER IOTIFIED YAT	[220A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA653, 0x0062 };
    uint32_t const ces[9] = { 0x220A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_075)
{
    // A652 0062;	
    // (Ꙓ) CYRILLIC CAPITAL LETTER IOTIFIED YAT	[220A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA652, 0x0062 };
    uint32_t const ces[9] = { 0x220A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_076)
{
    // 044D 0308 0334;	
    // (ӭ) CYRILLIC SMALL LETTER E, COMBINING DIAERESIS	[220B | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x044D, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_077)
{
    // 044D 0334 0308;	
    // (э̴) CYRILLIC SMALL LETTER E, COMBINING TILDE OVERLAY	[220B | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x044D, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_078)
{
    // 04ED 0334;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04ED, 0x0334 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_079)
{
    // 042D 0308 0334;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E, COMBINING DIAERESIS	[220B | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x042D, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_080)
{
    // 042D 0334 0308;	
    // (Э̴) CYRILLIC CAPITAL LETTER E, COMBINING TILDE OVERLAY	[220B | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x042D, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_081)
{
    // 04EC 0334;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04EC, 0x0334 };
    uint32_t const ces[10] = { 0x220B, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_082)
{
    // 044D 0021;	
    // (э) CYRILLIC SMALL LETTER E	[220B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044D, 0x0021 };
    uint32_t const ces[9] = { 0x220B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_083)
{
    // 042D 0021;	
    // (Э) CYRILLIC CAPITAL LETTER E	[220B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042D, 0x0021 };
    uint32_t const ces[9] = { 0x220B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_084)
{
    // 04ED 0021;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04ED, 0x0021 };
    uint32_t const ces[11] = { 0x220B, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_085)
{
    // 04EC 0021;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04EC, 0x0021 };
    uint32_t const ces[11] = { 0x220B, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_086)
{
    // 044D 003F;	
    // (э) CYRILLIC SMALL LETTER E	[220B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044D, 0x003F };
    uint32_t const ces[9] = { 0x220B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_087)
{
    // 042D 003F;	
    // (Э) CYRILLIC CAPITAL LETTER E	[220B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042D, 0x003F };
    uint32_t const ces[9] = { 0x220B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_088)
{
    // 04ED 003F;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04ED, 0x003F };
    uint32_t const ces[11] = { 0x220B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_089)
{
    // 04EC 003F;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04EC, 0x003F };
    uint32_t const ces[11] = { 0x220B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_090)
{
    // 044D 0061;	
    // (э) CYRILLIC SMALL LETTER E	[220B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044D, 0x0061 };
    uint32_t const ces[9] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_091)
{
    // 044D 0041;	
    // (э) CYRILLIC SMALL LETTER E	[220B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044D, 0x0041 };
    uint32_t const ces[9] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_092)
{
    // 042D 0061;	
    // (Э) CYRILLIC CAPITAL LETTER E	[220B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042D, 0x0061 };
    uint32_t const ces[9] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_093)
{
    // 042D 0041;	
    // (Э) CYRILLIC CAPITAL LETTER E	[220B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042D, 0x0041 };
    uint32_t const ces[9] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_094)
{
    // 04ED 0061;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04ED, 0x0061 };
    uint32_t const ces[11] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_095)
{
    // 04ED 0041;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x04ED, 0x0041 };
    uint32_t const ces[11] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_096)
{
    // 04EC 0061;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04EC, 0x0061 };
    uint32_t const ces[11] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_097)
{
    // 04EC 0041;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x04EC, 0x0041 };
    uint32_t const ces[11] = { 0x220B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_098)
{
    // 044D 0062;	
    // (э) CYRILLIC SMALL LETTER E	[220B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044D, 0x0062 };
    uint32_t const ces[9] = { 0x220B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_099)
{
    // 042D 0062;	
    // (Э) CYRILLIC CAPITAL LETTER E	[220B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042D, 0x0062 };
    uint32_t const ces[9] = { 0x220B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_100)
{
    // 04ED 0062;	
    // (ӭ) CYRILLIC SMALL LETTER E WITH DIAERESIS	[220B 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x04ED, 0x0062 };
    uint32_t const ces[11] = { 0x220B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_101)
{
    // 04EC 0062;	
    // (Ӭ) CYRILLIC CAPITAL LETTER E WITH DIAERESIS	[220B 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x04EC, 0x0062 };
    uint32_t const ces[11] = { 0x220B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_102)
{
    // 0334 2DFB;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFB };
    uint32_t const ces[8] = { 0x220F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_103)
{
    // 2DFB 0334;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFB, 0x0334 };
    uint32_t const ces[8] = { 0x220F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_104)
{
    // 044E 0021;	
    // (ю) CYRILLIC SMALL LETTER YU	[220F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044E, 0x0021 };
    uint32_t const ces[9] = { 0x220F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_105)
{
    // 2DFB 0021;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFB, 0x0021 };
    uint32_t const ces[9] = { 0x220F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_106)
{
    // 042E 0021;	
    // (Ю) CYRILLIC CAPITAL LETTER YU	[220F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042E, 0x0021 };
    uint32_t const ces[9] = { 0x220F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_107)
{
    // 044E 003F;	
    // (ю) CYRILLIC SMALL LETTER YU	[220F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044E, 0x003F };
    uint32_t const ces[9] = { 0x220F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_108)
{
    // 2DFB 003F;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFB, 0x003F };
    uint32_t const ces[9] = { 0x220F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_109)
{
    // 042E 003F;	
    // (Ю) CYRILLIC CAPITAL LETTER YU	[220F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042E, 0x003F };
    uint32_t const ces[9] = { 0x220F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_110)
{
    // 044E 0061;	
    // (ю) CYRILLIC SMALL LETTER YU	[220F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044E, 0x0061 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_111)
{
    // 044E 0041;	
    // (ю) CYRILLIC SMALL LETTER YU	[220F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044E, 0x0041 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_112)
{
    // 2DFB 0061;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFB, 0x0061 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_113)
{
    // 2DFB 0041;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFB, 0x0041 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_114)
{
    // 042E 0061;	
    // (Ю) CYRILLIC CAPITAL LETTER YU	[220F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042E, 0x0061 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_115)
{
    // 042E 0041;	
    // (Ю) CYRILLIC CAPITAL LETTER YU	[220F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042E, 0x0041 };
    uint32_t const ces[9] = { 0x220F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_116)
{
    // 044E 0062;	
    // (ю) CYRILLIC SMALL LETTER YU	[220F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044E, 0x0062 };
    uint32_t const ces[9] = { 0x220F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_117)
{
    // 2DFB 0062;	
    // (ⷻ) COMBINING CYRILLIC LETTER YU	[220F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFB, 0x0062 };
    uint32_t const ces[9] = { 0x220F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_118)
{
    // 042E 0062;	
    // (Ю) CYRILLIC CAPITAL LETTER YU	[220F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042E, 0x0062 };
    uint32_t const ces[9] = { 0x220F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_119)
{
    // A655 0021;	
    // (ꙕ) CYRILLIC SMALL LETTER REVERSED YU	[2213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA655, 0x0021 };
    uint32_t const ces[9] = { 0x2213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_120)
{
    // A654 0021;	
    // (Ꙕ) CYRILLIC CAPITAL LETTER REVERSED YU	[2213 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA654, 0x0021 };
    uint32_t const ces[9] = { 0x2213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_121)
{
    // A655 003F;	
    // (ꙕ) CYRILLIC SMALL LETTER REVERSED YU	[2213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA655, 0x003F };
    uint32_t const ces[9] = { 0x2213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_122)
{
    // A654 003F;	
    // (Ꙕ) CYRILLIC CAPITAL LETTER REVERSED YU	[2213 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA654, 0x003F };
    uint32_t const ces[9] = { 0x2213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_123)
{
    // A655 0061;	
    // (ꙕ) CYRILLIC SMALL LETTER REVERSED YU	[2213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA655, 0x0061 };
    uint32_t const ces[9] = { 0x2213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_124)
{
    // A655 0041;	
    // (ꙕ) CYRILLIC SMALL LETTER REVERSED YU	[2213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA655, 0x0041 };
    uint32_t const ces[9] = { 0x2213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_125)
{
    // A654 0061;	
    // (Ꙕ) CYRILLIC CAPITAL LETTER REVERSED YU	[2213 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA654, 0x0061 };
    uint32_t const ces[9] = { 0x2213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_126)
{
    // A654 0041;	
    // (Ꙕ) CYRILLIC CAPITAL LETTER REVERSED YU	[2213 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA654, 0x0041 };
    uint32_t const ces[9] = { 0x2213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_127)
{
    // A655 0062;	
    // (ꙕ) CYRILLIC SMALL LETTER REVERSED YU	[2213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA655, 0x0062 };
    uint32_t const ces[9] = { 0x2213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_128)
{
    // A654 0062;	
    // (Ꙕ) CYRILLIC CAPITAL LETTER REVERSED YU	[2213 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA654, 0x0062 };
    uint32_t const ces[9] = { 0x2213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_129)
{
    // 0334 2DFC;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFC };
    uint32_t const ces[8] = { 0x2214, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_130)
{
    // 2DFC 0334;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFC, 0x0334 };
    uint32_t const ces[8] = { 0x2214, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_131)
{
    // A657 0021;	
    // (ꙗ) CYRILLIC SMALL LETTER IOTIFIED A	[2214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA657, 0x0021 };
    uint32_t const ces[9] = { 0x2214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_132)
{
    // 2DFC 0021;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFC, 0x0021 };
    uint32_t const ces[9] = { 0x2214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_133)
{
    // A656 0021;	
    // (Ꙗ) CYRILLIC CAPITAL LETTER IOTIFIED A	[2214 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA656, 0x0021 };
    uint32_t const ces[9] = { 0x2214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_134)
{
    // A657 003F;	
    // (ꙗ) CYRILLIC SMALL LETTER IOTIFIED A	[2214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA657, 0x003F };
    uint32_t const ces[9] = { 0x2214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_135)
{
    // 2DFC 003F;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFC, 0x003F };
    uint32_t const ces[9] = { 0x2214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_136)
{
    // A656 003F;	
    // (Ꙗ) CYRILLIC CAPITAL LETTER IOTIFIED A	[2214 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA656, 0x003F };
    uint32_t const ces[9] = { 0x2214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_137)
{
    // A657 0061;	
    // (ꙗ) CYRILLIC SMALL LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA657, 0x0061 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_138)
{
    // A657 0041;	
    // (ꙗ) CYRILLIC SMALL LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA657, 0x0041 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_139)
{
    // 2DFC 0061;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFC, 0x0061 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_140)
{
    // 2DFC 0041;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFC, 0x0041 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_141)
{
    // A656 0061;	
    // (Ꙗ) CYRILLIC CAPITAL LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA656, 0x0061 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_142)
{
    // A656 0041;	
    // (Ꙗ) CYRILLIC CAPITAL LETTER IOTIFIED A	[2214 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA656, 0x0041 };
    uint32_t const ces[9] = { 0x2214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_143)
{
    // A657 0062;	
    // (ꙗ) CYRILLIC SMALL LETTER IOTIFIED A	[2214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA657, 0x0062 };
    uint32_t const ces[9] = { 0x2214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_144)
{
    // 2DFC 0062;	
    // (ⷼ) COMBINING CYRILLIC LETTER IOTIFIED A	[2214 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFC, 0x0062 };
    uint32_t const ces[9] = { 0x2214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_145)
{
    // A656 0062;	
    // (Ꙗ) CYRILLIC CAPITAL LETTER IOTIFIED A	[2214 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA656, 0x0062 };
    uint32_t const ces[9] = { 0x2214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_146)
{
    // 044F 0021;	
    // (я) CYRILLIC SMALL LETTER YA	[2215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044F, 0x0021 };
    uint32_t const ces[9] = { 0x2215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_147)
{
    // 042F 0021;	
    // (Я) CYRILLIC CAPITAL LETTER YA	[2215 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042F, 0x0021 };
    uint32_t const ces[9] = { 0x2215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_148)
{
    // 044F 003F;	
    // (я) CYRILLIC SMALL LETTER YA	[2215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044F, 0x003F };
    uint32_t const ces[9] = { 0x2215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_149)
{
    // 042F 003F;	
    // (Я) CYRILLIC CAPITAL LETTER YA	[2215 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042F, 0x003F };
    uint32_t const ces[9] = { 0x2215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_150)
{
    // 044F 0061;	
    // (я) CYRILLIC SMALL LETTER YA	[2215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044F, 0x0061 };
    uint32_t const ces[9] = { 0x2215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_151)
{
    // 044F 0041;	
    // (я) CYRILLIC SMALL LETTER YA	[2215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x044F, 0x0041 };
    uint32_t const ces[9] = { 0x2215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_152)
{
    // 042F 0061;	
    // (Я) CYRILLIC CAPITAL LETTER YA	[2215 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042F, 0x0061 };
    uint32_t const ces[9] = { 0x2215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_153)
{
    // 042F 0041;	
    // (Я) CYRILLIC CAPITAL LETTER YA	[2215 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x042F, 0x0041 };
    uint32_t const ces[9] = { 0x2215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_154)
{
    // 044F 0062;	
    // (я) CYRILLIC SMALL LETTER YA	[2215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x044F, 0x0062 };
    uint32_t const ces[9] = { 0x2215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_155)
{
    // 042F 0062;	
    // (Я) CYRILLIC CAPITAL LETTER YA	[2215 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x042F, 0x0062 };
    uint32_t const ces[9] = { 0x2215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_156)
{
    // 0519 0021;	
    // (ԙ) CYRILLIC SMALL LETTER YAE	[2219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0519, 0x0021 };
    uint32_t const ces[9] = { 0x2219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_157)
{
    // 0518 0021;	
    // (Ԙ) CYRILLIC CAPITAL LETTER YAE	[2219 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0518, 0x0021 };
    uint32_t const ces[9] = { 0x2219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_158)
{
    // 0519 003F;	
    // (ԙ) CYRILLIC SMALL LETTER YAE	[2219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0519, 0x003F };
    uint32_t const ces[9] = { 0x2219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_159)
{
    // 0518 003F;	
    // (Ԙ) CYRILLIC CAPITAL LETTER YAE	[2219 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0518, 0x003F };
    uint32_t const ces[9] = { 0x2219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_160)
{
    // 0519 0061;	
    // (ԙ) CYRILLIC SMALL LETTER YAE	[2219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0519, 0x0061 };
    uint32_t const ces[9] = { 0x2219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_161)
{
    // 0519 0041;	
    // (ԙ) CYRILLIC SMALL LETTER YAE	[2219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0519, 0x0041 };
    uint32_t const ces[9] = { 0x2219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_162)
{
    // 0518 0061;	
    // (Ԙ) CYRILLIC CAPITAL LETTER YAE	[2219 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0518, 0x0061 };
    uint32_t const ces[9] = { 0x2219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_163)
{
    // 0518 0041;	
    // (Ԙ) CYRILLIC CAPITAL LETTER YAE	[2219 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0518, 0x0041 };
    uint32_t const ces[9] = { 0x2219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_164)
{
    // 0519 0062;	
    // (ԙ) CYRILLIC SMALL LETTER YAE	[2219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0519, 0x0062 };
    uint32_t const ces[9] = { 0x2219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_165)
{
    // 0518 0062;	
    // (Ԙ) CYRILLIC CAPITAL LETTER YAE	[2219 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0518, 0x0062 };
    uint32_t const ces[9] = { 0x2219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_166)
{
    // 0334 A69F;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0xA69F };
    uint32_t const ces[8] = { 0x221A, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_167)
{
    // A69F 0334;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0xA69F, 0x0334 };
    uint32_t const ces[8] = { 0x221A, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_168)
{
    // 0465 0021;	
    // (ѥ) CYRILLIC SMALL LETTER IOTIFIED E	[221A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0465, 0x0021 };
    uint32_t const ces[9] = { 0x221A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_169)
{
    // A69F 0021;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69F, 0x0021 };
    uint32_t const ces[9] = { 0x221A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_170)
{
    // 0464 0021;	
    // (Ѥ) CYRILLIC CAPITAL LETTER IOTIFIED E	[221A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0464, 0x0021 };
    uint32_t const ces[9] = { 0x221A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_171)
{
    // 0465 003F;	
    // (ѥ) CYRILLIC SMALL LETTER IOTIFIED E	[221A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0465, 0x003F };
    uint32_t const ces[9] = { 0x221A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_172)
{
    // A69F 003F;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69F, 0x003F };
    uint32_t const ces[9] = { 0x221A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_173)
{
    // 0464 003F;	
    // (Ѥ) CYRILLIC CAPITAL LETTER IOTIFIED E	[221A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0464, 0x003F };
    uint32_t const ces[9] = { 0x221A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_174)
{
    // 0465 0061;	
    // (ѥ) CYRILLIC SMALL LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0465, 0x0061 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_175)
{
    // 0465 0041;	
    // (ѥ) CYRILLIC SMALL LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0465, 0x0041 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_176)
{
    // A69F 0061;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69F, 0x0061 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_177)
{
    // A69F 0041;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA69F, 0x0041 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_178)
{
    // 0464 0061;	
    // (Ѥ) CYRILLIC CAPITAL LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0464, 0x0061 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_179)
{
    // 0464 0041;	
    // (Ѥ) CYRILLIC CAPITAL LETTER IOTIFIED E	[221A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0464, 0x0041 };
    uint32_t const ces[9] = { 0x221A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_180)
{
    // 0465 0062;	
    // (ѥ) CYRILLIC SMALL LETTER IOTIFIED E	[221A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0465, 0x0062 };
    uint32_t const ces[9] = { 0x221A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_181)
{
    // A69F 0062;	
    // (ꚟ) COMBINING CYRILLIC LETTER IOTIFIED E	[221A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA69F, 0x0062 };
    uint32_t const ces[9] = { 0x221A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_182)
{
    // 0464 0062;	
    // (Ѥ) CYRILLIC CAPITAL LETTER IOTIFIED E	[221A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0464, 0x0062 };
    uint32_t const ces[9] = { 0x221A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_183)
{
    // 0334 2DFD;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFD };
    uint32_t const ces[8] = { 0x221E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_184)
{
    // 2DFD 0334;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFD, 0x0334 };
    uint32_t const ces[8] = { 0x221E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_185)
{
    // 0467 0021;	
    // (ѧ) CYRILLIC SMALL LETTER LITTLE YUS	[221E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0467, 0x0021 };
    uint32_t const ces[9] = { 0x221E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_186)
{
    // 2DFD 0021;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFD, 0x0021 };
    uint32_t const ces[9] = { 0x221E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_187)
{
    // 0466 0021;	
    // (Ѧ) CYRILLIC CAPITAL LETTER LITTLE YUS	[221E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0466, 0x0021 };
    uint32_t const ces[9] = { 0x221E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_188)
{
    // 0467 003F;	
    // (ѧ) CYRILLIC SMALL LETTER LITTLE YUS	[221E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0467, 0x003F };
    uint32_t const ces[9] = { 0x221E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_189)
{
    // 2DFD 003F;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFD, 0x003F };
    uint32_t const ces[9] = { 0x221E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_190)
{
    // 0466 003F;	
    // (Ѧ) CYRILLIC CAPITAL LETTER LITTLE YUS	[221E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0466, 0x003F };
    uint32_t const ces[9] = { 0x221E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_191)
{
    // 0467 0061;	
    // (ѧ) CYRILLIC SMALL LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0467, 0x0061 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_192)
{
    // 0467 0041;	
    // (ѧ) CYRILLIC SMALL LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0467, 0x0041 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_193)
{
    // 2DFD 0061;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFD, 0x0061 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_194)
{
    // 2DFD 0041;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFD, 0x0041 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_195)
{
    // 0466 0061;	
    // (Ѧ) CYRILLIC CAPITAL LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0466, 0x0061 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_196)
{
    // 0466 0041;	
    // (Ѧ) CYRILLIC CAPITAL LETTER LITTLE YUS	[221E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0466, 0x0041 };
    uint32_t const ces[9] = { 0x221E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_197)
{
    // 0467 0062;	
    // (ѧ) CYRILLIC SMALL LETTER LITTLE YUS	[221E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0467, 0x0062 };
    uint32_t const ces[9] = { 0x221E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_198)
{
    // 2DFD 0062;	
    // (ⷽ) COMBINING CYRILLIC LETTER LITTLE YUS	[221E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFD, 0x0062 };
    uint32_t const ces[9] = { 0x221E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_199)
{
    // 0466 0062;	
    // (Ѧ) CYRILLIC CAPITAL LETTER LITTLE YUS	[221E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0466, 0x0062 };
    uint32_t const ces[9] = { 0x221E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_200)
{
    // A659 0021;	
    // (ꙙ) CYRILLIC SMALL LETTER CLOSED LITTLE YUS	[2222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA659, 0x0021 };
    uint32_t const ces[9] = { 0x2222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_201)
{
    // A658 0021;	
    // (Ꙙ) CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS	[2222 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA658, 0x0021 };
    uint32_t const ces[9] = { 0x2222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_202)
{
    // A659 003F;	
    // (ꙙ) CYRILLIC SMALL LETTER CLOSED LITTLE YUS	[2222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA659, 0x003F };
    uint32_t const ces[9] = { 0x2222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_203)
{
    // A658 003F;	
    // (Ꙙ) CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS	[2222 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA658, 0x003F };
    uint32_t const ces[9] = { 0x2222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_204)
{
    // A659 0061;	
    // (ꙙ) CYRILLIC SMALL LETTER CLOSED LITTLE YUS	[2222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA659, 0x0061 };
    uint32_t const ces[9] = { 0x2222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_205)
{
    // A659 0041;	
    // (ꙙ) CYRILLIC SMALL LETTER CLOSED LITTLE YUS	[2222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA659, 0x0041 };
    uint32_t const ces[9] = { 0x2222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_206)
{
    // A658 0061;	
    // (Ꙙ) CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS	[2222 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA658, 0x0061 };
    uint32_t const ces[9] = { 0x2222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_207)
{
    // A658 0041;	
    // (Ꙙ) CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS	[2222 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA658, 0x0041 };
    uint32_t const ces[9] = { 0x2222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_208)
{
    // A659 0062;	
    // (ꙙ) CYRILLIC SMALL LETTER CLOSED LITTLE YUS	[2222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA659, 0x0062 };
    uint32_t const ces[9] = { 0x2222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_209)
{
    // A658 0062;	
    // (Ꙙ) CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS	[2222 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA658, 0x0062 };
    uint32_t const ces[9] = { 0x2222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_210)
{
    // 0334 2DFE;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFE };
    uint32_t const ces[8] = { 0x2223, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_211)
{
    // 2DFE 0334;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFE, 0x0334 };
    uint32_t const ces[8] = { 0x2223, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_212)
{
    // 046B 0021;	
    // (ѫ) CYRILLIC SMALL LETTER BIG YUS	[2223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046B, 0x0021 };
    uint32_t const ces[9] = { 0x2223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_213)
{
    // 2DFE 0021;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFE, 0x0021 };
    uint32_t const ces[9] = { 0x2223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_214)
{
    // 046A 0021;	
    // (Ѫ) CYRILLIC CAPITAL LETTER BIG YUS	[2223 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046A, 0x0021 };
    uint32_t const ces[9] = { 0x2223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_215)
{
    // 046B 003F;	
    // (ѫ) CYRILLIC SMALL LETTER BIG YUS	[2223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046B, 0x003F };
    uint32_t const ces[9] = { 0x2223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_216)
{
    // 2DFE 003F;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFE, 0x003F };
    uint32_t const ces[9] = { 0x2223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_217)
{
    // 046A 003F;	
    // (Ѫ) CYRILLIC CAPITAL LETTER BIG YUS	[2223 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046A, 0x003F };
    uint32_t const ces[9] = { 0x2223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_218)
{
    // 046B 0061;	
    // (ѫ) CYRILLIC SMALL LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046B, 0x0061 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_219)
{
    // 046B 0041;	
    // (ѫ) CYRILLIC SMALL LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x046B, 0x0041 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_220)
{
    // 2DFE 0061;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFE, 0x0061 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_221)
{
    // 2DFE 0041;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFE, 0x0041 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_222)
{
    // 046A 0061;	
    // (Ѫ) CYRILLIC CAPITAL LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046A, 0x0061 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_223)
{
    // 046A 0041;	
    // (Ѫ) CYRILLIC CAPITAL LETTER BIG YUS	[2223 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x046A, 0x0041 };
    uint32_t const ces[9] = { 0x2223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_224)
{
    // 046B 0062;	
    // (ѫ) CYRILLIC SMALL LETTER BIG YUS	[2223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046B, 0x0062 };
    uint32_t const ces[9] = { 0x2223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_225)
{
    // 2DFE 0062;	
    // (ⷾ) COMBINING CYRILLIC LETTER BIG YUS	[2223 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFE, 0x0062 };
    uint32_t const ces[9] = { 0x2223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_226)
{
    // 046A 0062;	
    // (Ѫ) CYRILLIC CAPITAL LETTER BIG YUS	[2223 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046A, 0x0062 };
    uint32_t const ces[9] = { 0x2223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_227)
{
    // A65B 0021;	
    // (ꙛ) CYRILLIC SMALL LETTER BLENDED YUS	[2227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65B, 0x0021 };
    uint32_t const ces[9] = { 0x2227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_228)
{
    // A65A 0021;	
    // (Ꙛ) CYRILLIC CAPITAL LETTER BLENDED YUS	[2227 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65A, 0x0021 };
    uint32_t const ces[9] = { 0x2227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_229)
{
    // A65B 003F;	
    // (ꙛ) CYRILLIC SMALL LETTER BLENDED YUS	[2227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65B, 0x003F };
    uint32_t const ces[9] = { 0x2227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_230)
{
    // A65A 003F;	
    // (Ꙛ) CYRILLIC CAPITAL LETTER BLENDED YUS	[2227 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65A, 0x003F };
    uint32_t const ces[9] = { 0x2227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_231)
{
    // A65B 0061;	
    // (ꙛ) CYRILLIC SMALL LETTER BLENDED YUS	[2227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65B, 0x0061 };
    uint32_t const ces[9] = { 0x2227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_232)
{
    // A65B 0041;	
    // (ꙛ) CYRILLIC SMALL LETTER BLENDED YUS	[2227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA65B, 0x0041 };
    uint32_t const ces[9] = { 0x2227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_233)
{
    // A65A 0061;	
    // (Ꙛ) CYRILLIC CAPITAL LETTER BLENDED YUS	[2227 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65A, 0x0061 };
    uint32_t const ces[9] = { 0x2227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_234)
{
    // A65A 0041;	
    // (Ꙛ) CYRILLIC CAPITAL LETTER BLENDED YUS	[2227 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA65A, 0x0041 };
    uint32_t const ces[9] = { 0x2227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_235)
{
    // A65B 0062;	
    // (ꙛ) CYRILLIC SMALL LETTER BLENDED YUS	[2227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65B, 0x0062 };
    uint32_t const ces[9] = { 0x2227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_236)
{
    // A65A 0062;	
    // (Ꙛ) CYRILLIC CAPITAL LETTER BLENDED YUS	[2227 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65A, 0x0062 };
    uint32_t const ces[9] = { 0x2227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_237)
{
    // 0469 0021;	
    // (ѩ) CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS	[2228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0469, 0x0021 };
    uint32_t const ces[9] = { 0x2228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_238)
{
    // 0468 0021;	
    // (Ѩ) CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS	[2228 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0468, 0x0021 };
    uint32_t const ces[9] = { 0x2228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_239)
{
    // 0469 003F;	
    // (ѩ) CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS	[2228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0469, 0x003F };
    uint32_t const ces[9] = { 0x2228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_240)
{
    // 0468 003F;	
    // (Ѩ) CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS	[2228 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0468, 0x003F };
    uint32_t const ces[9] = { 0x2228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_241)
{
    // 0469 0061;	
    // (ѩ) CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS	[2228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0469, 0x0061 };
    uint32_t const ces[9] = { 0x2228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_242)
{
    // 0469 0041;	
    // (ѩ) CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS	[2228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0469, 0x0041 };
    uint32_t const ces[9] = { 0x2228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_243)
{
    // 0468 0061;	
    // (Ѩ) CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS	[2228 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0468, 0x0061 };
    uint32_t const ces[9] = { 0x2228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_244)
{
    // 0468 0041;	
    // (Ѩ) CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS	[2228 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0468, 0x0041 };
    uint32_t const ces[9] = { 0x2228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_245)
{
    // 0469 0062;	
    // (ѩ) CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS	[2228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0469, 0x0062 };
    uint32_t const ces[9] = { 0x2228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_246)
{
    // 0468 0062;	
    // (Ѩ) CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS	[2228 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0468, 0x0062 };
    uint32_t const ces[9] = { 0x2228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_247)
{
    // A65D 0021;	
    // (ꙝ) CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65D, 0x0021 };
    uint32_t const ces[9] = { 0x222C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_248)
{
    // A65C 0021;	
    // (Ꙝ) CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65C, 0x0021 };
    uint32_t const ces[9] = { 0x222C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_249)
{
    // A65D 003F;	
    // (ꙝ) CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65D, 0x003F };
    uint32_t const ces[9] = { 0x222C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_250)
{
    // A65C 003F;	
    // (Ꙝ) CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65C, 0x003F };
    uint32_t const ces[9] = { 0x222C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_251)
{
    // A65D 0061;	
    // (ꙝ) CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65D, 0x0061 };
    uint32_t const ces[9] = { 0x222C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_252)
{
    // A65D 0041;	
    // (ꙝ) CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA65D, 0x0041 };
    uint32_t const ces[9] = { 0x222C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_253)
{
    // A65C 0061;	
    // (Ꙝ) CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65C, 0x0061 };
    uint32_t const ces[9] = { 0x222C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_254)
{
    // A65C 0041;	
    // (Ꙝ) CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA65C, 0x0041 };
    uint32_t const ces[9] = { 0x222C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_255)
{
    // A65D 0062;	
    // (ꙝ) CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65D, 0x0062 };
    uint32_t const ces[9] = { 0x222C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_256)
{
    // A65C 0062;	
    // (Ꙝ) CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS	[222C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65C, 0x0062 };
    uint32_t const ces[9] = { 0x222C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_257)
{
    // 0334 2DFF;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DFF };
    uint32_t const ces[8] = { 0x222D, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_258)
{
    // 2DFF 0334;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DFF, 0x0334 };
    uint32_t const ces[8] = { 0x222D, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_259)
{
    // 046D 0021;	
    // (ѭ) CYRILLIC SMALL LETTER IOTIFIED BIG YUS	[222D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046D, 0x0021 };
    uint32_t const ces[9] = { 0x222D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_260)
{
    // 2DFF 0021;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFF, 0x0021 };
    uint32_t const ces[9] = { 0x222D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_261)
{
    // 046C 0021;	
    // (Ѭ) CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS	[222D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046C, 0x0021 };
    uint32_t const ces[9] = { 0x222D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_262)
{
    // 046D 003F;	
    // (ѭ) CYRILLIC SMALL LETTER IOTIFIED BIG YUS	[222D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046D, 0x003F };
    uint32_t const ces[9] = { 0x222D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_263)
{
    // 2DFF 003F;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFF, 0x003F };
    uint32_t const ces[9] = { 0x222D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_264)
{
    // 046C 003F;	
    // (Ѭ) CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS	[222D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046C, 0x003F };
    uint32_t const ces[9] = { 0x222D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_265)
{
    // 046D 0061;	
    // (ѭ) CYRILLIC SMALL LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046D, 0x0061 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_266)
{
    // 046D 0041;	
    // (ѭ) CYRILLIC SMALL LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x046D, 0x0041 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_267)
{
    // 2DFF 0061;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFF, 0x0061 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_268)
{
    // 2DFF 0041;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DFF, 0x0041 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_269)
{
    // 046C 0061;	
    // (Ѭ) CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046C, 0x0061 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_270)
{
    // 046C 0041;	
    // (Ѭ) CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS	[222D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x046C, 0x0041 };
    uint32_t const ces[9] = { 0x222D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_271)
{
    // 046D 0062;	
    // (ѭ) CYRILLIC SMALL LETTER IOTIFIED BIG YUS	[222D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046D, 0x0062 };
    uint32_t const ces[9] = { 0x222D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_272)
{
    // 2DFF 0062;	
    // (ⷿ) COMBINING CYRILLIC LETTER IOTIFIED BIG YUS	[222D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DFF, 0x0062 };
    uint32_t const ces[9] = { 0x222D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_273)
{
    // 046C 0062;	
    // (Ѭ) CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS	[222D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046C, 0x0062 };
    uint32_t const ces[9] = { 0x222D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_274)
{
    // 046F 0021;	
    // (ѯ) CYRILLIC SMALL LETTER KSI	[2231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046F, 0x0021 };
    uint32_t const ces[9] = { 0x2231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_275)
{
    // 046E 0021;	
    // (Ѯ) CYRILLIC CAPITAL LETTER KSI	[2231 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046E, 0x0021 };
    uint32_t const ces[9] = { 0x2231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_276)
{
    // 046F 003F;	
    // (ѯ) CYRILLIC SMALL LETTER KSI	[2231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046F, 0x003F };
    uint32_t const ces[9] = { 0x2231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_277)
{
    // 046E 003F;	
    // (Ѯ) CYRILLIC CAPITAL LETTER KSI	[2231 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046E, 0x003F };
    uint32_t const ces[9] = { 0x2231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_278)
{
    // 046F 0061;	
    // (ѯ) CYRILLIC SMALL LETTER KSI	[2231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046F, 0x0061 };
    uint32_t const ces[9] = { 0x2231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_279)
{
    // 046F 0041;	
    // (ѯ) CYRILLIC SMALL LETTER KSI	[2231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x046F, 0x0041 };
    uint32_t const ces[9] = { 0x2231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_280)
{
    // 046E 0061;	
    // (Ѯ) CYRILLIC CAPITAL LETTER KSI	[2231 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046E, 0x0061 };
    uint32_t const ces[9] = { 0x2231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_281)
{
    // 046E 0041;	
    // (Ѯ) CYRILLIC CAPITAL LETTER KSI	[2231 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x046E, 0x0041 };
    uint32_t const ces[9] = { 0x2231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_282)
{
    // 046F 0062;	
    // (ѯ) CYRILLIC SMALL LETTER KSI	[2231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x046F, 0x0062 };
    uint32_t const ces[9] = { 0x2231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_283)
{
    // 046E 0062;	
    // (Ѯ) CYRILLIC CAPITAL LETTER KSI	[2231 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x046E, 0x0062 };
    uint32_t const ces[9] = { 0x2231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_284)
{
    // 0471 0021;	
    // (ѱ) CYRILLIC SMALL LETTER PSI	[2235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0471, 0x0021 };
    uint32_t const ces[9] = { 0x2235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_285)
{
    // 0470 0021;	
    // (Ѱ) CYRILLIC CAPITAL LETTER PSI	[2235 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0470, 0x0021 };
    uint32_t const ces[9] = { 0x2235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_286)
{
    // 0471 003F;	
    // (ѱ) CYRILLIC SMALL LETTER PSI	[2235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0471, 0x003F };
    uint32_t const ces[9] = { 0x2235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_287)
{
    // 0470 003F;	
    // (Ѱ) CYRILLIC CAPITAL LETTER PSI	[2235 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0470, 0x003F };
    uint32_t const ces[9] = { 0x2235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_288)
{
    // 0471 0061;	
    // (ѱ) CYRILLIC SMALL LETTER PSI	[2235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0471, 0x0061 };
    uint32_t const ces[9] = { 0x2235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_289)
{
    // 0471 0041;	
    // (ѱ) CYRILLIC SMALL LETTER PSI	[2235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0471, 0x0041 };
    uint32_t const ces[9] = { 0x2235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_290)
{
    // 0470 0061;	
    // (Ѱ) CYRILLIC CAPITAL LETTER PSI	[2235 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0470, 0x0061 };
    uint32_t const ces[9] = { 0x2235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_291)
{
    // 0470 0041;	
    // (Ѱ) CYRILLIC CAPITAL LETTER PSI	[2235 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0470, 0x0041 };
    uint32_t const ces[9] = { 0x2235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_292)
{
    // 0471 0062;	
    // (ѱ) CYRILLIC SMALL LETTER PSI	[2235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0471, 0x0062 };
    uint32_t const ces[9] = { 0x2235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_293)
{
    // 0470 0062;	
    // (Ѱ) CYRILLIC CAPITAL LETTER PSI	[2235 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0470, 0x0062 };
    uint32_t const ces[9] = { 0x2235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_294)
{
    // 0334 2DF4;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x2DF4 };
    uint32_t const ces[8] = { 0x2239, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_295)
{
    // 2DF4 0334;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x2DF4, 0x0334 };
    uint32_t const ces[8] = { 0x2239, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_296)
{
    // 0473 0021;	
    // (ѳ) CYRILLIC SMALL LETTER FITA	[2239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0473, 0x0021 };
    uint32_t const ces[9] = { 0x2239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_297)
{
    // 2DF4 0021;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF4, 0x0021 };
    uint32_t const ces[9] = { 0x2239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_298)
{
    // 0472 0021;	
    // (Ѳ) CYRILLIC CAPITAL LETTER FITA	[2239 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0472, 0x0021 };
    uint32_t const ces[9] = { 0x2239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_299)
{
    // 0473 003F;	
    // (ѳ) CYRILLIC SMALL LETTER FITA	[2239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0473, 0x003F };
    uint32_t const ces[9] = { 0x2239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_300)
{
    // 2DF4 003F;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF4, 0x003F };
    uint32_t const ces[9] = { 0x2239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_301)
{
    // 0472 003F;	
    // (Ѳ) CYRILLIC CAPITAL LETTER FITA	[2239 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0472, 0x003F };
    uint32_t const ces[9] = { 0x2239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_302)
{
    // 0473 0061;	
    // (ѳ) CYRILLIC SMALL LETTER FITA	[2239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0473, 0x0061 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_303)
{
    // 0473 0041;	
    // (ѳ) CYRILLIC SMALL LETTER FITA	[2239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0473, 0x0041 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_304)
{
    // 2DF4 0061;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF4, 0x0061 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_305)
{
    // 2DF4 0041;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2DF4, 0x0041 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_306)
{
    // 0472 0061;	
    // (Ѳ) CYRILLIC CAPITAL LETTER FITA	[2239 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0472, 0x0061 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_307)
{
    // 0472 0041;	
    // (Ѳ) CYRILLIC CAPITAL LETTER FITA	[2239 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0472, 0x0041 };
    uint32_t const ces[9] = { 0x2239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_308)
{
    // 0473 0062;	
    // (ѳ) CYRILLIC SMALL LETTER FITA	[2239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0473, 0x0062 };
    uint32_t const ces[9] = { 0x2239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_309)
{
    // 2DF4 0062;	
    // (ⷴ) COMBINING CYRILLIC LETTER FITA	[2239 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2DF4, 0x0062 };
    uint32_t const ces[9] = { 0x2239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_310)
{
    // 0472 0062;	
    // (Ѳ) CYRILLIC CAPITAL LETTER FITA	[2239 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0472, 0x0062 };
    uint32_t const ces[9] = { 0x2239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_311)
{
    // 0475 030F 0334;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA, COMBINING DOUBLE GRAVE ACCENT	[223D | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0475, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_312)
{
    // 0475 0334 030F;	
    // (ѵ̴) CYRILLIC SMALL LETTER IZHITSA, COMBINING TILDE OVERLAY	[223D | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0475, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_313)
{
    // 0477 0334;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0477, 0x0334 };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_314)
{
    // 0474 030F 0334;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA, COMBINING DOUBLE GRAVE ACCENT	[223D | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0474, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_315)
{
    // 0474 0334 030F;	
    // (Ѵ̴) CYRILLIC CAPITAL LETTER IZHITSA, COMBINING TILDE OVERLAY	[223D | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0474, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_316)
{
    // 0476 0334;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0476, 0x0334 };
    uint32_t const ces[10] = { 0x223D, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_317)
{
    // 0475 0021;	
    // (ѵ) CYRILLIC SMALL LETTER IZHITSA	[223D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0475, 0x0021 };
    uint32_t const ces[9] = { 0x223D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_318)
{
    // 0474 0021;	
    // (Ѵ) CYRILLIC CAPITAL LETTER IZHITSA	[223D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0474, 0x0021 };
    uint32_t const ces[9] = { 0x223D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_319)
{
    // 0477 0021;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0477, 0x0021 };
    uint32_t const ces[11] = { 0x223D, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_320)
{
    // 0476 0021;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0476, 0x0021 };
    uint32_t const ces[11] = { 0x223D, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_321)
{
    // 0475 003F;	
    // (ѵ) CYRILLIC SMALL LETTER IZHITSA	[223D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0475, 0x003F };
    uint32_t const ces[9] = { 0x223D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_322)
{
    // 0474 003F;	
    // (Ѵ) CYRILLIC CAPITAL LETTER IZHITSA	[223D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0474, 0x003F };
    uint32_t const ces[9] = { 0x223D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_323)
{
    // 0477 003F;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0477, 0x003F };
    uint32_t const ces[11] = { 0x223D, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_324)
{
    // 0476 003F;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0476, 0x003F };
    uint32_t const ces[11] = { 0x223D, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_325)
{
    // 0475 0061;	
    // (ѵ) CYRILLIC SMALL LETTER IZHITSA	[223D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0475, 0x0061 };
    uint32_t const ces[9] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_326)
{
    // 0475 0041;	
    // (ѵ) CYRILLIC SMALL LETTER IZHITSA	[223D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0475, 0x0041 };
    uint32_t const ces[9] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_327)
{
    // 0474 0061;	
    // (Ѵ) CYRILLIC CAPITAL LETTER IZHITSA	[223D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0474, 0x0061 };
    uint32_t const ces[9] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_328)
{
    // 0474 0041;	
    // (Ѵ) CYRILLIC CAPITAL LETTER IZHITSA	[223D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0474, 0x0041 };
    uint32_t const ces[9] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_329)
{
    // 0477 0061;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CAD | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0477, 0x0061 };
    uint32_t const ces[11] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_330)
{
    // 0477 0041;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CAD | 0020 003C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0477, 0x0041 };
    uint32_t const ces[11] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_331)
{
    // 0476 0061;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CAD | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0476, 0x0061 };
    uint32_t const ces[11] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_332)
{
    // 0476 0041;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CAD | 0020 003C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0476, 0x0041 };
    uint32_t const ces[11] = { 0x223D, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_333)
{
    // 0475 0062;	
    // (ѵ) CYRILLIC SMALL LETTER IZHITSA	[223D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0475, 0x0062 };
    uint32_t const ces[9] = { 0x223D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_334)
{
    // 0474 0062;	
    // (Ѵ) CYRILLIC CAPITAL LETTER IZHITSA	[223D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0474, 0x0062 };
    uint32_t const ces[9] = { 0x223D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_335)
{
    // 0477 0062;	
    // (ѷ) CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CC6 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0477, 0x0062 };
    uint32_t const ces[11] = { 0x223D, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_336)
{
    // 0476 0062;	
    // (Ѷ) CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT	[223D 1CC6 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0476, 0x0062 };
    uint32_t const ces[11] = { 0x223D, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_337)
{
    // A65F 0021;	
    // (ꙟ) CYRILLIC SMALL LETTER YN	[2241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65F, 0x0021 };
    uint32_t const ces[9] = { 0x2241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_338)
{
    // A65E 0021;	
    // (Ꙟ) CYRILLIC CAPITAL LETTER YN	[2241 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65E, 0x0021 };
    uint32_t const ces[9] = { 0x2241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_339)
{
    // A65F 003F;	
    // (ꙟ) CYRILLIC SMALL LETTER YN	[2241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65F, 0x003F };
    uint32_t const ces[9] = { 0x2241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_340)
{
    // A65E 003F;	
    // (Ꙟ) CYRILLIC CAPITAL LETTER YN	[2241 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65E, 0x003F };
    uint32_t const ces[9] = { 0x2241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_341)
{
    // A65F 0061;	
    // (ꙟ) CYRILLIC SMALL LETTER YN	[2241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65F, 0x0061 };
    uint32_t const ces[9] = { 0x2241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_342)
{
    // A65F 0041;	
    // (ꙟ) CYRILLIC SMALL LETTER YN	[2241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA65F, 0x0041 };
    uint32_t const ces[9] = { 0x2241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_343)
{
    // A65E 0061;	
    // (Ꙟ) CYRILLIC CAPITAL LETTER YN	[2241 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65E, 0x0061 };
    uint32_t const ces[9] = { 0x2241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_344)
{
    // A65E 0041;	
    // (Ꙟ) CYRILLIC CAPITAL LETTER YN	[2241 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA65E, 0x0041 };
    uint32_t const ces[9] = { 0x2241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_345)
{
    // A65F 0062;	
    // (ꙟ) CYRILLIC SMALL LETTER YN	[2241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA65F, 0x0062 };
    uint32_t const ces[9] = { 0x2241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_346)
{
    // A65E 0062;	
    // (Ꙟ) CYRILLIC CAPITAL LETTER YN	[2241 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA65E, 0x0062 };
    uint32_t const ces[9] = { 0x2241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_347)
{
    // 04A9 0021;	
    // (ҩ) CYRILLIC SMALL LETTER ABKHASIAN HA	[2242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A9, 0x0021 };
    uint32_t const ces[9] = { 0x2242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_348)
{
    // 04A8 0021;	
    // (Ҩ) CYRILLIC CAPITAL LETTER ABKHASIAN HA	[2242 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A8, 0x0021 };
    uint32_t const ces[9] = { 0x2242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_349)
{
    // 04A9 003F;	
    // (ҩ) CYRILLIC SMALL LETTER ABKHASIAN HA	[2242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A9, 0x003F };
    uint32_t const ces[9] = { 0x2242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_350)
{
    // 04A8 003F;	
    // (Ҩ) CYRILLIC CAPITAL LETTER ABKHASIAN HA	[2242 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A8, 0x003F };
    uint32_t const ces[9] = { 0x2242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_351)
{
    // 04A9 0061;	
    // (ҩ) CYRILLIC SMALL LETTER ABKHASIAN HA	[2242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A9, 0x0061 };
    uint32_t const ces[9] = { 0x2242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_352)
{
    // 04A9 0041;	
    // (ҩ) CYRILLIC SMALL LETTER ABKHASIAN HA	[2242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04A9, 0x0041 };
    uint32_t const ces[9] = { 0x2242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_353)
{
    // 04A8 0061;	
    // (Ҩ) CYRILLIC CAPITAL LETTER ABKHASIAN HA	[2242 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A8, 0x0061 };
    uint32_t const ces[9] = { 0x2242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_354)
{
    // 04A8 0041;	
    // (Ҩ) CYRILLIC CAPITAL LETTER ABKHASIAN HA	[2242 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04A8, 0x0041 };
    uint32_t const ces[9] = { 0x2242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_355)
{
    // 04A9 0062;	
    // (ҩ) CYRILLIC SMALL LETTER ABKHASIAN HA	[2242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04A9, 0x0062 };
    uint32_t const ces[9] = { 0x2242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_356)
{
    // 04A8 0062;	
    // (Ҩ) CYRILLIC CAPITAL LETTER ABKHASIAN HA	[2242 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04A8, 0x0062 };
    uint32_t const ces[9] = { 0x2242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_357)
{
    // 051D 0021;	
    // (ԝ) CYRILLIC SMALL LETTER WE	[2246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051D, 0x0021 };
    uint32_t const ces[9] = { 0x2246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_358)
{
    // 051C 0021;	
    // (Ԝ) CYRILLIC CAPITAL LETTER WE	[2246 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051C, 0x0021 };
    uint32_t const ces[9] = { 0x2246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_359)
{
    // 051D 003F;	
    // (ԝ) CYRILLIC SMALL LETTER WE	[2246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051D, 0x003F };
    uint32_t const ces[9] = { 0x2246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_360)
{
    // 051C 003F;	
    // (Ԝ) CYRILLIC CAPITAL LETTER WE	[2246 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051C, 0x003F };
    uint32_t const ces[9] = { 0x2246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_361)
{
    // 051D 0061;	
    // (ԝ) CYRILLIC SMALL LETTER WE	[2246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051D, 0x0061 };
    uint32_t const ces[9] = { 0x2246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_362)
{
    // 051D 0041;	
    // (ԝ) CYRILLIC SMALL LETTER WE	[2246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x051D, 0x0041 };
    uint32_t const ces[9] = { 0x2246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_363)
{
    // 051C 0061;	
    // (Ԝ) CYRILLIC CAPITAL LETTER WE	[2246 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051C, 0x0061 };
    uint32_t const ces[9] = { 0x2246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_364)
{
    // 051C 0041;	
    // (Ԝ) CYRILLIC CAPITAL LETTER WE	[2246 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x051C, 0x0041 };
    uint32_t const ces[9] = { 0x2246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_365)
{
    // 051D 0062;	
    // (ԝ) CYRILLIC SMALL LETTER WE	[2246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x051D, 0x0062 };
    uint32_t const ces[9] = { 0x2246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_366)
{
    // 051C 0062;	
    // (Ԝ) CYRILLIC CAPITAL LETTER WE	[2246 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x051C, 0x0062 };
    uint32_t const ces[9] = { 0x2246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_367)
{
    // 04CF 0021;	
    // (ӏ) CYRILLIC SMALL LETTER PALOCHKA	[2247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CF, 0x0021 };
    uint32_t const ces[9] = { 0x2247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_368)
{
    // 04C0 0021;	
    // (Ӏ) CYRILLIC LETTER PALOCHKA	[2247 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C0, 0x0021 };
    uint32_t const ces[9] = { 0x2247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_369)
{
    // 04CF 003F;	
    // (ӏ) CYRILLIC SMALL LETTER PALOCHKA	[2247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CF, 0x003F };
    uint32_t const ces[9] = { 0x2247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_370)
{
    // 04C0 003F;	
    // (Ӏ) CYRILLIC LETTER PALOCHKA	[2247 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C0, 0x003F };
    uint32_t const ces[9] = { 0x2247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_371)
{
    // 04CF 0061;	
    // (ӏ) CYRILLIC SMALL LETTER PALOCHKA	[2247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CF, 0x0061 };
    uint32_t const ces[9] = { 0x2247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_372)
{
    // 04CF 0041;	
    // (ӏ) CYRILLIC SMALL LETTER PALOCHKA	[2247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x04CF, 0x0041 };
    uint32_t const ces[9] = { 0x2247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_373)
{
    // 04C0 0061;	
    // (Ӏ) CYRILLIC LETTER PALOCHKA	[2247 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C0, 0x0061 };
    uint32_t const ces[9] = { 0x2247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_374)
{
    // 04C0 0041;	
    // (Ӏ) CYRILLIC LETTER PALOCHKA	[2247 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x04C0, 0x0041 };
    uint32_t const ces[9] = { 0x2247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_375)
{
    // 04CF 0062;	
    // (ӏ) CYRILLIC SMALL LETTER PALOCHKA	[2247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x04CF, 0x0062 };
    uint32_t const ces[9] = { 0x2247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_376)
{
    // 04C0 0062;	
    // (Ӏ) CYRILLIC LETTER PALOCHKA	[2247 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x04C0, 0x0062 };
    uint32_t const ces[9] = { 0x2247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_377)
{
    // 0334 1E000;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E000 };
    uint32_t const ces[8] = { 0x224B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_378)
{
    // 1E000 0334;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E000, 0x0334 };
    uint32_t const ces[8] = { 0x224B, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_379)
{
    // 2C30 0021;	
    // (ⰰ) GLAGOLITIC SMALL LETTER AZU	[224B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C30, 0x0021 };
    uint32_t const ces[9] = { 0x224B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_380)
{
    // 1E000 0021;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E000, 0x0021 };
    uint32_t const ces[9] = { 0x224B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_381)
{
    // 2C00 0021;	
    // (Ⰰ) GLAGOLITIC CAPITAL LETTER AZU	[224B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C00, 0x0021 };
    uint32_t const ces[9] = { 0x224B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_382)
{
    // 2C30 003F;	
    // (ⰰ) GLAGOLITIC SMALL LETTER AZU	[224B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C30, 0x003F };
    uint32_t const ces[9] = { 0x224B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_383)
{
    // 1E000 003F;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E000, 0x003F };
    uint32_t const ces[9] = { 0x224B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_384)
{
    // 2C00 003F;	
    // (Ⰰ) GLAGOLITIC CAPITAL LETTER AZU	[224B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C00, 0x003F };
    uint32_t const ces[9] = { 0x224B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_385)
{
    // 2C30 0061;	
    // (ⰰ) GLAGOLITIC SMALL LETTER AZU	[224B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C30, 0x0061 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_386)
{
    // 2C30 0041;	
    // (ⰰ) GLAGOLITIC SMALL LETTER AZU	[224B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C30, 0x0041 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_387)
{
    // 1E000 0061;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E000, 0x0061 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_388)
{
    // 1E000 0041;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E000, 0x0041 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_389)
{
    // 2C00 0061;	
    // (Ⰰ) GLAGOLITIC CAPITAL LETTER AZU	[224B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C00, 0x0061 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_390)
{
    // 2C00 0041;	
    // (Ⰰ) GLAGOLITIC CAPITAL LETTER AZU	[224B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C00, 0x0041 };
    uint32_t const ces[9] = { 0x224B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_391)
{
    // 2C30 0062;	
    // (ⰰ) GLAGOLITIC SMALL LETTER AZU	[224B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C30, 0x0062 };
    uint32_t const ces[9] = { 0x224B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_392)
{
    // 1E000 0062;	
    // (𞀀) COMBINING GLAGOLITIC LETTER AZU	[224B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E000, 0x0062 };
    uint32_t const ces[9] = { 0x224B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_393)
{
    // 2C00 0062;	
    // (Ⰰ) GLAGOLITIC CAPITAL LETTER AZU	[224B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C00, 0x0062 };
    uint32_t const ces[9] = { 0x224B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_394)
{
    // 0334 1E001;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E001 };
    uint32_t const ces[8] = { 0x224C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_395)
{
    // 1E001 0334;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E001, 0x0334 };
    uint32_t const ces[8] = { 0x224C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_396)
{
    // 2C31 0021;	
    // (ⰱ) GLAGOLITIC SMALL LETTER BUKY	[224C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C31, 0x0021 };
    uint32_t const ces[9] = { 0x224C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_397)
{
    // 1E001 0021;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E001, 0x0021 };
    uint32_t const ces[9] = { 0x224C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_398)
{
    // 2C01 0021;	
    // (Ⰱ) GLAGOLITIC CAPITAL LETTER BUKY	[224C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C01, 0x0021 };
    uint32_t const ces[9] = { 0x224C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_399)
{
    // 2C31 003F;	
    // (ⰱ) GLAGOLITIC SMALL LETTER BUKY	[224C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C31, 0x003F };
    uint32_t const ces[9] = { 0x224C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_400)
{
    // 1E001 003F;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E001, 0x003F };
    uint32_t const ces[9] = { 0x224C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_401)
{
    // 2C01 003F;	
    // (Ⰱ) GLAGOLITIC CAPITAL LETTER BUKY	[224C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C01, 0x003F };
    uint32_t const ces[9] = { 0x224C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_402)
{
    // 2C31 0061;	
    // (ⰱ) GLAGOLITIC SMALL LETTER BUKY	[224C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C31, 0x0061 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_403)
{
    // 2C31 0041;	
    // (ⰱ) GLAGOLITIC SMALL LETTER BUKY	[224C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C31, 0x0041 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_404)
{
    // 1E001 0061;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E001, 0x0061 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_405)
{
    // 1E001 0041;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E001, 0x0041 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_406)
{
    // 2C01 0061;	
    // (Ⰱ) GLAGOLITIC CAPITAL LETTER BUKY	[224C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C01, 0x0061 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_407)
{
    // 2C01 0041;	
    // (Ⰱ) GLAGOLITIC CAPITAL LETTER BUKY	[224C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C01, 0x0041 };
    uint32_t const ces[9] = { 0x224C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_408)
{
    // 2C31 0062;	
    // (ⰱ) GLAGOLITIC SMALL LETTER BUKY	[224C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C31, 0x0062 };
    uint32_t const ces[9] = { 0x224C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_409)
{
    // 1E001 0062;	
    // (𞀁) COMBINING GLAGOLITIC LETTER BUKY	[224C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E001, 0x0062 };
    uint32_t const ces[9] = { 0x224C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_410)
{
    // 2C01 0062;	
    // (Ⰱ) GLAGOLITIC CAPITAL LETTER BUKY	[224C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C01, 0x0062 };
    uint32_t const ces[9] = { 0x224C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_411)
{
    // 0334 1E002;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E002 };
    uint32_t const ces[8] = { 0x224D, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_412)
{
    // 1E002 0334;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E002, 0x0334 };
    uint32_t const ces[8] = { 0x224D, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_413)
{
    // 2C32 0021;	
    // (ⰲ) GLAGOLITIC SMALL LETTER VEDE	[224D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C32, 0x0021 };
    uint32_t const ces[9] = { 0x224D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_414)
{
    // 1E002 0021;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E002, 0x0021 };
    uint32_t const ces[9] = { 0x224D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_415)
{
    // 2C02 0021;	
    // (Ⰲ) GLAGOLITIC CAPITAL LETTER VEDE	[224D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C02, 0x0021 };
    uint32_t const ces[9] = { 0x224D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_416)
{
    // 2C32 003F;	
    // (ⰲ) GLAGOLITIC SMALL LETTER VEDE	[224D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C32, 0x003F };
    uint32_t const ces[9] = { 0x224D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_417)
{
    // 1E002 003F;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E002, 0x003F };
    uint32_t const ces[9] = { 0x224D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_418)
{
    // 2C02 003F;	
    // (Ⰲ) GLAGOLITIC CAPITAL LETTER VEDE	[224D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C02, 0x003F };
    uint32_t const ces[9] = { 0x224D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_419)
{
    // 2C32 0061;	
    // (ⰲ) GLAGOLITIC SMALL LETTER VEDE	[224D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C32, 0x0061 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_420)
{
    // 2C32 0041;	
    // (ⰲ) GLAGOLITIC SMALL LETTER VEDE	[224D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C32, 0x0041 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_421)
{
    // 1E002 0061;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E002, 0x0061 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_422)
{
    // 1E002 0041;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E002, 0x0041 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_423)
{
    // 2C02 0061;	
    // (Ⰲ) GLAGOLITIC CAPITAL LETTER VEDE	[224D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C02, 0x0061 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_424)
{
    // 2C02 0041;	
    // (Ⰲ) GLAGOLITIC CAPITAL LETTER VEDE	[224D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C02, 0x0041 };
    uint32_t const ces[9] = { 0x224D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_425)
{
    // 2C32 0062;	
    // (ⰲ) GLAGOLITIC SMALL LETTER VEDE	[224D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C32, 0x0062 };
    uint32_t const ces[9] = { 0x224D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_426)
{
    // 1E002 0062;	
    // (𞀂) COMBINING GLAGOLITIC LETTER VEDE	[224D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E002, 0x0062 };
    uint32_t const ces[9] = { 0x224D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_427)
{
    // 2C02 0062;	
    // (Ⰲ) GLAGOLITIC CAPITAL LETTER VEDE	[224D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C02, 0x0062 };
    uint32_t const ces[9] = { 0x224D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_428)
{
    // 0334 1E003;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E003 };
    uint32_t const ces[8] = { 0x224E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_429)
{
    // 1E003 0334;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E003, 0x0334 };
    uint32_t const ces[8] = { 0x224E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_430)
{
    // 2C33 0021;	
    // (ⰳ) GLAGOLITIC SMALL LETTER GLAGOLI	[224E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C33, 0x0021 };
    uint32_t const ces[9] = { 0x224E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_431)
{
    // 1E003 0021;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E003, 0x0021 };
    uint32_t const ces[9] = { 0x224E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_432)
{
    // 2C03 0021;	
    // (Ⰳ) GLAGOLITIC CAPITAL LETTER GLAGOLI	[224E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C03, 0x0021 };
    uint32_t const ces[9] = { 0x224E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_433)
{
    // 2C33 003F;	
    // (ⰳ) GLAGOLITIC SMALL LETTER GLAGOLI	[224E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C33, 0x003F };
    uint32_t const ces[9] = { 0x224E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_434)
{
    // 1E003 003F;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E003, 0x003F };
    uint32_t const ces[9] = { 0x224E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_435)
{
    // 2C03 003F;	
    // (Ⰳ) GLAGOLITIC CAPITAL LETTER GLAGOLI	[224E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C03, 0x003F };
    uint32_t const ces[9] = { 0x224E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_436)
{
    // 2C33 0061;	
    // (ⰳ) GLAGOLITIC SMALL LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C33, 0x0061 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_437)
{
    // 2C33 0041;	
    // (ⰳ) GLAGOLITIC SMALL LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C33, 0x0041 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_438)
{
    // 1E003 0061;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E003, 0x0061 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_439)
{
    // 1E003 0041;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E003, 0x0041 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_440)
{
    // 2C03 0061;	
    // (Ⰳ) GLAGOLITIC CAPITAL LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C03, 0x0061 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_441)
{
    // 2C03 0041;	
    // (Ⰳ) GLAGOLITIC CAPITAL LETTER GLAGOLI	[224E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C03, 0x0041 };
    uint32_t const ces[9] = { 0x224E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_442)
{
    // 2C33 0062;	
    // (ⰳ) GLAGOLITIC SMALL LETTER GLAGOLI	[224E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C33, 0x0062 };
    uint32_t const ces[9] = { 0x224E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_443)
{
    // 1E003 0062;	
    // (𞀃) COMBINING GLAGOLITIC LETTER GLAGOLI	[224E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E003, 0x0062 };
    uint32_t const ces[9] = { 0x224E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_444)
{
    // 2C03 0062;	
    // (Ⰳ) GLAGOLITIC CAPITAL LETTER GLAGOLI	[224E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C03, 0x0062 };
    uint32_t const ces[9] = { 0x224E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_445)
{
    // 0334 1E004;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E004 };
    uint32_t const ces[8] = { 0x224F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_446)
{
    // 1E004 0334;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E004, 0x0334 };
    uint32_t const ces[8] = { 0x224F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_447)
{
    // 2C34 0021;	
    // (ⰴ) GLAGOLITIC SMALL LETTER DOBRO	[224F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C34, 0x0021 };
    uint32_t const ces[9] = { 0x224F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_448)
{
    // 1E004 0021;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E004, 0x0021 };
    uint32_t const ces[9] = { 0x224F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_449)
{
    // 2C04 0021;	
    // (Ⰴ) GLAGOLITIC CAPITAL LETTER DOBRO	[224F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C04, 0x0021 };
    uint32_t const ces[9] = { 0x224F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_450)
{
    // 2C34 003F;	
    // (ⰴ) GLAGOLITIC SMALL LETTER DOBRO	[224F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C34, 0x003F };
    uint32_t const ces[9] = { 0x224F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_451)
{
    // 1E004 003F;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E004, 0x003F };
    uint32_t const ces[9] = { 0x224F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_452)
{
    // 2C04 003F;	
    // (Ⰴ) GLAGOLITIC CAPITAL LETTER DOBRO	[224F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C04, 0x003F };
    uint32_t const ces[9] = { 0x224F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_453)
{
    // 2C34 0061;	
    // (ⰴ) GLAGOLITIC SMALL LETTER DOBRO	[224F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C34, 0x0061 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_454)
{
    // 2C34 0041;	
    // (ⰴ) GLAGOLITIC SMALL LETTER DOBRO	[224F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C34, 0x0041 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_455)
{
    // 1E004 0061;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E004, 0x0061 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_456)
{
    // 1E004 0041;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E004, 0x0041 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_457)
{
    // 2C04 0061;	
    // (Ⰴ) GLAGOLITIC CAPITAL LETTER DOBRO	[224F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C04, 0x0061 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_458)
{
    // 2C04 0041;	
    // (Ⰴ) GLAGOLITIC CAPITAL LETTER DOBRO	[224F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C04, 0x0041 };
    uint32_t const ces[9] = { 0x224F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_459)
{
    // 2C34 0062;	
    // (ⰴ) GLAGOLITIC SMALL LETTER DOBRO	[224F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C34, 0x0062 };
    uint32_t const ces[9] = { 0x224F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_460)
{
    // 1E004 0062;	
    // (𞀄) COMBINING GLAGOLITIC LETTER DOBRO	[224F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E004, 0x0062 };
    uint32_t const ces[9] = { 0x224F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_461)
{
    // 2C04 0062;	
    // (Ⰴ) GLAGOLITIC CAPITAL LETTER DOBRO	[224F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C04, 0x0062 };
    uint32_t const ces[9] = { 0x224F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_462)
{
    // 0334 1E005;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E005 };
    uint32_t const ces[8] = { 0x2250, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_463)
{
    // 1E005 0334;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E005, 0x0334 };
    uint32_t const ces[8] = { 0x2250, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_464)
{
    // 2C35 0021;	
    // (ⰵ) GLAGOLITIC SMALL LETTER YESTU	[2250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C35, 0x0021 };
    uint32_t const ces[9] = { 0x2250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_465)
{
    // 1E005 0021;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E005, 0x0021 };
    uint32_t const ces[9] = { 0x2250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_466)
{
    // 2C05 0021;	
    // (Ⰵ) GLAGOLITIC CAPITAL LETTER YESTU	[2250 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C05, 0x0021 };
    uint32_t const ces[9] = { 0x2250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_467)
{
    // 2C35 003F;	
    // (ⰵ) GLAGOLITIC SMALL LETTER YESTU	[2250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C35, 0x003F };
    uint32_t const ces[9] = { 0x2250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_468)
{
    // 1E005 003F;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E005, 0x003F };
    uint32_t const ces[9] = { 0x2250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_469)
{
    // 2C05 003F;	
    // (Ⰵ) GLAGOLITIC CAPITAL LETTER YESTU	[2250 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C05, 0x003F };
    uint32_t const ces[9] = { 0x2250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_470)
{
    // 2C35 0061;	
    // (ⰵ) GLAGOLITIC SMALL LETTER YESTU	[2250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C35, 0x0061 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_471)
{
    // 2C35 0041;	
    // (ⰵ) GLAGOLITIC SMALL LETTER YESTU	[2250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C35, 0x0041 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_472)
{
    // 1E005 0061;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E005, 0x0061 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_473)
{
    // 1E005 0041;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E005, 0x0041 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_474)
{
    // 2C05 0061;	
    // (Ⰵ) GLAGOLITIC CAPITAL LETTER YESTU	[2250 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C05, 0x0061 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_475)
{
    // 2C05 0041;	
    // (Ⰵ) GLAGOLITIC CAPITAL LETTER YESTU	[2250 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C05, 0x0041 };
    uint32_t const ces[9] = { 0x2250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_476)
{
    // 2C35 0062;	
    // (ⰵ) GLAGOLITIC SMALL LETTER YESTU	[2250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C35, 0x0062 };
    uint32_t const ces[9] = { 0x2250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_477)
{
    // 1E005 0062;	
    // (𞀅) COMBINING GLAGOLITIC LETTER YESTU	[2250 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E005, 0x0062 };
    uint32_t const ces[9] = { 0x2250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_478)
{
    // 2C05 0062;	
    // (Ⰵ) GLAGOLITIC CAPITAL LETTER YESTU	[2250 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C05, 0x0062 };
    uint32_t const ces[9] = { 0x2250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_479)
{
    // 0334 1E006;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1E006 };
    uint32_t const ces[8] = { 0x2251, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_480)
{
    // 1E006 0334;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1E006, 0x0334 };
    uint32_t const ces[8] = { 0x2251, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_481)
{
    // 2C36 0021;	
    // (ⰶ) GLAGOLITIC SMALL LETTER ZHIVETE	[2251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C36, 0x0021 };
    uint32_t const ces[9] = { 0x2251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_482)
{
    // 1E006 0021;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E006, 0x0021 };
    uint32_t const ces[9] = { 0x2251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_483)
{
    // 2C06 0021;	
    // (Ⰶ) GLAGOLITIC CAPITAL LETTER ZHIVETE	[2251 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C06, 0x0021 };
    uint32_t const ces[9] = { 0x2251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_484)
{
    // 2C36 003F;	
    // (ⰶ) GLAGOLITIC SMALL LETTER ZHIVETE	[2251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C36, 0x003F };
    uint32_t const ces[9] = { 0x2251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_485)
{
    // 1E006 003F;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E006, 0x003F };
    uint32_t const ces[9] = { 0x2251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_486)
{
    // 2C06 003F;	
    // (Ⰶ) GLAGOLITIC CAPITAL LETTER ZHIVETE	[2251 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C06, 0x003F };
    uint32_t const ces[9] = { 0x2251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_487)
{
    // 2C36 0061;	
    // (ⰶ) GLAGOLITIC SMALL LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C36, 0x0061 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_488)
{
    // 2C36 0041;	
    // (ⰶ) GLAGOLITIC SMALL LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C36, 0x0041 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_489)
{
    // 1E006 0061;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E006, 0x0061 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_490)
{
    // 1E006 0041;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1E006, 0x0041 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_491)
{
    // 2C06 0061;	
    // (Ⰶ) GLAGOLITIC CAPITAL LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C06, 0x0061 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_492)
{
    // 2C06 0041;	
    // (Ⰶ) GLAGOLITIC CAPITAL LETTER ZHIVETE	[2251 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C06, 0x0041 };
    uint32_t const ces[9] = { 0x2251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_493)
{
    // 2C36 0062;	
    // (ⰶ) GLAGOLITIC SMALL LETTER ZHIVETE	[2251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C36, 0x0062 };
    uint32_t const ces[9] = { 0x2251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_494)
{
    // 1E006 0062;	
    // (𞀆) COMBINING GLAGOLITIC LETTER ZHIVETE	[2251 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1E006, 0x0062 };
    uint32_t const ces[9] = { 0x2251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_495)
{
    // 2C06 0062;	
    // (Ⰶ) GLAGOLITIC CAPITAL LETTER ZHIVETE	[2251 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C06, 0x0062 };
    uint32_t const ces[9] = { 0x2251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_496)
{
    // 2C37 0021;	
    // (ⰷ) GLAGOLITIC SMALL LETTER DZELO	[2252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C37, 0x0021 };
    uint32_t const ces[9] = { 0x2252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_497)
{
    // 2C07 0021;	
    // (Ⰷ) GLAGOLITIC CAPITAL LETTER DZELO	[2252 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C07, 0x0021 };
    uint32_t const ces[9] = { 0x2252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_498)
{
    // 2C37 003F;	
    // (ⰷ) GLAGOLITIC SMALL LETTER DZELO	[2252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C37, 0x003F };
    uint32_t const ces[9] = { 0x2252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_141_499)
{
    // 2C07 003F;	
    // (Ⰷ) GLAGOLITIC CAPITAL LETTER DZELO	[2252 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C07, 0x003F };
    uint32_t const ces[9] = { 0x2252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

