// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_073_000)
{
    // 2CD6  ; [.207D.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC GANGIA

    uint32_t const cps[1] = { 0x2cd6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_001)
{
    // 2CD7  ; [.207D.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC GANGIA

    uint32_t const cps[1] = { 0x2cd7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_002)
{
    // 2CD8  ; [.207F.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC DJA

    uint32_t const cps[1] = { 0x2cd8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_003)
{
    // 2CD9  ; [.207F.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC DJA

    uint32_t const cps[1] = { 0x2cd9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_004)
{
    // 2CDA  ; [.2080.0020.0008] 
    // COPTIC CAPITAL LETTER OLD COPTIC SHIMA

    uint32_t const cps[1] = { 0x2cda };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2080), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_005)
{
    // 2CDB  ; [.2080.0020.0002] 
    // COPTIC SMALL LETTER OLD COPTIC SHIMA

    uint32_t const cps[1] = { 0x2cdb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2080), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_006)
{
    // 2CDC  ; [.2081.0020.0008] 
    // COPTIC CAPITAL LETTER OLD NUBIAN SHIMA

    uint32_t const cps[1] = { 0x2cdc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2081), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_007)
{
    // 2CDD  ; [.2081.0020.0002] 
    // COPTIC SMALL LETTER OLD NUBIAN SHIMA

    uint32_t const cps[1] = { 0x2cdd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2081), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_008)
{
    // 2CDE  ; [.2085.0020.0008] 
    // COPTIC CAPITAL LETTER OLD NUBIAN NGI

    uint32_t const cps[1] = { 0x2cde };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2085), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_009)
{
    // 2CDF  ; [.2085.0020.0002] 
    // COPTIC SMALL LETTER OLD NUBIAN NGI

    uint32_t const cps[1] = { 0x2cdf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2085), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_010)
{
    // 2CE0  ; [.2086.0020.0008] 
    // COPTIC CAPITAL LETTER OLD NUBIAN NYI

    uint32_t const cps[1] = { 0x2ce0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2086), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_011)
{
    // 2CE1  ; [.2086.0020.0002] 
    // COPTIC SMALL LETTER OLD NUBIAN NYI

    uint32_t const cps[1] = { 0x2ce1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2086), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_012)
{
    // 2CE2  ; [.2087.0020.0008] 
    // COPTIC CAPITAL LETTER OLD NUBIAN WAU

    uint32_t const cps[1] = { 0x2ce2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2087), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_013)
{
    // 2CE3  ; [.2087.0020.0002] 
    // COPTIC SMALL LETTER OLD NUBIAN WAU

    uint32_t const cps[1] = { 0x2ce3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2087), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_014)
{
    // 2CE4  ; [.2057.0020.0004][.204C.0020.0004][.2056.0020.0004] 
    // COPTIC SYMBOL KAI

    uint32_t const cps[1] = { 0x2ce4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2057), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x204c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2056), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_073_015)
{
    // 2CE5  ; [*0DAE.0020.0002] 
    // COPTIC SYMBOL MI RO

    uint32_t const cps[1] = { 0x2ce5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_016)
{
    // 2CE6  ; [*0DAF.0020.0002] 
    // COPTIC SYMBOL PI RO

    uint32_t const cps[1] = { 0x2ce6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_017)
{
    // 2CE7  ; [*0DB0.0020.0002] 
    // COPTIC SYMBOL STAUROS

    uint32_t const cps[1] = { 0x2ce7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_018)
{
    // 2CE8  ; [*0DB1.0020.0002] 
    // COPTIC SYMBOL TAU RO

    uint32_t const cps[1] = { 0x2ce8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_019)
{
    // 2CE9  ; [*0DB2.0020.0002] 
    // COPTIC SYMBOL KHI RO

    uint32_t const cps[1] = { 0x2ce9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_020)
{
    // 2CEA  ; [*0DB3.0020.0002] 
    // COPTIC SYMBOL SHIMA SIMA

    uint32_t const cps[1] = { 0x2cea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_021)
{
    // 2CEB  ; [.206C.0020.0008] 
    // COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI

    uint32_t const cps[1] = { 0x2ceb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x206c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_022)
{
    // 2CEC  ; [.206C.0020.0002] 
    // COPTIC SMALL LETTER CRYPTOGRAMMIC SHEI

    uint32_t const cps[1] = { 0x2cec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x206c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_023)
{
    // 2CED  ; [.207C.0020.0008] 
    // COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA

    uint32_t const cps[1] = { 0x2ced };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_024)
{
    // 2CEE  ; [.207C.0020.0002] 
    // COPTIC SMALL LETTER CRYPTOGRAMMIC GANGIA

    uint32_t const cps[1] = { 0x2cee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x207c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_025)
{
    // 2CEF  ; [.0000.0033.0002] 
    // COPTIC COMBINING NI ABOVE

    uint32_t const cps[1] = { 0x2cef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_026)
{
    // 2CF0  ; [.0000.0023.0002] 
    // COPTIC COMBINING SPIRITUS ASPER

    uint32_t const cps[1] = { 0x2cf0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_027)
{
    // 2CF1  ; [.0000.0022.0002] 
    // COPTIC COMBINING SPIRITUS LENIS

    uint32_t const cps[1] = { 0x2cf1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_028)
{
    // 2CF2  ; [.2072.0020.0008] 
    // COPTIC CAPITAL LETTER BOHAIRIC KHEI

    uint32_t const cps[1] = { 0x2cf2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2072), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_029)
{
    // 2CF3  ; [.2072.0020.0002] 
    // COPTIC SMALL LETTER BOHAIRIC KHEI

    uint32_t const cps[1] = { 0x2cf3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2072), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_030)
{
    // 2CF9  ; [*0282.0020.0002] 
    // COPTIC OLD NUBIAN FULL STOP

    uint32_t const cps[1] = { 0x2cf9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x282), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_031)
{
    // 2CFA  ; [*026F.0020.0002] 
    // COPTIC OLD NUBIAN DIRECT QUESTION MARK

    uint32_t const cps[1] = { 0x2cfa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x26f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_032)
{
    // 2CFB  ; [*0270.0020.0002] 
    // COPTIC OLD NUBIAN INDIRECT QUESTION MARK

    uint32_t const cps[1] = { 0x2cfb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x270), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_033)
{
    // 2CFC  ; [*02F7.0020.0002] 
    // COPTIC OLD NUBIAN VERSE DIVIDER

    uint32_t const cps[1] = { 0x2cfc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_034)
{
    // 2CFD  ; [*1B46.0020.0002] 
    // COPTIC FRACTION ONE HALF

    uint32_t const cps[1] = { 0x2cfd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_035)
{
    // 2CFE  ; [*0283.0020.0002] 
    // COPTIC FULL STOP

    uint32_t const cps[1] = { 0x2cfe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x283), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_036)
{
    // 2CFF  ; [*02F8.0020.0002] 
    // COPTIC MORPHOLOGICAL DIVIDER

    uint32_t const cps[1] = { 0x2cff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_037)
{
    // 2D00  ; [.22A1.0020.0002] 
    // GEORGIAN SMALL LETTER AN

    uint32_t const cps[1] = { 0x2d00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_038)
{
    // 2D01  ; [.22A3.0020.0002] 
    // GEORGIAN SMALL LETTER BAN

    uint32_t const cps[1] = { 0x2d01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_039)
{
    // 2D02  ; [.22A5.0020.0002] 
    // GEORGIAN SMALL LETTER GAN

    uint32_t const cps[1] = { 0x2d02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_040)
{
    // 2D03  ; [.22A7.0020.0002] 
    // GEORGIAN SMALL LETTER DON

    uint32_t const cps[1] = { 0x2d03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_041)
{
    // 2D04  ; [.22A9.0020.0002] 
    // GEORGIAN SMALL LETTER EN

    uint32_t const cps[1] = { 0x2d04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_042)
{
    // 2D05  ; [.22AB.0020.0002] 
    // GEORGIAN SMALL LETTER VIN

    uint32_t const cps[1] = { 0x2d05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_043)
{
    // 2D06  ; [.22AD.0020.0002] 
    // GEORGIAN SMALL LETTER ZEN

    uint32_t const cps[1] = { 0x2d06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_044)
{
    // 2D07  ; [.22B1.0020.0002] 
    // GEORGIAN SMALL LETTER TAN

    uint32_t const cps[1] = { 0x2d07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_045)
{
    // 2D08  ; [.22B3.0020.0002] 
    // GEORGIAN SMALL LETTER IN

    uint32_t const cps[1] = { 0x2d08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_046)
{
    // 2D09  ; [.22B5.0020.0002] 
    // GEORGIAN SMALL LETTER KAN

    uint32_t const cps[1] = { 0x2d09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_047)
{
    // 2D0A  ; [.22B7.0020.0002] 
    // GEORGIAN SMALL LETTER LAS

    uint32_t const cps[1] = { 0x2d0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_048)
{
    // 2D0B  ; [.22B9.0020.0002] 
    // GEORGIAN SMALL LETTER MAN

    uint32_t const cps[1] = { 0x2d0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_049)
{
    // 2D0C  ; [.22BB.0020.0002] 
    // GEORGIAN SMALL LETTER NAR

    uint32_t const cps[1] = { 0x2d0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_050)
{
    // 2D0D  ; [.22BF.0020.0002] 
    // GEORGIAN SMALL LETTER ON

    uint32_t const cps[1] = { 0x2d0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_051)
{
    // 2D0E  ; [.22C1.0020.0002] 
    // GEORGIAN SMALL LETTER PAR

    uint32_t const cps[1] = { 0x2d0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_052)
{
    // 2D0F  ; [.22C3.0020.0002] 
    // GEORGIAN SMALL LETTER ZHAR

    uint32_t const cps[1] = { 0x2d0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_053)
{
    // 2D10  ; [.22C5.0020.0002] 
    // GEORGIAN SMALL LETTER RAE

    uint32_t const cps[1] = { 0x2d10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_054)
{
    // 2D11  ; [.22C7.0020.0002] 
    // GEORGIAN SMALL LETTER SAN

    uint32_t const cps[1] = { 0x2d11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_055)
{
    // 2D12  ; [.22C9.0020.0002] 
    // GEORGIAN SMALL LETTER TAR

    uint32_t const cps[1] = { 0x2d12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_056)
{
    // 2D13  ; [.22CD.0020.0002] 
    // GEORGIAN SMALL LETTER UN

    uint32_t const cps[1] = { 0x2d13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_057)
{
    // 2D14  ; [.22CF.0020.0002] 
    // GEORGIAN SMALL LETTER PHAR

    uint32_t const cps[1] = { 0x2d14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_058)
{
    // 2D15  ; [.22D1.0020.0002] 
    // GEORGIAN SMALL LETTER KHAR

    uint32_t const cps[1] = { 0x2d15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_059)
{
    // 2D16  ; [.22D3.0020.0002] 
    // GEORGIAN SMALL LETTER GHAN

    uint32_t const cps[1] = { 0x2d16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_060)
{
    // 2D17  ; [.22D5.0020.0002] 
    // GEORGIAN SMALL LETTER QAR

    uint32_t const cps[1] = { 0x2d17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_061)
{
    // 2D18  ; [.22D7.0020.0002] 
    // GEORGIAN SMALL LETTER SHIN

    uint32_t const cps[1] = { 0x2d18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_062)
{
    // 2D19  ; [.22D9.0020.0002] 
    // GEORGIAN SMALL LETTER CHIN

    uint32_t const cps[1] = { 0x2d19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_063)
{
    // 2D1A  ; [.22DB.0020.0002] 
    // GEORGIAN SMALL LETTER CAN

    uint32_t const cps[1] = { 0x2d1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_064)
{
    // 2D1B  ; [.22DD.0020.0002] 
    // GEORGIAN SMALL LETTER JIL

    uint32_t const cps[1] = { 0x2d1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_065)
{
    // 2D1C  ; [.22DF.0020.0002] 
    // GEORGIAN SMALL LETTER CIL

    uint32_t const cps[1] = { 0x2d1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_066)
{
    // 2D1D  ; [.22E1.0020.0002] 
    // GEORGIAN SMALL LETTER CHAR

    uint32_t const cps[1] = { 0x2d1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_067)
{
    // 2D1E  ; [.22E3.0020.0002] 
    // GEORGIAN SMALL LETTER XAN

    uint32_t const cps[1] = { 0x2d1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_068)
{
    // 2D1F  ; [.22E7.0020.0002] 
    // GEORGIAN SMALL LETTER JHAN

    uint32_t const cps[1] = { 0x2d1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_069)
{
    // 2D20  ; [.22E9.0020.0002] 
    // GEORGIAN SMALL LETTER HAE

    uint32_t const cps[1] = { 0x2d20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_070)
{
    // 2D21  ; [.22AF.0020.0002] 
    // GEORGIAN SMALL LETTER HE

    uint32_t const cps[1] = { 0x2d21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_071)
{
    // 2D22  ; [.22BD.0020.0002] 
    // GEORGIAN SMALL LETTER HIE

    uint32_t const cps[1] = { 0x2d22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_072)
{
    // 2D23  ; [.22CB.0020.0002] 
    // GEORGIAN SMALL LETTER WE

    uint32_t const cps[1] = { 0x2d23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_073)
{
    // 2D24  ; [.22E5.0020.0002] 
    // GEORGIAN SMALL LETTER HAR

    uint32_t const cps[1] = { 0x2d24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_074)
{
    // 2D25  ; [.22EB.0020.0002] 
    // GEORGIAN SMALL LETTER HOE

    uint32_t const cps[1] = { 0x2d25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_075)
{
    // 2D27  ; [.22EE.0020.0002] 
    // GEORGIAN SMALL LETTER YN

    uint32_t const cps[1] = { 0x2d27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_076)
{
    // 2D2D  ; [.22F3.0020.0002] 
    // GEORGIAN SMALL LETTER AEN

    uint32_t const cps[1] = { 0x2d2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x22f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_077)
{
    // 2D30  ; [.24CE.0020.0002] 
    // TIFINAGH LETTER YA

    uint32_t const cps[1] = { 0x2d30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_078)
{
    // 2D31  ; [.24CF.0020.0002] 
    // TIFINAGH LETTER YAB

    uint32_t const cps[1] = { 0x2d31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_079)
{
    // 2D32  ; [.24D0.0020.0002] 
    // TIFINAGH LETTER YABH

    uint32_t const cps[1] = { 0x2d32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_080)
{
    // 2D33  ; [.24D1.0020.0002] 
    // TIFINAGH LETTER YAG

    uint32_t const cps[1] = { 0x2d33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_081)
{
    // 2D34  ; [.24D2.0020.0002] 
    // TIFINAGH LETTER YAGHH

    uint32_t const cps[1] = { 0x2d34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_082)
{
    // 2D35  ; [.24D3.0020.0002] 
    // TIFINAGH LETTER BERBER ACADEMY YAJ

    uint32_t const cps[1] = { 0x2d35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_083)
{
    // 2D36  ; [.24D4.0020.0002] 
    // TIFINAGH LETTER YAJ

    uint32_t const cps[1] = { 0x2d36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_084)
{
    // 2D37  ; [.24D5.0020.0002] 
    // TIFINAGH LETTER YAD

    uint32_t const cps[1] = { 0x2d37 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_085)
{
    // 2D38  ; [.24D6.0020.0002] 
    // TIFINAGH LETTER YADH

    uint32_t const cps[1] = { 0x2d38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_086)
{
    // 2D39  ; [.24D7.0020.0002] 
    // TIFINAGH LETTER YADD

    uint32_t const cps[1] = { 0x2d39 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_087)
{
    // 2D3A  ; [.24D8.0020.0002] 
    // TIFINAGH LETTER YADDH

    uint32_t const cps[1] = { 0x2d3a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_088)
{
    // 2D3B  ; [.24D9.0020.0002] 
    // TIFINAGH LETTER YEY

    uint32_t const cps[1] = { 0x2d3b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_089)
{
    // 2D3C  ; [.24DB.0020.0002] 
    // TIFINAGH LETTER YAF

    uint32_t const cps[1] = { 0x2d3c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_090)
{
    // 2D3D  ; [.24DC.0020.0002] 
    // TIFINAGH LETTER YAK

    uint32_t const cps[1] = { 0x2d3d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_091)
{
    // 2D3E  ; [.24DD.0020.0002] 
    // TIFINAGH LETTER TUAREG YAK

    uint32_t const cps[1] = { 0x2d3e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_092)
{
    // 2D3F  ; [.24DE.0020.0002] 
    // TIFINAGH LETTER YAKHH

    uint32_t const cps[1] = { 0x2d3f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_093)
{
    // 2D40  ; [.24DF.0020.0002] 
    // TIFINAGH LETTER YAH

    uint32_t const cps[1] = { 0x2d40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_094)
{
    // 2D41  ; [.24E0.0020.0002] 
    // TIFINAGH LETTER BERBER ACADEMY YAH

    uint32_t const cps[1] = { 0x2d41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_095)
{
    // 2D42  ; [.24E1.0020.0002] 
    // TIFINAGH LETTER TUAREG YAH

    uint32_t const cps[1] = { 0x2d42 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_096)
{
    // 2D43  ; [.24E2.0020.0002] 
    // TIFINAGH LETTER YAHH

    uint32_t const cps[1] = { 0x2d43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_097)
{
    // 2D44  ; [.24E3.0020.0002] 
    // TIFINAGH LETTER YAA

    uint32_t const cps[1] = { 0x2d44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_098)
{
    // 2D45  ; [.24E4.0020.0002] 
    // TIFINAGH LETTER YAKH

    uint32_t const cps[1] = { 0x2d45 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_099)
{
    // 2D46  ; [.24E5.0020.0002] 
    // TIFINAGH LETTER TUAREG YAKH

    uint32_t const cps[1] = { 0x2d46 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_100)
{
    // 2D47  ; [.24E6.0020.0002] 
    // TIFINAGH LETTER YAQ

    uint32_t const cps[1] = { 0x2d47 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_101)
{
    // 2D48  ; [.24E7.0020.0002] 
    // TIFINAGH LETTER TUAREG YAQ

    uint32_t const cps[1] = { 0x2d48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_102)
{
    // 2D49  ; [.24E8.0020.0002] 
    // TIFINAGH LETTER YI

    uint32_t const cps[1] = { 0x2d49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_103)
{
    // 2D4A  ; [.24E9.0020.0002] 
    // TIFINAGH LETTER YAZH

    uint32_t const cps[1] = { 0x2d4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_104)
{
    // 2D4B  ; [.24EA.0020.0002] 
    // TIFINAGH LETTER AHAGGAR YAZH

    uint32_t const cps[1] = { 0x2d4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_105)
{
    // 2D4C  ; [.24EB.0020.0002] 
    // TIFINAGH LETTER TUAREG YAZH

    uint32_t const cps[1] = { 0x2d4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_106)
{
    // 2D4D  ; [.24EC.0020.0002] 
    // TIFINAGH LETTER YAL

    uint32_t const cps[1] = { 0x2d4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_107)
{
    // 2D4E  ; [.24ED.0020.0002] 
    // TIFINAGH LETTER YAM

    uint32_t const cps[1] = { 0x2d4e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_108)
{
    // 2D4F  ; [.24EE.0020.0002] 
    // TIFINAGH LETTER YAN

    uint32_t const cps[1] = { 0x2d4f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_109)
{
    // 2D50  ; [.24EF.0020.0002] 
    // TIFINAGH LETTER TUAREG YAGN

    uint32_t const cps[1] = { 0x2d50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_110)
{
    // 2D51  ; [.24F0.0020.0002] 
    // TIFINAGH LETTER TUAREG YANG

    uint32_t const cps[1] = { 0x2d51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_111)
{
    // 2D52  ; [.24F1.0020.0002] 
    // TIFINAGH LETTER YAP

    uint32_t const cps[1] = { 0x2d52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_112)
{
    // 2D53  ; [.24F2.0020.0002] 
    // TIFINAGH LETTER YU

    uint32_t const cps[1] = { 0x2d53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_113)
{
    // 2D54  ; [.24F4.0020.0002] 
    // TIFINAGH LETTER YAR

    uint32_t const cps[1] = { 0x2d54 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_114)
{
    // 2D55  ; [.24F5.0020.0002] 
    // TIFINAGH LETTER YARR

    uint32_t const cps[1] = { 0x2d55 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_115)
{
    // 2D56  ; [.24F6.0020.0002] 
    // TIFINAGH LETTER YAGH

    uint32_t const cps[1] = { 0x2d56 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_116)
{
    // 2D57  ; [.24F7.0020.0002] 
    // TIFINAGH LETTER TUAREG YAGH

    uint32_t const cps[1] = { 0x2d57 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_117)
{
    // 2D58  ; [.24F8.0020.0002] 
    // TIFINAGH LETTER AYER YAGH

    uint32_t const cps[1] = { 0x2d58 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_118)
{
    // 2D59  ; [.24F9.0020.0002] 
    // TIFINAGH LETTER YAS

    uint32_t const cps[1] = { 0x2d59 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_119)
{
    // 2D5A  ; [.24FA.0020.0002] 
    // TIFINAGH LETTER YASS

    uint32_t const cps[1] = { 0x2d5a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_120)
{
    // 2D5B  ; [.24FB.0020.0002] 
    // TIFINAGH LETTER YASH

    uint32_t const cps[1] = { 0x2d5b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_121)
{
    // 2D5C  ; [.24FC.0020.0002] 
    // TIFINAGH LETTER YAT

    uint32_t const cps[1] = { 0x2d5c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_122)
{
    // 2D5D  ; [.24FD.0020.0002] 
    // TIFINAGH LETTER YATH

    uint32_t const cps[1] = { 0x2d5d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_123)
{
    // 2D5E  ; [.24FE.0020.0002] 
    // TIFINAGH LETTER YACH

    uint32_t const cps[1] = { 0x2d5e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_124)
{
    // 2D5F  ; [.24FF.0020.0002] 
    // TIFINAGH LETTER YATT

    uint32_t const cps[1] = { 0x2d5f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_125)
{
    // 2D60  ; [.2500.0020.0002] 
    // TIFINAGH LETTER YAV

    uint32_t const cps[1] = { 0x2d60 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2500), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_126)
{
    // 2D61  ; [.2501.0020.0002] 
    // TIFINAGH LETTER YAW

    uint32_t const cps[1] = { 0x2d61 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2501), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_127)
{
    // 2D62  ; [.2502.0020.0002] 
    // TIFINAGH LETTER YAY

    uint32_t const cps[1] = { 0x2d62 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2502), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_128)
{
    // 2D63  ; [.2503.0020.0002] 
    // TIFINAGH LETTER YAZ

    uint32_t const cps[1] = { 0x2d63 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2503), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_129)
{
    // 2D64  ; [.2504.0020.0002] 
    // TIFINAGH LETTER TAWELLEMET YAZ

    uint32_t const cps[1] = { 0x2d64 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2504), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_130)
{
    // 2D65  ; [.2505.0020.0002] 
    // TIFINAGH LETTER YAZZ

    uint32_t const cps[1] = { 0x2d65 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2505), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_131)
{
    // 2D66  ; [.24DA.0020.0002] 
    // TIFINAGH LETTER YE

    uint32_t const cps[1] = { 0x2d66 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_132)
{
    // 2D67  ; [.24F3.0020.0002] 
    // TIFINAGH LETTER YO

    uint32_t const cps[1] = { 0x2d67 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x24f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_133)
{
    // 2D6F  ; [.2506.0020.0002] 
    // TIFINAGH MODIFIER LETTER LABIALIZATION MARK

    uint32_t const cps[1] = { 0x2d6f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2506), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_134)
{
    // 2D70  ; [*043D.0020.0002] 
    // TIFINAGH SEPARATOR MARK

    uint32_t const cps[1] = { 0x2d70 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x43d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_135)
{
    // 2D7F  ; [.0000.0000.0000] 
    // TIFINAGH CONSONANT JOINER

    uint32_t const cps[1] = { 0x2d7f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_136)
{
    // 2D80  ; [.2517.0020.0002] 
    // ETHIOPIC SYLLABLE LOA

    uint32_t const cps[1] = { 0x2d80 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2517), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_137)
{
    // 2D81  ; [.252C.0020.0002] 
    // ETHIOPIC SYLLABLE MOA

    uint32_t const cps[1] = { 0x2d81 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x252c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_138)
{
    // 2D82  ; [.253D.0020.0002] 
    // ETHIOPIC SYLLABLE ROA

    uint32_t const cps[1] = { 0x2d82 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x253d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_139)
{
    // 2D83  ; [.2546.0020.0002] 
    // ETHIOPIC SYLLABLE SOA

    uint32_t const cps[1] = { 0x2d83 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2546), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_140)
{
    // 2D84  ; [.2555.0020.0002] 
    // ETHIOPIC SYLLABLE SHOA

    uint32_t const cps[1] = { 0x2d84 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2555), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_141)
{
    // 2D85  ; [.257B.0020.0002] 
    // ETHIOPIC SYLLABLE BOA

    uint32_t const cps[1] = { 0x2d85 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x257b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_142)
{
    // 2D86  ; [.258C.0020.0002] 
    // ETHIOPIC SYLLABLE TOA

    uint32_t const cps[1] = { 0x2d86 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x258c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_143)
{
    // 2D87  ; [.2595.0020.0002] 
    // ETHIOPIC SYLLABLE COA

    uint32_t const cps[1] = { 0x2d87 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2595), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_144)
{
    // 2D88  ; [.25AB.0020.0002] 
    // ETHIOPIC SYLLABLE NOA

    uint32_t const cps[1] = { 0x2d88 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x25ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_145)
{
    // 2D89  ; [.25B4.0020.0002] 
    // ETHIOPIC SYLLABLE NYOA

    uint32_t const cps[1] = { 0x2d89 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x25b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_146)
{
    // 2D8A  ; [.25BD.0020.0002] 
    // ETHIOPIC SYLLABLE GLOTTAL OA

    uint32_t const cps[1] = { 0x2d8a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x25bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_147)
{
    // 2D8B  ; [.25EE.0020.0002] 
    // ETHIOPIC SYLLABLE ZOA

    uint32_t const cps[1] = { 0x2d8b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x25ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_148)
{
    // 2D8C  ; [.260D.0020.0002] 
    // ETHIOPIC SYLLABLE DOA

    uint32_t const cps[1] = { 0x2d8c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x260d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_073_149)
{
    // 2D8D  ; [.261C.0020.0002] 
    // ETHIOPIC SYLLABLE DDOA

    uint32_t const cps[1] = { 0x2d8d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x261c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

