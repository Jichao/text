// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_131_000)
{
    // 03CA 0334;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CA, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_001)
{
    // 1FBE 0334 0308;	
    // (ι̴) GREEK PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBE, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_002)
{
    // 0399 0308 0334;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA, COMBINING DIAERESIS	[202C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0399, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_003)
{
    // 0399 0334 0308;	
    // (Ι̴) GREEK CAPITAL LETTER IOTA, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0399, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_004)
{
    // 03AA 0334;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AA, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_005)
{
    // 0390 0334;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0390, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_006)
{
    // 03B9 0308 0334 0301;	
    // (ϊ̴) GREEK SMALL LETTER IOTA, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B9, 0x0308, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_007)
{
    // 03B9 0308 0334 0341;	
    // (ϊ̴) GREEK SMALL LETTER IOTA, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B9, 0x0308, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_008)
{
    // 1FD3 0334;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD3, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_009)
{
    // 03B9 0308 0334 0300;	
    // (ϊ̴) GREEK SMALL LETTER IOTA, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B9, 0x0308, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_010)
{
    // 1FBE 0308 0300 0334;	
    // (ῒ) GREEK PROSGEGRAMMENI, COMBINING DIAERESIS, COMBINING GRAVE ACCENT	[202C | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBE, 0x0308, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_011)
{
    // 1FBE 0308 0340 0334;	
    // (ῒ) GREEK PROSGEGRAMMENI, COMBINING DIAERESIS, COMBINING GRAVE TONE MARK	[202C | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBE, 0x0308, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_012)
{
    // 1FD2 0334;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C | 0020 004A 002B 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD2, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_013)
{
    // 03B9 0308 0334 0342;	
    // (ϊ̴) GREEK SMALL LETTER IOTA, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B9, 0x0308, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_014)
{
    // 03CA 0342 0334;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA, COMBINING GREEK PERISPOMENI	[202C | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03CA, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_015)
{
    // 1FBE 0308 0334 0342;	
    // (ϊ̴) GREEK PROSGEGRAMMENI, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[202C | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBE, 0x0308, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_016)
{
    // 1FBE 0308 0342 0334;	
    // (ῗ) GREEK PROSGEGRAMMENI, COMBINING DIAERESIS, COMBINING GREEK PERISPOMENI	[202C | 0020 004A 002B 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBE, 0x0308, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x002B, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_017)
{
    // 03B9 0304 0334;	
    // (ῑ) GREEK SMALL LETTER IOTA, COMBINING MACRON	[202C | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B9, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_018)
{
    // 03B9 0334 0304;	
    // (ι̴) GREEK SMALL LETTER IOTA, COMBINING TILDE OVERLAY	[202C | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B9, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_019)
{
    // 1FBE 0334 0304;	
    // (ι̴) GREEK PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[202C | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBE, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_020)
{
    // 1FD1 0334;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD1, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_021)
{
    // 0399 0304 0334;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA, COMBINING MACRON	[202C | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0399, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_022)
{
    // 0399 0334 0304;	
    // (Ι̴) GREEK CAPITAL LETTER IOTA, COMBINING TILDE OVERLAY	[202C | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0399, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_023)
{
    // 1FD9 0334;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD9, 0x0334 };
    uint32_t const ces[10] = { 0x202C, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_024)
{
    // 03B9 0021;	
    // (ι) GREEK SMALL LETTER IOTA	[202C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03B9, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_025)
{
    // 1FBE 0021;	
    // (ι) GREEK PROSGEGRAMMENI	[202C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBE, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_026)
{
    // 037A 0021;	
    // (ͺ) GREEK YPOGEGRAMMENI	[202C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x037A, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_027)
{
    // 1D6CA 0021;	
    // (𝛊) MATHEMATICAL BOLD SMALL IOTA	[202C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CA, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_028)
{
    // 1D704 0021;	
    // (𝜄) MATHEMATICAL ITALIC SMALL IOTA	[202C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D704, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_029)
{
    // 1D73E 0021;	
    // (𝜾) MATHEMATICAL BOLD ITALIC SMALL IOTA	[202C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73E, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_030)
{
    // 1D778 0021;	
    // (𝝸) MATHEMATICAL SANS-SERIF BOLD SMALL IOTA	[202C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D778, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_031)
{
    // 1D7B2 0021;	
    // (𝞲) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA	[202C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B2, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_032)
{
    // 0399 0021;	
    // (Ι) GREEK CAPITAL LETTER IOTA	[202C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0399, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_033)
{
    // 1D6B0 0021;	
    // (𝚰) MATHEMATICAL BOLD CAPITAL IOTA	[202C 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B0, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_034)
{
    // 1D6EA 0021;	
    // (𝛪) MATHEMATICAL ITALIC CAPITAL IOTA	[202C 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EA, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_035)
{
    // 1D724 0021;	
    // (𝜤) MATHEMATICAL BOLD ITALIC CAPITAL IOTA	[202C 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D724, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_036)
{
    // 1D75E 0021;	
    // (𝝞) MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA	[202C 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75E, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_037)
{
    // 1D798 0021;	
    // (𝞘) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA	[202C 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D798, 0x0021 };
    uint32_t const ces[9] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_038)
{
    // 1F30 0021;	
    // (ἰ) GREEK SMALL LETTER IOTA WITH PSILI	[202C 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F30, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_039)
{
    // 1F38 0021;	
    // (Ἰ) GREEK CAPITAL LETTER IOTA WITH PSILI	[202C 0261 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F38, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_040)
{
    // 1F34 0021;	
    // (ἴ) GREEK SMALL LETTER IOTA WITH PSILI AND OXIA	[202C 0261 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F34, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_041)
{
    // 1F3C 0021;	
    // (Ἴ) GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA	[202C 0261 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_042)
{
    // 1F32 0021;	
    // (ἲ) GREEK SMALL LETTER IOTA WITH PSILI AND VARIA	[202C 0261 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F32, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_043)
{
    // 1F3A 0021;	
    // (Ἲ) GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA	[202C 0261 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_044)
{
    // 1F36 0021;	
    // (ἶ) GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 0261 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F36, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_045)
{
    // 1F3E 0021;	
    // (Ἶ) GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 0261 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_046)
{
    // 1F31 0021;	
    // (ἱ) GREEK SMALL LETTER IOTA WITH DASIA	[202C 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F31, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_047)
{
    // 1F39 0021;	
    // (Ἱ) GREEK CAPITAL LETTER IOTA WITH DASIA	[202C 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F39, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_048)
{
    // 1F35 0021;	
    // (ἵ) GREEK SMALL LETTER IOTA WITH DASIA AND OXIA	[202C 0261 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F35, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_049)
{
    // 1F3D 0021;	
    // (Ἵ) GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA	[202C 0261 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_050)
{
    // 1F33 0021;	
    // (ἳ) GREEK SMALL LETTER IOTA WITH DASIA AND VARIA	[202C 0261 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F33, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_051)
{
    // 1F3B 0021;	
    // (Ἳ) GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA	[202C 0261 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_052)
{
    // 1F37 0021;	
    // (ἷ) GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 0261 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F37, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_053)
{
    // 1F3F 0021;	
    // (Ἷ) GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 0261 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_054)
{
    // 03AF 0021;	
    // (ί) GREEK SMALL LETTER IOTA WITH TONOS	[202C 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03AF, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_055)
{
    // 1F77 0021;	
    // (ί) GREEK SMALL LETTER IOTA WITH OXIA	[202C 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F77, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_056)
{
    // 038A 0021;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH TONOS	[202C 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038A, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_057)
{
    // 1FDB 0021;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH OXIA	[202C 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDB, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_058)
{
    // 1F76 0021;	
    // (ὶ) GREEK SMALL LETTER IOTA WITH VARIA	[202C 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F76, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_059)
{
    // 1FDA 0021;	
    // (Ὶ) GREEK CAPITAL LETTER IOTA WITH VARIA	[202C 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDA, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_060)
{
    // 1FD0 0021;	
    // (ῐ) GREEK SMALL LETTER IOTA WITH VRACHY	[202C 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD0, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_061)
{
    // 1FD8 0021;	
    // (Ῐ) GREEK CAPITAL LETTER IOTA WITH VRACHY	[202C 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD8, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_062)
{
    // 1FD6 0021;	
    // (ῖ) GREEK SMALL LETTER IOTA WITH PERISPOMENI	[202C 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD6, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_063)
{
    // 03CA 0021;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CA, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_064)
{
    // 03AA 0021;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AA, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_065)
{
    // 0390 0021;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C 0261 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0390, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_066)
{
    // 1FD3 0021;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C 0261 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD3, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_067)
{
    // 1FD2 0021;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C 0261 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD2, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_068)
{
    // 1FD7 0021;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI	[202C 0261 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD7, 0x0021 };
    uint32_t const ces[13] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_069)
{
    // 1FD1 0021;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD1, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_070)
{
    // 1FD9 0021;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD9, 0x0021 };
    uint32_t const ces[11] = { 0x202C, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_071)
{
    // 03B9 003F;	
    // (ι) GREEK SMALL LETTER IOTA	[202C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03B9, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_072)
{
    // 1FBE 003F;	
    // (ι) GREEK PROSGEGRAMMENI	[202C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBE, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_073)
{
    // 037A 003F;	
    // (ͺ) GREEK YPOGEGRAMMENI	[202C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x037A, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_074)
{
    // 1D6CA 003F;	
    // (𝛊) MATHEMATICAL BOLD SMALL IOTA	[202C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CA, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_075)
{
    // 1D704 003F;	
    // (𝜄) MATHEMATICAL ITALIC SMALL IOTA	[202C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D704, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_076)
{
    // 1D73E 003F;	
    // (𝜾) MATHEMATICAL BOLD ITALIC SMALL IOTA	[202C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73E, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_077)
{
    // 1D778 003F;	
    // (𝝸) MATHEMATICAL SANS-SERIF BOLD SMALL IOTA	[202C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D778, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_078)
{
    // 1D7B2 003F;	
    // (𝞲) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA	[202C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B2, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_079)
{
    // 0399 003F;	
    // (Ι) GREEK CAPITAL LETTER IOTA	[202C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0399, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_080)
{
    // 1D6B0 003F;	
    // (𝚰) MATHEMATICAL BOLD CAPITAL IOTA	[202C 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B0, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_081)
{
    // 1D6EA 003F;	
    // (𝛪) MATHEMATICAL ITALIC CAPITAL IOTA	[202C 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EA, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_082)
{
    // 1D724 003F;	
    // (𝜤) MATHEMATICAL BOLD ITALIC CAPITAL IOTA	[202C 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D724, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_083)
{
    // 1D75E 003F;	
    // (𝝞) MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA	[202C 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75E, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_084)
{
    // 1D798 003F;	
    // (𝞘) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA	[202C 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D798, 0x003F };
    uint32_t const ces[9] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_085)
{
    // 1F30 003F;	
    // (ἰ) GREEK SMALL LETTER IOTA WITH PSILI	[202C 0267 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F30, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_086)
{
    // 1F38 003F;	
    // (Ἰ) GREEK CAPITAL LETTER IOTA WITH PSILI	[202C 0267 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F38, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_087)
{
    // 1F34 003F;	
    // (ἴ) GREEK SMALL LETTER IOTA WITH PSILI AND OXIA	[202C 0267 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F34, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_088)
{
    // 1F3C 003F;	
    // (Ἴ) GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA	[202C 0267 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_089)
{
    // 1F32 003F;	
    // (ἲ) GREEK SMALL LETTER IOTA WITH PSILI AND VARIA	[202C 0267 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F32, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_090)
{
    // 1F3A 003F;	
    // (Ἲ) GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA	[202C 0267 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_091)
{
    // 1F36 003F;	
    // (ἶ) GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 0267 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F36, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_092)
{
    // 1F3E 003F;	
    // (Ἶ) GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 0267 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_093)
{
    // 1F31 003F;	
    // (ἱ) GREEK SMALL LETTER IOTA WITH DASIA	[202C 0267 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F31, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_094)
{
    // 1F39 003F;	
    // (Ἱ) GREEK CAPITAL LETTER IOTA WITH DASIA	[202C 0267 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F39, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_095)
{
    // 1F35 003F;	
    // (ἵ) GREEK SMALL LETTER IOTA WITH DASIA AND OXIA	[202C 0267 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F35, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_096)
{
    // 1F3D 003F;	
    // (Ἵ) GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA	[202C 0267 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_097)
{
    // 1F33 003F;	
    // (ἳ) GREEK SMALL LETTER IOTA WITH DASIA AND VARIA	[202C 0267 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F33, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_098)
{
    // 1F3B 003F;	
    // (Ἳ) GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA	[202C 0267 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_099)
{
    // 1F37 003F;	
    // (ἷ) GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 0267 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F37, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_100)
{
    // 1F3F 003F;	
    // (Ἷ) GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 0267 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_101)
{
    // 03AF 003F;	
    // (ί) GREEK SMALL LETTER IOTA WITH TONOS	[202C 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03AF, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_102)
{
    // 1F77 003F;	
    // (ί) GREEK SMALL LETTER IOTA WITH OXIA	[202C 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F77, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_103)
{
    // 038A 003F;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH TONOS	[202C 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038A, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_104)
{
    // 1FDB 003F;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH OXIA	[202C 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDB, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_105)
{
    // 1F76 003F;	
    // (ὶ) GREEK SMALL LETTER IOTA WITH VARIA	[202C 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F76, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_106)
{
    // 1FDA 003F;	
    // (Ὶ) GREEK CAPITAL LETTER IOTA WITH VARIA	[202C 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDA, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_107)
{
    // 1FD0 003F;	
    // (ῐ) GREEK SMALL LETTER IOTA WITH VRACHY	[202C 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD0, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_108)
{
    // 1FD8 003F;	
    // (Ῐ) GREEK CAPITAL LETTER IOTA WITH VRACHY	[202C 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD8, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_109)
{
    // 1FD6 003F;	
    // (ῖ) GREEK SMALL LETTER IOTA WITH PERISPOMENI	[202C 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD6, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_110)
{
    // 03CA 003F;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CA, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_111)
{
    // 03AA 003F;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AA, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_112)
{
    // 0390 003F;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0390, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_113)
{
    // 1FD3 003F;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD3, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_114)
{
    // 1FD2 003F;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C 0267 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD2, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_115)
{
    // 1FD7 003F;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI	[202C 0267 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD7, 0x003F };
    uint32_t const ces[13] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_116)
{
    // 1FD1 003F;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD1, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_117)
{
    // 1FD9 003F;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD9, 0x003F };
    uint32_t const ces[11] = { 0x202C, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_118)
{
    // 03B9 0061;	
    // (ι) GREEK SMALL LETTER IOTA	[202C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03B9, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_119)
{
    // 1FBE 0061;	
    // (ι) GREEK PROSGEGRAMMENI	[202C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBE, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_120)
{
    // 03B9 0041;	
    // (ι) GREEK SMALL LETTER IOTA	[202C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03B9, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_121)
{
    // 1FBE 0041;	
    // (ι) GREEK PROSGEGRAMMENI	[202C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FBE, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_122)
{
    // 037A 0061;	
    // (ͺ) GREEK YPOGEGRAMMENI	[202C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x037A, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_123)
{
    // 037A 0041;	
    // (ͺ) GREEK YPOGEGRAMMENI	[202C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x037A, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_124)
{
    // 1D6CA 0061;	
    // (𝛊) MATHEMATICAL BOLD SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CA, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_125)
{
    // 1D704 0061;	
    // (𝜄) MATHEMATICAL ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D704, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_126)
{
    // 1D73E 0061;	
    // (𝜾) MATHEMATICAL BOLD ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73E, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_127)
{
    // 1D778 0061;	
    // (𝝸) MATHEMATICAL SANS-SERIF BOLD SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D778, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_128)
{
    // 1D7B2 0061;	
    // (𝞲) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B2, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_129)
{
    // 1D6CA 0041;	
    // (𝛊) MATHEMATICAL BOLD SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CA, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_130)
{
    // 1D704 0041;	
    // (𝜄) MATHEMATICAL ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D704, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_131)
{
    // 1D73E 0041;	
    // (𝜾) MATHEMATICAL BOLD ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D73E, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_132)
{
    // 1D778 0041;	
    // (𝝸) MATHEMATICAL SANS-SERIF BOLD SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D778, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_133)
{
    // 1D7B2 0041;	
    // (𝞲) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA	[202C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B2, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_134)
{
    // 0399 0061;	
    // (Ι) GREEK CAPITAL LETTER IOTA	[202C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0399, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_135)
{
    // 0399 0041;	
    // (Ι) GREEK CAPITAL LETTER IOTA	[202C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0399, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_136)
{
    // 1D6B0 0061;	
    // (𝚰) MATHEMATICAL BOLD CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B0, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_137)
{
    // 1D6EA 0061;	
    // (𝛪) MATHEMATICAL ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EA, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_138)
{
    // 1D724 0061;	
    // (𝜤) MATHEMATICAL BOLD ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D724, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_139)
{
    // 1D75E 0061;	
    // (𝝞) MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75E, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_140)
{
    // 1D798 0061;	
    // (𝞘) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D798, 0x0061 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_141)
{
    // 1D6B0 0041;	
    // (𝚰) MATHEMATICAL BOLD CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B0, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_142)
{
    // 1D6EA 0041;	
    // (𝛪) MATHEMATICAL ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6EA, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_143)
{
    // 1D724 0041;	
    // (𝜤) MATHEMATICAL BOLD ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D724, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_144)
{
    // 1D75E 0041;	
    // (𝝞) MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D75E, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_145)
{
    // 1D798 0041;	
    // (𝞘) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA	[202C 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D798, 0x0041 };
    uint32_t const ces[9] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_146)
{
    // 1F30 0061;	
    // (ἰ) GREEK SMALL LETTER IOTA WITH PSILI	[202C 1CAD | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F30, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_147)
{
    // 1F30 0041;	
    // (ἰ) GREEK SMALL LETTER IOTA WITH PSILI	[202C 1CAD | 0020 0022 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F30, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_148)
{
    // 1F38 0061;	
    // (Ἰ) GREEK CAPITAL LETTER IOTA WITH PSILI	[202C 1CAD | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F38, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_149)
{
    // 1F38 0041;	
    // (Ἰ) GREEK CAPITAL LETTER IOTA WITH PSILI	[202C 1CAD | 0020 0022 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F38, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_150)
{
    // 1F34 0061;	
    // (ἴ) GREEK SMALL LETTER IOTA WITH PSILI AND OXIA	[202C 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F34, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_151)
{
    // 1F34 0041;	
    // (ἴ) GREEK SMALL LETTER IOTA WITH PSILI AND OXIA	[202C 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F34, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_152)
{
    // 1F3C 0061;	
    // (Ἴ) GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA	[202C 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_153)
{
    // 1F3C 0041;	
    // (Ἴ) GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA	[202C 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_154)
{
    // 1F32 0061;	
    // (ἲ) GREEK SMALL LETTER IOTA WITH PSILI AND VARIA	[202C 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F32, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_155)
{
    // 1F32 0041;	
    // (ἲ) GREEK SMALL LETTER IOTA WITH PSILI AND VARIA	[202C 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F32, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_156)
{
    // 1F3A 0061;	
    // (Ἲ) GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA	[202C 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_157)
{
    // 1F3A 0041;	
    // (Ἲ) GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA	[202C 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3A, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_158)
{
    // 1F36 0061;	
    // (ἶ) GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F36, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_159)
{
    // 1F36 0041;	
    // (ἶ) GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F36, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_160)
{
    // 1F3E 0061;	
    // (Ἶ) GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CAD | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_161)
{
    // 1F3E 0041;	
    // (Ἶ) GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CAD | 0020 0022 002A 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_162)
{
    // 1F31 0061;	
    // (ἱ) GREEK SMALL LETTER IOTA WITH DASIA	[202C 1CAD | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F31, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_163)
{
    // 1F31 0041;	
    // (ἱ) GREEK SMALL LETTER IOTA WITH DASIA	[202C 1CAD | 0020 0023 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F31, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_164)
{
    // 1F39 0061;	
    // (Ἱ) GREEK CAPITAL LETTER IOTA WITH DASIA	[202C 1CAD | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F39, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_165)
{
    // 1F39 0041;	
    // (Ἱ) GREEK CAPITAL LETTER IOTA WITH DASIA	[202C 1CAD | 0020 0023 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F39, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_166)
{
    // 1F35 0061;	
    // (ἵ) GREEK SMALL LETTER IOTA WITH DASIA AND OXIA	[202C 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F35, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_167)
{
    // 1F35 0041;	
    // (ἵ) GREEK SMALL LETTER IOTA WITH DASIA AND OXIA	[202C 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F35, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_168)
{
    // 1F3D 0061;	
    // (Ἵ) GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA	[202C 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_169)
{
    // 1F3D 0041;	
    // (Ἵ) GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA	[202C 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_170)
{
    // 1F33 0061;	
    // (ἳ) GREEK SMALL LETTER IOTA WITH DASIA AND VARIA	[202C 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F33, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_171)
{
    // 1F33 0041;	
    // (ἳ) GREEK SMALL LETTER IOTA WITH DASIA AND VARIA	[202C 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F33, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_172)
{
    // 1F3B 0061;	
    // (Ἳ) GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA	[202C 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_173)
{
    // 1F3B 0041;	
    // (Ἳ) GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA	[202C 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_174)
{
    // 1F37 0061;	
    // (ἷ) GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F37, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_175)
{
    // 1F37 0041;	
    // (ἷ) GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F37, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_176)
{
    // 1F3F 0061;	
    // (Ἷ) GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_177)
{
    // 1F3F 0041;	
    // (Ἷ) GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_178)
{
    // 03AF 0061;	
    // (ί) GREEK SMALL LETTER IOTA WITH TONOS	[202C 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03AF, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_179)
{
    // 1F77 0061;	
    // (ί) GREEK SMALL LETTER IOTA WITH OXIA	[202C 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F77, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_180)
{
    // 03AF 0041;	
    // (ί) GREEK SMALL LETTER IOTA WITH TONOS	[202C 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03AF, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_181)
{
    // 1F77 0041;	
    // (ί) GREEK SMALL LETTER IOTA WITH OXIA	[202C 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F77, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_182)
{
    // 038A 0061;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH TONOS	[202C 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038A, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_183)
{
    // 1FDB 0061;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH OXIA	[202C 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDB, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_184)
{
    // 038A 0041;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH TONOS	[202C 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x038A, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_185)
{
    // 1FDB 0041;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH OXIA	[202C 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FDB, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_186)
{
    // 1F76 0061;	
    // (ὶ) GREEK SMALL LETTER IOTA WITH VARIA	[202C 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F76, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_187)
{
    // 1F76 0041;	
    // (ὶ) GREEK SMALL LETTER IOTA WITH VARIA	[202C 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F76, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_188)
{
    // 1FDA 0061;	
    // (Ὶ) GREEK CAPITAL LETTER IOTA WITH VARIA	[202C 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDA, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_189)
{
    // 1FDA 0041;	
    // (Ὶ) GREEK CAPITAL LETTER IOTA WITH VARIA	[202C 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FDA, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_190)
{
    // 1FD0 0061;	
    // (ῐ) GREEK SMALL LETTER IOTA WITH VRACHY	[202C 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD0, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_191)
{
    // 1FD0 0041;	
    // (ῐ) GREEK SMALL LETTER IOTA WITH VRACHY	[202C 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD0, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_192)
{
    // 1FD8 0061;	
    // (Ῐ) GREEK CAPITAL LETTER IOTA WITH VRACHY	[202C 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD8, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_193)
{
    // 1FD8 0041;	
    // (Ῐ) GREEK CAPITAL LETTER IOTA WITH VRACHY	[202C 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FD8, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_194)
{
    // 1FD6 0061;	
    // (ῖ) GREEK SMALL LETTER IOTA WITH PERISPOMENI	[202C 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD6, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_195)
{
    // 1FD6 0041;	
    // (ῖ) GREEK SMALL LETTER IOTA WITH PERISPOMENI	[202C 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD6, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_196)
{
    // 03CA 0061;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CA, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_197)
{
    // 03CA 0041;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03CA, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_198)
{
    // 03AA 0061;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AA, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_199)
{
    // 03AA 0041;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x03AA, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_200)
{
    // 0390 0061;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0390, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_201)
{
    // 1FD3 0061;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD3, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_202)
{
    // 0390 0041;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0390, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_203)
{
    // 1FD3 0041;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD3, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_204)
{
    // 1FD2 0061;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD2, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_205)
{
    // 1FD2 0041;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD2, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_206)
{
    // 1FD7 0061;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI	[202C 1CAD | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD7, 0x0061 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_207)
{
    // 1FD7 0041;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI	[202C 1CAD | 0020 002B 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD7, 0x0041 };
    uint32_t const ces[13] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_208)
{
    // 1FD1 0061;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD1, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_209)
{
    // 1FD1 0041;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FD1, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_210)
{
    // 1FD9 0061;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD9, 0x0061 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_211)
{
    // 1FD9 0041;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FD9, 0x0041 };
    uint32_t const ces[11] = { 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_212)
{
    // 03B9 0062;	
    // (ι) GREEK SMALL LETTER IOTA	[202C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03B9, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_213)
{
    // 1FBE 0062;	
    // (ι) GREEK PROSGEGRAMMENI	[202C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBE, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_214)
{
    // 037A 0062;	
    // (ͺ) GREEK YPOGEGRAMMENI	[202C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x037A, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_215)
{
    // 1D6CA 0062;	
    // (𝛊) MATHEMATICAL BOLD SMALL IOTA	[202C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CA, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_216)
{
    // 1D704 0062;	
    // (𝜄) MATHEMATICAL ITALIC SMALL IOTA	[202C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D704, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_217)
{
    // 1D73E 0062;	
    // (𝜾) MATHEMATICAL BOLD ITALIC SMALL IOTA	[202C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73E, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_218)
{
    // 1D778 0062;	
    // (𝝸) MATHEMATICAL SANS-SERIF BOLD SMALL IOTA	[202C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D778, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_219)
{
    // 1D7B2 0062;	
    // (𝞲) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA	[202C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B2, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_220)
{
    // 0399 0062;	
    // (Ι) GREEK CAPITAL LETTER IOTA	[202C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0399, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_221)
{
    // 1D6B0 0062;	
    // (𝚰) MATHEMATICAL BOLD CAPITAL IOTA	[202C 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B0, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_222)
{
    // 1D6EA 0062;	
    // (𝛪) MATHEMATICAL ITALIC CAPITAL IOTA	[202C 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EA, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_223)
{
    // 1D724 0062;	
    // (𝜤) MATHEMATICAL BOLD ITALIC CAPITAL IOTA	[202C 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D724, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_224)
{
    // 1D75E 0062;	
    // (𝝞) MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA	[202C 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75E, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_225)
{
    // 1D798 0062;	
    // (𝞘) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA	[202C 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D798, 0x0062 };
    uint32_t const ces[9] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_226)
{
    // 1F30 0062;	
    // (ἰ) GREEK SMALL LETTER IOTA WITH PSILI	[202C 1CC6 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F30, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_227)
{
    // 1F38 0062;	
    // (Ἰ) GREEK CAPITAL LETTER IOTA WITH PSILI	[202C 1CC6 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F38, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_228)
{
    // 1F34 0062;	
    // (ἴ) GREEK SMALL LETTER IOTA WITH PSILI AND OXIA	[202C 1CC6 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F34, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_229)
{
    // 1F3C 0062;	
    // (Ἴ) GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA	[202C 1CC6 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_230)
{
    // 1F32 0062;	
    // (ἲ) GREEK SMALL LETTER IOTA WITH PSILI AND VARIA	[202C 1CC6 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F32, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_231)
{
    // 1F3A 0062;	
    // (Ἲ) GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA	[202C 1CC6 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3A, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_232)
{
    // 1F36 0062;	
    // (ἶ) GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CC6 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F36, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_233)
{
    // 1F3E 0062;	
    // (Ἶ) GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI	[202C 1CC6 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_234)
{
    // 1F31 0062;	
    // (ἱ) GREEK SMALL LETTER IOTA WITH DASIA	[202C 1CC6 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F31, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_235)
{
    // 1F39 0062;	
    // (Ἱ) GREEK CAPITAL LETTER IOTA WITH DASIA	[202C 1CC6 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F39, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_236)
{
    // 1F35 0062;	
    // (ἵ) GREEK SMALL LETTER IOTA WITH DASIA AND OXIA	[202C 1CC6 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F35, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_237)
{
    // 1F3D 0062;	
    // (Ἵ) GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA	[202C 1CC6 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_238)
{
    // 1F33 0062;	
    // (ἳ) GREEK SMALL LETTER IOTA WITH DASIA AND VARIA	[202C 1CC6 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F33, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_239)
{
    // 1F3B 0062;	
    // (Ἳ) GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA	[202C 1CC6 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_240)
{
    // 1F37 0062;	
    // (ἷ) GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CC6 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F37, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_241)
{
    // 1F3F 0062;	
    // (Ἷ) GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI	[202C 1CC6 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_242)
{
    // 03AF 0062;	
    // (ί) GREEK SMALL LETTER IOTA WITH TONOS	[202C 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03AF, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_243)
{
    // 1F77 0062;	
    // (ί) GREEK SMALL LETTER IOTA WITH OXIA	[202C 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F77, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_244)
{
    // 038A 0062;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH TONOS	[202C 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038A, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_245)
{
    // 1FDB 0062;	
    // (Ί) GREEK CAPITAL LETTER IOTA WITH OXIA	[202C 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDB, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_246)
{
    // 1F76 0062;	
    // (ὶ) GREEK SMALL LETTER IOTA WITH VARIA	[202C 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F76, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_247)
{
    // 1FDA 0062;	
    // (Ὶ) GREEK CAPITAL LETTER IOTA WITH VARIA	[202C 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FDA, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_248)
{
    // 1FD0 0062;	
    // (ῐ) GREEK SMALL LETTER IOTA WITH VRACHY	[202C 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD0, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_249)
{
    // 1FD8 0062;	
    // (Ῐ) GREEK CAPITAL LETTER IOTA WITH VRACHY	[202C 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD8, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_250)
{
    // 1FD6 0062;	
    // (ῖ) GREEK SMALL LETTER IOTA WITH PERISPOMENI	[202C 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD6, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_251)
{
    // 03CA 0062;	
    // (ϊ) GREEK SMALL LETTER IOTA WITH DIALYTIKA	[202C 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CA, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_252)
{
    // 03AA 0062;	
    // (Ϊ) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA	[202C 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AA, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_253)
{
    // 0390 0062;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS	[202C 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0390, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_254)
{
    // 1FD3 0062;	
    // (ΐ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA	[202C 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD3, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_255)
{
    // 1FD2 0062;	
    // (ῒ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA	[202C 1CC6 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD2, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_256)
{
    // 1FD7 0062;	
    // (ῗ) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI	[202C 1CC6 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD7, 0x0062 };
    uint32_t const ces[13] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_257)
{
    // 1FD1 0062;	
    // (ῑ) GREEK SMALL LETTER IOTA WITH MACRON	[202C 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FD1, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_258)
{
    // 1FD9 0062;	
    // (Ῑ) GREEK CAPITAL LETTER IOTA WITH MACRON	[202C 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FD9, 0x0062 };
    uint32_t const ces[11] = { 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_259)
{
    // 03F3 0021;	
    // (ϳ) GREEK LETTER YOT	[202D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F3, 0x0021 };
    uint32_t const ces[9] = { 0x202D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_260)
{
    // 037F 0021;	
    // (Ϳ) GREEK CAPITAL LETTER YOT	[202D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x037F, 0x0021 };
    uint32_t const ces[9] = { 0x202D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_261)
{
    // 03F3 003F;	
    // (ϳ) GREEK LETTER YOT	[202D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F3, 0x003F };
    uint32_t const ces[9] = { 0x202D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_262)
{
    // 037F 003F;	
    // (Ϳ) GREEK CAPITAL LETTER YOT	[202D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x037F, 0x003F };
    uint32_t const ces[9] = { 0x202D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_263)
{
    // 03F3 0061;	
    // (ϳ) GREEK LETTER YOT	[202D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F3, 0x0061 };
    uint32_t const ces[9] = { 0x202D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_264)
{
    // 03F3 0041;	
    // (ϳ) GREEK LETTER YOT	[202D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03F3, 0x0041 };
    uint32_t const ces[9] = { 0x202D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_265)
{
    // 037F 0061;	
    // (Ϳ) GREEK CAPITAL LETTER YOT	[202D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x037F, 0x0061 };
    uint32_t const ces[9] = { 0x202D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_266)
{
    // 037F 0041;	
    // (Ϳ) GREEK CAPITAL LETTER YOT	[202D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x037F, 0x0041 };
    uint32_t const ces[9] = { 0x202D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_267)
{
    // 03F3 0062;	
    // (ϳ) GREEK LETTER YOT	[202D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F3, 0x0062 };
    uint32_t const ces[9] = { 0x202D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_268)
{
    // 037F 0062;	
    // (Ϳ) GREEK CAPITAL LETTER YOT	[202D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x037F, 0x0062 };
    uint32_t const ces[9] = { 0x202D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_269)
{
    // 03BA 0021;	
    // (κ) GREEK SMALL LETTER KAPPA	[202E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BA, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_270)
{
    // 03F0 0021;	
    // (ϰ) GREEK KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F0, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_271)
{
    // 1D6CB 0021;	
    // (𝛋) MATHEMATICAL BOLD SMALL KAPPA	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CB, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_272)
{
    // 1D6DE 0021;	
    // (𝛞) MATHEMATICAL BOLD KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DE, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_273)
{
    // 1D705 0021;	
    // (𝜅) MATHEMATICAL ITALIC SMALL KAPPA	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D705, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_274)
{
    // 1D718 0021;	
    // (𝜘) MATHEMATICAL ITALIC KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D718, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_275)
{
    // 1D73F 0021;	
    // (𝜿) MATHEMATICAL BOLD ITALIC SMALL KAPPA	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73F, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_276)
{
    // 1D752 0021;	
    // (𝝒) MATHEMATICAL BOLD ITALIC KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D752, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_277)
{
    // 1D779 0021;	
    // (𝝹) MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D779, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_278)
{
    // 1D78C 0021;	
    // (𝞌) MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78C, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_279)
{
    // 1D7B3 0021;	
    // (𝞳) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B3, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_280)
{
    // 1D7C6 0021;	
    // (𝟆) MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL	[202E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C6, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_281)
{
    // 039A 0021;	
    // (Κ) GREEK CAPITAL LETTER KAPPA	[202E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039A, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_282)
{
    // 1D6B1 0021;	
    // (𝚱) MATHEMATICAL BOLD CAPITAL KAPPA	[202E 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B1, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_283)
{
    // 1D6EB 0021;	
    // (𝛫) MATHEMATICAL ITALIC CAPITAL KAPPA	[202E 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EB, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_284)
{
    // 1D725 0021;	
    // (𝜥) MATHEMATICAL BOLD ITALIC CAPITAL KAPPA	[202E 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D725, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_285)
{
    // 1D75F 0021;	
    // (𝝟) MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA	[202E 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75F, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_286)
{
    // 1D799 0021;	
    // (𝞙) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA	[202E 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D799, 0x0021 };
    uint32_t const ces[9] = { 0x202E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_287)
{
    // 03BA 003F;	
    // (κ) GREEK SMALL LETTER KAPPA	[202E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BA, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_288)
{
    // 03F0 003F;	
    // (ϰ) GREEK KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F0, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_289)
{
    // 1D6CB 003F;	
    // (𝛋) MATHEMATICAL BOLD SMALL KAPPA	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CB, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_290)
{
    // 1D6DE 003F;	
    // (𝛞) MATHEMATICAL BOLD KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DE, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_291)
{
    // 1D705 003F;	
    // (𝜅) MATHEMATICAL ITALIC SMALL KAPPA	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D705, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_292)
{
    // 1D718 003F;	
    // (𝜘) MATHEMATICAL ITALIC KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D718, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_293)
{
    // 1D73F 003F;	
    // (𝜿) MATHEMATICAL BOLD ITALIC SMALL KAPPA	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73F, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_294)
{
    // 1D752 003F;	
    // (𝝒) MATHEMATICAL BOLD ITALIC KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D752, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_295)
{
    // 1D779 003F;	
    // (𝝹) MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D779, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_296)
{
    // 1D78C 003F;	
    // (𝞌) MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78C, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_297)
{
    // 1D7B3 003F;	
    // (𝞳) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B3, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_298)
{
    // 1D7C6 003F;	
    // (𝟆) MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL	[202E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C6, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_299)
{
    // 039A 003F;	
    // (Κ) GREEK CAPITAL LETTER KAPPA	[202E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039A, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_300)
{
    // 1D6B1 003F;	
    // (𝚱) MATHEMATICAL BOLD CAPITAL KAPPA	[202E 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B1, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_301)
{
    // 1D6EB 003F;	
    // (𝛫) MATHEMATICAL ITALIC CAPITAL KAPPA	[202E 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EB, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_302)
{
    // 1D725 003F;	
    // (𝜥) MATHEMATICAL BOLD ITALIC CAPITAL KAPPA	[202E 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D725, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_303)
{
    // 1D75F 003F;	
    // (𝝟) MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA	[202E 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75F, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_304)
{
    // 1D799 003F;	
    // (𝞙) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA	[202E 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D799, 0x003F };
    uint32_t const ces[9] = { 0x202E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_305)
{
    // 03BA 0061;	
    // (κ) GREEK SMALL LETTER KAPPA	[202E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BA, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_306)
{
    // 03BA 0041;	
    // (κ) GREEK SMALL LETTER KAPPA	[202E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BA, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_307)
{
    // 03F0 0061;	
    // (ϰ) GREEK KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F0, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_308)
{
    // 03F0 0041;	
    // (ϰ) GREEK KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x03F0, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_309)
{
    // 1D6CB 0061;	
    // (𝛋) MATHEMATICAL BOLD SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CB, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_310)
{
    // 1D6DE 0061;	
    // (𝛞) MATHEMATICAL BOLD KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DE, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_311)
{
    // 1D705 0061;	
    // (𝜅) MATHEMATICAL ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D705, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_312)
{
    // 1D718 0061;	
    // (𝜘) MATHEMATICAL ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D718, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_313)
{
    // 1D73F 0061;	
    // (𝜿) MATHEMATICAL BOLD ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73F, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_314)
{
    // 1D752 0061;	
    // (𝝒) MATHEMATICAL BOLD ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D752, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_315)
{
    // 1D779 0061;	
    // (𝝹) MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D779, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_316)
{
    // 1D78C 0061;	
    // (𝞌) MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78C, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_317)
{
    // 1D7B3 0061;	
    // (𝞳) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B3, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_318)
{
    // 1D7C6 0061;	
    // (𝟆) MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C6, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_319)
{
    // 1D6CB 0041;	
    // (𝛋) MATHEMATICAL BOLD SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CB, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_320)
{
    // 1D6DE 0041;	
    // (𝛞) MATHEMATICAL BOLD KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6DE, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_321)
{
    // 1D705 0041;	
    // (𝜅) MATHEMATICAL ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D705, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_322)
{
    // 1D718 0041;	
    // (𝜘) MATHEMATICAL ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D718, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_323)
{
    // 1D73F 0041;	
    // (𝜿) MATHEMATICAL BOLD ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D73F, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_324)
{
    // 1D752 0041;	
    // (𝝒) MATHEMATICAL BOLD ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D752, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_325)
{
    // 1D779 0041;	
    // (𝝹) MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D779, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_326)
{
    // 1D78C 0041;	
    // (𝞌) MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D78C, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_327)
{
    // 1D7B3 0041;	
    // (𝞳) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B3, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_328)
{
    // 1D7C6 0041;	
    // (𝟆) MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL	[202E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C6, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_329)
{
    // 039A 0061;	
    // (Κ) GREEK CAPITAL LETTER KAPPA	[202E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039A, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_330)
{
    // 039A 0041;	
    // (Κ) GREEK CAPITAL LETTER KAPPA	[202E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039A, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_331)
{
    // 1D6B1 0061;	
    // (𝚱) MATHEMATICAL BOLD CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B1, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_332)
{
    // 1D6EB 0061;	
    // (𝛫) MATHEMATICAL ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EB, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_333)
{
    // 1D725 0061;	
    // (𝜥) MATHEMATICAL BOLD ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D725, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_334)
{
    // 1D75F 0061;	
    // (𝝟) MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75F, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_335)
{
    // 1D799 0061;	
    // (𝞙) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D799, 0x0061 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_336)
{
    // 1D6B1 0041;	
    // (𝚱) MATHEMATICAL BOLD CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B1, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_337)
{
    // 1D6EB 0041;	
    // (𝛫) MATHEMATICAL ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6EB, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_338)
{
    // 1D725 0041;	
    // (𝜥) MATHEMATICAL BOLD ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D725, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_339)
{
    // 1D75F 0041;	
    // (𝝟) MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D75F, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_340)
{
    // 1D799 0041;	
    // (𝞙) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA	[202E 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D799, 0x0041 };
    uint32_t const ces[9] = { 0x202E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_341)
{
    // 03BA 0062;	
    // (κ) GREEK SMALL LETTER KAPPA	[202E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BA, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_342)
{
    // 03F0 0062;	
    // (ϰ) GREEK KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03F0, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_343)
{
    // 1D6CB 0062;	
    // (𝛋) MATHEMATICAL BOLD SMALL KAPPA	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CB, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_344)
{
    // 1D6DE 0062;	
    // (𝛞) MATHEMATICAL BOLD KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DE, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_345)
{
    // 1D705 0062;	
    // (𝜅) MATHEMATICAL ITALIC SMALL KAPPA	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D705, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_346)
{
    // 1D718 0062;	
    // (𝜘) MATHEMATICAL ITALIC KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D718, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_347)
{
    // 1D73F 0062;	
    // (𝜿) MATHEMATICAL BOLD ITALIC SMALL KAPPA	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D73F, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_348)
{
    // 1D752 0062;	
    // (𝝒) MATHEMATICAL BOLD ITALIC KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D752, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_349)
{
    // 1D779 0062;	
    // (𝝹) MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D779, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_350)
{
    // 1D78C 0062;	
    // (𝞌) MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78C, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_351)
{
    // 1D7B3 0062;	
    // (𝞳) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B3, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_352)
{
    // 1D7C6 0062;	
    // (𝟆) MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL	[202E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C6, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_353)
{
    // 039A 0062;	
    // (Κ) GREEK CAPITAL LETTER KAPPA	[202E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039A, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_354)
{
    // 1D6B1 0062;	
    // (𝚱) MATHEMATICAL BOLD CAPITAL KAPPA	[202E 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B1, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_355)
{
    // 1D6EB 0062;	
    // (𝛫) MATHEMATICAL ITALIC CAPITAL KAPPA	[202E 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EB, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_356)
{
    // 1D725 0062;	
    // (𝜥) MATHEMATICAL BOLD ITALIC CAPITAL KAPPA	[202E 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D725, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_357)
{
    // 1D75F 0062;	
    // (𝝟) MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA	[202E 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D75F, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_358)
{
    // 1D799 0062;	
    // (𝞙) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA	[202E 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D799, 0x0062 };
    uint32_t const ces[9] = { 0x202E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_359)
{
    // 03D7 0021;	
    // (ϗ) GREEK KAI SYMBOL	[202E 201F 202C 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03D7, 0x0021 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_360)
{
    // 03CF 0021;	
    // (Ϗ) GREEK CAPITAL KAI SYMBOL	[202E 201F 202C 0261 | 0020 0020 0020 0020 | 000A 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03CF, 0x0021 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_361)
{
    // 03D7 003F;	
    // (ϗ) GREEK KAI SYMBOL	[202E 201F 202C 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03D7, 0x003F };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_362)
{
    // 03CF 003F;	
    // (Ϗ) GREEK CAPITAL KAI SYMBOL	[202E 201F 202C 0267 | 0020 0020 0020 0020 | 000A 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03CF, 0x003F };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_363)
{
    // 03D7 0061;	
    // (ϗ) GREEK KAI SYMBOL	[202E 201F 202C 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03D7, 0x0061 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_364)
{
    // 03D7 0041;	
    // (ϗ) GREEK KAI SYMBOL	[202E 201F 202C 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x03D7, 0x0041 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_365)
{
    // 03CF 0061;	
    // (Ϗ) GREEK CAPITAL KAI SYMBOL	[202E 201F 202C 1CAD | 0020 0020 0020 0020 | 000A 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03CF, 0x0061 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_366)
{
    // 03CF 0041;	
    // (Ϗ) GREEK CAPITAL KAI SYMBOL	[202E 201F 202C 1CAD | 0020 0020 0020 0020 | 000A 0004 0004 0008 |]

    uint32_t cps[2] = { 0x03CF, 0x0041 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_367)
{
    // 03D7 0062;	
    // (ϗ) GREEK KAI SYMBOL	[202E 201F 202C 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03D7, 0x0062 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_368)
{
    // 03CF 0062;	
    // (Ϗ) GREEK CAPITAL KAI SYMBOL	[202E 201F 202C 1CC6 | 0020 0020 0020 0020 | 000A 0004 0004 0002 |]

    uint32_t cps[2] = { 0x03CF, 0x0062 };
    uint32_t const ces[15] = { 0x202E, 0x201F, 0x202C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_369)
{
    // 03BB 0021;	
    // (λ) GREEK SMALL LETTER LAMDA	[202F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BB, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_370)
{
    // 1D6CC 0021;	
    // (𝛌) MATHEMATICAL BOLD SMALL LAMDA	[202F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CC, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_371)
{
    // 1D706 0021;	
    // (𝜆) MATHEMATICAL ITALIC SMALL LAMDA	[202F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D706, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_372)
{
    // 1D740 0021;	
    // (𝝀) MATHEMATICAL BOLD ITALIC SMALL LAMDA	[202F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D740, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_373)
{
    // 1D77A 0021;	
    // (𝝺) MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA	[202F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77A, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_374)
{
    // 1D7B4 0021;	
    // (𝞴) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA	[202F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B4, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_375)
{
    // 039B 0021;	
    // (Λ) GREEK CAPITAL LETTER LAMDA	[202F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039B, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_376)
{
    // 1D6B2 0021;	
    // (𝚲) MATHEMATICAL BOLD CAPITAL LAMDA	[202F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B2, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_377)
{
    // 1D6EC 0021;	
    // (𝛬) MATHEMATICAL ITALIC CAPITAL LAMDA	[202F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EC, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_378)
{
    // 1D726 0021;	
    // (𝜦) MATHEMATICAL BOLD ITALIC CAPITAL LAMDA	[202F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D726, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_379)
{
    // 1D760 0021;	
    // (𝝠) MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA	[202F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D760, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_380)
{
    // 1D79A 0021;	
    // (𝞚) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA	[202F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79A, 0x0021 };
    uint32_t const ces[9] = { 0x202F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_381)
{
    // 03BB 003F;	
    // (λ) GREEK SMALL LETTER LAMDA	[202F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BB, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_382)
{
    // 1D6CC 003F;	
    // (𝛌) MATHEMATICAL BOLD SMALL LAMDA	[202F 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CC, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_383)
{
    // 1D706 003F;	
    // (𝜆) MATHEMATICAL ITALIC SMALL LAMDA	[202F 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D706, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_384)
{
    // 1D740 003F;	
    // (𝝀) MATHEMATICAL BOLD ITALIC SMALL LAMDA	[202F 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D740, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_385)
{
    // 1D77A 003F;	
    // (𝝺) MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA	[202F 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77A, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_386)
{
    // 1D7B4 003F;	
    // (𝞴) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA	[202F 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B4, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_387)
{
    // 039B 003F;	
    // (Λ) GREEK CAPITAL LETTER LAMDA	[202F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039B, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_388)
{
    // 1D6B2 003F;	
    // (𝚲) MATHEMATICAL BOLD CAPITAL LAMDA	[202F 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B2, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_389)
{
    // 1D6EC 003F;	
    // (𝛬) MATHEMATICAL ITALIC CAPITAL LAMDA	[202F 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EC, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_390)
{
    // 1D726 003F;	
    // (𝜦) MATHEMATICAL BOLD ITALIC CAPITAL LAMDA	[202F 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D726, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_391)
{
    // 1D760 003F;	
    // (𝝠) MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA	[202F 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D760, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_392)
{
    // 1D79A 003F;	
    // (𝞚) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA	[202F 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79A, 0x003F };
    uint32_t const ces[9] = { 0x202F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_393)
{
    // 03BB 0061;	
    // (λ) GREEK SMALL LETTER LAMDA	[202F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BB, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_394)
{
    // 03BB 0041;	
    // (λ) GREEK SMALL LETTER LAMDA	[202F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BB, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_395)
{
    // 1D6CC 0061;	
    // (𝛌) MATHEMATICAL BOLD SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CC, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_396)
{
    // 1D706 0061;	
    // (𝜆) MATHEMATICAL ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D706, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_397)
{
    // 1D740 0061;	
    // (𝝀) MATHEMATICAL BOLD ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D740, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_398)
{
    // 1D77A 0061;	
    // (𝝺) MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77A, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_399)
{
    // 1D7B4 0061;	
    // (𝞴) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B4, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_400)
{
    // 1D6CC 0041;	
    // (𝛌) MATHEMATICAL BOLD SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CC, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_401)
{
    // 1D706 0041;	
    // (𝜆) MATHEMATICAL ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D706, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_402)
{
    // 1D740 0041;	
    // (𝝀) MATHEMATICAL BOLD ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D740, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_403)
{
    // 1D77A 0041;	
    // (𝝺) MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77A, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_404)
{
    // 1D7B4 0041;	
    // (𝞴) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA	[202F 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B4, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_405)
{
    // 039B 0061;	
    // (Λ) GREEK CAPITAL LETTER LAMDA	[202F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039B, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_406)
{
    // 039B 0041;	
    // (Λ) GREEK CAPITAL LETTER LAMDA	[202F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039B, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_407)
{
    // 1D6B2 0061;	
    // (𝚲) MATHEMATICAL BOLD CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B2, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_408)
{
    // 1D6EC 0061;	
    // (𝛬) MATHEMATICAL ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EC, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_409)
{
    // 1D726 0061;	
    // (𝜦) MATHEMATICAL BOLD ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D726, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_410)
{
    // 1D760 0061;	
    // (𝝠) MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D760, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_411)
{
    // 1D79A 0061;	
    // (𝞚) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79A, 0x0061 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_412)
{
    // 1D6B2 0041;	
    // (𝚲) MATHEMATICAL BOLD CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B2, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_413)
{
    // 1D6EC 0041;	
    // (𝛬) MATHEMATICAL ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6EC, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_414)
{
    // 1D726 0041;	
    // (𝜦) MATHEMATICAL BOLD ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D726, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_415)
{
    // 1D760 0041;	
    // (𝝠) MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D760, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_416)
{
    // 1D79A 0041;	
    // (𝞚) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA	[202F 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79A, 0x0041 };
    uint32_t const ces[9] = { 0x202F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_417)
{
    // 03BB 0062;	
    // (λ) GREEK SMALL LETTER LAMDA	[202F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BB, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_418)
{
    // 1D6CC 0062;	
    // (𝛌) MATHEMATICAL BOLD SMALL LAMDA	[202F 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CC, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_419)
{
    // 1D706 0062;	
    // (𝜆) MATHEMATICAL ITALIC SMALL LAMDA	[202F 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D706, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_420)
{
    // 1D740 0062;	
    // (𝝀) MATHEMATICAL BOLD ITALIC SMALL LAMDA	[202F 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D740, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_421)
{
    // 1D77A 0062;	
    // (𝝺) MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA	[202F 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77A, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_422)
{
    // 1D7B4 0062;	
    // (𝞴) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA	[202F 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B4, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_423)
{
    // 039B 0062;	
    // (Λ) GREEK CAPITAL LETTER LAMDA	[202F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039B, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_424)
{
    // 1D6B2 0062;	
    // (𝚲) MATHEMATICAL BOLD CAPITAL LAMDA	[202F 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B2, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_425)
{
    // 1D6EC 0062;	
    // (𝛬) MATHEMATICAL ITALIC CAPITAL LAMDA	[202F 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6EC, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_426)
{
    // 1D726 0062;	
    // (𝜦) MATHEMATICAL BOLD ITALIC CAPITAL LAMDA	[202F 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D726, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_427)
{
    // 1D760 0062;	
    // (𝝠) MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA	[202F 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D760, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_428)
{
    // 1D79A 0062;	
    // (𝞚) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA	[202F 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79A, 0x0062 };
    uint32_t const ces[9] = { 0x202F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_429)
{
    // 1D27 0021;	
    // (ᴧ) GREEK LETTER SMALL CAPITAL LAMDA	[2030 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D27, 0x0021 };
    uint32_t const ces[9] = { 0x2030, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_430)
{
    // 1D27 003F;	
    // (ᴧ) GREEK LETTER SMALL CAPITAL LAMDA	[2030 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D27, 0x003F };
    uint32_t const ces[9] = { 0x2030, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_431)
{
    // 1D27 0061;	
    // (ᴧ) GREEK LETTER SMALL CAPITAL LAMDA	[2030 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D27, 0x0061 };
    uint32_t const ces[9] = { 0x2030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_432)
{
    // 1D27 0041;	
    // (ᴧ) GREEK LETTER SMALL CAPITAL LAMDA	[2030 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D27, 0x0041 };
    uint32_t const ces[9] = { 0x2030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_433)
{
    // 1D27 0062;	
    // (ᴧ) GREEK LETTER SMALL CAPITAL LAMDA	[2030 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D27, 0x0062 };
    uint32_t const ces[9] = { 0x2030, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_434)
{
    // 03BC 0021;	
    // (μ) GREEK SMALL LETTER MU	[2031 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BC, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_435)
{
    // 00B5 0021;	
    // (µ) MICRO SIGN	[2031 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x00B5, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_436)
{
    // 1D6CD 0021;	
    // (𝛍) MATHEMATICAL BOLD SMALL MU	[2031 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CD, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_437)
{
    // 1D707 0021;	
    // (𝜇) MATHEMATICAL ITALIC SMALL MU	[2031 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D707, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_438)
{
    // 1D741 0021;	
    // (𝝁) MATHEMATICAL BOLD ITALIC SMALL MU	[2031 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D741, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_439)
{
    // 1D77B 0021;	
    // (𝝻) MATHEMATICAL SANS-SERIF BOLD SMALL MU	[2031 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77B, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_440)
{
    // 1D7B5 0021;	
    // (𝞵) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU	[2031 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B5, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_441)
{
    // 039C 0021;	
    // (Μ) GREEK CAPITAL LETTER MU	[2031 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039C, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_442)
{
    // 1D6B3 0021;	
    // (𝚳) MATHEMATICAL BOLD CAPITAL MU	[2031 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B3, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_443)
{
    // 1D6ED 0021;	
    // (𝛭) MATHEMATICAL ITALIC CAPITAL MU	[2031 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6ED, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_444)
{
    // 1D727 0021;	
    // (𝜧) MATHEMATICAL BOLD ITALIC CAPITAL MU	[2031 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D727, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_445)
{
    // 1D761 0021;	
    // (𝝡) MATHEMATICAL SANS-SERIF BOLD CAPITAL MU	[2031 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D761, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_446)
{
    // 1D79B 0021;	
    // (𝞛) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU	[2031 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79B, 0x0021 };
    uint32_t const ces[9] = { 0x2031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_447)
{
    // 03BC 003F;	
    // (μ) GREEK SMALL LETTER MU	[2031 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BC, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_448)
{
    // 00B5 003F;	
    // (µ) MICRO SIGN	[2031 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x00B5, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_449)
{
    // 1D6CD 003F;	
    // (𝛍) MATHEMATICAL BOLD SMALL MU	[2031 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CD, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_450)
{
    // 1D707 003F;	
    // (𝜇) MATHEMATICAL ITALIC SMALL MU	[2031 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D707, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_451)
{
    // 1D741 003F;	
    // (𝝁) MATHEMATICAL BOLD ITALIC SMALL MU	[2031 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D741, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_452)
{
    // 1D77B 003F;	
    // (𝝻) MATHEMATICAL SANS-SERIF BOLD SMALL MU	[2031 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77B, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_453)
{
    // 1D7B5 003F;	
    // (𝞵) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU	[2031 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B5, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_454)
{
    // 039C 003F;	
    // (Μ) GREEK CAPITAL LETTER MU	[2031 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039C, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_455)
{
    // 1D6B3 003F;	
    // (𝚳) MATHEMATICAL BOLD CAPITAL MU	[2031 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B3, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_456)
{
    // 1D6ED 003F;	
    // (𝛭) MATHEMATICAL ITALIC CAPITAL MU	[2031 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6ED, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_457)
{
    // 1D727 003F;	
    // (𝜧) MATHEMATICAL BOLD ITALIC CAPITAL MU	[2031 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D727, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_458)
{
    // 1D761 003F;	
    // (𝝡) MATHEMATICAL SANS-SERIF BOLD CAPITAL MU	[2031 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D761, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_459)
{
    // 1D79B 003F;	
    // (𝞛) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU	[2031 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79B, 0x003F };
    uint32_t const ces[9] = { 0x2031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_460)
{
    // 03BC 0061;	
    // (μ) GREEK SMALL LETTER MU	[2031 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BC, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_461)
{
    // 03BC 0041;	
    // (μ) GREEK SMALL LETTER MU	[2031 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03BC, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_462)
{
    // 00B5 0061;	
    // (µ) MICRO SIGN	[2031 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x00B5, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_463)
{
    // 00B5 0041;	
    // (µ) MICRO SIGN	[2031 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x00B5, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_464)
{
    // 1D6CD 0061;	
    // (𝛍) MATHEMATICAL BOLD SMALL MU	[2031 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CD, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_465)
{
    // 1D707 0061;	
    // (𝜇) MATHEMATICAL ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D707, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_466)
{
    // 1D741 0061;	
    // (𝝁) MATHEMATICAL BOLD ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D741, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_467)
{
    // 1D77B 0061;	
    // (𝝻) MATHEMATICAL SANS-SERIF BOLD SMALL MU	[2031 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77B, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_468)
{
    // 1D7B5 0061;	
    // (𝞵) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B5, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_469)
{
    // 1D6CD 0041;	
    // (𝛍) MATHEMATICAL BOLD SMALL MU	[2031 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6CD, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_470)
{
    // 1D707 0041;	
    // (𝜇) MATHEMATICAL ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D707, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_471)
{
    // 1D741 0041;	
    // (𝝁) MATHEMATICAL BOLD ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D741, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_472)
{
    // 1D77B 0041;	
    // (𝝻) MATHEMATICAL SANS-SERIF BOLD SMALL MU	[2031 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D77B, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_473)
{
    // 1D7B5 0041;	
    // (𝞵) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU	[2031 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7B5, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_474)
{
    // 039C 0061;	
    // (Μ) GREEK CAPITAL LETTER MU	[2031 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039C, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_475)
{
    // 039C 0041;	
    // (Μ) GREEK CAPITAL LETTER MU	[2031 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x039C, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_476)
{
    // 1D6B3 0061;	
    // (𝚳) MATHEMATICAL BOLD CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B3, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_477)
{
    // 1D6ED 0061;	
    // (𝛭) MATHEMATICAL ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6ED, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_478)
{
    // 1D727 0061;	
    // (𝜧) MATHEMATICAL BOLD ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D727, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_479)
{
    // 1D761 0061;	
    // (𝝡) MATHEMATICAL SANS-SERIF BOLD CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D761, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_480)
{
    // 1D79B 0061;	
    // (𝞛) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D79B, 0x0061 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_481)
{
    // 1D6B3 0041;	
    // (𝚳) MATHEMATICAL BOLD CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6B3, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_482)
{
    // 1D6ED 0041;	
    // (𝛭) MATHEMATICAL ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6ED, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_483)
{
    // 1D727 0041;	
    // (𝜧) MATHEMATICAL BOLD ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D727, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_484)
{
    // 1D761 0041;	
    // (𝝡) MATHEMATICAL SANS-SERIF BOLD CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D761, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_485)
{
    // 1D79B 0041;	
    // (𝞛) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU	[2031 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D79B, 0x0041 };
    uint32_t const ces[9] = { 0x2031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_486)
{
    // 3382 0021;	
    // (㎂) SQUARE MU A	[2031 1CAD 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3382, 0x0021 };
    uint32_t const ces[12] = { 0x2031, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_487)
{
    // 3382 003F;	
    // (㎂) SQUARE MU A	[2031 1CAD 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3382, 0x003F };
    uint32_t const ces[12] = { 0x2031, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_488)
{
    // 3382 0061;	
    // (㎂) SQUARE MU A	[2031 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3382, 0x0061 };
    uint32_t const ces[12] = { 0x2031, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_489)
{
    // 3382 0041;	
    // (㎂) SQUARE MU A	[2031 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x3382, 0x0041 };
    uint32_t const ces[12] = { 0x2031, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_490)
{
    // 3382 0062;	
    // (㎂) SQUARE MU A	[2031 1CAD 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3382, 0x0062 };
    uint32_t const ces[12] = { 0x2031, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_491)
{
    // 03BC 0062;	
    // (μ) GREEK SMALL LETTER MU	[2031 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03BC, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_492)
{
    // 00B5 0062;	
    // (µ) MICRO SIGN	[2031 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x00B5, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_493)
{
    // 1D6CD 0062;	
    // (𝛍) MATHEMATICAL BOLD SMALL MU	[2031 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6CD, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_494)
{
    // 1D707 0062;	
    // (𝜇) MATHEMATICAL ITALIC SMALL MU	[2031 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D707, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_495)
{
    // 1D741 0062;	
    // (𝝁) MATHEMATICAL BOLD ITALIC SMALL MU	[2031 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D741, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_496)
{
    // 1D77B 0062;	
    // (𝝻) MATHEMATICAL SANS-SERIF BOLD SMALL MU	[2031 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D77B, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_497)
{
    // 1D7B5 0062;	
    // (𝞵) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU	[2031 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7B5, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_498)
{
    // 039C 0062;	
    // (Μ) GREEK CAPITAL LETTER MU	[2031 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x039C, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_131_499)
{
    // 1D6B3 0062;	
    // (𝚳) MATHEMATICAL BOLD CAPITAL MU	[2031 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6B3, 0x0062 };
    uint32_t const ces[9] = { 0x2031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

