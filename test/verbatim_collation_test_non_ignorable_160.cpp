// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_160_000)
{
    // 2D49 0041;	
    // (ⵉ) TIFINAGH LETTER YI	[24E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D49, 0x0041 };
    uint32_t const ces[9] = { 0x24E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_001)
{
    // 2D49 0062;	
    // (ⵉ) TIFINAGH LETTER YI	[24E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D49, 0x0062 };
    uint32_t const ces[9] = { 0x24E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_002)
{
    // 2D4A 0021;	
    // (ⵊ) TIFINAGH LETTER YAZH	[24E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4A, 0x0021 };
    uint32_t const ces[9] = { 0x24E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_003)
{
    // 2D4A 003F;	
    // (ⵊ) TIFINAGH LETTER YAZH	[24E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4A, 0x003F };
    uint32_t const ces[9] = { 0x24E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_004)
{
    // 2D4A 0061;	
    // (ⵊ) TIFINAGH LETTER YAZH	[24E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4A, 0x0061 };
    uint32_t const ces[9] = { 0x24E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_005)
{
    // 2D4A 0041;	
    // (ⵊ) TIFINAGH LETTER YAZH	[24E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4A, 0x0041 };
    uint32_t const ces[9] = { 0x24E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_006)
{
    // 2D4A 0062;	
    // (ⵊ) TIFINAGH LETTER YAZH	[24E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4A, 0x0062 };
    uint32_t const ces[9] = { 0x24E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_007)
{
    // 2D4B 0021;	
    // (ⵋ) TIFINAGH LETTER AHAGGAR YAZH	[24EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4B, 0x0021 };
    uint32_t const ces[9] = { 0x24EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_008)
{
    // 2D4B 003F;	
    // (ⵋ) TIFINAGH LETTER AHAGGAR YAZH	[24EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4B, 0x003F };
    uint32_t const ces[9] = { 0x24EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_009)
{
    // 2D4B 0061;	
    // (ⵋ) TIFINAGH LETTER AHAGGAR YAZH	[24EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4B, 0x0061 };
    uint32_t const ces[9] = { 0x24EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_010)
{
    // 2D4B 0041;	
    // (ⵋ) TIFINAGH LETTER AHAGGAR YAZH	[24EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4B, 0x0041 };
    uint32_t const ces[9] = { 0x24EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_011)
{
    // 2D4B 0062;	
    // (ⵋ) TIFINAGH LETTER AHAGGAR YAZH	[24EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4B, 0x0062 };
    uint32_t const ces[9] = { 0x24EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_012)
{
    // 2D4C 0021;	
    // (ⵌ) TIFINAGH LETTER TUAREG YAZH	[24EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4C, 0x0021 };
    uint32_t const ces[9] = { 0x24EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_013)
{
    // 2D4C 003F;	
    // (ⵌ) TIFINAGH LETTER TUAREG YAZH	[24EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4C, 0x003F };
    uint32_t const ces[9] = { 0x24EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_014)
{
    // 2D4C 0061;	
    // (ⵌ) TIFINAGH LETTER TUAREG YAZH	[24EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4C, 0x0061 };
    uint32_t const ces[9] = { 0x24EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_015)
{
    // 2D4C 0041;	
    // (ⵌ) TIFINAGH LETTER TUAREG YAZH	[24EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4C, 0x0041 };
    uint32_t const ces[9] = { 0x24EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_016)
{
    // 2D4C 0062;	
    // (ⵌ) TIFINAGH LETTER TUAREG YAZH	[24EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4C, 0x0062 };
    uint32_t const ces[9] = { 0x24EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_017)
{
    // 2D4D 0021;	
    // (ⵍ) TIFINAGH LETTER YAL	[24EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4D, 0x0021 };
    uint32_t const ces[9] = { 0x24EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_018)
{
    // 2D4D 003F;	
    // (ⵍ) TIFINAGH LETTER YAL	[24EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4D, 0x003F };
    uint32_t const ces[9] = { 0x24EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_019)
{
    // 2D4D 0061;	
    // (ⵍ) TIFINAGH LETTER YAL	[24EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4D, 0x0061 };
    uint32_t const ces[9] = { 0x24EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_020)
{
    // 2D4D 0041;	
    // (ⵍ) TIFINAGH LETTER YAL	[24EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4D, 0x0041 };
    uint32_t const ces[9] = { 0x24EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_021)
{
    // 2D4D 0062;	
    // (ⵍ) TIFINAGH LETTER YAL	[24EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4D, 0x0062 };
    uint32_t const ces[9] = { 0x24EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_022)
{
    // 2D4E 0021;	
    // (ⵎ) TIFINAGH LETTER YAM	[24ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4E, 0x0021 };
    uint32_t const ces[9] = { 0x24ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_023)
{
    // 2D4E 003F;	
    // (ⵎ) TIFINAGH LETTER YAM	[24ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4E, 0x003F };
    uint32_t const ces[9] = { 0x24ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_024)
{
    // 2D4E 0061;	
    // (ⵎ) TIFINAGH LETTER YAM	[24ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4E, 0x0061 };
    uint32_t const ces[9] = { 0x24ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_025)
{
    // 2D4E 0041;	
    // (ⵎ) TIFINAGH LETTER YAM	[24ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4E, 0x0041 };
    uint32_t const ces[9] = { 0x24ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_026)
{
    // 2D4E 0062;	
    // (ⵎ) TIFINAGH LETTER YAM	[24ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4E, 0x0062 };
    uint32_t const ces[9] = { 0x24ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_027)
{
    // 2D4F 0021;	
    // (ⵏ) TIFINAGH LETTER YAN	[24EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4F, 0x0021 };
    uint32_t const ces[9] = { 0x24EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_028)
{
    // 2D4F 003F;	
    // (ⵏ) TIFINAGH LETTER YAN	[24EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4F, 0x003F };
    uint32_t const ces[9] = { 0x24EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_029)
{
    // 2D4F 0061;	
    // (ⵏ) TIFINAGH LETTER YAN	[24EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4F, 0x0061 };
    uint32_t const ces[9] = { 0x24EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_030)
{
    // 2D4F 0041;	
    // (ⵏ) TIFINAGH LETTER YAN	[24EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D4F, 0x0041 };
    uint32_t const ces[9] = { 0x24EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_031)
{
    // 2D4F 0062;	
    // (ⵏ) TIFINAGH LETTER YAN	[24EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D4F, 0x0062 };
    uint32_t const ces[9] = { 0x24EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_032)
{
    // 2D50 0021;	
    // (ⵐ) TIFINAGH LETTER TUAREG YAGN	[24EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D50, 0x0021 };
    uint32_t const ces[9] = { 0x24EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_033)
{
    // 2D50 003F;	
    // (ⵐ) TIFINAGH LETTER TUAREG YAGN	[24EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D50, 0x003F };
    uint32_t const ces[9] = { 0x24EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_034)
{
    // 2D50 0061;	
    // (ⵐ) TIFINAGH LETTER TUAREG YAGN	[24EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D50, 0x0061 };
    uint32_t const ces[9] = { 0x24EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_035)
{
    // 2D50 0041;	
    // (ⵐ) TIFINAGH LETTER TUAREG YAGN	[24EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D50, 0x0041 };
    uint32_t const ces[9] = { 0x24EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_036)
{
    // 2D50 0062;	
    // (ⵐ) TIFINAGH LETTER TUAREG YAGN	[24EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D50, 0x0062 };
    uint32_t const ces[9] = { 0x24EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_037)
{
    // 2D51 0021;	
    // (ⵑ) TIFINAGH LETTER TUAREG YANG	[24F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D51, 0x0021 };
    uint32_t const ces[9] = { 0x24F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_038)
{
    // 2D51 003F;	
    // (ⵑ) TIFINAGH LETTER TUAREG YANG	[24F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D51, 0x003F };
    uint32_t const ces[9] = { 0x24F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_039)
{
    // 2D51 0061;	
    // (ⵑ) TIFINAGH LETTER TUAREG YANG	[24F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D51, 0x0061 };
    uint32_t const ces[9] = { 0x24F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_040)
{
    // 2D51 0041;	
    // (ⵑ) TIFINAGH LETTER TUAREG YANG	[24F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D51, 0x0041 };
    uint32_t const ces[9] = { 0x24F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_041)
{
    // 2D51 0062;	
    // (ⵑ) TIFINAGH LETTER TUAREG YANG	[24F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D51, 0x0062 };
    uint32_t const ces[9] = { 0x24F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_042)
{
    // 2D52 0021;	
    // (ⵒ) TIFINAGH LETTER YAP	[24F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D52, 0x0021 };
    uint32_t const ces[9] = { 0x24F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_043)
{
    // 2D52 003F;	
    // (ⵒ) TIFINAGH LETTER YAP	[24F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D52, 0x003F };
    uint32_t const ces[9] = { 0x24F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_044)
{
    // 2D52 0061;	
    // (ⵒ) TIFINAGH LETTER YAP	[24F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D52, 0x0061 };
    uint32_t const ces[9] = { 0x24F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_045)
{
    // 2D52 0041;	
    // (ⵒ) TIFINAGH LETTER YAP	[24F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D52, 0x0041 };
    uint32_t const ces[9] = { 0x24F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_046)
{
    // 2D52 0062;	
    // (ⵒ) TIFINAGH LETTER YAP	[24F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D52, 0x0062 };
    uint32_t const ces[9] = { 0x24F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_047)
{
    // 2D53 0021;	
    // (ⵓ) TIFINAGH LETTER YU	[24F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D53, 0x0021 };
    uint32_t const ces[9] = { 0x24F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_048)
{
    // 2D53 003F;	
    // (ⵓ) TIFINAGH LETTER YU	[24F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D53, 0x003F };
    uint32_t const ces[9] = { 0x24F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_049)
{
    // 2D53 0061;	
    // (ⵓ) TIFINAGH LETTER YU	[24F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D53, 0x0061 };
    uint32_t const ces[9] = { 0x24F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_050)
{
    // 2D53 0041;	
    // (ⵓ) TIFINAGH LETTER YU	[24F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D53, 0x0041 };
    uint32_t const ces[9] = { 0x24F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_051)
{
    // 2D53 0062;	
    // (ⵓ) TIFINAGH LETTER YU	[24F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D53, 0x0062 };
    uint32_t const ces[9] = { 0x24F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_052)
{
    // 2D67 0021;	
    // (ⵧ) TIFINAGH LETTER YO	[24F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D67, 0x0021 };
    uint32_t const ces[9] = { 0x24F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_053)
{
    // 2D67 003F;	
    // (ⵧ) TIFINAGH LETTER YO	[24F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D67, 0x003F };
    uint32_t const ces[9] = { 0x24F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_054)
{
    // 2D67 0061;	
    // (ⵧ) TIFINAGH LETTER YO	[24F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D67, 0x0061 };
    uint32_t const ces[9] = { 0x24F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_055)
{
    // 2D67 0041;	
    // (ⵧ) TIFINAGH LETTER YO	[24F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D67, 0x0041 };
    uint32_t const ces[9] = { 0x24F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_056)
{
    // 2D67 0062;	
    // (ⵧ) TIFINAGH LETTER YO	[24F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D67, 0x0062 };
    uint32_t const ces[9] = { 0x24F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_057)
{
    // 2D54 0021;	
    // (ⵔ) TIFINAGH LETTER YAR	[24F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D54, 0x0021 };
    uint32_t const ces[9] = { 0x24F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_058)
{
    // 2D54 003F;	
    // (ⵔ) TIFINAGH LETTER YAR	[24F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D54, 0x003F };
    uint32_t const ces[9] = { 0x24F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_059)
{
    // 2D54 0061;	
    // (ⵔ) TIFINAGH LETTER YAR	[24F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D54, 0x0061 };
    uint32_t const ces[9] = { 0x24F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_060)
{
    // 2D54 0041;	
    // (ⵔ) TIFINAGH LETTER YAR	[24F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D54, 0x0041 };
    uint32_t const ces[9] = { 0x24F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_061)
{
    // 2D54 0062;	
    // (ⵔ) TIFINAGH LETTER YAR	[24F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D54, 0x0062 };
    uint32_t const ces[9] = { 0x24F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_062)
{
    // 2D55 0021;	
    // (ⵕ) TIFINAGH LETTER YARR	[24F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D55, 0x0021 };
    uint32_t const ces[9] = { 0x24F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_063)
{
    // 2D55 003F;	
    // (ⵕ) TIFINAGH LETTER YARR	[24F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D55, 0x003F };
    uint32_t const ces[9] = { 0x24F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_064)
{
    // 2D55 0061;	
    // (ⵕ) TIFINAGH LETTER YARR	[24F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D55, 0x0061 };
    uint32_t const ces[9] = { 0x24F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_065)
{
    // 2D55 0041;	
    // (ⵕ) TIFINAGH LETTER YARR	[24F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D55, 0x0041 };
    uint32_t const ces[9] = { 0x24F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_066)
{
    // 2D55 0062;	
    // (ⵕ) TIFINAGH LETTER YARR	[24F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D55, 0x0062 };
    uint32_t const ces[9] = { 0x24F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_067)
{
    // 2D56 0021;	
    // (ⵖ) TIFINAGH LETTER YAGH	[24F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D56, 0x0021 };
    uint32_t const ces[9] = { 0x24F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_068)
{
    // 2D56 003F;	
    // (ⵖ) TIFINAGH LETTER YAGH	[24F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D56, 0x003F };
    uint32_t const ces[9] = { 0x24F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_069)
{
    // 2D56 0061;	
    // (ⵖ) TIFINAGH LETTER YAGH	[24F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D56, 0x0061 };
    uint32_t const ces[9] = { 0x24F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_070)
{
    // 2D56 0041;	
    // (ⵖ) TIFINAGH LETTER YAGH	[24F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D56, 0x0041 };
    uint32_t const ces[9] = { 0x24F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_071)
{
    // 2D56 0062;	
    // (ⵖ) TIFINAGH LETTER YAGH	[24F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D56, 0x0062 };
    uint32_t const ces[9] = { 0x24F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_072)
{
    // 2D57 0021;	
    // (ⵗ) TIFINAGH LETTER TUAREG YAGH	[24F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D57, 0x0021 };
    uint32_t const ces[9] = { 0x24F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_073)
{
    // 2D57 003F;	
    // (ⵗ) TIFINAGH LETTER TUAREG YAGH	[24F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D57, 0x003F };
    uint32_t const ces[9] = { 0x24F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_074)
{
    // 2D57 0061;	
    // (ⵗ) TIFINAGH LETTER TUAREG YAGH	[24F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D57, 0x0061 };
    uint32_t const ces[9] = { 0x24F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_075)
{
    // 2D57 0041;	
    // (ⵗ) TIFINAGH LETTER TUAREG YAGH	[24F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D57, 0x0041 };
    uint32_t const ces[9] = { 0x24F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_076)
{
    // 2D57 0062;	
    // (ⵗ) TIFINAGH LETTER TUAREG YAGH	[24F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D57, 0x0062 };
    uint32_t const ces[9] = { 0x24F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_077)
{
    // 2D58 0021;	
    // (ⵘ) TIFINAGH LETTER AYER YAGH	[24F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D58, 0x0021 };
    uint32_t const ces[9] = { 0x24F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_078)
{
    // 2D58 003F;	
    // (ⵘ) TIFINAGH LETTER AYER YAGH	[24F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D58, 0x003F };
    uint32_t const ces[9] = { 0x24F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_079)
{
    // 2D58 0061;	
    // (ⵘ) TIFINAGH LETTER AYER YAGH	[24F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D58, 0x0061 };
    uint32_t const ces[9] = { 0x24F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_080)
{
    // 2D58 0041;	
    // (ⵘ) TIFINAGH LETTER AYER YAGH	[24F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D58, 0x0041 };
    uint32_t const ces[9] = { 0x24F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_081)
{
    // 2D58 0062;	
    // (ⵘ) TIFINAGH LETTER AYER YAGH	[24F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D58, 0x0062 };
    uint32_t const ces[9] = { 0x24F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_082)
{
    // 2D59 0021;	
    // (ⵙ) TIFINAGH LETTER YAS	[24F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D59, 0x0021 };
    uint32_t const ces[9] = { 0x24F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_083)
{
    // 2D59 003F;	
    // (ⵙ) TIFINAGH LETTER YAS	[24F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D59, 0x003F };
    uint32_t const ces[9] = { 0x24F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_084)
{
    // 2D59 0061;	
    // (ⵙ) TIFINAGH LETTER YAS	[24F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D59, 0x0061 };
    uint32_t const ces[9] = { 0x24F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_085)
{
    // 2D59 0041;	
    // (ⵙ) TIFINAGH LETTER YAS	[24F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D59, 0x0041 };
    uint32_t const ces[9] = { 0x24F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_086)
{
    // 2D59 0062;	
    // (ⵙ) TIFINAGH LETTER YAS	[24F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D59, 0x0062 };
    uint32_t const ces[9] = { 0x24F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_087)
{
    // 2D5A 0021;	
    // (ⵚ) TIFINAGH LETTER YASS	[24FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5A, 0x0021 };
    uint32_t const ces[9] = { 0x24FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_088)
{
    // 2D5A 003F;	
    // (ⵚ) TIFINAGH LETTER YASS	[24FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5A, 0x003F };
    uint32_t const ces[9] = { 0x24FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_089)
{
    // 2D5A 0061;	
    // (ⵚ) TIFINAGH LETTER YASS	[24FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5A, 0x0061 };
    uint32_t const ces[9] = { 0x24FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_090)
{
    // 2D5A 0041;	
    // (ⵚ) TIFINAGH LETTER YASS	[24FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5A, 0x0041 };
    uint32_t const ces[9] = { 0x24FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_091)
{
    // 2D5A 0062;	
    // (ⵚ) TIFINAGH LETTER YASS	[24FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5A, 0x0062 };
    uint32_t const ces[9] = { 0x24FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_092)
{
    // 2D5B 0021;	
    // (ⵛ) TIFINAGH LETTER YASH	[24FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5B, 0x0021 };
    uint32_t const ces[9] = { 0x24FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_093)
{
    // 2D5B 003F;	
    // (ⵛ) TIFINAGH LETTER YASH	[24FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5B, 0x003F };
    uint32_t const ces[9] = { 0x24FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_094)
{
    // 2D5B 0061;	
    // (ⵛ) TIFINAGH LETTER YASH	[24FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5B, 0x0061 };
    uint32_t const ces[9] = { 0x24FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_095)
{
    // 2D5B 0041;	
    // (ⵛ) TIFINAGH LETTER YASH	[24FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5B, 0x0041 };
    uint32_t const ces[9] = { 0x24FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_096)
{
    // 2D5B 0062;	
    // (ⵛ) TIFINAGH LETTER YASH	[24FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5B, 0x0062 };
    uint32_t const ces[9] = { 0x24FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_097)
{
    // 2D5C 0021;	
    // (ⵜ) TIFINAGH LETTER YAT	[24FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5C, 0x0021 };
    uint32_t const ces[9] = { 0x24FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_098)
{
    // 2D5C 003F;	
    // (ⵜ) TIFINAGH LETTER YAT	[24FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5C, 0x003F };
    uint32_t const ces[9] = { 0x24FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_099)
{
    // 2D5C 0061;	
    // (ⵜ) TIFINAGH LETTER YAT	[24FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5C, 0x0061 };
    uint32_t const ces[9] = { 0x24FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_100)
{
    // 2D5C 0041;	
    // (ⵜ) TIFINAGH LETTER YAT	[24FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5C, 0x0041 };
    uint32_t const ces[9] = { 0x24FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_101)
{
    // 2D5C 0062;	
    // (ⵜ) TIFINAGH LETTER YAT	[24FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5C, 0x0062 };
    uint32_t const ces[9] = { 0x24FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_102)
{
    // 2D5D 0021;	
    // (ⵝ) TIFINAGH LETTER YATH	[24FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5D, 0x0021 };
    uint32_t const ces[9] = { 0x24FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_103)
{
    // 2D5D 003F;	
    // (ⵝ) TIFINAGH LETTER YATH	[24FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5D, 0x003F };
    uint32_t const ces[9] = { 0x24FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_104)
{
    // 2D5D 0061;	
    // (ⵝ) TIFINAGH LETTER YATH	[24FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5D, 0x0061 };
    uint32_t const ces[9] = { 0x24FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_105)
{
    // 2D5D 0041;	
    // (ⵝ) TIFINAGH LETTER YATH	[24FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5D, 0x0041 };
    uint32_t const ces[9] = { 0x24FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_106)
{
    // 2D5D 0062;	
    // (ⵝ) TIFINAGH LETTER YATH	[24FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5D, 0x0062 };
    uint32_t const ces[9] = { 0x24FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_107)
{
    // 2D5E 0021;	
    // (ⵞ) TIFINAGH LETTER YACH	[24FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5E, 0x0021 };
    uint32_t const ces[9] = { 0x24FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_108)
{
    // 2D5E 003F;	
    // (ⵞ) TIFINAGH LETTER YACH	[24FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5E, 0x003F };
    uint32_t const ces[9] = { 0x24FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_109)
{
    // 2D5E 0061;	
    // (ⵞ) TIFINAGH LETTER YACH	[24FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5E, 0x0061 };
    uint32_t const ces[9] = { 0x24FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_110)
{
    // 2D5E 0041;	
    // (ⵞ) TIFINAGH LETTER YACH	[24FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5E, 0x0041 };
    uint32_t const ces[9] = { 0x24FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_111)
{
    // 2D5E 0062;	
    // (ⵞ) TIFINAGH LETTER YACH	[24FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5E, 0x0062 };
    uint32_t const ces[9] = { 0x24FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_112)
{
    // 2D5F 0021;	
    // (ⵟ) TIFINAGH LETTER YATT	[24FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5F, 0x0021 };
    uint32_t const ces[9] = { 0x24FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_113)
{
    // 2D5F 003F;	
    // (ⵟ) TIFINAGH LETTER YATT	[24FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5F, 0x003F };
    uint32_t const ces[9] = { 0x24FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_114)
{
    // 2D5F 0061;	
    // (ⵟ) TIFINAGH LETTER YATT	[24FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5F, 0x0061 };
    uint32_t const ces[9] = { 0x24FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_115)
{
    // 2D5F 0041;	
    // (ⵟ) TIFINAGH LETTER YATT	[24FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D5F, 0x0041 };
    uint32_t const ces[9] = { 0x24FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_116)
{
    // 2D5F 0062;	
    // (ⵟ) TIFINAGH LETTER YATT	[24FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D5F, 0x0062 };
    uint32_t const ces[9] = { 0x24FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_117)
{
    // 2D60 0021;	
    // (ⵠ) TIFINAGH LETTER YAV	[2500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D60, 0x0021 };
    uint32_t const ces[9] = { 0x2500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_118)
{
    // 2D60 003F;	
    // (ⵠ) TIFINAGH LETTER YAV	[2500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D60, 0x003F };
    uint32_t const ces[9] = { 0x2500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_119)
{
    // 2D60 0061;	
    // (ⵠ) TIFINAGH LETTER YAV	[2500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D60, 0x0061 };
    uint32_t const ces[9] = { 0x2500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_120)
{
    // 2D60 0041;	
    // (ⵠ) TIFINAGH LETTER YAV	[2500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D60, 0x0041 };
    uint32_t const ces[9] = { 0x2500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_121)
{
    // 2D60 0062;	
    // (ⵠ) TIFINAGH LETTER YAV	[2500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D60, 0x0062 };
    uint32_t const ces[9] = { 0x2500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_122)
{
    // 2D61 0021;	
    // (ⵡ) TIFINAGH LETTER YAW	[2501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D61, 0x0021 };
    uint32_t const ces[9] = { 0x2501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_123)
{
    // 2D61 003F;	
    // (ⵡ) TIFINAGH LETTER YAW	[2501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D61, 0x003F };
    uint32_t const ces[9] = { 0x2501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_124)
{
    // 2D61 0061;	
    // (ⵡ) TIFINAGH LETTER YAW	[2501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D61, 0x0061 };
    uint32_t const ces[9] = { 0x2501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_125)
{
    // 2D61 0041;	
    // (ⵡ) TIFINAGH LETTER YAW	[2501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D61, 0x0041 };
    uint32_t const ces[9] = { 0x2501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_126)
{
    // 2D61 0062;	
    // (ⵡ) TIFINAGH LETTER YAW	[2501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D61, 0x0062 };
    uint32_t const ces[9] = { 0x2501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_127)
{
    // 2D62 0021;	
    // (ⵢ) TIFINAGH LETTER YAY	[2502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D62, 0x0021 };
    uint32_t const ces[9] = { 0x2502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_128)
{
    // 2D62 003F;	
    // (ⵢ) TIFINAGH LETTER YAY	[2502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D62, 0x003F };
    uint32_t const ces[9] = { 0x2502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_129)
{
    // 2D62 0061;	
    // (ⵢ) TIFINAGH LETTER YAY	[2502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D62, 0x0061 };
    uint32_t const ces[9] = { 0x2502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_130)
{
    // 2D62 0041;	
    // (ⵢ) TIFINAGH LETTER YAY	[2502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D62, 0x0041 };
    uint32_t const ces[9] = { 0x2502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_131)
{
    // 2D62 0062;	
    // (ⵢ) TIFINAGH LETTER YAY	[2502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D62, 0x0062 };
    uint32_t const ces[9] = { 0x2502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_132)
{
    // 2D63 0021;	
    // (ⵣ) TIFINAGH LETTER YAZ	[2503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D63, 0x0021 };
    uint32_t const ces[9] = { 0x2503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_133)
{
    // 2D63 003F;	
    // (ⵣ) TIFINAGH LETTER YAZ	[2503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D63, 0x003F };
    uint32_t const ces[9] = { 0x2503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_134)
{
    // 2D63 0061;	
    // (ⵣ) TIFINAGH LETTER YAZ	[2503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D63, 0x0061 };
    uint32_t const ces[9] = { 0x2503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_135)
{
    // 2D63 0041;	
    // (ⵣ) TIFINAGH LETTER YAZ	[2503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D63, 0x0041 };
    uint32_t const ces[9] = { 0x2503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_136)
{
    // 2D63 0062;	
    // (ⵣ) TIFINAGH LETTER YAZ	[2503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D63, 0x0062 };
    uint32_t const ces[9] = { 0x2503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_137)
{
    // 2D64 0021;	
    // (ⵤ) TIFINAGH LETTER TAWELLEMET YAZ	[2504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D64, 0x0021 };
    uint32_t const ces[9] = { 0x2504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_138)
{
    // 2D64 003F;	
    // (ⵤ) TIFINAGH LETTER TAWELLEMET YAZ	[2504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D64, 0x003F };
    uint32_t const ces[9] = { 0x2504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_139)
{
    // 2D64 0061;	
    // (ⵤ) TIFINAGH LETTER TAWELLEMET YAZ	[2504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D64, 0x0061 };
    uint32_t const ces[9] = { 0x2504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_140)
{
    // 2D64 0041;	
    // (ⵤ) TIFINAGH LETTER TAWELLEMET YAZ	[2504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D64, 0x0041 };
    uint32_t const ces[9] = { 0x2504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_141)
{
    // 2D64 0062;	
    // (ⵤ) TIFINAGH LETTER TAWELLEMET YAZ	[2504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D64, 0x0062 };
    uint32_t const ces[9] = { 0x2504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_142)
{
    // 2D65 0021;	
    // (ⵥ) TIFINAGH LETTER YAZZ	[2505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D65, 0x0021 };
    uint32_t const ces[9] = { 0x2505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_143)
{
    // 2D65 003F;	
    // (ⵥ) TIFINAGH LETTER YAZZ	[2505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D65, 0x003F };
    uint32_t const ces[9] = { 0x2505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_144)
{
    // 2D65 0061;	
    // (ⵥ) TIFINAGH LETTER YAZZ	[2505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D65, 0x0061 };
    uint32_t const ces[9] = { 0x2505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_145)
{
    // 2D65 0041;	
    // (ⵥ) TIFINAGH LETTER YAZZ	[2505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D65, 0x0041 };
    uint32_t const ces[9] = { 0x2505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_146)
{
    // 2D65 0062;	
    // (ⵥ) TIFINAGH LETTER YAZZ	[2505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D65, 0x0062 };
    uint32_t const ces[9] = { 0x2505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_147)
{
    // 2D6F 0021;	
    // (ⵯ) TIFINAGH MODIFIER LETTER LABIALIZATION MARK	[2506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D6F, 0x0021 };
    uint32_t const ces[9] = { 0x2506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_148)
{
    // 2D6F 003F;	
    // (ⵯ) TIFINAGH MODIFIER LETTER LABIALIZATION MARK	[2506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D6F, 0x003F };
    uint32_t const ces[9] = { 0x2506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_149)
{
    // 2D6F 0061;	
    // (ⵯ) TIFINAGH MODIFIER LETTER LABIALIZATION MARK	[2506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D6F, 0x0061 };
    uint32_t const ces[9] = { 0x2506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_150)
{
    // 2D6F 0041;	
    // (ⵯ) TIFINAGH MODIFIER LETTER LABIALIZATION MARK	[2506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D6F, 0x0041 };
    uint32_t const ces[9] = { 0x2506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_151)
{
    // 2D6F 0062;	
    // (ⵯ) TIFINAGH MODIFIER LETTER LABIALIZATION MARK	[2506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D6F, 0x0062 };
    uint32_t const ces[9] = { 0x2506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_152)
{
    // 1200 0021;	
    // (ሀ) ETHIOPIC SYLLABLE HA	[2507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200, 0x0021 };
    uint32_t const ces[9] = { 0x2507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_153)
{
    // 1200 003F;	
    // (ሀ) ETHIOPIC SYLLABLE HA	[2507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200, 0x003F };
    uint32_t const ces[9] = { 0x2507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_154)
{
    // 1200 0061;	
    // (ሀ) ETHIOPIC SYLLABLE HA	[2507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200, 0x0061 };
    uint32_t const ces[9] = { 0x2507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_155)
{
    // 1200 0041;	
    // (ሀ) ETHIOPIC SYLLABLE HA	[2507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200, 0x0041 };
    uint32_t const ces[9] = { 0x2507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_156)
{
    // 1200 0062;	
    // (ሀ) ETHIOPIC SYLLABLE HA	[2507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200, 0x0062 };
    uint32_t const ces[9] = { 0x2507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_157)
{
    // 1201 0021;	
    // (ሁ) ETHIOPIC SYLLABLE HU	[2508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201, 0x0021 };
    uint32_t const ces[9] = { 0x2508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_158)
{
    // 1201 003F;	
    // (ሁ) ETHIOPIC SYLLABLE HU	[2508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201, 0x003F };
    uint32_t const ces[9] = { 0x2508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_159)
{
    // 1201 0061;	
    // (ሁ) ETHIOPIC SYLLABLE HU	[2508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201, 0x0061 };
    uint32_t const ces[9] = { 0x2508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_160)
{
    // 1201 0041;	
    // (ሁ) ETHIOPIC SYLLABLE HU	[2508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201, 0x0041 };
    uint32_t const ces[9] = { 0x2508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_161)
{
    // 1201 0062;	
    // (ሁ) ETHIOPIC SYLLABLE HU	[2508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201, 0x0062 };
    uint32_t const ces[9] = { 0x2508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_162)
{
    // 1202 0021;	
    // (ሂ) ETHIOPIC SYLLABLE HI	[2509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202, 0x0021 };
    uint32_t const ces[9] = { 0x2509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_163)
{
    // 1202 003F;	
    // (ሂ) ETHIOPIC SYLLABLE HI	[2509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202, 0x003F };
    uint32_t const ces[9] = { 0x2509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_164)
{
    // 1202 0061;	
    // (ሂ) ETHIOPIC SYLLABLE HI	[2509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202, 0x0061 };
    uint32_t const ces[9] = { 0x2509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_165)
{
    // 1202 0041;	
    // (ሂ) ETHIOPIC SYLLABLE HI	[2509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202, 0x0041 };
    uint32_t const ces[9] = { 0x2509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_166)
{
    // 1202 0062;	
    // (ሂ) ETHIOPIC SYLLABLE HI	[2509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202, 0x0062 };
    uint32_t const ces[9] = { 0x2509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_167)
{
    // 1203 0021;	
    // (ሃ) ETHIOPIC SYLLABLE HAA	[250A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203, 0x0021 };
    uint32_t const ces[9] = { 0x250A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_168)
{
    // 1203 003F;	
    // (ሃ) ETHIOPIC SYLLABLE HAA	[250A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203, 0x003F };
    uint32_t const ces[9] = { 0x250A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_169)
{
    // 1203 0061;	
    // (ሃ) ETHIOPIC SYLLABLE HAA	[250A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203, 0x0061 };
    uint32_t const ces[9] = { 0x250A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_170)
{
    // 1203 0041;	
    // (ሃ) ETHIOPIC SYLLABLE HAA	[250A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203, 0x0041 };
    uint32_t const ces[9] = { 0x250A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_171)
{
    // 1203 0062;	
    // (ሃ) ETHIOPIC SYLLABLE HAA	[250A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203, 0x0062 };
    uint32_t const ces[9] = { 0x250A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_172)
{
    // 1204 0021;	
    // (ሄ) ETHIOPIC SYLLABLE HEE	[250B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1204, 0x0021 };
    uint32_t const ces[9] = { 0x250B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_173)
{
    // 1204 003F;	
    // (ሄ) ETHIOPIC SYLLABLE HEE	[250B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1204, 0x003F };
    uint32_t const ces[9] = { 0x250B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_174)
{
    // 1204 0061;	
    // (ሄ) ETHIOPIC SYLLABLE HEE	[250B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1204, 0x0061 };
    uint32_t const ces[9] = { 0x250B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_175)
{
    // 1204 0041;	
    // (ሄ) ETHIOPIC SYLLABLE HEE	[250B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1204, 0x0041 };
    uint32_t const ces[9] = { 0x250B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_176)
{
    // 1204 0062;	
    // (ሄ) ETHIOPIC SYLLABLE HEE	[250B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1204, 0x0062 };
    uint32_t const ces[9] = { 0x250B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_177)
{
    // 1205 0021;	
    // (ህ) ETHIOPIC SYLLABLE HE	[250C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1205, 0x0021 };
    uint32_t const ces[9] = { 0x250C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_178)
{
    // 1205 003F;	
    // (ህ) ETHIOPIC SYLLABLE HE	[250C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1205, 0x003F };
    uint32_t const ces[9] = { 0x250C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_179)
{
    // 1205 0061;	
    // (ህ) ETHIOPIC SYLLABLE HE	[250C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1205, 0x0061 };
    uint32_t const ces[9] = { 0x250C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_180)
{
    // 1205 0041;	
    // (ህ) ETHIOPIC SYLLABLE HE	[250C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1205, 0x0041 };
    uint32_t const ces[9] = { 0x250C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_181)
{
    // 1205 0062;	
    // (ህ) ETHIOPIC SYLLABLE HE	[250C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1205, 0x0062 };
    uint32_t const ces[9] = { 0x250C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_182)
{
    // 1206 0021;	
    // (ሆ) ETHIOPIC SYLLABLE HO	[250D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1206, 0x0021 };
    uint32_t const ces[9] = { 0x250D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_183)
{
    // 1206 003F;	
    // (ሆ) ETHIOPIC SYLLABLE HO	[250D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1206, 0x003F };
    uint32_t const ces[9] = { 0x250D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_184)
{
    // 1206 0061;	
    // (ሆ) ETHIOPIC SYLLABLE HO	[250D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1206, 0x0061 };
    uint32_t const ces[9] = { 0x250D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_185)
{
    // 1206 0041;	
    // (ሆ) ETHIOPIC SYLLABLE HO	[250D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1206, 0x0041 };
    uint32_t const ces[9] = { 0x250D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_186)
{
    // 1206 0062;	
    // (ሆ) ETHIOPIC SYLLABLE HO	[250D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1206, 0x0062 };
    uint32_t const ces[9] = { 0x250D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_187)
{
    // 1207 0021;	
    // (ሇ) ETHIOPIC SYLLABLE HOA	[250E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1207, 0x0021 };
    uint32_t const ces[9] = { 0x250E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_188)
{
    // 1207 003F;	
    // (ሇ) ETHIOPIC SYLLABLE HOA	[250E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1207, 0x003F };
    uint32_t const ces[9] = { 0x250E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_189)
{
    // 1207 0061;	
    // (ሇ) ETHIOPIC SYLLABLE HOA	[250E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1207, 0x0061 };
    uint32_t const ces[9] = { 0x250E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_190)
{
    // 1207 0041;	
    // (ሇ) ETHIOPIC SYLLABLE HOA	[250E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1207, 0x0041 };
    uint32_t const ces[9] = { 0x250E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_191)
{
    // 1207 0062;	
    // (ሇ) ETHIOPIC SYLLABLE HOA	[250E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1207, 0x0062 };
    uint32_t const ces[9] = { 0x250E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_192)
{
    // 1208 0021;	
    // (ለ) ETHIOPIC SYLLABLE LA	[250F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1208, 0x0021 };
    uint32_t const ces[9] = { 0x250F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_193)
{
    // 1208 003F;	
    // (ለ) ETHIOPIC SYLLABLE LA	[250F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1208, 0x003F };
    uint32_t const ces[9] = { 0x250F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_194)
{
    // 1208 0061;	
    // (ለ) ETHIOPIC SYLLABLE LA	[250F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1208, 0x0061 };
    uint32_t const ces[9] = { 0x250F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_195)
{
    // 1208 0041;	
    // (ለ) ETHIOPIC SYLLABLE LA	[250F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1208, 0x0041 };
    uint32_t const ces[9] = { 0x250F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_196)
{
    // 1208 0062;	
    // (ለ) ETHIOPIC SYLLABLE LA	[250F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1208, 0x0062 };
    uint32_t const ces[9] = { 0x250F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_197)
{
    // 1209 0021;	
    // (ሉ) ETHIOPIC SYLLABLE LU	[2510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1209, 0x0021 };
    uint32_t const ces[9] = { 0x2510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_198)
{
    // 1209 003F;	
    // (ሉ) ETHIOPIC SYLLABLE LU	[2510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1209, 0x003F };
    uint32_t const ces[9] = { 0x2510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_199)
{
    // 1209 0061;	
    // (ሉ) ETHIOPIC SYLLABLE LU	[2510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1209, 0x0061 };
    uint32_t const ces[9] = { 0x2510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_200)
{
    // 1209 0041;	
    // (ሉ) ETHIOPIC SYLLABLE LU	[2510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1209, 0x0041 };
    uint32_t const ces[9] = { 0x2510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_201)
{
    // 1209 0062;	
    // (ሉ) ETHIOPIC SYLLABLE LU	[2510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1209, 0x0062 };
    uint32_t const ces[9] = { 0x2510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_202)
{
    // 120A 0021;	
    // (ሊ) ETHIOPIC SYLLABLE LI	[2511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A, 0x0021 };
    uint32_t const ces[9] = { 0x2511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_203)
{
    // 120A 003F;	
    // (ሊ) ETHIOPIC SYLLABLE LI	[2511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A, 0x003F };
    uint32_t const ces[9] = { 0x2511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_204)
{
    // 120A 0061;	
    // (ሊ) ETHIOPIC SYLLABLE LI	[2511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A, 0x0061 };
    uint32_t const ces[9] = { 0x2511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_205)
{
    // 120A 0041;	
    // (ሊ) ETHIOPIC SYLLABLE LI	[2511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A, 0x0041 };
    uint32_t const ces[9] = { 0x2511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_206)
{
    // 120A 0062;	
    // (ሊ) ETHIOPIC SYLLABLE LI	[2511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A, 0x0062 };
    uint32_t const ces[9] = { 0x2511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_207)
{
    // 120B 0021;	
    // (ላ) ETHIOPIC SYLLABLE LAA	[2512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B, 0x0021 };
    uint32_t const ces[9] = { 0x2512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_208)
{
    // 120B 003F;	
    // (ላ) ETHIOPIC SYLLABLE LAA	[2512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B, 0x003F };
    uint32_t const ces[9] = { 0x2512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_209)
{
    // 120B 0061;	
    // (ላ) ETHIOPIC SYLLABLE LAA	[2512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B, 0x0061 };
    uint32_t const ces[9] = { 0x2512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_210)
{
    // 120B 0041;	
    // (ላ) ETHIOPIC SYLLABLE LAA	[2512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B, 0x0041 };
    uint32_t const ces[9] = { 0x2512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_211)
{
    // 120B 0062;	
    // (ላ) ETHIOPIC SYLLABLE LAA	[2512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B, 0x0062 };
    uint32_t const ces[9] = { 0x2512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_212)
{
    // 120C 0021;	
    // (ሌ) ETHIOPIC SYLLABLE LEE	[2513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C, 0x0021 };
    uint32_t const ces[9] = { 0x2513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_213)
{
    // 120C 003F;	
    // (ሌ) ETHIOPIC SYLLABLE LEE	[2513 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C, 0x003F };
    uint32_t const ces[9] = { 0x2513, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_214)
{
    // 120C 0061;	
    // (ሌ) ETHIOPIC SYLLABLE LEE	[2513 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C, 0x0061 };
    uint32_t const ces[9] = { 0x2513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_215)
{
    // 120C 0041;	
    // (ሌ) ETHIOPIC SYLLABLE LEE	[2513 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C, 0x0041 };
    uint32_t const ces[9] = { 0x2513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_216)
{
    // 120C 0062;	
    // (ሌ) ETHIOPIC SYLLABLE LEE	[2513 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C, 0x0062 };
    uint32_t const ces[9] = { 0x2513, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_217)
{
    // 120D 0021;	
    // (ል) ETHIOPIC SYLLABLE LE	[2514 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D, 0x0021 };
    uint32_t const ces[9] = { 0x2514, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_218)
{
    // 120D 003F;	
    // (ል) ETHIOPIC SYLLABLE LE	[2514 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D, 0x003F };
    uint32_t const ces[9] = { 0x2514, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_219)
{
    // 120D 0061;	
    // (ል) ETHIOPIC SYLLABLE LE	[2514 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D, 0x0061 };
    uint32_t const ces[9] = { 0x2514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_220)
{
    // 120D 0041;	
    // (ል) ETHIOPIC SYLLABLE LE	[2514 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D, 0x0041 };
    uint32_t const ces[9] = { 0x2514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_221)
{
    // 120D 0062;	
    // (ል) ETHIOPIC SYLLABLE LE	[2514 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D, 0x0062 };
    uint32_t const ces[9] = { 0x2514, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_222)
{
    // 120E 0021;	
    // (ሎ) ETHIOPIC SYLLABLE LO	[2515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E, 0x0021 };
    uint32_t const ces[9] = { 0x2515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_223)
{
    // 120E 003F;	
    // (ሎ) ETHIOPIC SYLLABLE LO	[2515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E, 0x003F };
    uint32_t const ces[9] = { 0x2515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_224)
{
    // 120E 0061;	
    // (ሎ) ETHIOPIC SYLLABLE LO	[2515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E, 0x0061 };
    uint32_t const ces[9] = { 0x2515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_225)
{
    // 120E 0041;	
    // (ሎ) ETHIOPIC SYLLABLE LO	[2515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E, 0x0041 };
    uint32_t const ces[9] = { 0x2515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_226)
{
    // 120E 0062;	
    // (ሎ) ETHIOPIC SYLLABLE LO	[2515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E, 0x0062 };
    uint32_t const ces[9] = { 0x2515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_227)
{
    // 120F 0021;	
    // (ሏ) ETHIOPIC SYLLABLE LWA	[2516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F, 0x0021 };
    uint32_t const ces[9] = { 0x2516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_228)
{
    // 120F 003F;	
    // (ሏ) ETHIOPIC SYLLABLE LWA	[2516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F, 0x003F };
    uint32_t const ces[9] = { 0x2516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_229)
{
    // 120F 0061;	
    // (ሏ) ETHIOPIC SYLLABLE LWA	[2516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F, 0x0061 };
    uint32_t const ces[9] = { 0x2516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_230)
{
    // 120F 0041;	
    // (ሏ) ETHIOPIC SYLLABLE LWA	[2516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F, 0x0041 };
    uint32_t const ces[9] = { 0x2516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_231)
{
    // 120F 0062;	
    // (ሏ) ETHIOPIC SYLLABLE LWA	[2516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F, 0x0062 };
    uint32_t const ces[9] = { 0x2516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_232)
{
    // 2D80 0021;	
    // (ⶀ) ETHIOPIC SYLLABLE LOA	[2517 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D80, 0x0021 };
    uint32_t const ces[9] = { 0x2517, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_233)
{
    // 2D80 003F;	
    // (ⶀ) ETHIOPIC SYLLABLE LOA	[2517 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D80, 0x003F };
    uint32_t const ces[9] = { 0x2517, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_234)
{
    // 2D80 0061;	
    // (ⶀ) ETHIOPIC SYLLABLE LOA	[2517 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D80, 0x0061 };
    uint32_t const ces[9] = { 0x2517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_235)
{
    // 2D80 0041;	
    // (ⶀ) ETHIOPIC SYLLABLE LOA	[2517 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D80, 0x0041 };
    uint32_t const ces[9] = { 0x2517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_236)
{
    // 2D80 0062;	
    // (ⶀ) ETHIOPIC SYLLABLE LOA	[2517 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D80, 0x0062 };
    uint32_t const ces[9] = { 0x2517, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_237)
{
    // 1210 0021;	
    // (ሐ) ETHIOPIC SYLLABLE HHA	[2518 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1210, 0x0021 };
    uint32_t const ces[9] = { 0x2518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_238)
{
    // 1210 003F;	
    // (ሐ) ETHIOPIC SYLLABLE HHA	[2518 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1210, 0x003F };
    uint32_t const ces[9] = { 0x2518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_239)
{
    // 1210 0061;	
    // (ሐ) ETHIOPIC SYLLABLE HHA	[2518 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1210, 0x0061 };
    uint32_t const ces[9] = { 0x2518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_240)
{
    // 1210 0041;	
    // (ሐ) ETHIOPIC SYLLABLE HHA	[2518 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1210, 0x0041 };
    uint32_t const ces[9] = { 0x2518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_241)
{
    // 1210 0062;	
    // (ሐ) ETHIOPIC SYLLABLE HHA	[2518 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1210, 0x0062 };
    uint32_t const ces[9] = { 0x2518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_242)
{
    // 1211 0021;	
    // (ሑ) ETHIOPIC SYLLABLE HHU	[2519 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1211, 0x0021 };
    uint32_t const ces[9] = { 0x2519, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_243)
{
    // 1211 003F;	
    // (ሑ) ETHIOPIC SYLLABLE HHU	[2519 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1211, 0x003F };
    uint32_t const ces[9] = { 0x2519, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_244)
{
    // 1211 0061;	
    // (ሑ) ETHIOPIC SYLLABLE HHU	[2519 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1211, 0x0061 };
    uint32_t const ces[9] = { 0x2519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_245)
{
    // 1211 0041;	
    // (ሑ) ETHIOPIC SYLLABLE HHU	[2519 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1211, 0x0041 };
    uint32_t const ces[9] = { 0x2519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_246)
{
    // 1211 0062;	
    // (ሑ) ETHIOPIC SYLLABLE HHU	[2519 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1211, 0x0062 };
    uint32_t const ces[9] = { 0x2519, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_247)
{
    // 1212 0021;	
    // (ሒ) ETHIOPIC SYLLABLE HHI	[251A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1212, 0x0021 };
    uint32_t const ces[9] = { 0x251A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_248)
{
    // 1212 003F;	
    // (ሒ) ETHIOPIC SYLLABLE HHI	[251A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1212, 0x003F };
    uint32_t const ces[9] = { 0x251A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_249)
{
    // 1212 0061;	
    // (ሒ) ETHIOPIC SYLLABLE HHI	[251A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1212, 0x0061 };
    uint32_t const ces[9] = { 0x251A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_250)
{
    // 1212 0041;	
    // (ሒ) ETHIOPIC SYLLABLE HHI	[251A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1212, 0x0041 };
    uint32_t const ces[9] = { 0x251A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_251)
{
    // 1212 0062;	
    // (ሒ) ETHIOPIC SYLLABLE HHI	[251A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1212, 0x0062 };
    uint32_t const ces[9] = { 0x251A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_252)
{
    // 1213 0021;	
    // (ሓ) ETHIOPIC SYLLABLE HHAA	[251B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1213, 0x0021 };
    uint32_t const ces[9] = { 0x251B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_253)
{
    // 1213 003F;	
    // (ሓ) ETHIOPIC SYLLABLE HHAA	[251B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1213, 0x003F };
    uint32_t const ces[9] = { 0x251B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_254)
{
    // 1213 0061;	
    // (ሓ) ETHIOPIC SYLLABLE HHAA	[251B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1213, 0x0061 };
    uint32_t const ces[9] = { 0x251B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_255)
{
    // 1213 0041;	
    // (ሓ) ETHIOPIC SYLLABLE HHAA	[251B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1213, 0x0041 };
    uint32_t const ces[9] = { 0x251B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_256)
{
    // 1213 0062;	
    // (ሓ) ETHIOPIC SYLLABLE HHAA	[251B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1213, 0x0062 };
    uint32_t const ces[9] = { 0x251B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_257)
{
    // 1214 0021;	
    // (ሔ) ETHIOPIC SYLLABLE HHEE	[251C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1214, 0x0021 };
    uint32_t const ces[9] = { 0x251C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_258)
{
    // 1214 003F;	
    // (ሔ) ETHIOPIC SYLLABLE HHEE	[251C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1214, 0x003F };
    uint32_t const ces[9] = { 0x251C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_259)
{
    // 1214 0061;	
    // (ሔ) ETHIOPIC SYLLABLE HHEE	[251C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1214, 0x0061 };
    uint32_t const ces[9] = { 0x251C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_260)
{
    // 1214 0041;	
    // (ሔ) ETHIOPIC SYLLABLE HHEE	[251C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1214, 0x0041 };
    uint32_t const ces[9] = { 0x251C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_261)
{
    // 1214 0062;	
    // (ሔ) ETHIOPIC SYLLABLE HHEE	[251C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1214, 0x0062 };
    uint32_t const ces[9] = { 0x251C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_262)
{
    // 1215 0021;	
    // (ሕ) ETHIOPIC SYLLABLE HHE	[251D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1215, 0x0021 };
    uint32_t const ces[9] = { 0x251D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_263)
{
    // 1215 003F;	
    // (ሕ) ETHIOPIC SYLLABLE HHE	[251D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1215, 0x003F };
    uint32_t const ces[9] = { 0x251D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_264)
{
    // 1215 0061;	
    // (ሕ) ETHIOPIC SYLLABLE HHE	[251D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1215, 0x0061 };
    uint32_t const ces[9] = { 0x251D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_265)
{
    // 1215 0041;	
    // (ሕ) ETHIOPIC SYLLABLE HHE	[251D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1215, 0x0041 };
    uint32_t const ces[9] = { 0x251D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_266)
{
    // 1215 0062;	
    // (ሕ) ETHIOPIC SYLLABLE HHE	[251D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1215, 0x0062 };
    uint32_t const ces[9] = { 0x251D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_267)
{
    // 1216 0021;	
    // (ሖ) ETHIOPIC SYLLABLE HHO	[251E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216, 0x0021 };
    uint32_t const ces[9] = { 0x251E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_268)
{
    // 1216 003F;	
    // (ሖ) ETHIOPIC SYLLABLE HHO	[251E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216, 0x003F };
    uint32_t const ces[9] = { 0x251E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_269)
{
    // 1216 0061;	
    // (ሖ) ETHIOPIC SYLLABLE HHO	[251E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216, 0x0061 };
    uint32_t const ces[9] = { 0x251E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_270)
{
    // 1216 0041;	
    // (ሖ) ETHIOPIC SYLLABLE HHO	[251E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216, 0x0041 };
    uint32_t const ces[9] = { 0x251E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_271)
{
    // 1216 0062;	
    // (ሖ) ETHIOPIC SYLLABLE HHO	[251E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216, 0x0062 };
    uint32_t const ces[9] = { 0x251E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_272)
{
    // 1217 0021;	
    // (ሗ) ETHIOPIC SYLLABLE HHWA	[251F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217, 0x0021 };
    uint32_t const ces[9] = { 0x251F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_273)
{
    // 1217 003F;	
    // (ሗ) ETHIOPIC SYLLABLE HHWA	[251F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217, 0x003F };
    uint32_t const ces[9] = { 0x251F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_274)
{
    // 1217 0061;	
    // (ሗ) ETHIOPIC SYLLABLE HHWA	[251F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217, 0x0061 };
    uint32_t const ces[9] = { 0x251F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_275)
{
    // 1217 0041;	
    // (ሗ) ETHIOPIC SYLLABLE HHWA	[251F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217, 0x0041 };
    uint32_t const ces[9] = { 0x251F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_276)
{
    // 1217 0062;	
    // (ሗ) ETHIOPIC SYLLABLE HHWA	[251F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217, 0x0062 };
    uint32_t const ces[9] = { 0x251F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_277)
{
    // 1218 0021;	
    // (መ) ETHIOPIC SYLLABLE MA	[2520 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218, 0x0021 };
    uint32_t const ces[9] = { 0x2520, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_278)
{
    // 1218 003F;	
    // (መ) ETHIOPIC SYLLABLE MA	[2520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218, 0x003F };
    uint32_t const ces[9] = { 0x2520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_279)
{
    // 1218 0061;	
    // (መ) ETHIOPIC SYLLABLE MA	[2520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218, 0x0061 };
    uint32_t const ces[9] = { 0x2520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_280)
{
    // 1218 0041;	
    // (መ) ETHIOPIC SYLLABLE MA	[2520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218, 0x0041 };
    uint32_t const ces[9] = { 0x2520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_281)
{
    // 1218 0062;	
    // (መ) ETHIOPIC SYLLABLE MA	[2520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218, 0x0062 };
    uint32_t const ces[9] = { 0x2520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_282)
{
    // 1219 0021;	
    // (ሙ) ETHIOPIC SYLLABLE MU	[2521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219, 0x0021 };
    uint32_t const ces[9] = { 0x2521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_283)
{
    // 1219 003F;	
    // (ሙ) ETHIOPIC SYLLABLE MU	[2521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219, 0x003F };
    uint32_t const ces[9] = { 0x2521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_284)
{
    // 1219 0061;	
    // (ሙ) ETHIOPIC SYLLABLE MU	[2521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219, 0x0061 };
    uint32_t const ces[9] = { 0x2521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_285)
{
    // 1219 0041;	
    // (ሙ) ETHIOPIC SYLLABLE MU	[2521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219, 0x0041 };
    uint32_t const ces[9] = { 0x2521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_286)
{
    // 1219 0062;	
    // (ሙ) ETHIOPIC SYLLABLE MU	[2521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219, 0x0062 };
    uint32_t const ces[9] = { 0x2521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_287)
{
    // 121A 0021;	
    // (ሚ) ETHIOPIC SYLLABLE MI	[2522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A, 0x0021 };
    uint32_t const ces[9] = { 0x2522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_288)
{
    // 121A 003F;	
    // (ሚ) ETHIOPIC SYLLABLE MI	[2522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A, 0x003F };
    uint32_t const ces[9] = { 0x2522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_289)
{
    // 121A 0061;	
    // (ሚ) ETHIOPIC SYLLABLE MI	[2522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A, 0x0061 };
    uint32_t const ces[9] = { 0x2522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_290)
{
    // 121A 0041;	
    // (ሚ) ETHIOPIC SYLLABLE MI	[2522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A, 0x0041 };
    uint32_t const ces[9] = { 0x2522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_291)
{
    // 121A 0062;	
    // (ሚ) ETHIOPIC SYLLABLE MI	[2522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A, 0x0062 };
    uint32_t const ces[9] = { 0x2522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_292)
{
    // 121B 0021;	
    // (ማ) ETHIOPIC SYLLABLE MAA	[2523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B, 0x0021 };
    uint32_t const ces[9] = { 0x2523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_293)
{
    // 121B 003F;	
    // (ማ) ETHIOPIC SYLLABLE MAA	[2523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B, 0x003F };
    uint32_t const ces[9] = { 0x2523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_294)
{
    // 121B 0061;	
    // (ማ) ETHIOPIC SYLLABLE MAA	[2523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B, 0x0061 };
    uint32_t const ces[9] = { 0x2523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_295)
{
    // 121B 0041;	
    // (ማ) ETHIOPIC SYLLABLE MAA	[2523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B, 0x0041 };
    uint32_t const ces[9] = { 0x2523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_296)
{
    // 121B 0062;	
    // (ማ) ETHIOPIC SYLLABLE MAA	[2523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B, 0x0062 };
    uint32_t const ces[9] = { 0x2523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_297)
{
    // 121C 0021;	
    // (ሜ) ETHIOPIC SYLLABLE MEE	[2524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C, 0x0021 };
    uint32_t const ces[9] = { 0x2524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_298)
{
    // 121C 003F;	
    // (ሜ) ETHIOPIC SYLLABLE MEE	[2524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C, 0x003F };
    uint32_t const ces[9] = { 0x2524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_299)
{
    // 121C 0061;	
    // (ሜ) ETHIOPIC SYLLABLE MEE	[2524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C, 0x0061 };
    uint32_t const ces[9] = { 0x2524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_300)
{
    // 121C 0041;	
    // (ሜ) ETHIOPIC SYLLABLE MEE	[2524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C, 0x0041 };
    uint32_t const ces[9] = { 0x2524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_301)
{
    // 121C 0062;	
    // (ሜ) ETHIOPIC SYLLABLE MEE	[2524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C, 0x0062 };
    uint32_t const ces[9] = { 0x2524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_302)
{
    // 121D 0021;	
    // (ም) ETHIOPIC SYLLABLE ME	[2525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121D, 0x0021 };
    uint32_t const ces[9] = { 0x2525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_303)
{
    // 121D 003F;	
    // (ም) ETHIOPIC SYLLABLE ME	[2525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121D, 0x003F };
    uint32_t const ces[9] = { 0x2525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_304)
{
    // 121D 0061;	
    // (ም) ETHIOPIC SYLLABLE ME	[2525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121D, 0x0061 };
    uint32_t const ces[9] = { 0x2525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_305)
{
    // 121D 0041;	
    // (ም) ETHIOPIC SYLLABLE ME	[2525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121D, 0x0041 };
    uint32_t const ces[9] = { 0x2525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_306)
{
    // 121D 0062;	
    // (ም) ETHIOPIC SYLLABLE ME	[2525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121D, 0x0062 };
    uint32_t const ces[9] = { 0x2525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_307)
{
    // 121E 0021;	
    // (ሞ) ETHIOPIC SYLLABLE MO	[2526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121E, 0x0021 };
    uint32_t const ces[9] = { 0x2526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_308)
{
    // 121E 003F;	
    // (ሞ) ETHIOPIC SYLLABLE MO	[2526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121E, 0x003F };
    uint32_t const ces[9] = { 0x2526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_309)
{
    // 121E 0061;	
    // (ሞ) ETHIOPIC SYLLABLE MO	[2526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121E, 0x0061 };
    uint32_t const ces[9] = { 0x2526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_310)
{
    // 121E 0041;	
    // (ሞ) ETHIOPIC SYLLABLE MO	[2526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121E, 0x0041 };
    uint32_t const ces[9] = { 0x2526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_311)
{
    // 121E 0062;	
    // (ሞ) ETHIOPIC SYLLABLE MO	[2526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121E, 0x0062 };
    uint32_t const ces[9] = { 0x2526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_312)
{
    // 121F 0021;	
    // (ሟ) ETHIOPIC SYLLABLE MWA	[2527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121F, 0x0021 };
    uint32_t const ces[9] = { 0x2527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_313)
{
    // 121F 003F;	
    // (ሟ) ETHIOPIC SYLLABLE MWA	[2527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121F, 0x003F };
    uint32_t const ces[9] = { 0x2527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_314)
{
    // 121F 0061;	
    // (ሟ) ETHIOPIC SYLLABLE MWA	[2527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121F, 0x0061 };
    uint32_t const ces[9] = { 0x2527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_315)
{
    // 121F 0041;	
    // (ሟ) ETHIOPIC SYLLABLE MWA	[2527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121F, 0x0041 };
    uint32_t const ces[9] = { 0x2527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_316)
{
    // 121F 0062;	
    // (ሟ) ETHIOPIC SYLLABLE MWA	[2527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121F, 0x0062 };
    uint32_t const ces[9] = { 0x2527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_317)
{
    // 1380 0021;	
    // (ᎀ) ETHIOPIC SYLLABLE SEBATBEIT MWA	[2528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1380, 0x0021 };
    uint32_t const ces[9] = { 0x2528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_318)
{
    // 1380 003F;	
    // (ᎀ) ETHIOPIC SYLLABLE SEBATBEIT MWA	[2528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1380, 0x003F };
    uint32_t const ces[9] = { 0x2528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_319)
{
    // 1380 0061;	
    // (ᎀ) ETHIOPIC SYLLABLE SEBATBEIT MWA	[2528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1380, 0x0061 };
    uint32_t const ces[9] = { 0x2528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_320)
{
    // 1380 0041;	
    // (ᎀ) ETHIOPIC SYLLABLE SEBATBEIT MWA	[2528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1380, 0x0041 };
    uint32_t const ces[9] = { 0x2528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_321)
{
    // 1380 0062;	
    // (ᎀ) ETHIOPIC SYLLABLE SEBATBEIT MWA	[2528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1380, 0x0062 };
    uint32_t const ces[9] = { 0x2528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_322)
{
    // 1381 0021;	
    // (ᎁ) ETHIOPIC SYLLABLE MWI	[2529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1381, 0x0021 };
    uint32_t const ces[9] = { 0x2529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_323)
{
    // 1381 003F;	
    // (ᎁ) ETHIOPIC SYLLABLE MWI	[2529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1381, 0x003F };
    uint32_t const ces[9] = { 0x2529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_324)
{
    // 1381 0061;	
    // (ᎁ) ETHIOPIC SYLLABLE MWI	[2529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1381, 0x0061 };
    uint32_t const ces[9] = { 0x2529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_325)
{
    // 1381 0041;	
    // (ᎁ) ETHIOPIC SYLLABLE MWI	[2529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1381, 0x0041 };
    uint32_t const ces[9] = { 0x2529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_326)
{
    // 1381 0062;	
    // (ᎁ) ETHIOPIC SYLLABLE MWI	[2529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1381, 0x0062 };
    uint32_t const ces[9] = { 0x2529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_327)
{
    // 1382 0021;	
    // (ᎂ) ETHIOPIC SYLLABLE MWEE	[252A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1382, 0x0021 };
    uint32_t const ces[9] = { 0x252A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_328)
{
    // 1382 003F;	
    // (ᎂ) ETHIOPIC SYLLABLE MWEE	[252A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1382, 0x003F };
    uint32_t const ces[9] = { 0x252A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_329)
{
    // 1382 0061;	
    // (ᎂ) ETHIOPIC SYLLABLE MWEE	[252A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1382, 0x0061 };
    uint32_t const ces[9] = { 0x252A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_330)
{
    // 1382 0041;	
    // (ᎂ) ETHIOPIC SYLLABLE MWEE	[252A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1382, 0x0041 };
    uint32_t const ces[9] = { 0x252A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_331)
{
    // 1382 0062;	
    // (ᎂ) ETHIOPIC SYLLABLE MWEE	[252A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1382, 0x0062 };
    uint32_t const ces[9] = { 0x252A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_332)
{
    // 1383 0021;	
    // (ᎃ) ETHIOPIC SYLLABLE MWE	[252B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1383, 0x0021 };
    uint32_t const ces[9] = { 0x252B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_333)
{
    // 1383 003F;	
    // (ᎃ) ETHIOPIC SYLLABLE MWE	[252B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1383, 0x003F };
    uint32_t const ces[9] = { 0x252B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_334)
{
    // 1383 0061;	
    // (ᎃ) ETHIOPIC SYLLABLE MWE	[252B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1383, 0x0061 };
    uint32_t const ces[9] = { 0x252B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_335)
{
    // 1383 0041;	
    // (ᎃ) ETHIOPIC SYLLABLE MWE	[252B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1383, 0x0041 };
    uint32_t const ces[9] = { 0x252B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_336)
{
    // 1383 0062;	
    // (ᎃ) ETHIOPIC SYLLABLE MWE	[252B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1383, 0x0062 };
    uint32_t const ces[9] = { 0x252B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_337)
{
    // 2D81 0021;	
    // (ⶁ) ETHIOPIC SYLLABLE MOA	[252C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D81, 0x0021 };
    uint32_t const ces[9] = { 0x252C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_338)
{
    // 2D81 003F;	
    // (ⶁ) ETHIOPIC SYLLABLE MOA	[252C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D81, 0x003F };
    uint32_t const ces[9] = { 0x252C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_339)
{
    // 2D81 0061;	
    // (ⶁ) ETHIOPIC SYLLABLE MOA	[252C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D81, 0x0061 };
    uint32_t const ces[9] = { 0x252C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_340)
{
    // 2D81 0041;	
    // (ⶁ) ETHIOPIC SYLLABLE MOA	[252C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D81, 0x0041 };
    uint32_t const ces[9] = { 0x252C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_341)
{
    // 2D81 0062;	
    // (ⶁ) ETHIOPIC SYLLABLE MOA	[252C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D81, 0x0062 };
    uint32_t const ces[9] = { 0x252C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_342)
{
    // 1220 0021;	
    // (ሠ) ETHIOPIC SYLLABLE SZA	[252D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1220, 0x0021 };
    uint32_t const ces[9] = { 0x252D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_343)
{
    // 1220 003F;	
    // (ሠ) ETHIOPIC SYLLABLE SZA	[252D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1220, 0x003F };
    uint32_t const ces[9] = { 0x252D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_344)
{
    // 1220 0061;	
    // (ሠ) ETHIOPIC SYLLABLE SZA	[252D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1220, 0x0061 };
    uint32_t const ces[9] = { 0x252D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_345)
{
    // 1220 0041;	
    // (ሠ) ETHIOPIC SYLLABLE SZA	[252D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1220, 0x0041 };
    uint32_t const ces[9] = { 0x252D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_346)
{
    // 1220 0062;	
    // (ሠ) ETHIOPIC SYLLABLE SZA	[252D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1220, 0x0062 };
    uint32_t const ces[9] = { 0x252D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_347)
{
    // 1221 0021;	
    // (ሡ) ETHIOPIC SYLLABLE SZU	[252E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1221, 0x0021 };
    uint32_t const ces[9] = { 0x252E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_348)
{
    // 1221 003F;	
    // (ሡ) ETHIOPIC SYLLABLE SZU	[252E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1221, 0x003F };
    uint32_t const ces[9] = { 0x252E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_349)
{
    // 1221 0061;	
    // (ሡ) ETHIOPIC SYLLABLE SZU	[252E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1221, 0x0061 };
    uint32_t const ces[9] = { 0x252E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_350)
{
    // 1221 0041;	
    // (ሡ) ETHIOPIC SYLLABLE SZU	[252E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1221, 0x0041 };
    uint32_t const ces[9] = { 0x252E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_351)
{
    // 1221 0062;	
    // (ሡ) ETHIOPIC SYLLABLE SZU	[252E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1221, 0x0062 };
    uint32_t const ces[9] = { 0x252E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_352)
{
    // 1222 0021;	
    // (ሢ) ETHIOPIC SYLLABLE SZI	[252F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1222, 0x0021 };
    uint32_t const ces[9] = { 0x252F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_353)
{
    // 1222 003F;	
    // (ሢ) ETHIOPIC SYLLABLE SZI	[252F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1222, 0x003F };
    uint32_t const ces[9] = { 0x252F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_354)
{
    // 1222 0061;	
    // (ሢ) ETHIOPIC SYLLABLE SZI	[252F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1222, 0x0061 };
    uint32_t const ces[9] = { 0x252F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_355)
{
    // 1222 0041;	
    // (ሢ) ETHIOPIC SYLLABLE SZI	[252F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1222, 0x0041 };
    uint32_t const ces[9] = { 0x252F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_356)
{
    // 1222 0062;	
    // (ሢ) ETHIOPIC SYLLABLE SZI	[252F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1222, 0x0062 };
    uint32_t const ces[9] = { 0x252F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_357)
{
    // 1223 0021;	
    // (ሣ) ETHIOPIC SYLLABLE SZAA	[2530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1223, 0x0021 };
    uint32_t const ces[9] = { 0x2530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_358)
{
    // 1223 003F;	
    // (ሣ) ETHIOPIC SYLLABLE SZAA	[2530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1223, 0x003F };
    uint32_t const ces[9] = { 0x2530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_359)
{
    // 1223 0061;	
    // (ሣ) ETHIOPIC SYLLABLE SZAA	[2530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1223, 0x0061 };
    uint32_t const ces[9] = { 0x2530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_360)
{
    // 1223 0041;	
    // (ሣ) ETHIOPIC SYLLABLE SZAA	[2530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1223, 0x0041 };
    uint32_t const ces[9] = { 0x2530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_361)
{
    // 1223 0062;	
    // (ሣ) ETHIOPIC SYLLABLE SZAA	[2530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1223, 0x0062 };
    uint32_t const ces[9] = { 0x2530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_362)
{
    // 1224 0021;	
    // (ሤ) ETHIOPIC SYLLABLE SZEE	[2531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1224, 0x0021 };
    uint32_t const ces[9] = { 0x2531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_363)
{
    // 1224 003F;	
    // (ሤ) ETHIOPIC SYLLABLE SZEE	[2531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1224, 0x003F };
    uint32_t const ces[9] = { 0x2531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_364)
{
    // 1224 0061;	
    // (ሤ) ETHIOPIC SYLLABLE SZEE	[2531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1224, 0x0061 };
    uint32_t const ces[9] = { 0x2531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_365)
{
    // 1224 0041;	
    // (ሤ) ETHIOPIC SYLLABLE SZEE	[2531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1224, 0x0041 };
    uint32_t const ces[9] = { 0x2531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_366)
{
    // 1224 0062;	
    // (ሤ) ETHIOPIC SYLLABLE SZEE	[2531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1224, 0x0062 };
    uint32_t const ces[9] = { 0x2531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_367)
{
    // 1225 0021;	
    // (ሥ) ETHIOPIC SYLLABLE SZE	[2532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1225, 0x0021 };
    uint32_t const ces[9] = { 0x2532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_368)
{
    // 1225 003F;	
    // (ሥ) ETHIOPIC SYLLABLE SZE	[2532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1225, 0x003F };
    uint32_t const ces[9] = { 0x2532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_369)
{
    // 1225 0061;	
    // (ሥ) ETHIOPIC SYLLABLE SZE	[2532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1225, 0x0061 };
    uint32_t const ces[9] = { 0x2532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_370)
{
    // 1225 0041;	
    // (ሥ) ETHIOPIC SYLLABLE SZE	[2532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1225, 0x0041 };
    uint32_t const ces[9] = { 0x2532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_371)
{
    // 1225 0062;	
    // (ሥ) ETHIOPIC SYLLABLE SZE	[2532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1225, 0x0062 };
    uint32_t const ces[9] = { 0x2532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_372)
{
    // 1226 0021;	
    // (ሦ) ETHIOPIC SYLLABLE SZO	[2533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1226, 0x0021 };
    uint32_t const ces[9] = { 0x2533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_373)
{
    // 1226 003F;	
    // (ሦ) ETHIOPIC SYLLABLE SZO	[2533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1226, 0x003F };
    uint32_t const ces[9] = { 0x2533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_374)
{
    // 1226 0061;	
    // (ሦ) ETHIOPIC SYLLABLE SZO	[2533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1226, 0x0061 };
    uint32_t const ces[9] = { 0x2533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_375)
{
    // 1226 0041;	
    // (ሦ) ETHIOPIC SYLLABLE SZO	[2533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1226, 0x0041 };
    uint32_t const ces[9] = { 0x2533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_376)
{
    // 1226 0062;	
    // (ሦ) ETHIOPIC SYLLABLE SZO	[2533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1226, 0x0062 };
    uint32_t const ces[9] = { 0x2533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_377)
{
    // 1227 0021;	
    // (ሧ) ETHIOPIC SYLLABLE SZWA	[2534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1227, 0x0021 };
    uint32_t const ces[9] = { 0x2534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_378)
{
    // 1227 003F;	
    // (ሧ) ETHIOPIC SYLLABLE SZWA	[2534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1227, 0x003F };
    uint32_t const ces[9] = { 0x2534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_379)
{
    // 1227 0061;	
    // (ሧ) ETHIOPIC SYLLABLE SZWA	[2534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1227, 0x0061 };
    uint32_t const ces[9] = { 0x2534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_380)
{
    // 1227 0041;	
    // (ሧ) ETHIOPIC SYLLABLE SZWA	[2534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1227, 0x0041 };
    uint32_t const ces[9] = { 0x2534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_381)
{
    // 1227 0062;	
    // (ሧ) ETHIOPIC SYLLABLE SZWA	[2534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1227, 0x0062 };
    uint32_t const ces[9] = { 0x2534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_382)
{
    // 1228 0021;	
    // (ረ) ETHIOPIC SYLLABLE RA	[2535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1228, 0x0021 };
    uint32_t const ces[9] = { 0x2535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_383)
{
    // 1228 003F;	
    // (ረ) ETHIOPIC SYLLABLE RA	[2535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1228, 0x003F };
    uint32_t const ces[9] = { 0x2535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_384)
{
    // 1228 0061;	
    // (ረ) ETHIOPIC SYLLABLE RA	[2535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1228, 0x0061 };
    uint32_t const ces[9] = { 0x2535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_385)
{
    // 1228 0041;	
    // (ረ) ETHIOPIC SYLLABLE RA	[2535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1228, 0x0041 };
    uint32_t const ces[9] = { 0x2535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_386)
{
    // 1228 0062;	
    // (ረ) ETHIOPIC SYLLABLE RA	[2535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1228, 0x0062 };
    uint32_t const ces[9] = { 0x2535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_387)
{
    // 1229 0021;	
    // (ሩ) ETHIOPIC SYLLABLE RU	[2536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229, 0x0021 };
    uint32_t const ces[9] = { 0x2536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_388)
{
    // 1229 003F;	
    // (ሩ) ETHIOPIC SYLLABLE RU	[2536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229, 0x003F };
    uint32_t const ces[9] = { 0x2536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_389)
{
    // 1229 0061;	
    // (ሩ) ETHIOPIC SYLLABLE RU	[2536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229, 0x0061 };
    uint32_t const ces[9] = { 0x2536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_390)
{
    // 1229 0041;	
    // (ሩ) ETHIOPIC SYLLABLE RU	[2536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1229, 0x0041 };
    uint32_t const ces[9] = { 0x2536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_391)
{
    // 1229 0062;	
    // (ሩ) ETHIOPIC SYLLABLE RU	[2536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1229, 0x0062 };
    uint32_t const ces[9] = { 0x2536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_392)
{
    // 122A 0021;	
    // (ሪ) ETHIOPIC SYLLABLE RI	[2537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A, 0x0021 };
    uint32_t const ces[9] = { 0x2537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_393)
{
    // 122A 003F;	
    // (ሪ) ETHIOPIC SYLLABLE RI	[2537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A, 0x003F };
    uint32_t const ces[9] = { 0x2537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_394)
{
    // 122A 0061;	
    // (ሪ) ETHIOPIC SYLLABLE RI	[2537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A, 0x0061 };
    uint32_t const ces[9] = { 0x2537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_395)
{
    // 122A 0041;	
    // (ሪ) ETHIOPIC SYLLABLE RI	[2537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122A, 0x0041 };
    uint32_t const ces[9] = { 0x2537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_396)
{
    // 122A 0062;	
    // (ሪ) ETHIOPIC SYLLABLE RI	[2537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122A, 0x0062 };
    uint32_t const ces[9] = { 0x2537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_397)
{
    // 122B 0021;	
    // (ራ) ETHIOPIC SYLLABLE RAA	[2538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B, 0x0021 };
    uint32_t const ces[9] = { 0x2538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_398)
{
    // 122B 003F;	
    // (ራ) ETHIOPIC SYLLABLE RAA	[2538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B, 0x003F };
    uint32_t const ces[9] = { 0x2538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_399)
{
    // 122B 0061;	
    // (ራ) ETHIOPIC SYLLABLE RAA	[2538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B, 0x0061 };
    uint32_t const ces[9] = { 0x2538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_400)
{
    // 122B 0041;	
    // (ራ) ETHIOPIC SYLLABLE RAA	[2538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122B, 0x0041 };
    uint32_t const ces[9] = { 0x2538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_401)
{
    // 122B 0062;	
    // (ራ) ETHIOPIC SYLLABLE RAA	[2538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122B, 0x0062 };
    uint32_t const ces[9] = { 0x2538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_402)
{
    // 122C 0021;	
    // (ሬ) ETHIOPIC SYLLABLE REE	[2539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C, 0x0021 };
    uint32_t const ces[9] = { 0x2539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_403)
{
    // 122C 003F;	
    // (ሬ) ETHIOPIC SYLLABLE REE	[2539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C, 0x003F };
    uint32_t const ces[9] = { 0x2539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_404)
{
    // 122C 0061;	
    // (ሬ) ETHIOPIC SYLLABLE REE	[2539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C, 0x0061 };
    uint32_t const ces[9] = { 0x2539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_405)
{
    // 122C 0041;	
    // (ሬ) ETHIOPIC SYLLABLE REE	[2539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122C, 0x0041 };
    uint32_t const ces[9] = { 0x2539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_406)
{
    // 122C 0062;	
    // (ሬ) ETHIOPIC SYLLABLE REE	[2539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122C, 0x0062 };
    uint32_t const ces[9] = { 0x2539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_407)
{
    // 122D 0021;	
    // (ር) ETHIOPIC SYLLABLE RE	[253A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D, 0x0021 };
    uint32_t const ces[9] = { 0x253A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_408)
{
    // 122D 003F;	
    // (ር) ETHIOPIC SYLLABLE RE	[253A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D, 0x003F };
    uint32_t const ces[9] = { 0x253A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_409)
{
    // 122D 0061;	
    // (ር) ETHIOPIC SYLLABLE RE	[253A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D, 0x0061 };
    uint32_t const ces[9] = { 0x253A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_410)
{
    // 122D 0041;	
    // (ር) ETHIOPIC SYLLABLE RE	[253A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122D, 0x0041 };
    uint32_t const ces[9] = { 0x253A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_411)
{
    // 122D 0062;	
    // (ር) ETHIOPIC SYLLABLE RE	[253A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122D, 0x0062 };
    uint32_t const ces[9] = { 0x253A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_412)
{
    // 122E 0021;	
    // (ሮ) ETHIOPIC SYLLABLE RO	[253B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E, 0x0021 };
    uint32_t const ces[9] = { 0x253B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_413)
{
    // 122E 003F;	
    // (ሮ) ETHIOPIC SYLLABLE RO	[253B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E, 0x003F };
    uint32_t const ces[9] = { 0x253B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_414)
{
    // 122E 0061;	
    // (ሮ) ETHIOPIC SYLLABLE RO	[253B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E, 0x0061 };
    uint32_t const ces[9] = { 0x253B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_415)
{
    // 122E 0041;	
    // (ሮ) ETHIOPIC SYLLABLE RO	[253B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122E, 0x0041 };
    uint32_t const ces[9] = { 0x253B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_416)
{
    // 122E 0062;	
    // (ሮ) ETHIOPIC SYLLABLE RO	[253B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122E, 0x0062 };
    uint32_t const ces[9] = { 0x253B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_417)
{
    // 122F 0021;	
    // (ሯ) ETHIOPIC SYLLABLE RWA	[253C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F, 0x0021 };
    uint32_t const ces[9] = { 0x253C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_418)
{
    // 122F 003F;	
    // (ሯ) ETHIOPIC SYLLABLE RWA	[253C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F, 0x003F };
    uint32_t const ces[9] = { 0x253C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_419)
{
    // 122F 0061;	
    // (ሯ) ETHIOPIC SYLLABLE RWA	[253C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F, 0x0061 };
    uint32_t const ces[9] = { 0x253C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_420)
{
    // 122F 0041;	
    // (ሯ) ETHIOPIC SYLLABLE RWA	[253C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x122F, 0x0041 };
    uint32_t const ces[9] = { 0x253C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_421)
{
    // 122F 0062;	
    // (ሯ) ETHIOPIC SYLLABLE RWA	[253C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x122F, 0x0062 };
    uint32_t const ces[9] = { 0x253C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_422)
{
    // 2D82 0021;	
    // (ⶂ) ETHIOPIC SYLLABLE ROA	[253D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D82, 0x0021 };
    uint32_t const ces[9] = { 0x253D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_423)
{
    // 2D82 003F;	
    // (ⶂ) ETHIOPIC SYLLABLE ROA	[253D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D82, 0x003F };
    uint32_t const ces[9] = { 0x253D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_424)
{
    // 2D82 0061;	
    // (ⶂ) ETHIOPIC SYLLABLE ROA	[253D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D82, 0x0061 };
    uint32_t const ces[9] = { 0x253D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_425)
{
    // 2D82 0041;	
    // (ⶂ) ETHIOPIC SYLLABLE ROA	[253D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D82, 0x0041 };
    uint32_t const ces[9] = { 0x253D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_426)
{
    // 2D82 0062;	
    // (ⶂ) ETHIOPIC SYLLABLE ROA	[253D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D82, 0x0062 };
    uint32_t const ces[9] = { 0x253D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_427)
{
    // 1230 0021;	
    // (ሰ) ETHIOPIC SYLLABLE SA	[253E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1230, 0x0021 };
    uint32_t const ces[9] = { 0x253E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_428)
{
    // 1230 003F;	
    // (ሰ) ETHIOPIC SYLLABLE SA	[253E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1230, 0x003F };
    uint32_t const ces[9] = { 0x253E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_429)
{
    // 1230 0061;	
    // (ሰ) ETHIOPIC SYLLABLE SA	[253E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1230, 0x0061 };
    uint32_t const ces[9] = { 0x253E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_430)
{
    // 1230 0041;	
    // (ሰ) ETHIOPIC SYLLABLE SA	[253E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1230, 0x0041 };
    uint32_t const ces[9] = { 0x253E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_431)
{
    // 1230 0062;	
    // (ሰ) ETHIOPIC SYLLABLE SA	[253E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1230, 0x0062 };
    uint32_t const ces[9] = { 0x253E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_432)
{
    // 1231 0021;	
    // (ሱ) ETHIOPIC SYLLABLE SU	[253F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1231, 0x0021 };
    uint32_t const ces[9] = { 0x253F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_433)
{
    // 1231 003F;	
    // (ሱ) ETHIOPIC SYLLABLE SU	[253F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1231, 0x003F };
    uint32_t const ces[9] = { 0x253F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_434)
{
    // 1231 0061;	
    // (ሱ) ETHIOPIC SYLLABLE SU	[253F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1231, 0x0061 };
    uint32_t const ces[9] = { 0x253F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_435)
{
    // 1231 0041;	
    // (ሱ) ETHIOPIC SYLLABLE SU	[253F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1231, 0x0041 };
    uint32_t const ces[9] = { 0x253F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_436)
{
    // 1231 0062;	
    // (ሱ) ETHIOPIC SYLLABLE SU	[253F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1231, 0x0062 };
    uint32_t const ces[9] = { 0x253F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_437)
{
    // 1232 0021;	
    // (ሲ) ETHIOPIC SYLLABLE SI	[2540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1232, 0x0021 };
    uint32_t const ces[9] = { 0x2540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_438)
{
    // 1232 003F;	
    // (ሲ) ETHIOPIC SYLLABLE SI	[2540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1232, 0x003F };
    uint32_t const ces[9] = { 0x2540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_439)
{
    // 1232 0061;	
    // (ሲ) ETHIOPIC SYLLABLE SI	[2540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1232, 0x0061 };
    uint32_t const ces[9] = { 0x2540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_440)
{
    // 1232 0041;	
    // (ሲ) ETHIOPIC SYLLABLE SI	[2540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1232, 0x0041 };
    uint32_t const ces[9] = { 0x2540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_441)
{
    // 1232 0062;	
    // (ሲ) ETHIOPIC SYLLABLE SI	[2540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1232, 0x0062 };
    uint32_t const ces[9] = { 0x2540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_442)
{
    // 1233 0021;	
    // (ሳ) ETHIOPIC SYLLABLE SAA	[2541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1233, 0x0021 };
    uint32_t const ces[9] = { 0x2541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_443)
{
    // 1233 003F;	
    // (ሳ) ETHIOPIC SYLLABLE SAA	[2541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1233, 0x003F };
    uint32_t const ces[9] = { 0x2541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_444)
{
    // 1233 0061;	
    // (ሳ) ETHIOPIC SYLLABLE SAA	[2541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1233, 0x0061 };
    uint32_t const ces[9] = { 0x2541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_445)
{
    // 1233 0041;	
    // (ሳ) ETHIOPIC SYLLABLE SAA	[2541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1233, 0x0041 };
    uint32_t const ces[9] = { 0x2541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_446)
{
    // 1233 0062;	
    // (ሳ) ETHIOPIC SYLLABLE SAA	[2541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1233, 0x0062 };
    uint32_t const ces[9] = { 0x2541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_447)
{
    // 1234 0021;	
    // (ሴ) ETHIOPIC SYLLABLE SEE	[2542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1234, 0x0021 };
    uint32_t const ces[9] = { 0x2542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_448)
{
    // 1234 003F;	
    // (ሴ) ETHIOPIC SYLLABLE SEE	[2542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1234, 0x003F };
    uint32_t const ces[9] = { 0x2542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_449)
{
    // 1234 0061;	
    // (ሴ) ETHIOPIC SYLLABLE SEE	[2542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1234, 0x0061 };
    uint32_t const ces[9] = { 0x2542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_450)
{
    // 1234 0041;	
    // (ሴ) ETHIOPIC SYLLABLE SEE	[2542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1234, 0x0041 };
    uint32_t const ces[9] = { 0x2542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_451)
{
    // 1234 0062;	
    // (ሴ) ETHIOPIC SYLLABLE SEE	[2542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1234, 0x0062 };
    uint32_t const ces[9] = { 0x2542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_452)
{
    // 1235 0021;	
    // (ስ) ETHIOPIC SYLLABLE SE	[2543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1235, 0x0021 };
    uint32_t const ces[9] = { 0x2543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_453)
{
    // 1235 003F;	
    // (ስ) ETHIOPIC SYLLABLE SE	[2543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1235, 0x003F };
    uint32_t const ces[9] = { 0x2543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_454)
{
    // 1235 0061;	
    // (ስ) ETHIOPIC SYLLABLE SE	[2543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1235, 0x0061 };
    uint32_t const ces[9] = { 0x2543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_455)
{
    // 1235 0041;	
    // (ስ) ETHIOPIC SYLLABLE SE	[2543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1235, 0x0041 };
    uint32_t const ces[9] = { 0x2543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_456)
{
    // 1235 0062;	
    // (ስ) ETHIOPIC SYLLABLE SE	[2543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1235, 0x0062 };
    uint32_t const ces[9] = { 0x2543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_457)
{
    // 1236 0021;	
    // (ሶ) ETHIOPIC SYLLABLE SO	[2544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1236, 0x0021 };
    uint32_t const ces[9] = { 0x2544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_458)
{
    // 1236 003F;	
    // (ሶ) ETHIOPIC SYLLABLE SO	[2544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1236, 0x003F };
    uint32_t const ces[9] = { 0x2544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_459)
{
    // 1236 0061;	
    // (ሶ) ETHIOPIC SYLLABLE SO	[2544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1236, 0x0061 };
    uint32_t const ces[9] = { 0x2544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_460)
{
    // 1236 0041;	
    // (ሶ) ETHIOPIC SYLLABLE SO	[2544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1236, 0x0041 };
    uint32_t const ces[9] = { 0x2544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_461)
{
    // 1236 0062;	
    // (ሶ) ETHIOPIC SYLLABLE SO	[2544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1236, 0x0062 };
    uint32_t const ces[9] = { 0x2544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_462)
{
    // 1237 0021;	
    // (ሷ) ETHIOPIC SYLLABLE SWA	[2545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1237, 0x0021 };
    uint32_t const ces[9] = { 0x2545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_463)
{
    // 1237 003F;	
    // (ሷ) ETHIOPIC SYLLABLE SWA	[2545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1237, 0x003F };
    uint32_t const ces[9] = { 0x2545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_464)
{
    // 1237 0061;	
    // (ሷ) ETHIOPIC SYLLABLE SWA	[2545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1237, 0x0061 };
    uint32_t const ces[9] = { 0x2545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_465)
{
    // 1237 0041;	
    // (ሷ) ETHIOPIC SYLLABLE SWA	[2545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1237, 0x0041 };
    uint32_t const ces[9] = { 0x2545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_466)
{
    // 1237 0062;	
    // (ሷ) ETHIOPIC SYLLABLE SWA	[2545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1237, 0x0062 };
    uint32_t const ces[9] = { 0x2545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_467)
{
    // 2D83 0021;	
    // (ⶃ) ETHIOPIC SYLLABLE SOA	[2546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D83, 0x0021 };
    uint32_t const ces[9] = { 0x2546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_468)
{
    // 2D83 003F;	
    // (ⶃ) ETHIOPIC SYLLABLE SOA	[2546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D83, 0x003F };
    uint32_t const ces[9] = { 0x2546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_469)
{
    // 2D83 0061;	
    // (ⶃ) ETHIOPIC SYLLABLE SOA	[2546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D83, 0x0061 };
    uint32_t const ces[9] = { 0x2546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_470)
{
    // 2D83 0041;	
    // (ⶃ) ETHIOPIC SYLLABLE SOA	[2546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D83, 0x0041 };
    uint32_t const ces[9] = { 0x2546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_471)
{
    // 2D83 0062;	
    // (ⶃ) ETHIOPIC SYLLABLE SOA	[2546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D83, 0x0062 };
    uint32_t const ces[9] = { 0x2546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_472)
{
    // AB01 0021;	
    // (ꬁ) ETHIOPIC SYLLABLE TTHU	[2547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB01, 0x0021 };
    uint32_t const ces[9] = { 0x2547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_473)
{
    // AB01 003F;	
    // (ꬁ) ETHIOPIC SYLLABLE TTHU	[2547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB01, 0x003F };
    uint32_t const ces[9] = { 0x2547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_474)
{
    // AB01 0061;	
    // (ꬁ) ETHIOPIC SYLLABLE TTHU	[2547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB01, 0x0061 };
    uint32_t const ces[9] = { 0x2547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_475)
{
    // AB01 0041;	
    // (ꬁ) ETHIOPIC SYLLABLE TTHU	[2547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB01, 0x0041 };
    uint32_t const ces[9] = { 0x2547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_476)
{
    // AB01 0062;	
    // (ꬁ) ETHIOPIC SYLLABLE TTHU	[2547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB01, 0x0062 };
    uint32_t const ces[9] = { 0x2547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_477)
{
    // AB02 0021;	
    // (ꬂ) ETHIOPIC SYLLABLE TTHI	[2548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB02, 0x0021 };
    uint32_t const ces[9] = { 0x2548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_478)
{
    // AB02 003F;	
    // (ꬂ) ETHIOPIC SYLLABLE TTHI	[2548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB02, 0x003F };
    uint32_t const ces[9] = { 0x2548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_479)
{
    // AB02 0061;	
    // (ꬂ) ETHIOPIC SYLLABLE TTHI	[2548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB02, 0x0061 };
    uint32_t const ces[9] = { 0x2548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_480)
{
    // AB02 0041;	
    // (ꬂ) ETHIOPIC SYLLABLE TTHI	[2548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB02, 0x0041 };
    uint32_t const ces[9] = { 0x2548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_481)
{
    // AB02 0062;	
    // (ꬂ) ETHIOPIC SYLLABLE TTHI	[2548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB02, 0x0062 };
    uint32_t const ces[9] = { 0x2548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_482)
{
    // AB03 0021;	
    // (ꬃ) ETHIOPIC SYLLABLE TTHAA	[2549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB03, 0x0021 };
    uint32_t const ces[9] = { 0x2549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_483)
{
    // AB03 003F;	
    // (ꬃ) ETHIOPIC SYLLABLE TTHAA	[2549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB03, 0x003F };
    uint32_t const ces[9] = { 0x2549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_484)
{
    // AB03 0061;	
    // (ꬃ) ETHIOPIC SYLLABLE TTHAA	[2549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB03, 0x0061 };
    uint32_t const ces[9] = { 0x2549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_485)
{
    // AB03 0041;	
    // (ꬃ) ETHIOPIC SYLLABLE TTHAA	[2549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB03, 0x0041 };
    uint32_t const ces[9] = { 0x2549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_486)
{
    // AB03 0062;	
    // (ꬃ) ETHIOPIC SYLLABLE TTHAA	[2549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB03, 0x0062 };
    uint32_t const ces[9] = { 0x2549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_487)
{
    // AB04 0021;	
    // (ꬄ) ETHIOPIC SYLLABLE TTHEE	[254A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB04, 0x0021 };
    uint32_t const ces[9] = { 0x254A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_488)
{
    // AB04 003F;	
    // (ꬄ) ETHIOPIC SYLLABLE TTHEE	[254A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB04, 0x003F };
    uint32_t const ces[9] = { 0x254A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_489)
{
    // AB04 0061;	
    // (ꬄ) ETHIOPIC SYLLABLE TTHEE	[254A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB04, 0x0061 };
    uint32_t const ces[9] = { 0x254A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_490)
{
    // AB04 0041;	
    // (ꬄ) ETHIOPIC SYLLABLE TTHEE	[254A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB04, 0x0041 };
    uint32_t const ces[9] = { 0x254A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_491)
{
    // AB04 0062;	
    // (ꬄ) ETHIOPIC SYLLABLE TTHEE	[254A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB04, 0x0062 };
    uint32_t const ces[9] = { 0x254A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_492)
{
    // AB05 0021;	
    // (ꬅ) ETHIOPIC SYLLABLE TTHE	[254B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB05, 0x0021 };
    uint32_t const ces[9] = { 0x254B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_493)
{
    // AB05 003F;	
    // (ꬅ) ETHIOPIC SYLLABLE TTHE	[254B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB05, 0x003F };
    uint32_t const ces[9] = { 0x254B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_494)
{
    // AB05 0061;	
    // (ꬅ) ETHIOPIC SYLLABLE TTHE	[254B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB05, 0x0061 };
    uint32_t const ces[9] = { 0x254B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_495)
{
    // AB05 0041;	
    // (ꬅ) ETHIOPIC SYLLABLE TTHE	[254B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB05, 0x0041 };
    uint32_t const ces[9] = { 0x254B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_496)
{
    // AB05 0062;	
    // (ꬅ) ETHIOPIC SYLLABLE TTHE	[254B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB05, 0x0062 };
    uint32_t const ces[9] = { 0x254B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_497)
{
    // AB06 0021;	
    // (ꬆ) ETHIOPIC SYLLABLE TTHO	[254C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB06, 0x0021 };
    uint32_t const ces[9] = { 0x254C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_498)
{
    // AB06 003F;	
    // (ꬆ) ETHIOPIC SYLLABLE TTHO	[254C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB06, 0x003F };
    uint32_t const ces[9] = { 0x254C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_160_499)
{
    // AB06 0061;	
    // (ꬆ) ETHIOPIC SYLLABLE TTHO	[254C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB06, 0x0061 };
    uint32_t const ces[9] = { 0x254C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

