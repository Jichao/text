// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_276_000)
{
    // 10033 003F;	
    // (êÄ≥) LINEAR B SYLLABLE B004 TE	[484F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10033, 0x003F };
    uint32_t const ces[9] = { 0x484F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_001)
{
    // 10033 0061;	
    // (êÄ≥) LINEAR B SYLLABLE B004 TE	[484F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10033, 0x0061 };
    uint32_t const ces[9] = { 0x484F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_002)
{
    // 10033 0041;	
    // (êÄ≥) LINEAR B SYLLABLE B004 TE	[484F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10033, 0x0041 };
    uint32_t const ces[9] = { 0x484F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_003)
{
    // 10033 0062;	
    // (êÄ≥) LINEAR B SYLLABLE B004 TE	[484F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10033, 0x0062 };
    uint32_t const ces[9] = { 0x484F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_004)
{
    // 10034 0021;	
    // (êÄ¥) LINEAR B SYLLABLE B037 TI	[4850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10034, 0x0021 };
    uint32_t const ces[9] = { 0x4850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_005)
{
    // 10034 003F;	
    // (êÄ¥) LINEAR B SYLLABLE B037 TI	[4850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10034, 0x003F };
    uint32_t const ces[9] = { 0x4850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_006)
{
    // 10034 0061;	
    // (êÄ¥) LINEAR B SYLLABLE B037 TI	[4850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10034, 0x0061 };
    uint32_t const ces[9] = { 0x4850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_007)
{
    // 10034 0041;	
    // (êÄ¥) LINEAR B SYLLABLE B037 TI	[4850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10034, 0x0041 };
    uint32_t const ces[9] = { 0x4850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_008)
{
    // 10034 0062;	
    // (êÄ¥) LINEAR B SYLLABLE B037 TI	[4850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10034, 0x0062 };
    uint32_t const ces[9] = { 0x4850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_009)
{
    // 10035 0021;	
    // (êÄµ) LINEAR B SYLLABLE B005 TO	[4851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10035, 0x0021 };
    uint32_t const ces[9] = { 0x4851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_010)
{
    // 10035 003F;	
    // (êÄµ) LINEAR B SYLLABLE B005 TO	[4851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10035, 0x003F };
    uint32_t const ces[9] = { 0x4851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_011)
{
    // 10035 0061;	
    // (êÄµ) LINEAR B SYLLABLE B005 TO	[4851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10035, 0x0061 };
    uint32_t const ces[9] = { 0x4851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_012)
{
    // 10035 0041;	
    // (êÄµ) LINEAR B SYLLABLE B005 TO	[4851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10035, 0x0041 };
    uint32_t const ces[9] = { 0x4851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_013)
{
    // 10035 0062;	
    // (êÄµ) LINEAR B SYLLABLE B005 TO	[4851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10035, 0x0062 };
    uint32_t const ces[9] = { 0x4851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_014)
{
    // 10036 0021;	
    // (êÄ∂) LINEAR B SYLLABLE B069 TU	[4852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10036, 0x0021 };
    uint32_t const ces[9] = { 0x4852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_015)
{
    // 10036 003F;	
    // (êÄ∂) LINEAR B SYLLABLE B069 TU	[4852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10036, 0x003F };
    uint32_t const ces[9] = { 0x4852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_016)
{
    // 10036 0061;	
    // (êÄ∂) LINEAR B SYLLABLE B069 TU	[4852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10036, 0x0061 };
    uint32_t const ces[9] = { 0x4852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_017)
{
    // 10036 0041;	
    // (êÄ∂) LINEAR B SYLLABLE B069 TU	[4852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10036, 0x0041 };
    uint32_t const ces[9] = { 0x4852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_018)
{
    // 10036 0062;	
    // (êÄ∂) LINEAR B SYLLABLE B069 TU	[4852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10036, 0x0062 };
    uint32_t const ces[9] = { 0x4852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_019)
{
    // 10037 0021;	
    // (êÄ∑) LINEAR B SYLLABLE B054 WA	[4853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10037, 0x0021 };
    uint32_t const ces[9] = { 0x4853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_020)
{
    // 10037 003F;	
    // (êÄ∑) LINEAR B SYLLABLE B054 WA	[4853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10037, 0x003F };
    uint32_t const ces[9] = { 0x4853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_021)
{
    // 10037 0061;	
    // (êÄ∑) LINEAR B SYLLABLE B054 WA	[4853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10037, 0x0061 };
    uint32_t const ces[9] = { 0x4853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_022)
{
    // 10037 0041;	
    // (êÄ∑) LINEAR B SYLLABLE B054 WA	[4853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10037, 0x0041 };
    uint32_t const ces[9] = { 0x4853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_023)
{
    // 10037 0062;	
    // (êÄ∑) LINEAR B SYLLABLE B054 WA	[4853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10037, 0x0062 };
    uint32_t const ces[9] = { 0x4853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_024)
{
    // 10038 0021;	
    // (êÄ∏) LINEAR B SYLLABLE B075 WE	[4854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10038, 0x0021 };
    uint32_t const ces[9] = { 0x4854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_025)
{
    // 10038 003F;	
    // (êÄ∏) LINEAR B SYLLABLE B075 WE	[4854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10038, 0x003F };
    uint32_t const ces[9] = { 0x4854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_026)
{
    // 10038 0061;	
    // (êÄ∏) LINEAR B SYLLABLE B075 WE	[4854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10038, 0x0061 };
    uint32_t const ces[9] = { 0x4854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_027)
{
    // 10038 0041;	
    // (êÄ∏) LINEAR B SYLLABLE B075 WE	[4854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10038, 0x0041 };
    uint32_t const ces[9] = { 0x4854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_028)
{
    // 10038 0062;	
    // (êÄ∏) LINEAR B SYLLABLE B075 WE	[4854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10038, 0x0062 };
    uint32_t const ces[9] = { 0x4854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_029)
{
    // 10039 0021;	
    // (êÄπ) LINEAR B SYLLABLE B040 WI	[4855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10039, 0x0021 };
    uint32_t const ces[9] = { 0x4855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_030)
{
    // 10039 003F;	
    // (êÄπ) LINEAR B SYLLABLE B040 WI	[4855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10039, 0x003F };
    uint32_t const ces[9] = { 0x4855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_031)
{
    // 10039 0061;	
    // (êÄπ) LINEAR B SYLLABLE B040 WI	[4855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10039, 0x0061 };
    uint32_t const ces[9] = { 0x4855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_032)
{
    // 10039 0041;	
    // (êÄπ) LINEAR B SYLLABLE B040 WI	[4855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10039, 0x0041 };
    uint32_t const ces[9] = { 0x4855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_033)
{
    // 10039 0062;	
    // (êÄπ) LINEAR B SYLLABLE B040 WI	[4855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10039, 0x0062 };
    uint32_t const ces[9] = { 0x4855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_034)
{
    // 1003A 0021;	
    // (êÄ∫) LINEAR B SYLLABLE B042 WO	[4856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003A, 0x0021 };
    uint32_t const ces[9] = { 0x4856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_035)
{
    // 1003A 003F;	
    // (êÄ∫) LINEAR B SYLLABLE B042 WO	[4856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003A, 0x003F };
    uint32_t const ces[9] = { 0x4856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_036)
{
    // 1003A 0061;	
    // (êÄ∫) LINEAR B SYLLABLE B042 WO	[4856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003A, 0x0061 };
    uint32_t const ces[9] = { 0x4856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_037)
{
    // 1003A 0041;	
    // (êÄ∫) LINEAR B SYLLABLE B042 WO	[4856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1003A, 0x0041 };
    uint32_t const ces[9] = { 0x4856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_038)
{
    // 1003A 0062;	
    // (êÄ∫) LINEAR B SYLLABLE B042 WO	[4856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003A, 0x0062 };
    uint32_t const ces[9] = { 0x4856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_039)
{
    // 1003C 0021;	
    // (êÄº) LINEAR B SYLLABLE B017 ZA	[4857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003C, 0x0021 };
    uint32_t const ces[9] = { 0x4857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_040)
{
    // 1003C 003F;	
    // (êÄº) LINEAR B SYLLABLE B017 ZA	[4857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003C, 0x003F };
    uint32_t const ces[9] = { 0x4857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_041)
{
    // 1003C 0061;	
    // (êÄº) LINEAR B SYLLABLE B017 ZA	[4857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003C, 0x0061 };
    uint32_t const ces[9] = { 0x4857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_042)
{
    // 1003C 0041;	
    // (êÄº) LINEAR B SYLLABLE B017 ZA	[4857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1003C, 0x0041 };
    uint32_t const ces[9] = { 0x4857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_043)
{
    // 1003C 0062;	
    // (êÄº) LINEAR B SYLLABLE B017 ZA	[4857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003C, 0x0062 };
    uint32_t const ces[9] = { 0x4857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_044)
{
    // 1003D 0021;	
    // (êÄΩ) LINEAR B SYLLABLE B074 ZE	[4858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003D, 0x0021 };
    uint32_t const ces[9] = { 0x4858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_045)
{
    // 1003D 003F;	
    // (êÄΩ) LINEAR B SYLLABLE B074 ZE	[4858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003D, 0x003F };
    uint32_t const ces[9] = { 0x4858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_046)
{
    // 1003D 0061;	
    // (êÄΩ) LINEAR B SYLLABLE B074 ZE	[4858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003D, 0x0061 };
    uint32_t const ces[9] = { 0x4858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_047)
{
    // 1003D 0041;	
    // (êÄΩ) LINEAR B SYLLABLE B074 ZE	[4858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1003D, 0x0041 };
    uint32_t const ces[9] = { 0x4858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_048)
{
    // 1003D 0062;	
    // (êÄΩ) LINEAR B SYLLABLE B074 ZE	[4858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003D, 0x0062 };
    uint32_t const ces[9] = { 0x4858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_049)
{
    // 1003F 0021;	
    // (êÄø) LINEAR B SYLLABLE B020 ZO	[4859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003F, 0x0021 };
    uint32_t const ces[9] = { 0x4859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_050)
{
    // 1003F 003F;	
    // (êÄø) LINEAR B SYLLABLE B020 ZO	[4859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003F, 0x003F };
    uint32_t const ces[9] = { 0x4859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_051)
{
    // 1003F 0061;	
    // (êÄø) LINEAR B SYLLABLE B020 ZO	[4859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003F, 0x0061 };
    uint32_t const ces[9] = { 0x4859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_052)
{
    // 1003F 0041;	
    // (êÄø) LINEAR B SYLLABLE B020 ZO	[4859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1003F, 0x0041 };
    uint32_t const ces[9] = { 0x4859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_053)
{
    // 1003F 0062;	
    // (êÄø) LINEAR B SYLLABLE B020 ZO	[4859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1003F, 0x0062 };
    uint32_t const ces[9] = { 0x4859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_054)
{
    // 10040 0021;	
    // (êÅÄ) LINEAR B SYLLABLE B025 A2	[485A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10040, 0x0021 };
    uint32_t const ces[9] = { 0x485A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_055)
{
    // 10040 003F;	
    // (êÅÄ) LINEAR B SYLLABLE B025 A2	[485A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10040, 0x003F };
    uint32_t const ces[9] = { 0x485A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_056)
{
    // 10040 0061;	
    // (êÅÄ) LINEAR B SYLLABLE B025 A2	[485A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10040, 0x0061 };
    uint32_t const ces[9] = { 0x485A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_057)
{
    // 10040 0041;	
    // (êÅÄ) LINEAR B SYLLABLE B025 A2	[485A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10040, 0x0041 };
    uint32_t const ces[9] = { 0x485A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_058)
{
    // 10040 0062;	
    // (êÅÄ) LINEAR B SYLLABLE B025 A2	[485A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10040, 0x0062 };
    uint32_t const ces[9] = { 0x485A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_059)
{
    // 10041 0021;	
    // (êÅÅ) LINEAR B SYLLABLE B043 A3	[485B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10041, 0x0021 };
    uint32_t const ces[9] = { 0x485B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_060)
{
    // 10041 003F;	
    // (êÅÅ) LINEAR B SYLLABLE B043 A3	[485B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10041, 0x003F };
    uint32_t const ces[9] = { 0x485B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_061)
{
    // 10041 0061;	
    // (êÅÅ) LINEAR B SYLLABLE B043 A3	[485B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10041, 0x0061 };
    uint32_t const ces[9] = { 0x485B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_062)
{
    // 10041 0041;	
    // (êÅÅ) LINEAR B SYLLABLE B043 A3	[485B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10041, 0x0041 };
    uint32_t const ces[9] = { 0x485B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_063)
{
    // 10041 0062;	
    // (êÅÅ) LINEAR B SYLLABLE B043 A3	[485B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10041, 0x0062 };
    uint32_t const ces[9] = { 0x485B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_064)
{
    // 10042 0021;	
    // (êÅÇ) LINEAR B SYLLABLE B085 AU	[485C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10042, 0x0021 };
    uint32_t const ces[9] = { 0x485C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_065)
{
    // 10042 003F;	
    // (êÅÇ) LINEAR B SYLLABLE B085 AU	[485C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10042, 0x003F };
    uint32_t const ces[9] = { 0x485C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_066)
{
    // 10042 0061;	
    // (êÅÇ) LINEAR B SYLLABLE B085 AU	[485C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10042, 0x0061 };
    uint32_t const ces[9] = { 0x485C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_067)
{
    // 10042 0041;	
    // (êÅÇ) LINEAR B SYLLABLE B085 AU	[485C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10042, 0x0041 };
    uint32_t const ces[9] = { 0x485C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_068)
{
    // 10042 0062;	
    // (êÅÇ) LINEAR B SYLLABLE B085 AU	[485C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10042, 0x0062 };
    uint32_t const ces[9] = { 0x485C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_069)
{
    // 10043 0021;	
    // (êÅÉ) LINEAR B SYLLABLE B071 DWE	[485D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10043, 0x0021 };
    uint32_t const ces[9] = { 0x485D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_070)
{
    // 10043 003F;	
    // (êÅÉ) LINEAR B SYLLABLE B071 DWE	[485D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10043, 0x003F };
    uint32_t const ces[9] = { 0x485D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_071)
{
    // 10043 0061;	
    // (êÅÉ) LINEAR B SYLLABLE B071 DWE	[485D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10043, 0x0061 };
    uint32_t const ces[9] = { 0x485D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_072)
{
    // 10043 0041;	
    // (êÅÉ) LINEAR B SYLLABLE B071 DWE	[485D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10043, 0x0041 };
    uint32_t const ces[9] = { 0x485D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_073)
{
    // 10043 0062;	
    // (êÅÉ) LINEAR B SYLLABLE B071 DWE	[485D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10043, 0x0062 };
    uint32_t const ces[9] = { 0x485D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_074)
{
    // 10044 0021;	
    // (êÅÑ) LINEAR B SYLLABLE B090 DWO	[485E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10044, 0x0021 };
    uint32_t const ces[9] = { 0x485E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_075)
{
    // 10044 003F;	
    // (êÅÑ) LINEAR B SYLLABLE B090 DWO	[485E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10044, 0x003F };
    uint32_t const ces[9] = { 0x485E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_076)
{
    // 10044 0061;	
    // (êÅÑ) LINEAR B SYLLABLE B090 DWO	[485E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10044, 0x0061 };
    uint32_t const ces[9] = { 0x485E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_077)
{
    // 10044 0041;	
    // (êÅÑ) LINEAR B SYLLABLE B090 DWO	[485E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10044, 0x0041 };
    uint32_t const ces[9] = { 0x485E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_078)
{
    // 10044 0062;	
    // (êÅÑ) LINEAR B SYLLABLE B090 DWO	[485E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10044, 0x0062 };
    uint32_t const ces[9] = { 0x485E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_079)
{
    // 10045 0021;	
    // (êÅÖ) LINEAR B SYLLABLE B048 NWA	[485F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10045, 0x0021 };
    uint32_t const ces[9] = { 0x485F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_080)
{
    // 10045 003F;	
    // (êÅÖ) LINEAR B SYLLABLE B048 NWA	[485F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10045, 0x003F };
    uint32_t const ces[9] = { 0x485F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_081)
{
    // 10045 0061;	
    // (êÅÖ) LINEAR B SYLLABLE B048 NWA	[485F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10045, 0x0061 };
    uint32_t const ces[9] = { 0x485F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_082)
{
    // 10045 0041;	
    // (êÅÖ) LINEAR B SYLLABLE B048 NWA	[485F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10045, 0x0041 };
    uint32_t const ces[9] = { 0x485F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_083)
{
    // 10045 0062;	
    // (êÅÖ) LINEAR B SYLLABLE B048 NWA	[485F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10045, 0x0062 };
    uint32_t const ces[9] = { 0x485F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_084)
{
    // 10046 0021;	
    // (êÅÜ) LINEAR B SYLLABLE B029 PU2	[4860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10046, 0x0021 };
    uint32_t const ces[9] = { 0x4860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_085)
{
    // 10046 003F;	
    // (êÅÜ) LINEAR B SYLLABLE B029 PU2	[4860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10046, 0x003F };
    uint32_t const ces[9] = { 0x4860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_086)
{
    // 10046 0061;	
    // (êÅÜ) LINEAR B SYLLABLE B029 PU2	[4860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10046, 0x0061 };
    uint32_t const ces[9] = { 0x4860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_087)
{
    // 10046 0041;	
    // (êÅÜ) LINEAR B SYLLABLE B029 PU2	[4860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10046, 0x0041 };
    uint32_t const ces[9] = { 0x4860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_088)
{
    // 10046 0062;	
    // (êÅÜ) LINEAR B SYLLABLE B029 PU2	[4860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10046, 0x0062 };
    uint32_t const ces[9] = { 0x4860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_089)
{
    // 10047 0021;	
    // (êÅá) LINEAR B SYLLABLE B062 PTE	[4861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10047, 0x0021 };
    uint32_t const ces[9] = { 0x4861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_090)
{
    // 10047 003F;	
    // (êÅá) LINEAR B SYLLABLE B062 PTE	[4861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10047, 0x003F };
    uint32_t const ces[9] = { 0x4861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_091)
{
    // 10047 0061;	
    // (êÅá) LINEAR B SYLLABLE B062 PTE	[4861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10047, 0x0061 };
    uint32_t const ces[9] = { 0x4861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_092)
{
    // 10047 0041;	
    // (êÅá) LINEAR B SYLLABLE B062 PTE	[4861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10047, 0x0041 };
    uint32_t const ces[9] = { 0x4861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_093)
{
    // 10047 0062;	
    // (êÅá) LINEAR B SYLLABLE B062 PTE	[4861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10047, 0x0062 };
    uint32_t const ces[9] = { 0x4861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_094)
{
    // 10048 0021;	
    // (êÅà) LINEAR B SYLLABLE B076 RA2	[4862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10048, 0x0021 };
    uint32_t const ces[9] = { 0x4862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_095)
{
    // 10048 003F;	
    // (êÅà) LINEAR B SYLLABLE B076 RA2	[4862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10048, 0x003F };
    uint32_t const ces[9] = { 0x4862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_096)
{
    // 10048 0061;	
    // (êÅà) LINEAR B SYLLABLE B076 RA2	[4862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10048, 0x0061 };
    uint32_t const ces[9] = { 0x4862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_097)
{
    // 10048 0041;	
    // (êÅà) LINEAR B SYLLABLE B076 RA2	[4862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10048, 0x0041 };
    uint32_t const ces[9] = { 0x4862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_098)
{
    // 10048 0062;	
    // (êÅà) LINEAR B SYLLABLE B076 RA2	[4862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10048, 0x0062 };
    uint32_t const ces[9] = { 0x4862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_099)
{
    // 10049 0021;	
    // (êÅâ) LINEAR B SYLLABLE B033 RA3	[4863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10049, 0x0021 };
    uint32_t const ces[9] = { 0x4863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_100)
{
    // 10049 003F;	
    // (êÅâ) LINEAR B SYLLABLE B033 RA3	[4863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10049, 0x003F };
    uint32_t const ces[9] = { 0x4863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_101)
{
    // 10049 0061;	
    // (êÅâ) LINEAR B SYLLABLE B033 RA3	[4863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10049, 0x0061 };
    uint32_t const ces[9] = { 0x4863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_102)
{
    // 10049 0041;	
    // (êÅâ) LINEAR B SYLLABLE B033 RA3	[4863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10049, 0x0041 };
    uint32_t const ces[9] = { 0x4863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_103)
{
    // 10049 0062;	
    // (êÅâ) LINEAR B SYLLABLE B033 RA3	[4863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10049, 0x0062 };
    uint32_t const ces[9] = { 0x4863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_104)
{
    // 1004A 0021;	
    // (êÅä) LINEAR B SYLLABLE B068 RO2	[4864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004A, 0x0021 };
    uint32_t const ces[9] = { 0x4864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_105)
{
    // 1004A 003F;	
    // (êÅä) LINEAR B SYLLABLE B068 RO2	[4864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004A, 0x003F };
    uint32_t const ces[9] = { 0x4864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_106)
{
    // 1004A 0061;	
    // (êÅä) LINEAR B SYLLABLE B068 RO2	[4864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004A, 0x0061 };
    uint32_t const ces[9] = { 0x4864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_107)
{
    // 1004A 0041;	
    // (êÅä) LINEAR B SYLLABLE B068 RO2	[4864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1004A, 0x0041 };
    uint32_t const ces[9] = { 0x4864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_108)
{
    // 1004A 0062;	
    // (êÅä) LINEAR B SYLLABLE B068 RO2	[4864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004A, 0x0062 };
    uint32_t const ces[9] = { 0x4864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_109)
{
    // 1004B 0021;	
    // (êÅã) LINEAR B SYLLABLE B066 TA2	[4865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004B, 0x0021 };
    uint32_t const ces[9] = { 0x4865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_110)
{
    // 1004B 003F;	
    // (êÅã) LINEAR B SYLLABLE B066 TA2	[4865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004B, 0x003F };
    uint32_t const ces[9] = { 0x4865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_111)
{
    // 1004B 0061;	
    // (êÅã) LINEAR B SYLLABLE B066 TA2	[4865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004B, 0x0061 };
    uint32_t const ces[9] = { 0x4865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_112)
{
    // 1004B 0041;	
    // (êÅã) LINEAR B SYLLABLE B066 TA2	[4865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1004B, 0x0041 };
    uint32_t const ces[9] = { 0x4865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_113)
{
    // 1004B 0062;	
    // (êÅã) LINEAR B SYLLABLE B066 TA2	[4865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004B, 0x0062 };
    uint32_t const ces[9] = { 0x4865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_114)
{
    // 1004C 0021;	
    // (êÅå) LINEAR B SYLLABLE B087 TWE	[4866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004C, 0x0021 };
    uint32_t const ces[9] = { 0x4866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_115)
{
    // 1004C 003F;	
    // (êÅå) LINEAR B SYLLABLE B087 TWE	[4866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004C, 0x003F };
    uint32_t const ces[9] = { 0x4866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_116)
{
    // 1004C 0061;	
    // (êÅå) LINEAR B SYLLABLE B087 TWE	[4866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004C, 0x0061 };
    uint32_t const ces[9] = { 0x4866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_117)
{
    // 1004C 0041;	
    // (êÅå) LINEAR B SYLLABLE B087 TWE	[4866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1004C, 0x0041 };
    uint32_t const ces[9] = { 0x4866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_118)
{
    // 1004C 0062;	
    // (êÅå) LINEAR B SYLLABLE B087 TWE	[4866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004C, 0x0062 };
    uint32_t const ces[9] = { 0x4866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_119)
{
    // 1004D 0021;	
    // (êÅç) LINEAR B SYLLABLE B091 TWO	[4867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004D, 0x0021 };
    uint32_t const ces[9] = { 0x4867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_120)
{
    // 1004D 003F;	
    // (êÅç) LINEAR B SYLLABLE B091 TWO	[4867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004D, 0x003F };
    uint32_t const ces[9] = { 0x4867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_121)
{
    // 1004D 0061;	
    // (êÅç) LINEAR B SYLLABLE B091 TWO	[4867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004D, 0x0061 };
    uint32_t const ces[9] = { 0x4867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_122)
{
    // 1004D 0041;	
    // (êÅç) LINEAR B SYLLABLE B091 TWO	[4867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1004D, 0x0041 };
    uint32_t const ces[9] = { 0x4867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_123)
{
    // 1004D 0062;	
    // (êÅç) LINEAR B SYLLABLE B091 TWO	[4867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1004D, 0x0062 };
    uint32_t const ces[9] = { 0x4867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_124)
{
    // 10050 0021;	
    // (êÅê) LINEAR B SYMBOL B018	[4868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10050, 0x0021 };
    uint32_t const ces[9] = { 0x4868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_125)
{
    // 10050 003F;	
    // (êÅê) LINEAR B SYMBOL B018	[4868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10050, 0x003F };
    uint32_t const ces[9] = { 0x4868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_126)
{
    // 10050 0061;	
    // (êÅê) LINEAR B SYMBOL B018	[4868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10050, 0x0061 };
    uint32_t const ces[9] = { 0x4868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_127)
{
    // 10050 0041;	
    // (êÅê) LINEAR B SYMBOL B018	[4868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10050, 0x0041 };
    uint32_t const ces[9] = { 0x4868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_128)
{
    // 10050 0062;	
    // (êÅê) LINEAR B SYMBOL B018	[4868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10050, 0x0062 };
    uint32_t const ces[9] = { 0x4868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_129)
{
    // 10051 0021;	
    // (êÅë) LINEAR B SYMBOL B019	[4869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10051, 0x0021 };
    uint32_t const ces[9] = { 0x4869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_130)
{
    // 10051 003F;	
    // (êÅë) LINEAR B SYMBOL B019	[4869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10051, 0x003F };
    uint32_t const ces[9] = { 0x4869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_131)
{
    // 10051 0061;	
    // (êÅë) LINEAR B SYMBOL B019	[4869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10051, 0x0061 };
    uint32_t const ces[9] = { 0x4869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_132)
{
    // 10051 0041;	
    // (êÅë) LINEAR B SYMBOL B019	[4869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10051, 0x0041 };
    uint32_t const ces[9] = { 0x4869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_133)
{
    // 10051 0062;	
    // (êÅë) LINEAR B SYMBOL B019	[4869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10051, 0x0062 };
    uint32_t const ces[9] = { 0x4869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_134)
{
    // 10052 0021;	
    // (êÅí) LINEAR B SYMBOL B022	[486A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10052, 0x0021 };
    uint32_t const ces[9] = { 0x486A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_135)
{
    // 10052 003F;	
    // (êÅí) LINEAR B SYMBOL B022	[486A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10052, 0x003F };
    uint32_t const ces[9] = { 0x486A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_136)
{
    // 10052 0061;	
    // (êÅí) LINEAR B SYMBOL B022	[486A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10052, 0x0061 };
    uint32_t const ces[9] = { 0x486A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_137)
{
    // 10052 0041;	
    // (êÅí) LINEAR B SYMBOL B022	[486A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10052, 0x0041 };
    uint32_t const ces[9] = { 0x486A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_138)
{
    // 10052 0062;	
    // (êÅí) LINEAR B SYMBOL B022	[486A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10052, 0x0062 };
    uint32_t const ces[9] = { 0x486A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_139)
{
    // 10053 0021;	
    // (êÅì) LINEAR B SYMBOL B034	[486B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10053, 0x0021 };
    uint32_t const ces[9] = { 0x486B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_140)
{
    // 10053 003F;	
    // (êÅì) LINEAR B SYMBOL B034	[486B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10053, 0x003F };
    uint32_t const ces[9] = { 0x486B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_141)
{
    // 10053 0061;	
    // (êÅì) LINEAR B SYMBOL B034	[486B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10053, 0x0061 };
    uint32_t const ces[9] = { 0x486B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_142)
{
    // 10053 0041;	
    // (êÅì) LINEAR B SYMBOL B034	[486B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10053, 0x0041 };
    uint32_t const ces[9] = { 0x486B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_143)
{
    // 10053 0062;	
    // (êÅì) LINEAR B SYMBOL B034	[486B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10053, 0x0062 };
    uint32_t const ces[9] = { 0x486B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_144)
{
    // 10054 0021;	
    // (êÅî) LINEAR B SYMBOL B047	[486C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10054, 0x0021 };
    uint32_t const ces[9] = { 0x486C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_145)
{
    // 10054 003F;	
    // (êÅî) LINEAR B SYMBOL B047	[486C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10054, 0x003F };
    uint32_t const ces[9] = { 0x486C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_146)
{
    // 10054 0061;	
    // (êÅî) LINEAR B SYMBOL B047	[486C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10054, 0x0061 };
    uint32_t const ces[9] = { 0x486C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_147)
{
    // 10054 0041;	
    // (êÅî) LINEAR B SYMBOL B047	[486C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10054, 0x0041 };
    uint32_t const ces[9] = { 0x486C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_148)
{
    // 10054 0062;	
    // (êÅî) LINEAR B SYMBOL B047	[486C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10054, 0x0062 };
    uint32_t const ces[9] = { 0x486C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_149)
{
    // 10055 0021;	
    // (êÅï) LINEAR B SYMBOL B049	[486D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10055, 0x0021 };
    uint32_t const ces[9] = { 0x486D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_150)
{
    // 10055 003F;	
    // (êÅï) LINEAR B SYMBOL B049	[486D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10055, 0x003F };
    uint32_t const ces[9] = { 0x486D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_151)
{
    // 10055 0061;	
    // (êÅï) LINEAR B SYMBOL B049	[486D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10055, 0x0061 };
    uint32_t const ces[9] = { 0x486D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_152)
{
    // 10055 0041;	
    // (êÅï) LINEAR B SYMBOL B049	[486D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10055, 0x0041 };
    uint32_t const ces[9] = { 0x486D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_153)
{
    // 10055 0062;	
    // (êÅï) LINEAR B SYMBOL B049	[486D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10055, 0x0062 };
    uint32_t const ces[9] = { 0x486D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_154)
{
    // 10056 0021;	
    // (êÅñ) LINEAR B SYMBOL B056	[486E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10056, 0x0021 };
    uint32_t const ces[9] = { 0x486E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_155)
{
    // 10056 003F;	
    // (êÅñ) LINEAR B SYMBOL B056	[486E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10056, 0x003F };
    uint32_t const ces[9] = { 0x486E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_156)
{
    // 10056 0061;	
    // (êÅñ) LINEAR B SYMBOL B056	[486E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10056, 0x0061 };
    uint32_t const ces[9] = { 0x486E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_157)
{
    // 10056 0041;	
    // (êÅñ) LINEAR B SYMBOL B056	[486E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10056, 0x0041 };
    uint32_t const ces[9] = { 0x486E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_158)
{
    // 10056 0062;	
    // (êÅñ) LINEAR B SYMBOL B056	[486E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10056, 0x0062 };
    uint32_t const ces[9] = { 0x486E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_159)
{
    // 10057 0021;	
    // (êÅó) LINEAR B SYMBOL B063	[486F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10057, 0x0021 };
    uint32_t const ces[9] = { 0x486F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_160)
{
    // 10057 003F;	
    // (êÅó) LINEAR B SYMBOL B063	[486F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10057, 0x003F };
    uint32_t const ces[9] = { 0x486F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_161)
{
    // 10057 0061;	
    // (êÅó) LINEAR B SYMBOL B063	[486F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10057, 0x0061 };
    uint32_t const ces[9] = { 0x486F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_162)
{
    // 10057 0041;	
    // (êÅó) LINEAR B SYMBOL B063	[486F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10057, 0x0041 };
    uint32_t const ces[9] = { 0x486F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_163)
{
    // 10057 0062;	
    // (êÅó) LINEAR B SYMBOL B063	[486F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10057, 0x0062 };
    uint32_t const ces[9] = { 0x486F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_164)
{
    // 10058 0021;	
    // (êÅò) LINEAR B SYMBOL B064	[4870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10058, 0x0021 };
    uint32_t const ces[9] = { 0x4870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_165)
{
    // 10058 003F;	
    // (êÅò) LINEAR B SYMBOL B064	[4870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10058, 0x003F };
    uint32_t const ces[9] = { 0x4870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_166)
{
    // 10058 0061;	
    // (êÅò) LINEAR B SYMBOL B064	[4870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10058, 0x0061 };
    uint32_t const ces[9] = { 0x4870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_167)
{
    // 10058 0041;	
    // (êÅò) LINEAR B SYMBOL B064	[4870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10058, 0x0041 };
    uint32_t const ces[9] = { 0x4870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_168)
{
    // 10058 0062;	
    // (êÅò) LINEAR B SYMBOL B064	[4870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10058, 0x0062 };
    uint32_t const ces[9] = { 0x4870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_169)
{
    // 10059 0021;	
    // (êÅô) LINEAR B SYMBOL B079	[4871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10059, 0x0021 };
    uint32_t const ces[9] = { 0x4871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_170)
{
    // 10059 003F;	
    // (êÅô) LINEAR B SYMBOL B079	[4871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10059, 0x003F };
    uint32_t const ces[9] = { 0x4871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_171)
{
    // 10059 0061;	
    // (êÅô) LINEAR B SYMBOL B079	[4871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10059, 0x0061 };
    uint32_t const ces[9] = { 0x4871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_172)
{
    // 10059 0041;	
    // (êÅô) LINEAR B SYMBOL B079	[4871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10059, 0x0041 };
    uint32_t const ces[9] = { 0x4871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_173)
{
    // 10059 0062;	
    // (êÅô) LINEAR B SYMBOL B079	[4871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10059, 0x0062 };
    uint32_t const ces[9] = { 0x4871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_174)
{
    // 1005A 0021;	
    // (êÅö) LINEAR B SYMBOL B082	[4872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005A, 0x0021 };
    uint32_t const ces[9] = { 0x4872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_175)
{
    // 1005A 003F;	
    // (êÅö) LINEAR B SYMBOL B082	[4872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005A, 0x003F };
    uint32_t const ces[9] = { 0x4872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_176)
{
    // 1005A 0061;	
    // (êÅö) LINEAR B SYMBOL B082	[4872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005A, 0x0061 };
    uint32_t const ces[9] = { 0x4872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_177)
{
    // 1005A 0041;	
    // (êÅö) LINEAR B SYMBOL B082	[4872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1005A, 0x0041 };
    uint32_t const ces[9] = { 0x4872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_178)
{
    // 1005A 0062;	
    // (êÅö) LINEAR B SYMBOL B082	[4872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005A, 0x0062 };
    uint32_t const ces[9] = { 0x4872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_179)
{
    // 1005B 0021;	
    // (êÅõ) LINEAR B SYMBOL B083	[4873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005B, 0x0021 };
    uint32_t const ces[9] = { 0x4873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_180)
{
    // 1005B 003F;	
    // (êÅõ) LINEAR B SYMBOL B083	[4873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005B, 0x003F };
    uint32_t const ces[9] = { 0x4873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_181)
{
    // 1005B 0061;	
    // (êÅõ) LINEAR B SYMBOL B083	[4873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005B, 0x0061 };
    uint32_t const ces[9] = { 0x4873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_182)
{
    // 1005B 0041;	
    // (êÅõ) LINEAR B SYMBOL B083	[4873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1005B, 0x0041 };
    uint32_t const ces[9] = { 0x4873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_183)
{
    // 1005B 0062;	
    // (êÅõ) LINEAR B SYMBOL B083	[4873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005B, 0x0062 };
    uint32_t const ces[9] = { 0x4873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_184)
{
    // 1005C 0021;	
    // (êÅú) LINEAR B SYMBOL B086	[4874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005C, 0x0021 };
    uint32_t const ces[9] = { 0x4874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_185)
{
    // 1005C 003F;	
    // (êÅú) LINEAR B SYMBOL B086	[4874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005C, 0x003F };
    uint32_t const ces[9] = { 0x4874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_186)
{
    // 1005C 0061;	
    // (êÅú) LINEAR B SYMBOL B086	[4874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005C, 0x0061 };
    uint32_t const ces[9] = { 0x4874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_187)
{
    // 1005C 0041;	
    // (êÅú) LINEAR B SYMBOL B086	[4874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1005C, 0x0041 };
    uint32_t const ces[9] = { 0x4874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_188)
{
    // 1005C 0062;	
    // (êÅú) LINEAR B SYMBOL B086	[4874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005C, 0x0062 };
    uint32_t const ces[9] = { 0x4874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_189)
{
    // 1005D 0021;	
    // (êÅù) LINEAR B SYMBOL B089	[4875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005D, 0x0021 };
    uint32_t const ces[9] = { 0x4875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_190)
{
    // 1005D 003F;	
    // (êÅù) LINEAR B SYMBOL B089	[4875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005D, 0x003F };
    uint32_t const ces[9] = { 0x4875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_191)
{
    // 1005D 0061;	
    // (êÅù) LINEAR B SYMBOL B089	[4875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005D, 0x0061 };
    uint32_t const ces[9] = { 0x4875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_192)
{
    // 1005D 0041;	
    // (êÅù) LINEAR B SYMBOL B089	[4875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1005D, 0x0041 };
    uint32_t const ces[9] = { 0x4875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_193)
{
    // 1005D 0062;	
    // (êÅù) LINEAR B SYMBOL B089	[4875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1005D, 0x0062 };
    uint32_t const ces[9] = { 0x4875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_194)
{
    // 10080 0021;	
    // (êÇÄ) LINEAR B IDEOGRAM B100 MAN	[4876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10080, 0x0021 };
    uint32_t const ces[9] = { 0x4876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_195)
{
    // 10080 003F;	
    // (êÇÄ) LINEAR B IDEOGRAM B100 MAN	[4876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10080, 0x003F };
    uint32_t const ces[9] = { 0x4876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_196)
{
    // 10080 0061;	
    // (êÇÄ) LINEAR B IDEOGRAM B100 MAN	[4876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10080, 0x0061 };
    uint32_t const ces[9] = { 0x4876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_197)
{
    // 10080 0041;	
    // (êÇÄ) LINEAR B IDEOGRAM B100 MAN	[4876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10080, 0x0041 };
    uint32_t const ces[9] = { 0x4876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_198)
{
    // 10080 0062;	
    // (êÇÄ) LINEAR B IDEOGRAM B100 MAN	[4876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10080, 0x0062 };
    uint32_t const ces[9] = { 0x4876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_199)
{
    // 10081 0021;	
    // (êÇÅ) LINEAR B IDEOGRAM B102 WOMAN	[4877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10081, 0x0021 };
    uint32_t const ces[9] = { 0x4877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_200)
{
    // 10081 003F;	
    // (êÇÅ) LINEAR B IDEOGRAM B102 WOMAN	[4877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10081, 0x003F };
    uint32_t const ces[9] = { 0x4877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_201)
{
    // 10081 0061;	
    // (êÇÅ) LINEAR B IDEOGRAM B102 WOMAN	[4877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10081, 0x0061 };
    uint32_t const ces[9] = { 0x4877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_202)
{
    // 10081 0041;	
    // (êÇÅ) LINEAR B IDEOGRAM B102 WOMAN	[4877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10081, 0x0041 };
    uint32_t const ces[9] = { 0x4877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_203)
{
    // 10081 0062;	
    // (êÇÅ) LINEAR B IDEOGRAM B102 WOMAN	[4877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10081, 0x0062 };
    uint32_t const ces[9] = { 0x4877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_204)
{
    // 10082 0021;	
    // (êÇÇ) LINEAR B IDEOGRAM B104 DEER	[4878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10082, 0x0021 };
    uint32_t const ces[9] = { 0x4878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_205)
{
    // 10082 003F;	
    // (êÇÇ) LINEAR B IDEOGRAM B104 DEER	[4878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10082, 0x003F };
    uint32_t const ces[9] = { 0x4878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_206)
{
    // 10082 0061;	
    // (êÇÇ) LINEAR B IDEOGRAM B104 DEER	[4878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10082, 0x0061 };
    uint32_t const ces[9] = { 0x4878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_207)
{
    // 10082 0041;	
    // (êÇÇ) LINEAR B IDEOGRAM B104 DEER	[4878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10082, 0x0041 };
    uint32_t const ces[9] = { 0x4878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_208)
{
    // 10082 0062;	
    // (êÇÇ) LINEAR B IDEOGRAM B104 DEER	[4878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10082, 0x0062 };
    uint32_t const ces[9] = { 0x4878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_209)
{
    // 10083 0021;	
    // (êÇÉ) LINEAR B IDEOGRAM B105 EQUID	[4879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10083, 0x0021 };
    uint32_t const ces[9] = { 0x4879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_210)
{
    // 10083 003F;	
    // (êÇÉ) LINEAR B IDEOGRAM B105 EQUID	[4879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10083, 0x003F };
    uint32_t const ces[9] = { 0x4879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_211)
{
    // 10083 0061;	
    // (êÇÉ) LINEAR B IDEOGRAM B105 EQUID	[4879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10083, 0x0061 };
    uint32_t const ces[9] = { 0x4879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_212)
{
    // 10083 0041;	
    // (êÇÉ) LINEAR B IDEOGRAM B105 EQUID	[4879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10083, 0x0041 };
    uint32_t const ces[9] = { 0x4879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_213)
{
    // 10083 0062;	
    // (êÇÉ) LINEAR B IDEOGRAM B105 EQUID	[4879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10083, 0x0062 };
    uint32_t const ces[9] = { 0x4879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_214)
{
    // 10084 0021;	
    // (êÇÑ) LINEAR B IDEOGRAM B105F MARE	[487A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10084, 0x0021 };
    uint32_t const ces[9] = { 0x487A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_215)
{
    // 10084 003F;	
    // (êÇÑ) LINEAR B IDEOGRAM B105F MARE	[487A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10084, 0x003F };
    uint32_t const ces[9] = { 0x487A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_216)
{
    // 10084 0061;	
    // (êÇÑ) LINEAR B IDEOGRAM B105F MARE	[487A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10084, 0x0061 };
    uint32_t const ces[9] = { 0x487A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_217)
{
    // 10084 0041;	
    // (êÇÑ) LINEAR B IDEOGRAM B105F MARE	[487A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10084, 0x0041 };
    uint32_t const ces[9] = { 0x487A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_218)
{
    // 10084 0062;	
    // (êÇÑ) LINEAR B IDEOGRAM B105F MARE	[487A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10084, 0x0062 };
    uint32_t const ces[9] = { 0x487A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_219)
{
    // 10085 0021;	
    // (êÇÖ) LINEAR B IDEOGRAM B105M STALLION	[487B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10085, 0x0021 };
    uint32_t const ces[9] = { 0x487B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_220)
{
    // 10085 003F;	
    // (êÇÖ) LINEAR B IDEOGRAM B105M STALLION	[487B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10085, 0x003F };
    uint32_t const ces[9] = { 0x487B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_221)
{
    // 10085 0061;	
    // (êÇÖ) LINEAR B IDEOGRAM B105M STALLION	[487B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10085, 0x0061 };
    uint32_t const ces[9] = { 0x487B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_222)
{
    // 10085 0041;	
    // (êÇÖ) LINEAR B IDEOGRAM B105M STALLION	[487B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10085, 0x0041 };
    uint32_t const ces[9] = { 0x487B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_223)
{
    // 10085 0062;	
    // (êÇÖ) LINEAR B IDEOGRAM B105M STALLION	[487B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10085, 0x0062 };
    uint32_t const ces[9] = { 0x487B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_224)
{
    // 10086 0021;	
    // (êÇÜ) LINEAR B IDEOGRAM B106F EWE	[487C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10086, 0x0021 };
    uint32_t const ces[9] = { 0x487C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_225)
{
    // 10086 003F;	
    // (êÇÜ) LINEAR B IDEOGRAM B106F EWE	[487C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10086, 0x003F };
    uint32_t const ces[9] = { 0x487C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_226)
{
    // 10086 0061;	
    // (êÇÜ) LINEAR B IDEOGRAM B106F EWE	[487C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10086, 0x0061 };
    uint32_t const ces[9] = { 0x487C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_227)
{
    // 10086 0041;	
    // (êÇÜ) LINEAR B IDEOGRAM B106F EWE	[487C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10086, 0x0041 };
    uint32_t const ces[9] = { 0x487C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_228)
{
    // 10086 0062;	
    // (êÇÜ) LINEAR B IDEOGRAM B106F EWE	[487C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10086, 0x0062 };
    uint32_t const ces[9] = { 0x487C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_229)
{
    // 10087 0021;	
    // (êÇá) LINEAR B IDEOGRAM B106M RAM	[487D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10087, 0x0021 };
    uint32_t const ces[9] = { 0x487D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_230)
{
    // 10087 003F;	
    // (êÇá) LINEAR B IDEOGRAM B106M RAM	[487D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10087, 0x003F };
    uint32_t const ces[9] = { 0x487D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_231)
{
    // 10087 0061;	
    // (êÇá) LINEAR B IDEOGRAM B106M RAM	[487D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10087, 0x0061 };
    uint32_t const ces[9] = { 0x487D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_232)
{
    // 10087 0041;	
    // (êÇá) LINEAR B IDEOGRAM B106M RAM	[487D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10087, 0x0041 };
    uint32_t const ces[9] = { 0x487D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_233)
{
    // 10087 0062;	
    // (êÇá) LINEAR B IDEOGRAM B106M RAM	[487D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10087, 0x0062 };
    uint32_t const ces[9] = { 0x487D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_234)
{
    // 10088 0021;	
    // (êÇà) LINEAR B IDEOGRAM B107F SHE-GOAT	[487E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10088, 0x0021 };
    uint32_t const ces[9] = { 0x487E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_235)
{
    // 10088 003F;	
    // (êÇà) LINEAR B IDEOGRAM B107F SHE-GOAT	[487E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10088, 0x003F };
    uint32_t const ces[9] = { 0x487E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_236)
{
    // 10088 0061;	
    // (êÇà) LINEAR B IDEOGRAM B107F SHE-GOAT	[487E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10088, 0x0061 };
    uint32_t const ces[9] = { 0x487E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_237)
{
    // 10088 0041;	
    // (êÇà) LINEAR B IDEOGRAM B107F SHE-GOAT	[487E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10088, 0x0041 };
    uint32_t const ces[9] = { 0x487E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_238)
{
    // 10088 0062;	
    // (êÇà) LINEAR B IDEOGRAM B107F SHE-GOAT	[487E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10088, 0x0062 };
    uint32_t const ces[9] = { 0x487E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_239)
{
    // 10089 0021;	
    // (êÇâ) LINEAR B IDEOGRAM B107M HE-GOAT	[487F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10089, 0x0021 };
    uint32_t const ces[9] = { 0x487F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_240)
{
    // 10089 003F;	
    // (êÇâ) LINEAR B IDEOGRAM B107M HE-GOAT	[487F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10089, 0x003F };
    uint32_t const ces[9] = { 0x487F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_241)
{
    // 10089 0061;	
    // (êÇâ) LINEAR B IDEOGRAM B107M HE-GOAT	[487F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10089, 0x0061 };
    uint32_t const ces[9] = { 0x487F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_242)
{
    // 10089 0041;	
    // (êÇâ) LINEAR B IDEOGRAM B107M HE-GOAT	[487F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10089, 0x0041 };
    uint32_t const ces[9] = { 0x487F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_243)
{
    // 10089 0062;	
    // (êÇâ) LINEAR B IDEOGRAM B107M HE-GOAT	[487F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10089, 0x0062 };
    uint32_t const ces[9] = { 0x487F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_244)
{
    // 1008A 0021;	
    // (êÇä) LINEAR B IDEOGRAM B108F SOW	[4880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008A, 0x0021 };
    uint32_t const ces[9] = { 0x4880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_245)
{
    // 1008A 003F;	
    // (êÇä) LINEAR B IDEOGRAM B108F SOW	[4880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008A, 0x003F };
    uint32_t const ces[9] = { 0x4880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_246)
{
    // 1008A 0061;	
    // (êÇä) LINEAR B IDEOGRAM B108F SOW	[4880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008A, 0x0061 };
    uint32_t const ces[9] = { 0x4880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_247)
{
    // 1008A 0041;	
    // (êÇä) LINEAR B IDEOGRAM B108F SOW	[4880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008A, 0x0041 };
    uint32_t const ces[9] = { 0x4880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_248)
{
    // 1008A 0062;	
    // (êÇä) LINEAR B IDEOGRAM B108F SOW	[4880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008A, 0x0062 };
    uint32_t const ces[9] = { 0x4880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_249)
{
    // 1008B 0021;	
    // (êÇã) LINEAR B IDEOGRAM B108M BOAR	[4881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008B, 0x0021 };
    uint32_t const ces[9] = { 0x4881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_250)
{
    // 1008B 003F;	
    // (êÇã) LINEAR B IDEOGRAM B108M BOAR	[4881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008B, 0x003F };
    uint32_t const ces[9] = { 0x4881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_251)
{
    // 1008B 0061;	
    // (êÇã) LINEAR B IDEOGRAM B108M BOAR	[4881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008B, 0x0061 };
    uint32_t const ces[9] = { 0x4881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_252)
{
    // 1008B 0041;	
    // (êÇã) LINEAR B IDEOGRAM B108M BOAR	[4881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008B, 0x0041 };
    uint32_t const ces[9] = { 0x4881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_253)
{
    // 1008B 0062;	
    // (êÇã) LINEAR B IDEOGRAM B108M BOAR	[4881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008B, 0x0062 };
    uint32_t const ces[9] = { 0x4881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_254)
{
    // 1008C 0021;	
    // (êÇå) LINEAR B IDEOGRAM B109F COW	[4882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008C, 0x0021 };
    uint32_t const ces[9] = { 0x4882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_255)
{
    // 1008C 003F;	
    // (êÇå) LINEAR B IDEOGRAM B109F COW	[4882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008C, 0x003F };
    uint32_t const ces[9] = { 0x4882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_256)
{
    // 1008C 0061;	
    // (êÇå) LINEAR B IDEOGRAM B109F COW	[4882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008C, 0x0061 };
    uint32_t const ces[9] = { 0x4882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_257)
{
    // 1008C 0041;	
    // (êÇå) LINEAR B IDEOGRAM B109F COW	[4882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008C, 0x0041 };
    uint32_t const ces[9] = { 0x4882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_258)
{
    // 1008C 0062;	
    // (êÇå) LINEAR B IDEOGRAM B109F COW	[4882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008C, 0x0062 };
    uint32_t const ces[9] = { 0x4882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_259)
{
    // 1008D 0021;	
    // (êÇç) LINEAR B IDEOGRAM B109M BULL	[4883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008D, 0x0021 };
    uint32_t const ces[9] = { 0x4883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_260)
{
    // 1008D 003F;	
    // (êÇç) LINEAR B IDEOGRAM B109M BULL	[4883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008D, 0x003F };
    uint32_t const ces[9] = { 0x4883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_261)
{
    // 1008D 0061;	
    // (êÇç) LINEAR B IDEOGRAM B109M BULL	[4883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008D, 0x0061 };
    uint32_t const ces[9] = { 0x4883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_262)
{
    // 1008D 0041;	
    // (êÇç) LINEAR B IDEOGRAM B109M BULL	[4883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008D, 0x0041 };
    uint32_t const ces[9] = { 0x4883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_263)
{
    // 1008D 0062;	
    // (êÇç) LINEAR B IDEOGRAM B109M BULL	[4883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008D, 0x0062 };
    uint32_t const ces[9] = { 0x4883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_264)
{
    // 1008E 0021;	
    // (êÇé) LINEAR B IDEOGRAM B120 WHEAT	[4884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008E, 0x0021 };
    uint32_t const ces[9] = { 0x4884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_265)
{
    // 1008E 003F;	
    // (êÇé) LINEAR B IDEOGRAM B120 WHEAT	[4884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008E, 0x003F };
    uint32_t const ces[9] = { 0x4884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_266)
{
    // 1008E 0061;	
    // (êÇé) LINEAR B IDEOGRAM B120 WHEAT	[4884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008E, 0x0061 };
    uint32_t const ces[9] = { 0x4884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_267)
{
    // 1008E 0041;	
    // (êÇé) LINEAR B IDEOGRAM B120 WHEAT	[4884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008E, 0x0041 };
    uint32_t const ces[9] = { 0x4884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_268)
{
    // 1008E 0062;	
    // (êÇé) LINEAR B IDEOGRAM B120 WHEAT	[4884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008E, 0x0062 };
    uint32_t const ces[9] = { 0x4884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_269)
{
    // 1008F 0021;	
    // (êÇè) LINEAR B IDEOGRAM B121 BARLEY	[4885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008F, 0x0021 };
    uint32_t const ces[9] = { 0x4885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_270)
{
    // 1008F 003F;	
    // (êÇè) LINEAR B IDEOGRAM B121 BARLEY	[4885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008F, 0x003F };
    uint32_t const ces[9] = { 0x4885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_271)
{
    // 1008F 0061;	
    // (êÇè) LINEAR B IDEOGRAM B121 BARLEY	[4885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008F, 0x0061 };
    uint32_t const ces[9] = { 0x4885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_272)
{
    // 1008F 0041;	
    // (êÇè) LINEAR B IDEOGRAM B121 BARLEY	[4885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1008F, 0x0041 };
    uint32_t const ces[9] = { 0x4885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_273)
{
    // 1008F 0062;	
    // (êÇè) LINEAR B IDEOGRAM B121 BARLEY	[4885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1008F, 0x0062 };
    uint32_t const ces[9] = { 0x4885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_274)
{
    // 10090 0021;	
    // (êÇê) LINEAR B IDEOGRAM B122 OLIVE	[4886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10090, 0x0021 };
    uint32_t const ces[9] = { 0x4886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_275)
{
    // 10090 003F;	
    // (êÇê) LINEAR B IDEOGRAM B122 OLIVE	[4886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10090, 0x003F };
    uint32_t const ces[9] = { 0x4886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_276)
{
    // 10090 0061;	
    // (êÇê) LINEAR B IDEOGRAM B122 OLIVE	[4886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10090, 0x0061 };
    uint32_t const ces[9] = { 0x4886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_277)
{
    // 10090 0041;	
    // (êÇê) LINEAR B IDEOGRAM B122 OLIVE	[4886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10090, 0x0041 };
    uint32_t const ces[9] = { 0x4886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_278)
{
    // 10090 0062;	
    // (êÇê) LINEAR B IDEOGRAM B122 OLIVE	[4886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10090, 0x0062 };
    uint32_t const ces[9] = { 0x4886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_279)
{
    // 10091 0021;	
    // (êÇë) LINEAR B IDEOGRAM B123 SPICE	[4887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10091, 0x0021 };
    uint32_t const ces[9] = { 0x4887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_280)
{
    // 10091 003F;	
    // (êÇë) LINEAR B IDEOGRAM B123 SPICE	[4887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10091, 0x003F };
    uint32_t const ces[9] = { 0x4887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_281)
{
    // 10091 0061;	
    // (êÇë) LINEAR B IDEOGRAM B123 SPICE	[4887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10091, 0x0061 };
    uint32_t const ces[9] = { 0x4887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_282)
{
    // 10091 0041;	
    // (êÇë) LINEAR B IDEOGRAM B123 SPICE	[4887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10091, 0x0041 };
    uint32_t const ces[9] = { 0x4887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_283)
{
    // 10091 0062;	
    // (êÇë) LINEAR B IDEOGRAM B123 SPICE	[4887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10091, 0x0062 };
    uint32_t const ces[9] = { 0x4887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_284)
{
    // 10092 0021;	
    // (êÇí) LINEAR B IDEOGRAM B125 CYPERUS	[4888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10092, 0x0021 };
    uint32_t const ces[9] = { 0x4888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_285)
{
    // 10092 003F;	
    // (êÇí) LINEAR B IDEOGRAM B125 CYPERUS	[4888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10092, 0x003F };
    uint32_t const ces[9] = { 0x4888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_286)
{
    // 10092 0061;	
    // (êÇí) LINEAR B IDEOGRAM B125 CYPERUS	[4888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10092, 0x0061 };
    uint32_t const ces[9] = { 0x4888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_287)
{
    // 10092 0041;	
    // (êÇí) LINEAR B IDEOGRAM B125 CYPERUS	[4888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10092, 0x0041 };
    uint32_t const ces[9] = { 0x4888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_288)
{
    // 10092 0062;	
    // (êÇí) LINEAR B IDEOGRAM B125 CYPERUS	[4888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10092, 0x0062 };
    uint32_t const ces[9] = { 0x4888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_289)
{
    // 10093 0021;	
    // (êÇì) LINEAR B MONOGRAM B127 KAPO	[4889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10093, 0x0021 };
    uint32_t const ces[9] = { 0x4889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_290)
{
    // 10093 003F;	
    // (êÇì) LINEAR B MONOGRAM B127 KAPO	[4889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10093, 0x003F };
    uint32_t const ces[9] = { 0x4889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_291)
{
    // 10093 0061;	
    // (êÇì) LINEAR B MONOGRAM B127 KAPO	[4889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10093, 0x0061 };
    uint32_t const ces[9] = { 0x4889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_292)
{
    // 10093 0041;	
    // (êÇì) LINEAR B MONOGRAM B127 KAPO	[4889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10093, 0x0041 };
    uint32_t const ces[9] = { 0x4889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_293)
{
    // 10093 0062;	
    // (êÇì) LINEAR B MONOGRAM B127 KAPO	[4889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10093, 0x0062 };
    uint32_t const ces[9] = { 0x4889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_294)
{
    // 10094 0021;	
    // (êÇî) LINEAR B MONOGRAM B128 KANAKO	[488A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10094, 0x0021 };
    uint32_t const ces[9] = { 0x488A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_295)
{
    // 10094 003F;	
    // (êÇî) LINEAR B MONOGRAM B128 KANAKO	[488A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10094, 0x003F };
    uint32_t const ces[9] = { 0x488A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_296)
{
    // 10094 0061;	
    // (êÇî) LINEAR B MONOGRAM B128 KANAKO	[488A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10094, 0x0061 };
    uint32_t const ces[9] = { 0x488A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_297)
{
    // 10094 0041;	
    // (êÇî) LINEAR B MONOGRAM B128 KANAKO	[488A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10094, 0x0041 };
    uint32_t const ces[9] = { 0x488A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_298)
{
    // 10094 0062;	
    // (êÇî) LINEAR B MONOGRAM B128 KANAKO	[488A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10094, 0x0062 };
    uint32_t const ces[9] = { 0x488A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_299)
{
    // 10095 0021;	
    // (êÇï) LINEAR B IDEOGRAM B130 OIL	[488B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10095, 0x0021 };
    uint32_t const ces[9] = { 0x488B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_300)
{
    // 10095 003F;	
    // (êÇï) LINEAR B IDEOGRAM B130 OIL	[488B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10095, 0x003F };
    uint32_t const ces[9] = { 0x488B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_301)
{
    // 10095 0061;	
    // (êÇï) LINEAR B IDEOGRAM B130 OIL	[488B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10095, 0x0061 };
    uint32_t const ces[9] = { 0x488B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_302)
{
    // 10095 0041;	
    // (êÇï) LINEAR B IDEOGRAM B130 OIL	[488B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10095, 0x0041 };
    uint32_t const ces[9] = { 0x488B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_303)
{
    // 10095 0062;	
    // (êÇï) LINEAR B IDEOGRAM B130 OIL	[488B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10095, 0x0062 };
    uint32_t const ces[9] = { 0x488B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_304)
{
    // 10096 0021;	
    // (êÇñ) LINEAR B IDEOGRAM B131 WINE	[488C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10096, 0x0021 };
    uint32_t const ces[9] = { 0x488C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_305)
{
    // 10096 003F;	
    // (êÇñ) LINEAR B IDEOGRAM B131 WINE	[488C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10096, 0x003F };
    uint32_t const ces[9] = { 0x488C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_306)
{
    // 10096 0061;	
    // (êÇñ) LINEAR B IDEOGRAM B131 WINE	[488C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10096, 0x0061 };
    uint32_t const ces[9] = { 0x488C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_307)
{
    // 10096 0041;	
    // (êÇñ) LINEAR B IDEOGRAM B131 WINE	[488C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10096, 0x0041 };
    uint32_t const ces[9] = { 0x488C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_308)
{
    // 10096 0062;	
    // (êÇñ) LINEAR B IDEOGRAM B131 WINE	[488C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10096, 0x0062 };
    uint32_t const ces[9] = { 0x488C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_309)
{
    // 10097 0021;	
    // (êÇó) LINEAR B IDEOGRAM B132	[488D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10097, 0x0021 };
    uint32_t const ces[9] = { 0x488D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_310)
{
    // 10097 003F;	
    // (êÇó) LINEAR B IDEOGRAM B132	[488D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10097, 0x003F };
    uint32_t const ces[9] = { 0x488D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_311)
{
    // 10097 0061;	
    // (êÇó) LINEAR B IDEOGRAM B132	[488D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10097, 0x0061 };
    uint32_t const ces[9] = { 0x488D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_312)
{
    // 10097 0041;	
    // (êÇó) LINEAR B IDEOGRAM B132	[488D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10097, 0x0041 };
    uint32_t const ces[9] = { 0x488D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_313)
{
    // 10097 0062;	
    // (êÇó) LINEAR B IDEOGRAM B132	[488D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10097, 0x0062 };
    uint32_t const ces[9] = { 0x488D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_314)
{
    // 10098 0021;	
    // (êÇò) LINEAR B MONOGRAM B133 AREPA	[488E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10098, 0x0021 };
    uint32_t const ces[9] = { 0x488E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_315)
{
    // 10098 003F;	
    // (êÇò) LINEAR B MONOGRAM B133 AREPA	[488E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10098, 0x003F };
    uint32_t const ces[9] = { 0x488E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_316)
{
    // 10098 0061;	
    // (êÇò) LINEAR B MONOGRAM B133 AREPA	[488E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10098, 0x0061 };
    uint32_t const ces[9] = { 0x488E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_317)
{
    // 10098 0041;	
    // (êÇò) LINEAR B MONOGRAM B133 AREPA	[488E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10098, 0x0041 };
    uint32_t const ces[9] = { 0x488E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_318)
{
    // 10098 0062;	
    // (êÇò) LINEAR B MONOGRAM B133 AREPA	[488E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10098, 0x0062 };
    uint32_t const ces[9] = { 0x488E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_319)
{
    // 10099 0021;	
    // (êÇô) LINEAR B MONOGRAM B135 MERI	[488F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10099, 0x0021 };
    uint32_t const ces[9] = { 0x488F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_320)
{
    // 10099 003F;	
    // (êÇô) LINEAR B MONOGRAM B135 MERI	[488F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10099, 0x003F };
    uint32_t const ces[9] = { 0x488F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_321)
{
    // 10099 0061;	
    // (êÇô) LINEAR B MONOGRAM B135 MERI	[488F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10099, 0x0061 };
    uint32_t const ces[9] = { 0x488F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_322)
{
    // 10099 0041;	
    // (êÇô) LINEAR B MONOGRAM B135 MERI	[488F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10099, 0x0041 };
    uint32_t const ces[9] = { 0x488F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_323)
{
    // 10099 0062;	
    // (êÇô) LINEAR B MONOGRAM B135 MERI	[488F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10099, 0x0062 };
    uint32_t const ces[9] = { 0x488F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_324)
{
    // 1009A 0021;	
    // (êÇö) LINEAR B IDEOGRAM B140 BRONZE	[4890 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009A, 0x0021 };
    uint32_t const ces[9] = { 0x4890, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_325)
{
    // 1009A 003F;	
    // (êÇö) LINEAR B IDEOGRAM B140 BRONZE	[4890 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009A, 0x003F };
    uint32_t const ces[9] = { 0x4890, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_326)
{
    // 1009A 0061;	
    // (êÇö) LINEAR B IDEOGRAM B140 BRONZE	[4890 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009A, 0x0061 };
    uint32_t const ces[9] = { 0x4890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_327)
{
    // 1009A 0041;	
    // (êÇö) LINEAR B IDEOGRAM B140 BRONZE	[4890 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009A, 0x0041 };
    uint32_t const ces[9] = { 0x4890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_328)
{
    // 1009A 0062;	
    // (êÇö) LINEAR B IDEOGRAM B140 BRONZE	[4890 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009A, 0x0062 };
    uint32_t const ces[9] = { 0x4890, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_329)
{
    // 1009B 0021;	
    // (êÇõ) LINEAR B IDEOGRAM B141 GOLD	[4891 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009B, 0x0021 };
    uint32_t const ces[9] = { 0x4891, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_330)
{
    // 1009B 003F;	
    // (êÇõ) LINEAR B IDEOGRAM B141 GOLD	[4891 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009B, 0x003F };
    uint32_t const ces[9] = { 0x4891, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_331)
{
    // 1009B 0061;	
    // (êÇõ) LINEAR B IDEOGRAM B141 GOLD	[4891 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009B, 0x0061 };
    uint32_t const ces[9] = { 0x4891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_332)
{
    // 1009B 0041;	
    // (êÇõ) LINEAR B IDEOGRAM B141 GOLD	[4891 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009B, 0x0041 };
    uint32_t const ces[9] = { 0x4891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_333)
{
    // 1009B 0062;	
    // (êÇõ) LINEAR B IDEOGRAM B141 GOLD	[4891 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009B, 0x0062 };
    uint32_t const ces[9] = { 0x4891, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_334)
{
    // 1009C 0021;	
    // (êÇú) LINEAR B IDEOGRAM B142	[4892 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009C, 0x0021 };
    uint32_t const ces[9] = { 0x4892, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_335)
{
    // 1009C 003F;	
    // (êÇú) LINEAR B IDEOGRAM B142	[4892 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009C, 0x003F };
    uint32_t const ces[9] = { 0x4892, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_336)
{
    // 1009C 0061;	
    // (êÇú) LINEAR B IDEOGRAM B142	[4892 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009C, 0x0061 };
    uint32_t const ces[9] = { 0x4892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_337)
{
    // 1009C 0041;	
    // (êÇú) LINEAR B IDEOGRAM B142	[4892 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009C, 0x0041 };
    uint32_t const ces[9] = { 0x4892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_338)
{
    // 1009C 0062;	
    // (êÇú) LINEAR B IDEOGRAM B142	[4892 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009C, 0x0062 };
    uint32_t const ces[9] = { 0x4892, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_339)
{
    // 1009D 0021;	
    // (êÇù) LINEAR B IDEOGRAM B145 WOOL	[4893 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009D, 0x0021 };
    uint32_t const ces[9] = { 0x4893, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_340)
{
    // 1009D 003F;	
    // (êÇù) LINEAR B IDEOGRAM B145 WOOL	[4893 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009D, 0x003F };
    uint32_t const ces[9] = { 0x4893, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_341)
{
    // 1009D 0061;	
    // (êÇù) LINEAR B IDEOGRAM B145 WOOL	[4893 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009D, 0x0061 };
    uint32_t const ces[9] = { 0x4893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_342)
{
    // 1009D 0041;	
    // (êÇù) LINEAR B IDEOGRAM B145 WOOL	[4893 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009D, 0x0041 };
    uint32_t const ces[9] = { 0x4893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_343)
{
    // 1009D 0062;	
    // (êÇù) LINEAR B IDEOGRAM B145 WOOL	[4893 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009D, 0x0062 };
    uint32_t const ces[9] = { 0x4893, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_344)
{
    // 1009E 0021;	
    // (êÇû) LINEAR B IDEOGRAM B146	[4894 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009E, 0x0021 };
    uint32_t const ces[9] = { 0x4894, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_345)
{
    // 1009E 003F;	
    // (êÇû) LINEAR B IDEOGRAM B146	[4894 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009E, 0x003F };
    uint32_t const ces[9] = { 0x4894, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_346)
{
    // 1009E 0061;	
    // (êÇû) LINEAR B IDEOGRAM B146	[4894 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009E, 0x0061 };
    uint32_t const ces[9] = { 0x4894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_347)
{
    // 1009E 0041;	
    // (êÇû) LINEAR B IDEOGRAM B146	[4894 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009E, 0x0041 };
    uint32_t const ces[9] = { 0x4894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_348)
{
    // 1009E 0062;	
    // (êÇû) LINEAR B IDEOGRAM B146	[4894 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009E, 0x0062 };
    uint32_t const ces[9] = { 0x4894, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_349)
{
    // 1009F 0021;	
    // (êÇü) LINEAR B IDEOGRAM B150	[4895 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009F, 0x0021 };
    uint32_t const ces[9] = { 0x4895, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_350)
{
    // 1009F 003F;	
    // (êÇü) LINEAR B IDEOGRAM B150	[4895 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009F, 0x003F };
    uint32_t const ces[9] = { 0x4895, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_351)
{
    // 1009F 0061;	
    // (êÇü) LINEAR B IDEOGRAM B150	[4895 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009F, 0x0061 };
    uint32_t const ces[9] = { 0x4895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_352)
{
    // 1009F 0041;	
    // (êÇü) LINEAR B IDEOGRAM B150	[4895 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1009F, 0x0041 };
    uint32_t const ces[9] = { 0x4895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_353)
{
    // 1009F 0062;	
    // (êÇü) LINEAR B IDEOGRAM B150	[4895 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1009F, 0x0062 };
    uint32_t const ces[9] = { 0x4895, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_354)
{
    // 100A0 0021;	
    // (êÇ†) LINEAR B IDEOGRAM B151 HORN	[4896 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A0, 0x0021 };
    uint32_t const ces[9] = { 0x4896, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_355)
{
    // 100A0 003F;	
    // (êÇ†) LINEAR B IDEOGRAM B151 HORN	[4896 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A0, 0x003F };
    uint32_t const ces[9] = { 0x4896, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_356)
{
    // 100A0 0061;	
    // (êÇ†) LINEAR B IDEOGRAM B151 HORN	[4896 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A0, 0x0061 };
    uint32_t const ces[9] = { 0x4896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_357)
{
    // 100A0 0041;	
    // (êÇ†) LINEAR B IDEOGRAM B151 HORN	[4896 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A0, 0x0041 };
    uint32_t const ces[9] = { 0x4896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_358)
{
    // 100A0 0062;	
    // (êÇ†) LINEAR B IDEOGRAM B151 HORN	[4896 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A0, 0x0062 };
    uint32_t const ces[9] = { 0x4896, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_359)
{
    // 100A1 0021;	
    // (êÇ°) LINEAR B IDEOGRAM B152	[4897 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A1, 0x0021 };
    uint32_t const ces[9] = { 0x4897, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_360)
{
    // 100A1 003F;	
    // (êÇ°) LINEAR B IDEOGRAM B152	[4897 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A1, 0x003F };
    uint32_t const ces[9] = { 0x4897, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_361)
{
    // 100A1 0061;	
    // (êÇ°) LINEAR B IDEOGRAM B152	[4897 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A1, 0x0061 };
    uint32_t const ces[9] = { 0x4897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_362)
{
    // 100A1 0041;	
    // (êÇ°) LINEAR B IDEOGRAM B152	[4897 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A1, 0x0041 };
    uint32_t const ces[9] = { 0x4897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_363)
{
    // 100A1 0062;	
    // (êÇ°) LINEAR B IDEOGRAM B152	[4897 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A1, 0x0062 };
    uint32_t const ces[9] = { 0x4897, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_364)
{
    // 100A2 0021;	
    // (êÇ¢) LINEAR B IDEOGRAM B153	[4898 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A2, 0x0021 };
    uint32_t const ces[9] = { 0x4898, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_365)
{
    // 100A2 003F;	
    // (êÇ¢) LINEAR B IDEOGRAM B153	[4898 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A2, 0x003F };
    uint32_t const ces[9] = { 0x4898, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_366)
{
    // 100A2 0061;	
    // (êÇ¢) LINEAR B IDEOGRAM B153	[4898 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A2, 0x0061 };
    uint32_t const ces[9] = { 0x4898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_367)
{
    // 100A2 0041;	
    // (êÇ¢) LINEAR B IDEOGRAM B153	[4898 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A2, 0x0041 };
    uint32_t const ces[9] = { 0x4898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_368)
{
    // 100A2 0062;	
    // (êÇ¢) LINEAR B IDEOGRAM B153	[4898 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A2, 0x0062 };
    uint32_t const ces[9] = { 0x4898, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_369)
{
    // 100A3 0021;	
    // (êÇ£) LINEAR B IDEOGRAM B154	[4899 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A3, 0x0021 };
    uint32_t const ces[9] = { 0x4899, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_370)
{
    // 100A3 003F;	
    // (êÇ£) LINEAR B IDEOGRAM B154	[4899 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A3, 0x003F };
    uint32_t const ces[9] = { 0x4899, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_371)
{
    // 100A3 0061;	
    // (êÇ£) LINEAR B IDEOGRAM B154	[4899 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A3, 0x0061 };
    uint32_t const ces[9] = { 0x4899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_372)
{
    // 100A3 0041;	
    // (êÇ£) LINEAR B IDEOGRAM B154	[4899 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A3, 0x0041 };
    uint32_t const ces[9] = { 0x4899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_373)
{
    // 100A3 0062;	
    // (êÇ£) LINEAR B IDEOGRAM B154	[4899 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A3, 0x0062 };
    uint32_t const ces[9] = { 0x4899, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_374)
{
    // 100A4 0021;	
    // (êÇ§) LINEAR B MONOGRAM B156 TURO2	[489A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A4, 0x0021 };
    uint32_t const ces[9] = { 0x489A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_375)
{
    // 100A4 003F;	
    // (êÇ§) LINEAR B MONOGRAM B156 TURO2	[489A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A4, 0x003F };
    uint32_t const ces[9] = { 0x489A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_376)
{
    // 100A4 0061;	
    // (êÇ§) LINEAR B MONOGRAM B156 TURO2	[489A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A4, 0x0061 };
    uint32_t const ces[9] = { 0x489A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_377)
{
    // 100A4 0041;	
    // (êÇ§) LINEAR B MONOGRAM B156 TURO2	[489A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A4, 0x0041 };
    uint32_t const ces[9] = { 0x489A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_378)
{
    // 100A4 0062;	
    // (êÇ§) LINEAR B MONOGRAM B156 TURO2	[489A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A4, 0x0062 };
    uint32_t const ces[9] = { 0x489A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_379)
{
    // 100A5 0021;	
    // (êÇ•) LINEAR B IDEOGRAM B157	[489B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A5, 0x0021 };
    uint32_t const ces[9] = { 0x489B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_380)
{
    // 100A5 003F;	
    // (êÇ•) LINEAR B IDEOGRAM B157	[489B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A5, 0x003F };
    uint32_t const ces[9] = { 0x489B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_381)
{
    // 100A5 0061;	
    // (êÇ•) LINEAR B IDEOGRAM B157	[489B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A5, 0x0061 };
    uint32_t const ces[9] = { 0x489B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_382)
{
    // 100A5 0041;	
    // (êÇ•) LINEAR B IDEOGRAM B157	[489B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A5, 0x0041 };
    uint32_t const ces[9] = { 0x489B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_383)
{
    // 100A5 0062;	
    // (êÇ•) LINEAR B IDEOGRAM B157	[489B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A5, 0x0062 };
    uint32_t const ces[9] = { 0x489B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_384)
{
    // 100A6 0021;	
    // (êÇ¶) LINEAR B IDEOGRAM B158	[489C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A6, 0x0021 };
    uint32_t const ces[9] = { 0x489C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_385)
{
    // 100A6 003F;	
    // (êÇ¶) LINEAR B IDEOGRAM B158	[489C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A6, 0x003F };
    uint32_t const ces[9] = { 0x489C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_386)
{
    // 100A6 0061;	
    // (êÇ¶) LINEAR B IDEOGRAM B158	[489C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A6, 0x0061 };
    uint32_t const ces[9] = { 0x489C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_387)
{
    // 100A6 0041;	
    // (êÇ¶) LINEAR B IDEOGRAM B158	[489C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A6, 0x0041 };
    uint32_t const ces[9] = { 0x489C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_388)
{
    // 100A6 0062;	
    // (êÇ¶) LINEAR B IDEOGRAM B158	[489C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A6, 0x0062 };
    uint32_t const ces[9] = { 0x489C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_389)
{
    // 100A7 0021;	
    // (êÇß) LINEAR B IDEOGRAM B159 CLOTH	[489D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A7, 0x0021 };
    uint32_t const ces[9] = { 0x489D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_390)
{
    // 100A7 003F;	
    // (êÇß) LINEAR B IDEOGRAM B159 CLOTH	[489D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A7, 0x003F };
    uint32_t const ces[9] = { 0x489D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_391)
{
    // 100A7 0061;	
    // (êÇß) LINEAR B IDEOGRAM B159 CLOTH	[489D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A7, 0x0061 };
    uint32_t const ces[9] = { 0x489D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_392)
{
    // 100A7 0041;	
    // (êÇß) LINEAR B IDEOGRAM B159 CLOTH	[489D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A7, 0x0041 };
    uint32_t const ces[9] = { 0x489D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_393)
{
    // 100A7 0062;	
    // (êÇß) LINEAR B IDEOGRAM B159 CLOTH	[489D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A7, 0x0062 };
    uint32_t const ces[9] = { 0x489D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_394)
{
    // 100A8 0021;	
    // (êÇ®) LINEAR B IDEOGRAM B160	[489E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A8, 0x0021 };
    uint32_t const ces[9] = { 0x489E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_395)
{
    // 100A8 003F;	
    // (êÇ®) LINEAR B IDEOGRAM B160	[489E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A8, 0x003F };
    uint32_t const ces[9] = { 0x489E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_396)
{
    // 100A8 0061;	
    // (êÇ®) LINEAR B IDEOGRAM B160	[489E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A8, 0x0061 };
    uint32_t const ces[9] = { 0x489E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_397)
{
    // 100A8 0041;	
    // (êÇ®) LINEAR B IDEOGRAM B160	[489E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A8, 0x0041 };
    uint32_t const ces[9] = { 0x489E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_398)
{
    // 100A8 0062;	
    // (êÇ®) LINEAR B IDEOGRAM B160	[489E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A8, 0x0062 };
    uint32_t const ces[9] = { 0x489E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_399)
{
    // 100A9 0021;	
    // (êÇ©) LINEAR B IDEOGRAM B161	[489F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A9, 0x0021 };
    uint32_t const ces[9] = { 0x489F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_400)
{
    // 100A9 003F;	
    // (êÇ©) LINEAR B IDEOGRAM B161	[489F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A9, 0x003F };
    uint32_t const ces[9] = { 0x489F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_401)
{
    // 100A9 0061;	
    // (êÇ©) LINEAR B IDEOGRAM B161	[489F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A9, 0x0061 };
    uint32_t const ces[9] = { 0x489F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_402)
{
    // 100A9 0041;	
    // (êÇ©) LINEAR B IDEOGRAM B161	[489F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100A9, 0x0041 };
    uint32_t const ces[9] = { 0x489F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_403)
{
    // 100A9 0062;	
    // (êÇ©) LINEAR B IDEOGRAM B161	[489F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100A9, 0x0062 };
    uint32_t const ces[9] = { 0x489F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_404)
{
    // 100AA 0021;	
    // (êÇ™) LINEAR B IDEOGRAM B162 GARMENT	[48A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AA, 0x0021 };
    uint32_t const ces[9] = { 0x48A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_405)
{
    // 100AA 003F;	
    // (êÇ™) LINEAR B IDEOGRAM B162 GARMENT	[48A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AA, 0x003F };
    uint32_t const ces[9] = { 0x48A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_406)
{
    // 100AA 0061;	
    // (êÇ™) LINEAR B IDEOGRAM B162 GARMENT	[48A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AA, 0x0061 };
    uint32_t const ces[9] = { 0x48A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_407)
{
    // 100AA 0041;	
    // (êÇ™) LINEAR B IDEOGRAM B162 GARMENT	[48A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AA, 0x0041 };
    uint32_t const ces[9] = { 0x48A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_408)
{
    // 100AA 0062;	
    // (êÇ™) LINEAR B IDEOGRAM B162 GARMENT	[48A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AA, 0x0062 };
    uint32_t const ces[9] = { 0x48A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_409)
{
    // 100AB 0021;	
    // (êÇ´) LINEAR B IDEOGRAM B163 ARMOUR	[48A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AB, 0x0021 };
    uint32_t const ces[9] = { 0x48A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_410)
{
    // 100AB 003F;	
    // (êÇ´) LINEAR B IDEOGRAM B163 ARMOUR	[48A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AB, 0x003F };
    uint32_t const ces[9] = { 0x48A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_411)
{
    // 100AB 0061;	
    // (êÇ´) LINEAR B IDEOGRAM B163 ARMOUR	[48A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AB, 0x0061 };
    uint32_t const ces[9] = { 0x48A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_412)
{
    // 100AB 0041;	
    // (êÇ´) LINEAR B IDEOGRAM B163 ARMOUR	[48A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AB, 0x0041 };
    uint32_t const ces[9] = { 0x48A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_413)
{
    // 100AB 0062;	
    // (êÇ´) LINEAR B IDEOGRAM B163 ARMOUR	[48A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AB, 0x0062 };
    uint32_t const ces[9] = { 0x48A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_414)
{
    // 100AC 0021;	
    // (êÇ¨) LINEAR B IDEOGRAM B164	[48A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AC, 0x0021 };
    uint32_t const ces[9] = { 0x48A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_415)
{
    // 100AC 003F;	
    // (êÇ¨) LINEAR B IDEOGRAM B164	[48A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AC, 0x003F };
    uint32_t const ces[9] = { 0x48A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_416)
{
    // 100AC 0061;	
    // (êÇ¨) LINEAR B IDEOGRAM B164	[48A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AC, 0x0061 };
    uint32_t const ces[9] = { 0x48A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_417)
{
    // 100AC 0041;	
    // (êÇ¨) LINEAR B IDEOGRAM B164	[48A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AC, 0x0041 };
    uint32_t const ces[9] = { 0x48A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_418)
{
    // 100AC 0062;	
    // (êÇ¨) LINEAR B IDEOGRAM B164	[48A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AC, 0x0062 };
    uint32_t const ces[9] = { 0x48A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_419)
{
    // 100AD 0021;	
    // (êÇ≠) LINEAR B IDEOGRAM B165	[48A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AD, 0x0021 };
    uint32_t const ces[9] = { 0x48A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_420)
{
    // 100AD 003F;	
    // (êÇ≠) LINEAR B IDEOGRAM B165	[48A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AD, 0x003F };
    uint32_t const ces[9] = { 0x48A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_421)
{
    // 100AD 0061;	
    // (êÇ≠) LINEAR B IDEOGRAM B165	[48A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AD, 0x0061 };
    uint32_t const ces[9] = { 0x48A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_422)
{
    // 100AD 0041;	
    // (êÇ≠) LINEAR B IDEOGRAM B165	[48A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AD, 0x0041 };
    uint32_t const ces[9] = { 0x48A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_423)
{
    // 100AD 0062;	
    // (êÇ≠) LINEAR B IDEOGRAM B165	[48A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AD, 0x0062 };
    uint32_t const ces[9] = { 0x48A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_424)
{
    // 100AE 0021;	
    // (êÇÆ) LINEAR B IDEOGRAM B166	[48A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AE, 0x0021 };
    uint32_t const ces[9] = { 0x48A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_425)
{
    // 100AE 003F;	
    // (êÇÆ) LINEAR B IDEOGRAM B166	[48A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AE, 0x003F };
    uint32_t const ces[9] = { 0x48A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_426)
{
    // 100AE 0061;	
    // (êÇÆ) LINEAR B IDEOGRAM B166	[48A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AE, 0x0061 };
    uint32_t const ces[9] = { 0x48A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_427)
{
    // 100AE 0041;	
    // (êÇÆ) LINEAR B IDEOGRAM B166	[48A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AE, 0x0041 };
    uint32_t const ces[9] = { 0x48A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_428)
{
    // 100AE 0062;	
    // (êÇÆ) LINEAR B IDEOGRAM B166	[48A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AE, 0x0062 };
    uint32_t const ces[9] = { 0x48A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_429)
{
    // 100AF 0021;	
    // (êÇØ) LINEAR B IDEOGRAM B167	[48A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AF, 0x0021 };
    uint32_t const ces[9] = { 0x48A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_430)
{
    // 100AF 003F;	
    // (êÇØ) LINEAR B IDEOGRAM B167	[48A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AF, 0x003F };
    uint32_t const ces[9] = { 0x48A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_431)
{
    // 100AF 0061;	
    // (êÇØ) LINEAR B IDEOGRAM B167	[48A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AF, 0x0061 };
    uint32_t const ces[9] = { 0x48A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_432)
{
    // 100AF 0041;	
    // (êÇØ) LINEAR B IDEOGRAM B167	[48A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100AF, 0x0041 };
    uint32_t const ces[9] = { 0x48A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_433)
{
    // 100AF 0062;	
    // (êÇØ) LINEAR B IDEOGRAM B167	[48A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100AF, 0x0062 };
    uint32_t const ces[9] = { 0x48A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_434)
{
    // 100B0 0021;	
    // (êÇ∞) LINEAR B IDEOGRAM B168	[48A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B0, 0x0021 };
    uint32_t const ces[9] = { 0x48A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_435)
{
    // 100B0 003F;	
    // (êÇ∞) LINEAR B IDEOGRAM B168	[48A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B0, 0x003F };
    uint32_t const ces[9] = { 0x48A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_436)
{
    // 100B0 0061;	
    // (êÇ∞) LINEAR B IDEOGRAM B168	[48A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B0, 0x0061 };
    uint32_t const ces[9] = { 0x48A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_437)
{
    // 100B0 0041;	
    // (êÇ∞) LINEAR B IDEOGRAM B168	[48A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B0, 0x0041 };
    uint32_t const ces[9] = { 0x48A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_438)
{
    // 100B0 0062;	
    // (êÇ∞) LINEAR B IDEOGRAM B168	[48A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B0, 0x0062 };
    uint32_t const ces[9] = { 0x48A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_439)
{
    // 100B1 0021;	
    // (êÇ±) LINEAR B IDEOGRAM B169	[48A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B1, 0x0021 };
    uint32_t const ces[9] = { 0x48A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_440)
{
    // 100B1 003F;	
    // (êÇ±) LINEAR B IDEOGRAM B169	[48A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B1, 0x003F };
    uint32_t const ces[9] = { 0x48A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_441)
{
    // 100B1 0061;	
    // (êÇ±) LINEAR B IDEOGRAM B169	[48A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B1, 0x0061 };
    uint32_t const ces[9] = { 0x48A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_442)
{
    // 100B1 0041;	
    // (êÇ±) LINEAR B IDEOGRAM B169	[48A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B1, 0x0041 };
    uint32_t const ces[9] = { 0x48A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_443)
{
    // 100B1 0062;	
    // (êÇ±) LINEAR B IDEOGRAM B169	[48A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B1, 0x0062 };
    uint32_t const ces[9] = { 0x48A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_444)
{
    // 100B2 0021;	
    // (êÇ≤) LINEAR B IDEOGRAM B170	[48A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B2, 0x0021 };
    uint32_t const ces[9] = { 0x48A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_445)
{
    // 100B2 003F;	
    // (êÇ≤) LINEAR B IDEOGRAM B170	[48A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B2, 0x003F };
    uint32_t const ces[9] = { 0x48A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_446)
{
    // 100B2 0061;	
    // (êÇ≤) LINEAR B IDEOGRAM B170	[48A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B2, 0x0061 };
    uint32_t const ces[9] = { 0x48A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_447)
{
    // 100B2 0041;	
    // (êÇ≤) LINEAR B IDEOGRAM B170	[48A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B2, 0x0041 };
    uint32_t const ces[9] = { 0x48A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_448)
{
    // 100B2 0062;	
    // (êÇ≤) LINEAR B IDEOGRAM B170	[48A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B2, 0x0062 };
    uint32_t const ces[9] = { 0x48A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_449)
{
    // 100B3 0021;	
    // (êÇ≥) LINEAR B IDEOGRAM B171	[48A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B3, 0x0021 };
    uint32_t const ces[9] = { 0x48A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_450)
{
    // 100B3 003F;	
    // (êÇ≥) LINEAR B IDEOGRAM B171	[48A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B3, 0x003F };
    uint32_t const ces[9] = { 0x48A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_451)
{
    // 100B3 0061;	
    // (êÇ≥) LINEAR B IDEOGRAM B171	[48A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B3, 0x0061 };
    uint32_t const ces[9] = { 0x48A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_452)
{
    // 100B3 0041;	
    // (êÇ≥) LINEAR B IDEOGRAM B171	[48A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B3, 0x0041 };
    uint32_t const ces[9] = { 0x48A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_453)
{
    // 100B3 0062;	
    // (êÇ≥) LINEAR B IDEOGRAM B171	[48A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B3, 0x0062 };
    uint32_t const ces[9] = { 0x48A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_454)
{
    // 100B4 0021;	
    // (êÇ¥) LINEAR B IDEOGRAM B172	[48AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B4, 0x0021 };
    uint32_t const ces[9] = { 0x48AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_455)
{
    // 100B4 003F;	
    // (êÇ¥) LINEAR B IDEOGRAM B172	[48AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B4, 0x003F };
    uint32_t const ces[9] = { 0x48AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_456)
{
    // 100B4 0061;	
    // (êÇ¥) LINEAR B IDEOGRAM B172	[48AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B4, 0x0061 };
    uint32_t const ces[9] = { 0x48AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_457)
{
    // 100B4 0041;	
    // (êÇ¥) LINEAR B IDEOGRAM B172	[48AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B4, 0x0041 };
    uint32_t const ces[9] = { 0x48AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_458)
{
    // 100B4 0062;	
    // (êÇ¥) LINEAR B IDEOGRAM B172	[48AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B4, 0x0062 };
    uint32_t const ces[9] = { 0x48AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_459)
{
    // 100B5 0021;	
    // (êÇµ) LINEAR B IDEOGRAM B173 MONTH	[48AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B5, 0x0021 };
    uint32_t const ces[9] = { 0x48AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_460)
{
    // 100B5 003F;	
    // (êÇµ) LINEAR B IDEOGRAM B173 MONTH	[48AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B5, 0x003F };
    uint32_t const ces[9] = { 0x48AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_461)
{
    // 100B5 0061;	
    // (êÇµ) LINEAR B IDEOGRAM B173 MONTH	[48AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B5, 0x0061 };
    uint32_t const ces[9] = { 0x48AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_462)
{
    // 100B5 0041;	
    // (êÇµ) LINEAR B IDEOGRAM B173 MONTH	[48AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B5, 0x0041 };
    uint32_t const ces[9] = { 0x48AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_463)
{
    // 100B5 0062;	
    // (êÇµ) LINEAR B IDEOGRAM B173 MONTH	[48AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B5, 0x0062 };
    uint32_t const ces[9] = { 0x48AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_464)
{
    // 100B6 0021;	
    // (êÇ∂) LINEAR B IDEOGRAM B174	[48AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B6, 0x0021 };
    uint32_t const ces[9] = { 0x48AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_465)
{
    // 100B6 003F;	
    // (êÇ∂) LINEAR B IDEOGRAM B174	[48AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B6, 0x003F };
    uint32_t const ces[9] = { 0x48AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_466)
{
    // 100B6 0061;	
    // (êÇ∂) LINEAR B IDEOGRAM B174	[48AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B6, 0x0061 };
    uint32_t const ces[9] = { 0x48AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_467)
{
    // 100B6 0041;	
    // (êÇ∂) LINEAR B IDEOGRAM B174	[48AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B6, 0x0041 };
    uint32_t const ces[9] = { 0x48AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_468)
{
    // 100B6 0062;	
    // (êÇ∂) LINEAR B IDEOGRAM B174	[48AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B6, 0x0062 };
    uint32_t const ces[9] = { 0x48AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_469)
{
    // 100B7 0021;	
    // (êÇ∑) LINEAR B IDEOGRAM B176 TREE	[48AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B7, 0x0021 };
    uint32_t const ces[9] = { 0x48AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_470)
{
    // 100B7 003F;	
    // (êÇ∑) LINEAR B IDEOGRAM B176 TREE	[48AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B7, 0x003F };
    uint32_t const ces[9] = { 0x48AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_471)
{
    // 100B7 0061;	
    // (êÇ∑) LINEAR B IDEOGRAM B176 TREE	[48AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B7, 0x0061 };
    uint32_t const ces[9] = { 0x48AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_472)
{
    // 100B7 0041;	
    // (êÇ∑) LINEAR B IDEOGRAM B176 TREE	[48AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B7, 0x0041 };
    uint32_t const ces[9] = { 0x48AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_473)
{
    // 100B7 0062;	
    // (êÇ∑) LINEAR B IDEOGRAM B176 TREE	[48AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B7, 0x0062 };
    uint32_t const ces[9] = { 0x48AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_474)
{
    // 100B8 0021;	
    // (êÇ∏) LINEAR B IDEOGRAM B177	[48AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B8, 0x0021 };
    uint32_t const ces[9] = { 0x48AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_475)
{
    // 100B8 003F;	
    // (êÇ∏) LINEAR B IDEOGRAM B177	[48AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B8, 0x003F };
    uint32_t const ces[9] = { 0x48AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_476)
{
    // 100B8 0061;	
    // (êÇ∏) LINEAR B IDEOGRAM B177	[48AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B8, 0x0061 };
    uint32_t const ces[9] = { 0x48AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_477)
{
    // 100B8 0041;	
    // (êÇ∏) LINEAR B IDEOGRAM B177	[48AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B8, 0x0041 };
    uint32_t const ces[9] = { 0x48AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_478)
{
    // 100B8 0062;	
    // (êÇ∏) LINEAR B IDEOGRAM B177	[48AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B8, 0x0062 };
    uint32_t const ces[9] = { 0x48AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_479)
{
    // 100B9 0021;	
    // (êÇπ) LINEAR B IDEOGRAM B178	[48AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B9, 0x0021 };
    uint32_t const ces[9] = { 0x48AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_480)
{
    // 100B9 003F;	
    // (êÇπ) LINEAR B IDEOGRAM B178	[48AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B9, 0x003F };
    uint32_t const ces[9] = { 0x48AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_481)
{
    // 100B9 0061;	
    // (êÇπ) LINEAR B IDEOGRAM B178	[48AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B9, 0x0061 };
    uint32_t const ces[9] = { 0x48AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_482)
{
    // 100B9 0041;	
    // (êÇπ) LINEAR B IDEOGRAM B178	[48AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100B9, 0x0041 };
    uint32_t const ces[9] = { 0x48AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_483)
{
    // 100B9 0062;	
    // (êÇπ) LINEAR B IDEOGRAM B178	[48AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100B9, 0x0062 };
    uint32_t const ces[9] = { 0x48AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_484)
{
    // 100BA 0021;	
    // (êÇ∫) LINEAR B IDEOGRAM B179	[48B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BA, 0x0021 };
    uint32_t const ces[9] = { 0x48B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_485)
{
    // 100BA 003F;	
    // (êÇ∫) LINEAR B IDEOGRAM B179	[48B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BA, 0x003F };
    uint32_t const ces[9] = { 0x48B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_486)
{
    // 100BA 0061;	
    // (êÇ∫) LINEAR B IDEOGRAM B179	[48B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BA, 0x0061 };
    uint32_t const ces[9] = { 0x48B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_487)
{
    // 100BA 0041;	
    // (êÇ∫) LINEAR B IDEOGRAM B179	[48B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BA, 0x0041 };
    uint32_t const ces[9] = { 0x48B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_488)
{
    // 100BA 0062;	
    // (êÇ∫) LINEAR B IDEOGRAM B179	[48B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BA, 0x0062 };
    uint32_t const ces[9] = { 0x48B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_489)
{
    // 100BB 0021;	
    // (êÇª) LINEAR B IDEOGRAM B180	[48B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BB, 0x0021 };
    uint32_t const ces[9] = { 0x48B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_490)
{
    // 100BB 003F;	
    // (êÇª) LINEAR B IDEOGRAM B180	[48B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BB, 0x003F };
    uint32_t const ces[9] = { 0x48B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_491)
{
    // 100BB 0061;	
    // (êÇª) LINEAR B IDEOGRAM B180	[48B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BB, 0x0061 };
    uint32_t const ces[9] = { 0x48B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_492)
{
    // 100BB 0041;	
    // (êÇª) LINEAR B IDEOGRAM B180	[48B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BB, 0x0041 };
    uint32_t const ces[9] = { 0x48B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_493)
{
    // 100BB 0062;	
    // (êÇª) LINEAR B IDEOGRAM B180	[48B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BB, 0x0062 };
    uint32_t const ces[9] = { 0x48B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_494)
{
    // 100BC 0021;	
    // (êÇº) LINEAR B IDEOGRAM B181	[48B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BC, 0x0021 };
    uint32_t const ces[9] = { 0x48B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_495)
{
    // 100BC 003F;	
    // (êÇº) LINEAR B IDEOGRAM B181	[48B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BC, 0x003F };
    uint32_t const ces[9] = { 0x48B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_496)
{
    // 100BC 0061;	
    // (êÇº) LINEAR B IDEOGRAM B181	[48B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BC, 0x0061 };
    uint32_t const ces[9] = { 0x48B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_497)
{
    // 100BC 0041;	
    // (êÇº) LINEAR B IDEOGRAM B181	[48B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BC, 0x0041 };
    uint32_t const ces[9] = { 0x48B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_498)
{
    // 100BC 0062;	
    // (êÇº) LINEAR B IDEOGRAM B181	[48B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BC, 0x0062 };
    uint32_t const ces[9] = { 0x48B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_276_499)
{
    // 100BD 0021;	
    // (êÇΩ) LINEAR B IDEOGRAM B182	[48B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BD, 0x0021 };
    uint32_t const ces[9] = { 0x48B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

