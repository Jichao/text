// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_012_000)
{
    // 0728  ; [.2453.0020.0002] 
    // SYRIAC LETTER SADHE

    uint32_t const cps[1] = { 0x728 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2453), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_001)
{
    // 0729  ; [.2454.0020.0002] 
    // SYRIAC LETTER QAPH

    uint32_t const cps[1] = { 0x729 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2454), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_002)
{
    // 072A  ; [.2455.0020.0002] 
    // SYRIAC LETTER RISH

    uint32_t const cps[1] = { 0x72a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2455), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_003)
{
    // 072B  ; [.2456.0020.0002] 
    // SYRIAC LETTER SHIN

    uint32_t const cps[1] = { 0x72b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2456), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_004)
{
    // 072C  ; [.2457.0020.0002] 
    // SYRIAC LETTER TAW

    uint32_t const cps[1] = { 0x72c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2457), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_005)
{
    // 072D  ; [.243E.0020.0004][.0000.0113.0004] 
    // SYRIAC LETTER PERSIAN BHETH

    uint32_t const cps[1] = { 0x72d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x243e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_012_006)
{
    // 072E  ; [.243F.0020.0004][.0000.0113.0004] 
    // SYRIAC LETTER PERSIAN GHAMAL

    uint32_t const cps[1] = { 0x72e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x243f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_012_007)
{
    // 072F  ; [.2441.0020.0004][.0000.0113.0004] 
    // SYRIAC LETTER PERSIAN DHALATH

    uint32_t const cps[1] = { 0x72f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2441), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_012_008)
{
    // 0730  ; [.0000.009A.0002] 
    // SYRIAC PTHAHA ABOVE

    uint32_t const cps[1] = { 0x730 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_009)
{
    // 0731  ; [.0000.009B.0002] 
    // SYRIAC PTHAHA BELOW

    uint32_t const cps[1] = { 0x731 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_010)
{
    // 0732  ; [.0000.009C.0002] 
    // SYRIAC PTHAHA DOTTED

    uint32_t const cps[1] = { 0x732 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_011)
{
    // 0733  ; [.0000.009D.0002] 
    // SYRIAC ZQAPHA ABOVE

    uint32_t const cps[1] = { 0x733 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_012)
{
    // 0734  ; [.0000.009E.0002] 
    // SYRIAC ZQAPHA BELOW

    uint32_t const cps[1] = { 0x734 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_013)
{
    // 0735  ; [.0000.009F.0002] 
    // SYRIAC ZQAPHA DOTTED

    uint32_t const cps[1] = { 0x735 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_014)
{
    // 0736  ; [.0000.00A0.0002] 
    // SYRIAC RBASA ABOVE

    uint32_t const cps[1] = { 0x736 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x80), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_015)
{
    // 0737  ; [.0000.00A1.0002] 
    // SYRIAC RBASA BELOW

    uint32_t const cps[1] = { 0x737 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x81), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_016)
{
    // 0738  ; [.0000.00A2.0002] 
    // SYRIAC DOTTED ZLAMA HORIZONTAL

    uint32_t const cps[1] = { 0x738 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x82), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_017)
{
    // 0739  ; [.0000.00A3.0002] 
    // SYRIAC DOTTED ZLAMA ANGULAR

    uint32_t const cps[1] = { 0x739 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x83), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_018)
{
    // 073A  ; [.0000.00A4.0002] 
    // SYRIAC HBASA ABOVE

    uint32_t const cps[1] = { 0x73a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x84), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_019)
{
    // 073B  ; [.0000.00A5.0002] 
    // SYRIAC HBASA BELOW

    uint32_t const cps[1] = { 0x73b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x85), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_020)
{
    // 073C  ; [.0000.00A6.0002] 
    // SYRIAC HBASA-ESASA DOTTED

    uint32_t const cps[1] = { 0x73c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x86), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_021)
{
    // 073D  ; [.0000.00A7.0002] 
    // SYRIAC ESASA ABOVE

    uint32_t const cps[1] = { 0x73d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x87), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_022)
{
    // 073E  ; [.0000.00A8.0002] 
    // SYRIAC ESASA BELOW

    uint32_t const cps[1] = { 0x73e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x88), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_023)
{
    // 073F  ; [.0000.00A9.0002] 
    // SYRIAC RWAHA

    uint32_t const cps[1] = { 0x73f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x89), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_024)
{
    // 0740  ; [.0000.0000.0000] 
    // SYRIAC FEMININE DOT

    uint32_t const cps[1] = { 0x740 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_025)
{
    // 0741  ; [.0000.0033.0002] 
    // SYRIAC QUSHSHAYA

    uint32_t const cps[1] = { 0x741 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_026)
{
    // 0742  ; [.0000.0034.0002] 
    // SYRIAC RUKKAKHA

    uint32_t const cps[1] = { 0x742 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_027)
{
    // 0743  ; [.0000.0000.0000] 
    // SYRIAC TWO VERTICAL DOTS ABOVE

    uint32_t const cps[1] = { 0x743 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_028)
{
    // 0744  ; [.0000.0000.0000] 
    // SYRIAC TWO VERTICAL DOTS BELOW

    uint32_t const cps[1] = { 0x744 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_029)
{
    // 0745  ; [.0000.0033.0002] 
    // SYRIAC THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x745 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_030)
{
    // 0746  ; [.0000.0034.0002] 
    // SYRIAC THREE DOTS BELOW

    uint32_t const cps[1] = { 0x746 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_031)
{
    // 0747  ; [.0000.0000.0000] 
    // SYRIAC OBLIQUE LINE ABOVE

    uint32_t const cps[1] = { 0x747 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_032)
{
    // 0748  ; [.0000.0000.0000] 
    // SYRIAC OBLIQUE LINE BELOW

    uint32_t const cps[1] = { 0x748 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_033)
{
    // 0749  ; [.0000.0000.0000] 
    // SYRIAC MUSIC

    uint32_t const cps[1] = { 0x749 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_034)
{
    // 074A  ; [.0000.0000.0000] 
    // SYRIAC BARREKH

    uint32_t const cps[1] = { 0x74a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_035)
{
    // 074D  ; [.2445.0020.0002] 
    // SYRIAC LETTER SOGDIAN ZHAIN

    uint32_t const cps[1] = { 0x74d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2445), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_036)
{
    // 074E  ; [.244B.0020.0002] 
    // SYRIAC LETTER SOGDIAN KHAPH

    uint32_t const cps[1] = { 0x74e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_037)
{
    // 074F  ; [.2452.0020.0002] 
    // SYRIAC LETTER SOGDIAN FE

    uint32_t const cps[1] = { 0x74f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2452), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_038)
{
    // 0750  ; [.2377.0020.0002] 
    // ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW

    uint32_t const cps[1] = { 0x750 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2377), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_039)
{
    // 0751  ; [.2378.0020.0002] 
    // ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x751 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2378), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_040)
{
    // 0752  ; [.2379.0020.0002] 
    // ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW

    uint32_t const cps[1] = { 0x752 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2379), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_041)
{
    // 0753  ; [.237A.0020.0002] 
    // ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x753 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_042)
{
    // 0754  ; [.237B.0020.0002] 
    // ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE

    uint32_t const cps[1] = { 0x754 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_043)
{
    // 0755  ; [.237C.0020.0002] 
    // ARABIC LETTER BEH WITH INVERTED SMALL V BELOW

    uint32_t const cps[1] = { 0x755 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_044)
{
    // 0756  ; [.237E.0020.0002] 
    // ARABIC LETTER BEH WITH SMALL V

    uint32_t const cps[1] = { 0x756 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x237e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_045)
{
    // 0757  ; [.2397.0020.0002] 
    // ARABIC LETTER HAH WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x757 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2397), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_046)
{
    // 0758  ; [.2398.0020.0002] 
    // ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW

    uint32_t const cps[1] = { 0x758 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2398), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_047)
{
    // 0759  ; [.23AA.0020.0002] 
    // ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH

    uint32_t const cps[1] = { 0x759 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_048)
{
    // 075A  ; [.23AB.0020.0002] 
    // ARABIC LETTER DAL WITH INVERTED SMALL V BELOW

    uint32_t const cps[1] = { 0x75a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_049)
{
    // 075B  ; [.23B8.0020.0002] 
    // ARABIC LETTER REH WITH STROKE

    uint32_t const cps[1] = { 0x75b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_050)
{
    // 075C  ; [.23C5.0020.0002] 
    // ARABIC LETTER SEEN WITH FOUR DOTS ABOVE

    uint32_t const cps[1] = { 0x75c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_051)
{
    // 075D  ; [.23D8.0020.0002] 
    // ARABIC LETTER AIN WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x75d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_052)
{
    // 075E  ; [.23D9.0020.0002] 
    // ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE

    uint32_t const cps[1] = { 0x75e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_053)
{
    // 075F  ; [.23DA.0020.0002] 
    // ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE

    uint32_t const cps[1] = { 0x75f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_054)
{
    // 0760  ; [.23E5.0020.0002] 
    // ARABIC LETTER FEH WITH TWO DOTS BELOW

    uint32_t const cps[1] = { 0x760 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_055)
{
    // 0761  ; [.23E6.0020.0002] 
    // ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW

    uint32_t const cps[1] = { 0x761 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_056)
{
    // 0762  ; [.23FD.0020.0002] 
    // ARABIC LETTER KEHEH WITH DOT ABOVE

    uint32_t const cps[1] = { 0x762 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_057)
{
    // 0763  ; [.2400.0020.0002] 
    // ARABIC LETTER KEHEH WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x763 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2400), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_058)
{
    // 0764  ; [.2401.0020.0002] 
    // ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW

    uint32_t const cps[1] = { 0x764 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2401), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_059)
{
    // 0765  ; [.240A.0020.0002] 
    // ARABIC LETTER MEEM WITH DOT ABOVE

    uint32_t const cps[1] = { 0x765 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_060)
{
    // 0766  ; [.240B.0020.0002] 
    // ARABIC LETTER MEEM WITH DOT BELOW

    uint32_t const cps[1] = { 0x766 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_061)
{
    // 0767  ; [.2414.0020.0002] 
    // ARABIC LETTER NOON WITH TWO DOTS BELOW

    uint32_t const cps[1] = { 0x767 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2414), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_062)
{
    // 0768  ; [.2415.0020.0002] 
    // ARABIC LETTER NOON WITH SMALL TAH

    uint32_t const cps[1] = { 0x768 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2415), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_063)
{
    // 0769  ; [.2416.0020.0002] 
    // ARABIC LETTER NOON WITH SMALL V

    uint32_t const cps[1] = { 0x769 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2416), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_064)
{
    // 076A  ; [.2407.0020.0002] 
    // ARABIC LETTER LAM WITH BAR

    uint32_t const cps[1] = { 0x76a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2407), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_065)
{
    // 076B  ; [.23B9.0020.0002] 
    // ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE

    uint32_t const cps[1] = { 0x76b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_066)
{
    // 076C  ; [.23BA.0020.0002] 
    // ARABIC LETTER REH WITH HAMZA ABOVE

    uint32_t const cps[1] = { 0x76c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_067)
{
    // 076D  ; [.23C6.0020.0002] 
    // ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE

    uint32_t const cps[1] = { 0x76d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_068)
{
    // 076E  ; [.2399.0020.0002] 
    // ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW

    uint32_t const cps[1] = { 0x76e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2399), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_069)
{
    // 076F  ; [.239A.0020.0002] 
    // ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS

    uint32_t const cps[1] = { 0x76f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_070)
{
    // 0770  ; [.23C7.0020.0002] 
    // ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS

    uint32_t const cps[1] = { 0x770 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_071)
{
    // 0771  ; [.23BB.0020.0002] 
    // ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS

    uint32_t const cps[1] = { 0x771 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_072)
{
    // 0772  ; [.239B.0020.0002] 
    // ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE

    uint32_t const cps[1] = { 0x772 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_073)
{
    // 0773  ; [.236B.0020.0002] 
    // ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE

    uint32_t const cps[1] = { 0x773 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_074)
{
    // 0774  ; [.236C.0020.0002] 
    // ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE

    uint32_t const cps[1] = { 0x774 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_075)
{
    // 0775  ; [.2436.0020.0002] 
    // ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE

    uint32_t const cps[1] = { 0x775 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2436), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_076)
{
    // 0776  ; [.2437.0020.0002] 
    // ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE

    uint32_t const cps[1] = { 0x776 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2437), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_077)
{
    // 0777  ; [.2438.0020.0002] 
    // ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW

    uint32_t const cps[1] = { 0x777 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2438), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_078)
{
    // 0778  ; [.2428.0020.0002] 
    // ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE

    uint32_t const cps[1] = { 0x778 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2428), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_079)
{
    // 0779  ; [.2429.0020.0002] 
    // ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE

    uint32_t const cps[1] = { 0x779 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2429), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_080)
{
    // 077A  ; [.243B.0020.0002] 
    // ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE

    uint32_t const cps[1] = { 0x77a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_081)
{
    // 077B  ; [.243C.0020.0002] 
    // ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE

    uint32_t const cps[1] = { 0x77b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_082)
{
    // 077C  ; [.239C.0020.0002] 
    // ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW

    uint32_t const cps[1] = { 0x77c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x239c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_083)
{
    // 077D  ; [.23C8.0020.0002] 
    // ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE

    uint32_t const cps[1] = { 0x77d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_084)
{
    // 077E  ; [.23C9.0020.0002] 
    // ARABIC LETTER SEEN WITH INVERTED V

    uint32_t const cps[1] = { 0x77e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_085)
{
    // 077F  ; [.23F2.0020.0002] 
    // ARABIC LETTER KAF WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x77f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_086)
{
    // 0780  ; [.247C.0020.0002] 
    // THAANA LETTER HAA

    uint32_t const cps[1] = { 0x780 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_087)
{
    // 0781  ; [.247F.0020.0002] 
    // THAANA LETTER SHAVIYANI

    uint32_t const cps[1] = { 0x781 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_088)
{
    // 0782  ; [.2480.0020.0002] 
    // THAANA LETTER NOONU

    uint32_t const cps[1] = { 0x782 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2480), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_089)
{
    // 0783  ; [.2481.0020.0002] 
    // THAANA LETTER RAA

    uint32_t const cps[1] = { 0x783 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2481), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_090)
{
    // 0784  ; [.2483.0020.0002] 
    // THAANA LETTER BAA

    uint32_t const cps[1] = { 0x784 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2483), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_091)
{
    // 0785  ; [.2484.0020.0002] 
    // THAANA LETTER LHAVIYANI

    uint32_t const cps[1] = { 0x785 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2484), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_092)
{
    // 0786  ; [.2485.0020.0002] 
    // THAANA LETTER KAAFU

    uint32_t const cps[1] = { 0x786 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2485), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_093)
{
    // 0787  ; [.2486.0020.0002] 
    // THAANA LETTER ALIFU

    uint32_t const cps[1] = { 0x787 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2486), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_094)
{
    // 0788  ; [.2489.0020.0002] 
    // THAANA LETTER VAAVU

    uint32_t const cps[1] = { 0x788 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2489), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_095)
{
    // 0789  ; [.248B.0020.0002] 
    // THAANA LETTER MEEMU

    uint32_t const cps[1] = { 0x789 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_096)
{
    // 078A  ; [.248C.0020.0002] 
    // THAANA LETTER FAAFU

    uint32_t const cps[1] = { 0x78a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_097)
{
    // 078B  ; [.248D.0020.0002] 
    // THAANA LETTER DHAALU

    uint32_t const cps[1] = { 0x78b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_098)
{
    // 078C  ; [.248F.0020.0002] 
    // THAANA LETTER THAA

    uint32_t const cps[1] = { 0x78c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_099)
{
    // 078D  ; [.2493.0020.0002] 
    // THAANA LETTER LAAMU

    uint32_t const cps[1] = { 0x78d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2493), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_100)
{
    // 078E  ; [.2494.0020.0002] 
    // THAANA LETTER GAAFU

    uint32_t const cps[1] = { 0x78e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2494), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_101)
{
    // 078F  ; [.2496.0020.0002] 
    // THAANA LETTER GNAVIYANI

    uint32_t const cps[1] = { 0x78f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2496), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_102)
{
    // 0790  ; [.2497.0020.0002] 
    // THAANA LETTER SEENU

    uint32_t const cps[1] = { 0x790 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2497), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_103)
{
    // 0791  ; [.249B.0020.0002] 
    // THAANA LETTER DAVIYANI

    uint32_t const cps[1] = { 0x791 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_104)
{
    // 0792  ; [.249C.0020.0002] 
    // THAANA LETTER ZAVIYANI

    uint32_t const cps[1] = { 0x792 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_105)
{
    // 0793  ; [.249D.0020.0002] 
    // THAANA LETTER TAVIYANI

    uint32_t const cps[1] = { 0x793 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_106)
{
    // 0794  ; [.249E.0020.0002] 
    // THAANA LETTER YAA

    uint32_t const cps[1] = { 0x794 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_107)
{
    // 0795  ; [.249F.0020.0002] 
    // THAANA LETTER PAVIYANI

    uint32_t const cps[1] = { 0x795 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_108)
{
    // 0796  ; [.24A0.0020.0002] 
    // THAANA LETTER JAVIYANI

    uint32_t const cps[1] = { 0x796 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_109)
{
    // 0797  ; [.24A1.0020.0002] 
    // THAANA LETTER CHAVIYANI

    uint32_t const cps[1] = { 0x797 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_110)
{
    // 0798  ; [.2490.0020.0002] 
    // THAANA LETTER TTAA

    uint32_t const cps[1] = { 0x798 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2490), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_111)
{
    // 0799  ; [.247D.0020.0002] 
    // THAANA LETTER HHAA

    uint32_t const cps[1] = { 0x799 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_112)
{
    // 079A  ; [.247E.0020.0002] 
    // THAANA LETTER KHAA

    uint32_t const cps[1] = { 0x79a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x247e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_113)
{
    // 079B  ; [.248E.0020.0002] 
    // THAANA LETTER THAALU

    uint32_t const cps[1] = { 0x79b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_114)
{
    // 079C  ; [.2482.0020.0002] 
    // THAANA LETTER ZAA

    uint32_t const cps[1] = { 0x79c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2482), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_115)
{
    // 079D  ; [.2498.0020.0002] 
    // THAANA LETTER SHEENU

    uint32_t const cps[1] = { 0x79d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2498), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_116)
{
    // 079E  ; [.2499.0020.0002] 
    // THAANA LETTER SAADHU

    uint32_t const cps[1] = { 0x79e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2499), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_117)
{
    // 079F  ; [.249A.0020.0002] 
    // THAANA LETTER DAADHU

    uint32_t const cps[1] = { 0x79f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x249a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_118)
{
    // 07A0  ; [.2491.0020.0002] 
    // THAANA LETTER TO

    uint32_t const cps[1] = { 0x7a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2491), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_119)
{
    // 07A1  ; [.2492.0020.0002] 
    // THAANA LETTER ZO

    uint32_t const cps[1] = { 0x7a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2492), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_120)
{
    // 07A2  ; [.2487.0020.0002] 
    // THAANA LETTER AINU

    uint32_t const cps[1] = { 0x7a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2487), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_121)
{
    // 07A3  ; [.2488.0020.0002] 
    // THAANA LETTER GHAINU

    uint32_t const cps[1] = { 0x7a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2488), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_122)
{
    // 07A4  ; [.2495.0020.0002] 
    // THAANA LETTER QAAFU

    uint32_t const cps[1] = { 0x7a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2495), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_123)
{
    // 07A5  ; [.248A.0020.0002] 
    // THAANA LETTER WAAVU

    uint32_t const cps[1] = { 0x7a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x248a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_124)
{
    // 07A6  ; [.24A3.0020.0002] 
    // THAANA ABAFILI

    uint32_t const cps[1] = { 0x7a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_125)
{
    // 07A7  ; [.24A4.0020.0002] 
    // THAANA AABAAFILI

    uint32_t const cps[1] = { 0x7a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_126)
{
    // 07A8  ; [.24A5.0020.0002] 
    // THAANA IBIFILI

    uint32_t const cps[1] = { 0x7a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_127)
{
    // 07A9  ; [.24A6.0020.0002] 
    // THAANA EEBEEFILI

    uint32_t const cps[1] = { 0x7a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_128)
{
    // 07AA  ; [.24A7.0020.0002] 
    // THAANA UBUFILI

    uint32_t const cps[1] = { 0x7aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_129)
{
    // 07AB  ; [.24A8.0020.0002] 
    // THAANA OOBOOFILI

    uint32_t const cps[1] = { 0x7ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_130)
{
    // 07AC  ; [.24A9.0020.0002] 
    // THAANA EBEFILI

    uint32_t const cps[1] = { 0x7ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_131)
{
    // 07AD  ; [.24AA.0020.0002] 
    // THAANA EYBEYFILI

    uint32_t const cps[1] = { 0x7ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_132)
{
    // 07AE  ; [.24AB.0020.0002] 
    // THAANA OBOFILI

    uint32_t const cps[1] = { 0x7ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_133)
{
    // 07AF  ; [.24AC.0020.0002] 
    // THAANA OABOAFILI

    uint32_t const cps[1] = { 0x7af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_134)
{
    // 07B0  ; [.24AD.0020.0002] 
    // THAANA SUKUN

    uint32_t const cps[1] = { 0x7b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_135)
{
    // 07B1  ; [.24A2.0020.0002] 
    // THAANA LETTER NAA

    uint32_t const cps[1] = { 0x7b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_136)
{
    // 07C0  ; [.1CA3.0020.0002] 
    // NKO DIGIT ZERO

    uint32_t const cps[1] = { 0x7c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_137)
{
    // 07C1  ; [.1CA4.0020.0002] 
    // NKO DIGIT ONE

    uint32_t const cps[1] = { 0x7c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_138)
{
    // 07C2  ; [.1CA5.0020.0002] 
    // NKO DIGIT TWO

    uint32_t const cps[1] = { 0x7c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_139)
{
    // 07C3  ; [.1CA6.0020.0002] 
    // NKO DIGIT THREE

    uint32_t const cps[1] = { 0x7c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_140)
{
    // 07C4  ; [.1CA7.0020.0002] 
    // NKO DIGIT FOUR

    uint32_t const cps[1] = { 0x7c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_141)
{
    // 07C5  ; [.1CA8.0020.0002] 
    // NKO DIGIT FIVE

    uint32_t const cps[1] = { 0x7c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_142)
{
    // 07C6  ; [.1CA9.0020.0002] 
    // NKO DIGIT SIX

    uint32_t const cps[1] = { 0x7c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_143)
{
    // 07C7  ; [.1CAA.0020.0002] 
    // NKO DIGIT SEVEN

    uint32_t const cps[1] = { 0x7c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_144)
{
    // 07C8  ; [.1CAB.0020.0002] 
    // NKO DIGIT EIGHT

    uint32_t const cps[1] = { 0x7c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_145)
{
    // 07C9  ; [.1CAC.0020.0002] 
    // NKO DIGIT NINE

    uint32_t const cps[1] = { 0x7c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_146)
{
    // 07CA  ; [.24AE.0020.0002] 
    // NKO LETTER A

    uint32_t const cps[1] = { 0x7ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_147)
{
    // 07CB  ; [.24AF.0020.0002] 
    // NKO LETTER EE

    uint32_t const cps[1] = { 0x7cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_148)
{
    // 07CC  ; [.24B0.0020.0002] 
    // NKO LETTER I

    uint32_t const cps[1] = { 0x7cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_012_149)
{
    // 07CD  ; [.24B1.0020.0002] 
    // NKO LETTER E

    uint32_t const cps[1] = { 0x7cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x24b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

