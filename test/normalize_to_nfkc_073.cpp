// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkc_073_000)
{
    // FD72;FD72;FD72;0637 0645 062D;0637 0645 062D; 
    // (ﵲ; ﵲ; ﵲ; طمح; طمح; ) ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0637, 0x0645, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_001)
{
    // FD73;FD73;FD73;0637 0645 0645;0637 0645 0645; 
    // (ﵳ; ﵳ; ﵳ; طمم; طمم; ) ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD73 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0637, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_002)
{
    // FD74;FD74;FD74;0637 0645 064A;0637 0645 064A; 
    // (ﵴ; ﵴ; ﵴ; طمي; طمي; ) ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0637, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_003)
{
    // FD75;FD75;FD75;0639 062C 0645;0639 062C 0645; 
    // (ﵵ; ﵵ; ﵵ; عجم; عجم; ) ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD75 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_004)
{
    // FD76;FD76;FD76;0639 0645 0645;0639 0645 0645; 
    // (ﵶ; ﵶ; ﵶ; عمم; عمم; ) ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_005)
{
    // FD77;FD77;FD77;0639 0645 0645;0639 0645 0645; 
    // (ﵷ; ﵷ; ﵷ; عمم; عمم; ) ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_006)
{
    // FD78;FD78;FD78;0639 0645 0649;0639 0645 0649; 
    // (ﵸ; ﵸ; ﵸ; عمى; عمى; ) ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x0645, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_007)
{
    // FD79;FD79;FD79;063A 0645 0645;063A 0645 0645; 
    // (ﵹ; ﵹ; ﵹ; غمم; غمم; ) ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x063A, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_008)
{
    // FD7A;FD7A;FD7A;063A 0645 064A;063A 0645 064A; 
    // (ﵺ; ﵺ; ﵺ; غمي; غمي; ) ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x063A, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_009)
{
    // FD7B;FD7B;FD7B;063A 0645 0649;063A 0645 0649; 
    // (ﵻ; ﵻ; ﵻ; غمى; غمى; ) ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x063A, 0x0645, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_010)
{
    // FD7C;FD7C;FD7C;0641 062E 0645;0641 062E 0645; 
    // (ﵼ; ﵼ; ﵼ; فخم; فخم; ) ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0641, 0x062E, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_011)
{
    // FD7D;FD7D;FD7D;0641 062E 0645;0641 062E 0645; 
    // (ﵽ; ﵽ; ﵽ; فخم; فخم; ) ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0641, 0x062E, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_012)
{
    // FD7E;FD7E;FD7E;0642 0645 062D;0642 0645 062D; 
    // (ﵾ; ﵾ; ﵾ; قمح; قمح; ) ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0642, 0x0645, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_013)
{
    // FD7F;FD7F;FD7F;0642 0645 0645;0642 0645 0645; 
    // (ﵿ; ﵿ; ﵿ; قمم; قمم; ) ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0642, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_014)
{
    // FD80;FD80;FD80;0644 062D 0645;0644 062D 0645; 
    // (ﶀ; ﶀ; ﶀ; لحم; لحم; ) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062D, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_015)
{
    // FD81;FD81;FD81;0644 062D 064A;0644 062D 064A; 
    // (ﶁ; ﶁ; ﶁ; لحي; لحي; ) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_016)
{
    // FD82;FD82;FD82;0644 062D 0649;0644 062D 0649; 
    // (ﶂ; ﶂ; ﶂ; لحى; لحى; ) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062D, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_017)
{
    // FD83;FD83;FD83;0644 062C 062C;0644 062C 062C; 
    // (ﶃ; ﶃ; ﶃ; لجج; لجج; ) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062C, 0x062C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_018)
{
    // FD84;FD84;FD84;0644 062C 062C;0644 062C 062C; 
    // (ﶄ; ﶄ; ﶄ; لجج; لجج; ) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062C, 0x062C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_019)
{
    // FD85;FD85;FD85;0644 062E 0645;0644 062E 0645; 
    // (ﶅ; ﶅ; ﶅ; لخم; لخم; ) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062E, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_020)
{
    // FD86;FD86;FD86;0644 062E 0645;0644 062E 0645; 
    // (ﶆ; ﶆ; ﶆ; لخم; لخم; ) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062E, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_021)
{
    // FD87;FD87;FD87;0644 0645 062D;0644 0645 062D; 
    // (ﶇ; ﶇ; ﶇ; لمح; لمح; ) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x0645, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_022)
{
    // FD88;FD88;FD88;0644 0645 062D;0644 0645 062D; 
    // (ﶈ; ﶈ; ﶈ; لمح; لمح; ) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x0645, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_023)
{
    // FD89;FD89;FD89;0645 062D 062C;0645 062D 062C; 
    // (ﶉ; ﶉ; ﶉ; محج; محج; ) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062D, 0x062C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_024)
{
    // FD8A;FD8A;FD8A;0645 062D 0645;0645 062D 0645; 
    // (ﶊ; ﶊ; ﶊ; محم; محم; ) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062D, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_025)
{
    // FD8B;FD8B;FD8B;0645 062D 064A;0645 062D 064A; 
    // (ﶋ; ﶋ; ﶋ; محي; محي; ) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_026)
{
    // FD8C;FD8C;FD8C;0645 062C 062D;0645 062C 062D; 
    // (ﶌ; ﶌ; ﶌ; مجح; مجح; ) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062C, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_027)
{
    // FD8D;FD8D;FD8D;0645 062C 0645;0645 062C 0645; 
    // (ﶍ; ﶍ; ﶍ; مجم; مجم; ) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_028)
{
    // FD8E;FD8E;FD8E;0645 062E 062C;0645 062E 062C; 
    // (ﶎ; ﶎ; ﶎ; مخج; مخج; ) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062E, 0x062C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_029)
{
    // FD8F;FD8F;FD8F;0645 062E 0645;0645 062E 0645; 
    // (ﶏ; ﶏ; ﶏ; مخم; مخم; ) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062E, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_030)
{
    // FD92;FD92;FD92;0645 062C 062E;0645 062C 062E; 
    // (ﶒ; ﶒ; ﶒ; مجخ; مجخ; ) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062C, 0x062E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_031)
{
    // FD93;FD93;FD93;0647 0645 062C;0647 0645 062C; 
    // (ﶓ; ﶓ; ﶓ; همج; همج; ) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0647, 0x0645, 0x062C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_032)
{
    // FD94;FD94;FD94;0647 0645 0645;0647 0645 0645; 
    // (ﶔ; ﶔ; ﶔ; همم; همم; ) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0647, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_033)
{
    // FD95;FD95;FD95;0646 062D 0645;0646 062D 0645; 
    // (ﶕ; ﶕ; ﶕ; نحم; نحم; ) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062D, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_034)
{
    // FD96;FD96;FD96;0646 062D 0649;0646 062D 0649; 
    // (ﶖ; ﶖ; ﶖ; نحى; نحى; ) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062D, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_035)
{
    // FD97;FD97;FD97;0646 062C 0645;0646 062C 0645; 
    // (ﶗ; ﶗ; ﶗ; نجم; نجم; ) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD97 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_036)
{
    // FD98;FD98;FD98;0646 062C 0645;0646 062C 0645; 
    // (ﶘ; ﶘ; ﶘ; نجم; نجم; ) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD98 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_037)
{
    // FD99;FD99;FD99;0646 062C 0649;0646 062C 0649; 
    // (ﶙ; ﶙ; ﶙ; نجى; نجى; ) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD99 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_038)
{
    // FD9A;FD9A;FD9A;0646 0645 064A;0646 0645 064A; 
    // (ﶚ; ﶚ; ﶚ; نمي; نمي; ) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_039)
{
    // FD9B;FD9B;FD9B;0646 0645 0649;0646 0645 0649; 
    // (ﶛ; ﶛ; ﶛ; نمى; نمى; ) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x0645, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_040)
{
    // FD9C;FD9C;FD9C;064A 0645 0645;064A 0645 0645; 
    // (ﶜ; ﶜ; ﶜ; يمم; يمم; ) ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x064A, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_041)
{
    // FD9D;FD9D;FD9D;064A 0645 0645;064A 0645 0645; 
    // (ﶝ; ﶝ; ﶝ; يمم; يمم; ) ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x064A, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_042)
{
    // FD9E;FD9E;FD9E;0628 062E 064A;0628 062E 064A; 
    // (ﶞ; ﶞ; ﶞ; بخي; بخي; ) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0628, 0x062E, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_043)
{
    // FD9F;FD9F;FD9F;062A 062C 064A;062A 062C 064A; 
    // (ﶟ; ﶟ; ﶟ; تجي; تجي; ) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFD9F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_044)
{
    // FDA0;FDA0;FDA0;062A 062C 0649;062A 062C 0649; 
    // (ﶠ; ﶠ; ﶠ; تجى; تجى; ) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x062C, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_045)
{
    // FDA1;FDA1;FDA1;062A 062E 064A;062A 062E 064A; 
    // (ﶡ; ﶡ; ﶡ; تخي; تخي; ) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x062E, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_046)
{
    // FDA2;FDA2;FDA2;062A 062E 0649;062A 062E 0649; 
    // (ﶢ; ﶢ; ﶢ; تخى; تخى; ) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x062E, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_047)
{
    // FDA3;FDA3;FDA3;062A 0645 064A;062A 0645 064A; 
    // (ﶣ; ﶣ; ﶣ; تمي; تمي; ) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_048)
{
    // FDA4;FDA4;FDA4;062A 0645 0649;062A 0645 0649; 
    // (ﶤ; ﶤ; ﶤ; تمى; تمى; ) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062A, 0x0645, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_049)
{
    // FDA5;FDA5;FDA5;062C 0645 064A;062C 0645 064A; 
    // (ﶥ; ﶥ; ﶥ; جمي; جمي; ) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062C, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_050)
{
    // FDA6;FDA6;FDA6;062C 062D 0649;062C 062D 0649; 
    // (ﶦ; ﶦ; ﶦ; جحى; جحى; ) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062C, 0x062D, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_051)
{
    // FDA7;FDA7;FDA7;062C 0645 0649;062C 0645 0649; 
    // (ﶧ; ﶧ; ﶧ; جمى; جمى; ) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062C, 0x0645, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_052)
{
    // FDA8;FDA8;FDA8;0633 062E 0649;0633 062E 0649; 
    // (ﶨ; ﶨ; ﶨ; سخى; سخى; ) ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0633, 0x062E, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_053)
{
    // FDA9;FDA9;FDA9;0635 062D 064A;0635 062D 064A; 
    // (ﶩ; ﶩ; ﶩ; صحي; صحي; ) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDA9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0635, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_054)
{
    // FDAA;FDAA;FDAA;0634 062D 064A;0634 062D 064A; 
    // (ﶪ; ﶪ; ﶪ; شحي; شحي; ) ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0634, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_055)
{
    // FDAB;FDAB;FDAB;0636 062D 064A;0636 062D 064A; 
    // (ﶫ; ﶫ; ﶫ; ضحي; ضحي; ) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0636, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_056)
{
    // FDAC;FDAC;FDAC;0644 062C 064A;0644 062C 064A; 
    // (ﶬ; ﶬ; ﶬ; لجي; لجي; ) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_057)
{
    // FDAD;FDAD;FDAD;0644 0645 064A;0644 0645 064A; 
    // (ﶭ; ﶭ; ﶭ; لمي; لمي; ) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_058)
{
    // FDAE;FDAE;FDAE;064A 062D 064A;064A 062D 064A; 
    // (ﶮ; ﶮ; ﶮ; يحي; يحي; ) ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x064A, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_059)
{
    // FDAF;FDAF;FDAF;064A 062C 064A;064A 062C 064A; 
    // (ﶯ; ﶯ; ﶯ; يجي; يجي; ) ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDAF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x064A, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_060)
{
    // FDB0;FDB0;FDB0;064A 0645 064A;064A 0645 064A; 
    // (ﶰ; ﶰ; ﶰ; يمي; يمي; ) ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x064A, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_061)
{
    // FDB1;FDB1;FDB1;0645 0645 064A;0645 0645 064A; 
    // (ﶱ; ﶱ; ﶱ; ممي; ممي; ) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_062)
{
    // FDB2;FDB2;FDB2;0642 0645 064A;0642 0645 064A; 
    // (ﶲ; ﶲ; ﶲ; قمي; قمي; ) ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0642, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_063)
{
    // FDB3;FDB3;FDB3;0646 062D 064A;0646 062D 064A; 
    // (ﶳ; ﶳ; ﶳ; نحي; نحي; ) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_064)
{
    // FDB4;FDB4;FDB4;0642 0645 062D;0642 0645 062D; 
    // (ﶴ; ﶴ; ﶴ; قمح; قمح; ) ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0642, 0x0645, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_065)
{
    // FDB5;FDB5;FDB5;0644 062D 0645;0644 062D 0645; 
    // (ﶵ; ﶵ; ﶵ; لحم; لحم; ) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062D, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_066)
{
    // FDB6;FDB6;FDB6;0639 0645 064A;0639 0645 064A; 
    // (ﶶ; ﶶ; ﶶ; عمي; عمي; ) ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_067)
{
    // FDB7;FDB7;FDB7;0643 0645 064A;0643 0645 064A; 
    // (ﶷ; ﶷ; ﶷ; كمي; كمي; ) ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0643, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_068)
{
    // FDB8;FDB8;FDB8;0646 062C 062D;0646 062C 062D; 
    // (ﶸ; ﶸ; ﶸ; نجح; نجح; ) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_069)
{
    // FDB9;FDB9;FDB9;0645 062E 064A;0645 062E 064A; 
    // (ﶹ; ﶹ; ﶹ; مخي; مخي; ) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDB9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062E, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_070)
{
    // FDBA;FDBA;FDBA;0644 062C 0645;0644 062C 0645; 
    // (ﶺ; ﶺ; ﶺ; لجم; لجم; ) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_071)
{
    // FDBB;FDBB;FDBB;0643 0645 0645;0643 0645 0645; 
    // (ﶻ; ﶻ; ﶻ; كمم; كمم; ) ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0643, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_072)
{
    // FDBC;FDBC;FDBC;0644 062C 0645;0644 062C 0645; 
    // (ﶼ; ﶼ; ﶼ; لجم; لجم; ) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0644, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_073)
{
    // FDBD;FDBD;FDBD;0646 062C 062D;0646 062C 062D; 
    // (ﶽ; ﶽ; ﶽ; نجح; نجح; ) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x062D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_074)
{
    // FDBE;FDBE;FDBE;062C 062D 064A;062C 062D 064A; 
    // (ﶾ; ﶾ; ﶾ; جحي; جحي; ) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062C, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_075)
{
    // FDBF;FDBF;FDBF;062D 062C 064A;062D 062C 064A; 
    // (ﶿ; ﶿ; ﶿ; حجي; حجي; ) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDBF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x062D, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_076)
{
    // FDC0;FDC0;FDC0;0645 062C 064A;0645 062C 064A; 
    // (ﷀ; ﷀ; ﷀ; مجي; مجي; ) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0645, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_077)
{
    // FDC1;FDC1;FDC1;0641 0645 064A;0641 0645 064A; 
    // (ﷁ; ﷁ; ﷁ; فمي; فمي; ) ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0641, 0x0645, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_078)
{
    // FDC2;FDC2;FDC2;0628 062D 064A;0628 062D 064A; 
    // (ﷂ; ﷂ; ﷂ; بحي; بحي; ) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0628, 0x062D, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_079)
{
    // FDC3;FDC3;FDC3;0643 0645 0645;0643 0645 0645; 
    // (ﷃ; ﷃ; ﷃ; كمم; كمم; ) ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0643, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_080)
{
    // FDC4;FDC4;FDC4;0639 062C 0645;0639 062C 0645; 
    // (ﷄ; ﷄ; ﷄ; عجم; عجم; ) ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0639, 0x062C, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_081)
{
    // FDC5;FDC5;FDC5;0635 0645 0645;0635 0645 0645; 
    // (ﷅ; ﷅ; ﷅ; صمم; صمم; ) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0635, 0x0645, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_082)
{
    // FDC6;FDC6;FDC6;0633 062E 064A;0633 062E 064A; 
    // (ﷆ; ﷆ; ﷆ; سخي; سخي; ) ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0633, 0x062E, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_083)
{
    // FDC7;FDC7;FDC7;0646 062C 064A;0646 062C 064A; 
    // (ﷇ; ﷇ; ﷇ; نجي; نجي; ) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0646, 0x062C, 0x064A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_084)
{
    // FDF0;FDF0;FDF0;0635 0644 06D2;0635 0644 06D2; 
    // (ﷰ; ﷰ; ﷰ; صلے; صلے; ) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0635, 0x0644, 0x06D2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_085)
{
    // FDF1;FDF1;FDF1;0642 0644 06D2;0642 0644 06D2; 
    // (ﷱ; ﷱ; ﷱ; قلے; قلے; ) ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0642, 0x0644, 0x06D2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_086)
{
    // FDF2;FDF2;FDF2;0627 0644 0644 0647;0627 0644 0644 0647; 
    // (ﷲ; ﷲ; ﷲ; الله; الله; ) ARABIC LIGATURE ALLAH ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0627, 0x0644, 0x0644, 0x0647 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_087)
{
    // FDF3;FDF3;FDF3;0627 0643 0628 0631;0627 0643 0628 0631; 
    // (ﷳ; ﷳ; ﷳ; اكبر; اكبر; ) ARABIC LIGATURE AKBAR ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0627, 0x0643, 0x0628, 0x0631 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_088)
{
    // FDF4;FDF4;FDF4;0645 062D 0645 062F;0645 062D 0645 062F; 
    // (ﷴ; ﷴ; ﷴ; محمد; محمد; ) ARABIC LIGATURE MOHAMMAD ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0645, 0x062D, 0x0645, 0x062F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_089)
{
    // FDF5;FDF5;FDF5;0635 0644 0639 0645;0635 0644 0639 0645; 
    // (ﷵ; ﷵ; ﷵ; صلعم; صلعم; ) ARABIC LIGATURE SALAM ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0635, 0x0644, 0x0639, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_090)
{
    // FDF6;FDF6;FDF6;0631 0633 0648 0644;0631 0633 0648 0644; 
    // (ﷶ; ﷶ; ﷶ; رسول; رسول; ) ARABIC LIGATURE RASOUL ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0631, 0x0633, 0x0648, 0x0644 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_091)
{
    // FDF7;FDF7;FDF7;0639 0644 064A 0647;0639 0644 064A 0647; 
    // (ﷷ; ﷷ; ﷷ; عليه; عليه; ) ARABIC LIGATURE ALAYHE ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0639, 0x0644, 0x064A, 0x0647 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_092)
{
    // FDF8;FDF8;FDF8;0648 0633 0644 0645;0648 0633 0644 0645; 
    // (ﷸ; ﷸ; ﷸ; وسلم; وسلم; ) ARABIC LIGATURE WASALLAM ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0648, 0x0633, 0x0644, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_093)
{
    // FDF9;FDF9;FDF9;0635 0644 0649;0635 0644 0649; 
    // (ﷹ; ﷹ; ﷹ; صلى; صلى; ) ARABIC LIGATURE SALLA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDF9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0635, 0x0644, 0x0649 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_094)
{
    // FDFA;FDFA;FDFA;0635 0644 0649 0020 0627 0644 0644 0647 0020 0639 0644 064A 0647 0020 0648 0633 0644 0645;0635 0644 0649 0020 0627 0644 0644 0647 0020 0639 0644 064A 0647 0020 0648 0633 0644 0645; 
    // (ﷺ; ﷺ; ﷺ; صلى الله عليه وسلم; صلى الله عليه وسلم; ) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM
    {
        std::array<uint32_t, 1> const source = {{ 0xFDFA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 18> const dest = {{ 0x0635, 0x0644, 0x0649, 0x0020, 0x0627, 0x0644, 0x0644, 0x0647, 0x0020, 0x0639, 0x0644, 0x064A, 0x0647, 0x0020, 0x0648, 0x0633, 0x0644, 0x0645 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_095)
{
    // FDFB;FDFB;FDFB;062C 0644 0020 062C 0644 0627 0644 0647;062C 0644 0020 062C 0644 0627 0644 0647; 
    // (ﷻ; ﷻ; ﷻ; جل جلاله; جل جلاله; ) ARABIC LIGATURE JALLAJALALOUHOU
    {
        std::array<uint32_t, 1> const source = {{ 0xFDFB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 8> const dest = {{ 0x062C, 0x0644, 0x0020, 0x062C, 0x0644, 0x0627, 0x0644, 0x0647 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_096)
{
    // FDFC;FDFC;FDFC;0631 06CC 0627 0644;0631 06CC 0627 0644; 
    // (﷼; ﷼; ﷼; ریال; ریال; ) RIAL SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFDFC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x0631, 0x06CC, 0x0627, 0x0644 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_097)
{
    // FE10;FE10;FE10;002C;002C; 
    // (︐; ︐; ︐; ,; ,; ) PRESENTATION FORM FOR VERTICAL COMMA
    {
        std::array<uint32_t, 1> const source = {{ 0xFE10 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_098)
{
    // FE11;FE11;FE11;3001;3001; 
    // (︑; ︑; ︑; 、; 、; ) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA
    {
        std::array<uint32_t, 1> const source = {{ 0xFE11 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3001 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_099)
{
    // FE12;FE12;FE12;3002;3002; 
    // (︒; ︒; ︒; 。; 。; ) PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP
    {
        std::array<uint32_t, 1> const source = {{ 0xFE12 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3002 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_100)
{
    // FE13;FE13;FE13;003A;003A; 
    // (︓; ︓; ︓; :; :; ) PRESENTATION FORM FOR VERTICAL COLON
    {
        std::array<uint32_t, 1> const source = {{ 0xFE13 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_101)
{
    // FE14;FE14;FE14;003B;003B; 
    // (︔; ︔; ︔; ;; ;; ) PRESENTATION FORM FOR VERTICAL SEMICOLON
    {
        std::array<uint32_t, 1> const source = {{ 0xFE14 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_102)
{
    // FE15;FE15;FE15;0021;0021; 
    // (︕; ︕; ︕; !; !; ) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK
    {
        std::array<uint32_t, 1> const source = {{ 0xFE15 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0021 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_103)
{
    // FE16;FE16;FE16;003F;003F; 
    // (︖; ︖; ︖; ?; ?; ) PRESENTATION FORM FOR VERTICAL QUESTION MARK
    {
        std::array<uint32_t, 1> const source = {{ 0xFE16 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_104)
{
    // FE17;FE17;FE17;3016;3016; 
    // (︗; ︗; ︗; 〖; 〖; ) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE17 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3016 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_105)
{
    // FE18;FE18;FE18;3017;3017; 
    // (︘; ︘; ︘; 〗; 〗; ) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE18 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3017 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_106)
{
    // FE19;FE19;FE19;002E 002E 002E;002E 002E 002E; 
    // (︙; ︙; ︙; ...; ...; ) PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE19 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x002E, 0x002E, 0x002E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_107)
{
    // FE30;FE30;FE30;002E 002E;002E 002E; 
    // (︰; ︰; ︰; ..; ..; ) PRESENTATION FORM FOR VERTICAL TWO DOT LEADER
    {
        std::array<uint32_t, 1> const source = {{ 0xFE30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x002E, 0x002E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_108)
{
    // FE31;FE31;FE31;2014;2014; 
    // (︱; ︱; ︱; —; —; ) PRESENTATION FORM FOR VERTICAL EM DASH
    {
        std::array<uint32_t, 1> const source = {{ 0xFE31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2014 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_109)
{
    // FE32;FE32;FE32;2013;2013; 
    // (︲; ︲; ︲; –; –; ) PRESENTATION FORM FOR VERTICAL EN DASH
    {
        std::array<uint32_t, 1> const source = {{ 0xFE32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2013 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_110)
{
    // FE33;FE33;FE33;005F;005F; 
    // (︳; ︳; ︳; _; _; ) PRESENTATION FORM FOR VERTICAL LOW LINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_111)
{
    // FE34;FE34;FE34;005F;005F; 
    // (︴; ︴; ︴; _; _; ) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_112)
{
    // FE35;FE35;FE35;0028;0028; 
    // (︵; ︵; ︵; (; (; ) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0028 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_113)
{
    // FE36;FE36;FE36;0029;0029; 
    // (︶; ︶; ︶; ); ); ) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0029 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_114)
{
    // FE37;FE37;FE37;007B;007B; 
    // (︷; ︷; ︷; {; {; ) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x007B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_115)
{
    // FE38;FE38;FE38;007D;007D; 
    // (︸; ︸; ︸; }; }; ) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x007D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_116)
{
    // FE39;FE39;FE39;3014;3014; 
    // (︹; ︹; ︹; 〔; 〔; ) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3014 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_117)
{
    // FE3A;FE3A;FE3A;3015;3015; 
    // (︺; ︺; ︺; 〕; 〕; ) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3015 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_118)
{
    // FE3B;FE3B;FE3B;3010;3010; 
    // (︻; ︻; ︻; 【; 【; ) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3010 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_119)
{
    // FE3C;FE3C;FE3C;3011;3011; 
    // (︼; ︼; ︼; 】; 】; ) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3011 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_120)
{
    // FE3D;FE3D;FE3D;300A;300A; 
    // (︽; ︽; ︽; 《; 《; ) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_121)
{
    // FE3E;FE3E;FE3E;300B;300B; 
    // (︾; ︾; ︾; 》; 》; ) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_122)
{
    // FE3F;FE3F;FE3F;3008;3008; 
    // (︿; ︿; ︿; 〈; 〈; ) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3008 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_123)
{
    // FE40;FE40;FE40;3009;3009; 
    // (﹀; ﹀; ﹀; 〉; 〉; ) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3009 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_124)
{
    // FE41;FE41;FE41;300C;300C; 
    // (﹁; ﹁; ﹁; 「; 「; ) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_125)
{
    // FE42;FE42;FE42;300D;300D; 
    // (﹂; ﹂; ﹂; 」; 」; ) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_126)
{
    // FE43;FE43;FE43;300E;300E; 
    // (﹃; ﹃; ﹃; 『; 『; ) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_127)
{
    // FE44;FE44;FE44;300F;300F; 
    // (﹄; ﹄; ﹄; 』; 』; ) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x300F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_128)
{
    // FE47;FE47;FE47;005B;005B; 
    // (﹇; ﹇; ﹇; [; [; ) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_129)
{
    // FE48;FE48;FE48;005D;005D; 
    // (﹈; ﹈; ﹈; ]; ]; ) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_130)
{
    // FE49;FE49;FE49;0020 0305;0020 0305; 
    // (﹉; ﹉; ﹉;  ◌̅;  ◌̅; ) DASHED OVERLINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0305 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_131)
{
    // FE4A;FE4A;FE4A;0020 0305;0020 0305; 
    // (﹊; ﹊; ﹊;  ◌̅;  ◌̅; ) CENTRELINE OVERLINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0305 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_132)
{
    // FE4B;FE4B;FE4B;0020 0305;0020 0305; 
    // (﹋; ﹋; ﹋;  ◌̅;  ◌̅; ) WAVY OVERLINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0305 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_133)
{
    // FE4C;FE4C;FE4C;0020 0305;0020 0305; 
    // (﹌; ﹌; ﹌;  ◌̅;  ◌̅; ) DOUBLE WAVY OVERLINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0305 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_134)
{
    // FE4D;FE4D;FE4D;005F;005F; 
    // (﹍; ﹍; ﹍; _; _; ) DASHED LOW LINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_135)
{
    // FE4E;FE4E;FE4E;005F;005F; 
    // (﹎; ﹎; ﹎; _; _; ) CENTRELINE LOW LINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_136)
{
    // FE4F;FE4F;FE4F;005F;005F; 
    // (﹏; ﹏; ﹏; _; _; ) WAVY LOW LINE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_137)
{
    // FE50;FE50;FE50;002C;002C; 
    // (﹐; ﹐; ﹐; ,; ,; ) SMALL COMMA
    {
        std::array<uint32_t, 1> const source = {{ 0xFE50 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_138)
{
    // FE51;FE51;FE51;3001;3001; 
    // (﹑; ﹑; ﹑; 、; 、; ) SMALL IDEOGRAPHIC COMMA
    {
        std::array<uint32_t, 1> const source = {{ 0xFE51 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3001 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_139)
{
    // FE52;FE52;FE52;002E;002E; 
    // (﹒; ﹒; ﹒; .; .; ) SMALL FULL STOP
    {
        std::array<uint32_t, 1> const source = {{ 0xFE52 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_140)
{
    // FE54;FE54;FE54;003B;003B; 
    // (﹔; ﹔; ﹔; ;; ;; ) SMALL SEMICOLON
    {
        std::array<uint32_t, 1> const source = {{ 0xFE54 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_141)
{
    // FE55;FE55;FE55;003A;003A; 
    // (﹕; ﹕; ﹕; :; :; ) SMALL COLON
    {
        std::array<uint32_t, 1> const source = {{ 0xFE55 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_142)
{
    // FE56;FE56;FE56;003F;003F; 
    // (﹖; ﹖; ﹖; ?; ?; ) SMALL QUESTION MARK
    {
        std::array<uint32_t, 1> const source = {{ 0xFE56 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_143)
{
    // FE57;FE57;FE57;0021;0021; 
    // (﹗; ﹗; ﹗; !; !; ) SMALL EXCLAMATION MARK
    {
        std::array<uint32_t, 1> const source = {{ 0xFE57 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0021 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_144)
{
    // FE58;FE58;FE58;2014;2014; 
    // (﹘; ﹘; ﹘; —; —; ) SMALL EM DASH
    {
        std::array<uint32_t, 1> const source = {{ 0xFE58 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2014 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_145)
{
    // FE59;FE59;FE59;0028;0028; 
    // (﹙; ﹙; ﹙; (; (; ) SMALL LEFT PARENTHESIS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE59 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0028 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_146)
{
    // FE5A;FE5A;FE5A;0029;0029; 
    // (﹚; ﹚; ﹚; ); ); ) SMALL RIGHT PARENTHESIS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0029 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_147)
{
    // FE5B;FE5B;FE5B;007B;007B; 
    // (﹛; ﹛; ﹛; {; {; ) SMALL LEFT CURLY BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x007B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_148)
{
    // FE5C;FE5C;FE5C;007D;007D; 
    // (﹜; ﹜; ﹜; }; }; ) SMALL RIGHT CURLY BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x007D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_149)
{
    // FE5D;FE5D;FE5D;3014;3014; 
    // (﹝; ﹝; ﹝; 〔; 〔; ) SMALL LEFT TORTOISE SHELL BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3014 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_150)
{
    // FE5E;FE5E;FE5E;3015;3015; 
    // (﹞; ﹞; ﹞; 〕; 〕; ) SMALL RIGHT TORTOISE SHELL BRACKET
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3015 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_151)
{
    // FE5F;FE5F;FE5F;0023;0023; 
    // (﹟; ﹟; ﹟; #; #; ) SMALL NUMBER SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE5F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0023 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_152)
{
    // FE60;FE60;FE60;0026;0026; 
    // (﹠; ﹠; ﹠; &; &; ) SMALL AMPERSAND
    {
        std::array<uint32_t, 1> const source = {{ 0xFE60 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0026 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_153)
{
    // FE61;FE61;FE61;002A;002A; 
    // (﹡; ﹡; ﹡; *; *; ) SMALL ASTERISK
    {
        std::array<uint32_t, 1> const source = {{ 0xFE61 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_154)
{
    // FE62;FE62;FE62;002B;002B; 
    // (﹢; ﹢; ﹢; +; +; ) SMALL PLUS SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE62 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_155)
{
    // FE63;FE63;FE63;002D;002D; 
    // (﹣; ﹣; ﹣; -; -; ) SMALL HYPHEN-MINUS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE63 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x002D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_156)
{
    // FE64;FE64;FE64;003C;003C; 
    // (﹤; ﹤; ﹤; <; <; ) SMALL LESS-THAN SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE64 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_157)
{
    // FE65;FE65;FE65;003E;003E; 
    // (﹥; ﹥; ﹥; >; >; ) SMALL GREATER-THAN SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE65 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_158)
{
    // FE66;FE66;FE66;003D;003D; 
    // (﹦; ﹦; ﹦; =; =; ) SMALL EQUALS SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE66 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x003D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_159)
{
    // FE68;FE68;FE68;005C;005C; 
    // (﹨; ﹨; ﹨; \; \; ) SMALL REVERSE SOLIDUS
    {
        std::array<uint32_t, 1> const source = {{ 0xFE68 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x005C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_160)
{
    // FE69;FE69;FE69;0024;0024; 
    // (﹩; ﹩; ﹩; $; $; ) SMALL DOLLAR SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE69 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0024 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_161)
{
    // FE6A;FE6A;FE6A;0025;0025; 
    // (﹪; ﹪; ﹪; %; %; ) SMALL PERCENT SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0xFE6A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0025 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_162)
{
    // FE6B;FE6B;FE6B;0040;0040; 
    // (﹫; ﹫; ﹫; @; @; ) SMALL COMMERCIAL AT
    {
        std::array<uint32_t, 1> const source = {{ 0xFE6B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0040 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_163)
{
    // FE70;FE70;FE70;0020 064B;0020 064B; 
    // (ﹰ; ﹰ; ﹰ;  ◌ً;  ◌ً; ) ARABIC FATHATAN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE70 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x064B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_164)
{
    // FE71;FE71;FE71;0640 064B;0640 064B; 
    // (ﹱ; ﹱ; ﹱ; ـ◌ً; ـ◌ً; ) ARABIC TATWEEL WITH FATHATAN ABOVE
    {
        std::array<uint32_t, 1> const source = {{ 0xFE71 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x064B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_165)
{
    // FE72;FE72;FE72;0020 064C;0020 064C; 
    // (ﹲ; ﹲ; ﹲ;  ◌ٌ;  ◌ٌ; ) ARABIC DAMMATAN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x064C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_166)
{
    // FE74;FE74;FE74;0020 064D;0020 064D; 
    // (ﹴ; ﹴ; ﹴ;  ◌ٍ;  ◌ٍ; ) ARABIC KASRATAN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x064D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_167)
{
    // FE76;FE76;FE76;0020 064E;0020 064E; 
    // (ﹶ; ﹶ; ﹶ;  ◌َ;  ◌َ; ) ARABIC FATHA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x064E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_168)
{
    // FE77;FE77;FE77;0640 064E;0640 064E; 
    // (ﹷ; ﹷ; ﹷ; ـ◌َ; ـ◌َ; ) ARABIC FATHA MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x064E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_169)
{
    // FE78;FE78;FE78;0020 064F;0020 064F; 
    // (ﹸ; ﹸ; ﹸ;  ◌ُ;  ◌ُ; ) ARABIC DAMMA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x064F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_170)
{
    // FE79;FE79;FE79;0640 064F;0640 064F; 
    // (ﹹ; ﹹ; ﹹ; ـ◌ُ; ـ◌ُ; ) ARABIC DAMMA MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x064F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_171)
{
    // FE7A;FE7A;FE7A;0020 0650;0020 0650; 
    // (ﹺ; ﹺ; ﹺ;  ◌ِ;  ◌ِ; ) ARABIC KASRA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0650 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_172)
{
    // FE7B;FE7B;FE7B;0640 0650;0640 0650; 
    // (ﹻ; ﹻ; ﹻ; ـ◌ِ; ـ◌ِ; ) ARABIC KASRA MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x0650 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_173)
{
    // FE7C;FE7C;FE7C;0020 0651;0020 0651; 
    // (ﹼ; ﹼ; ﹼ;  ◌ّ;  ◌ّ; ) ARABIC SHADDA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0651 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_174)
{
    // FE7D;FE7D;FE7D;0640 0651;0640 0651; 
    // (ﹽ; ﹽ; ﹽ; ـ◌ّ; ـ◌ّ; ) ARABIC SHADDA MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x0651 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_175)
{
    // FE7E;FE7E;FE7E;0020 0652;0020 0652; 
    // (ﹾ; ﹾ; ﹾ;  ◌ْ;  ◌ْ; ) ARABIC SUKUN ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0020, 0x0652 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_176)
{
    // FE7F;FE7F;FE7F;0640 0652;0640 0652; 
    // (ﹿ; ﹿ; ﹿ; ـ◌ْ; ـ◌ْ; ) ARABIC SUKUN MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0640, 0x0652 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_177)
{
    // FE80;FE80;FE80;0621;0621; 
    // (ﺀ; ﺀ; ﺀ; ء; ء; ) ARABIC LETTER HAMZA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0621 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_178)
{
    // FE81;FE81;FE81;0622;0627 0653; 
    // (ﺁ; ﺁ; ﺁ; آ; ا◌ٓ; ) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0622 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_179)
{
    // FE82;FE82;FE82;0622;0627 0653; 
    // (ﺂ; ﺂ; ﺂ; آ; ا◌ٓ; ) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0622 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_180)
{
    // FE83;FE83;FE83;0623;0627 0654; 
    // (ﺃ; ﺃ; ﺃ; أ; ا◌ٔ; ) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0623 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_181)
{
    // FE84;FE84;FE84;0623;0627 0654; 
    // (ﺄ; ﺄ; ﺄ; أ; ا◌ٔ; ) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0623 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_182)
{
    // FE85;FE85;FE85;0624;0648 0654; 
    // (ﺅ; ﺅ; ﺅ; ؤ; و◌ٔ; ) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0624 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_183)
{
    // FE86;FE86;FE86;0624;0648 0654; 
    // (ﺆ; ﺆ; ﺆ; ؤ; و◌ٔ; ) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0624 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_184)
{
    // FE87;FE87;FE87;0625;0627 0655; 
    // (ﺇ; ﺇ; ﺇ; إ; ا◌ٕ; ) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0625 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_185)
{
    // FE88;FE88;FE88;0625;0627 0655; 
    // (ﺈ; ﺈ; ﺈ; إ; ا◌ٕ; ) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0625 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_186)
{
    // FE89;FE89;FE89;0626;064A 0654; 
    // (ﺉ; ﺉ; ﺉ; ئ; ي◌ٔ; ) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0626 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_187)
{
    // FE8A;FE8A;FE8A;0626;064A 0654; 
    // (ﺊ; ﺊ; ﺊ; ئ; ي◌ٔ; ) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0626 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_188)
{
    // FE8B;FE8B;FE8B;0626;064A 0654; 
    // (ﺋ; ﺋ; ﺋ; ئ; ي◌ٔ; ) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0626 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_189)
{
    // FE8C;FE8C;FE8C;0626;064A 0654; 
    // (ﺌ; ﺌ; ﺌ; ئ; ي◌ٔ; ) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0626 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_190)
{
    // FE8D;FE8D;FE8D;0627;0627; 
    // (ﺍ; ﺍ; ﺍ; ا; ا; ) ARABIC LETTER ALEF ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0627 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_191)
{
    // FE8E;FE8E;FE8E;0627;0627; 
    // (ﺎ; ﺎ; ﺎ; ا; ا; ) ARABIC LETTER ALEF FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0627 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_192)
{
    // FE8F;FE8F;FE8F;0628;0628; 
    // (ﺏ; ﺏ; ﺏ; ب; ب; ) ARABIC LETTER BEH ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0628 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_193)
{
    // FE90;FE90;FE90;0628;0628; 
    // (ﺐ; ﺐ; ﺐ; ب; ب; ) ARABIC LETTER BEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE90 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0628 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_194)
{
    // FE91;FE91;FE91;0628;0628; 
    // (ﺑ; ﺑ; ﺑ; ب; ب; ) ARABIC LETTER BEH INITIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE91 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0628 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_195)
{
    // FE92;FE92;FE92;0628;0628; 
    // (ﺒ; ﺒ; ﺒ; ب; ب; ) ARABIC LETTER BEH MEDIAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0628 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_196)
{
    // FE93;FE93;FE93;0629;0629; 
    // (ﺓ; ﺓ; ﺓ; ة; ة; ) ARABIC LETTER TEH MARBUTA ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0629 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_197)
{
    // FE94;FE94;FE94;0629;0629; 
    // (ﺔ; ﺔ; ﺔ; ة; ة; ) ARABIC LETTER TEH MARBUTA FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x0629 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_198)
{
    // FE95;FE95;FE95;062A;062A; 
    // (ﺕ; ﺕ; ﺕ; ت; ت; ) ARABIC LETTER TEH ISOLATED FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x062A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_073_199)
{
    // FE96;FE96;FE96;062A;062A; 
    // (ﺖ; ﺖ; ﺖ; ت; ت; ) ARABIC LETTER TEH FINAL FORM
    {
        std::array<uint32_t, 1> const source = {{ 0xFE96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x062A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


