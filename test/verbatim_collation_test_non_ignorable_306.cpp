// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_306_000)
{
    // 133B1 003F;	
    // (𓎱) EGYPTIAN HIEROGLYPH W003	[53FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B1, 0x003F };
    uint32_t const ces[9] = { 0x53FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_001)
{
    // 133B1 0061;	
    // (𓎱) EGYPTIAN HIEROGLYPH W003	[53FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B1, 0x0061 };
    uint32_t const ces[9] = { 0x53FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_002)
{
    // 133B1 0041;	
    // (𓎱) EGYPTIAN HIEROGLYPH W003	[53FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B1, 0x0041 };
    uint32_t const ces[9] = { 0x53FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_003)
{
    // 133B1 0062;	
    // (𓎱) EGYPTIAN HIEROGLYPH W003	[53FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B1, 0x0062 };
    uint32_t const ces[9] = { 0x53FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_004)
{
    // 133B2 0021;	
    // (𓎲) EGYPTIAN HIEROGLYPH W003A	[53FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B2, 0x0021 };
    uint32_t const ces[9] = { 0x53FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_005)
{
    // 133B2 003F;	
    // (𓎲) EGYPTIAN HIEROGLYPH W003A	[53FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B2, 0x003F };
    uint32_t const ces[9] = { 0x53FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_006)
{
    // 133B2 0061;	
    // (𓎲) EGYPTIAN HIEROGLYPH W003A	[53FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B2, 0x0061 };
    uint32_t const ces[9] = { 0x53FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_007)
{
    // 133B2 0041;	
    // (𓎲) EGYPTIAN HIEROGLYPH W003A	[53FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B2, 0x0041 };
    uint32_t const ces[9] = { 0x53FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_008)
{
    // 133B2 0062;	
    // (𓎲) EGYPTIAN HIEROGLYPH W003A	[53FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B2, 0x0062 };
    uint32_t const ces[9] = { 0x53FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_009)
{
    // 133B3 0021;	
    // (𓎳) EGYPTIAN HIEROGLYPH W004	[53FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B3, 0x0021 };
    uint32_t const ces[9] = { 0x53FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_010)
{
    // 133B3 003F;	
    // (𓎳) EGYPTIAN HIEROGLYPH W004	[53FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B3, 0x003F };
    uint32_t const ces[9] = { 0x53FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_011)
{
    // 133B3 0061;	
    // (𓎳) EGYPTIAN HIEROGLYPH W004	[53FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B3, 0x0061 };
    uint32_t const ces[9] = { 0x53FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_012)
{
    // 133B3 0041;	
    // (𓎳) EGYPTIAN HIEROGLYPH W004	[53FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B3, 0x0041 };
    uint32_t const ces[9] = { 0x53FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_013)
{
    // 133B3 0062;	
    // (𓎳) EGYPTIAN HIEROGLYPH W004	[53FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B3, 0x0062 };
    uint32_t const ces[9] = { 0x53FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_014)
{
    // 133B4 0021;	
    // (𓎴) EGYPTIAN HIEROGLYPH W005	[53FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B4, 0x0021 };
    uint32_t const ces[9] = { 0x53FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_015)
{
    // 133B4 003F;	
    // (𓎴) EGYPTIAN HIEROGLYPH W005	[53FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B4, 0x003F };
    uint32_t const ces[9] = { 0x53FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_016)
{
    // 133B4 0061;	
    // (𓎴) EGYPTIAN HIEROGLYPH W005	[53FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B4, 0x0061 };
    uint32_t const ces[9] = { 0x53FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_017)
{
    // 133B4 0041;	
    // (𓎴) EGYPTIAN HIEROGLYPH W005	[53FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B4, 0x0041 };
    uint32_t const ces[9] = { 0x53FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_018)
{
    // 133B4 0062;	
    // (𓎴) EGYPTIAN HIEROGLYPH W005	[53FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B4, 0x0062 };
    uint32_t const ces[9] = { 0x53FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_019)
{
    // 133B5 0021;	
    // (𓎵) EGYPTIAN HIEROGLYPH W006	[53FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B5, 0x0021 };
    uint32_t const ces[9] = { 0x53FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_020)
{
    // 133B5 003F;	
    // (𓎵) EGYPTIAN HIEROGLYPH W006	[53FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B5, 0x003F };
    uint32_t const ces[9] = { 0x53FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_021)
{
    // 133B5 0061;	
    // (𓎵) EGYPTIAN HIEROGLYPH W006	[53FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B5, 0x0061 };
    uint32_t const ces[9] = { 0x53FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_022)
{
    // 133B5 0041;	
    // (𓎵) EGYPTIAN HIEROGLYPH W006	[53FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B5, 0x0041 };
    uint32_t const ces[9] = { 0x53FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_023)
{
    // 133B5 0062;	
    // (𓎵) EGYPTIAN HIEROGLYPH W006	[53FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B5, 0x0062 };
    uint32_t const ces[9] = { 0x53FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_024)
{
    // 133B6 0021;	
    // (𓎶) EGYPTIAN HIEROGLYPH W007	[5400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B6, 0x0021 };
    uint32_t const ces[9] = { 0x5400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_025)
{
    // 133B6 003F;	
    // (𓎶) EGYPTIAN HIEROGLYPH W007	[5400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B6, 0x003F };
    uint32_t const ces[9] = { 0x5400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_026)
{
    // 133B6 0061;	
    // (𓎶) EGYPTIAN HIEROGLYPH W007	[5400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B6, 0x0061 };
    uint32_t const ces[9] = { 0x5400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_027)
{
    // 133B6 0041;	
    // (𓎶) EGYPTIAN HIEROGLYPH W007	[5400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B6, 0x0041 };
    uint32_t const ces[9] = { 0x5400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_028)
{
    // 133B6 0062;	
    // (𓎶) EGYPTIAN HIEROGLYPH W007	[5400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B6, 0x0062 };
    uint32_t const ces[9] = { 0x5400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_029)
{
    // 133B7 0021;	
    // (𓎷) EGYPTIAN HIEROGLYPH W008	[5401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B7, 0x0021 };
    uint32_t const ces[9] = { 0x5401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_030)
{
    // 133B7 003F;	
    // (𓎷) EGYPTIAN HIEROGLYPH W008	[5401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B7, 0x003F };
    uint32_t const ces[9] = { 0x5401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_031)
{
    // 133B7 0061;	
    // (𓎷) EGYPTIAN HIEROGLYPH W008	[5401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B7, 0x0061 };
    uint32_t const ces[9] = { 0x5401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_032)
{
    // 133B7 0041;	
    // (𓎷) EGYPTIAN HIEROGLYPH W008	[5401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B7, 0x0041 };
    uint32_t const ces[9] = { 0x5401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_033)
{
    // 133B7 0062;	
    // (𓎷) EGYPTIAN HIEROGLYPH W008	[5401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B7, 0x0062 };
    uint32_t const ces[9] = { 0x5401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_034)
{
    // 133B8 0021;	
    // (𓎸) EGYPTIAN HIEROGLYPH W009	[5402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B8, 0x0021 };
    uint32_t const ces[9] = { 0x5402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_035)
{
    // 133B8 003F;	
    // (𓎸) EGYPTIAN HIEROGLYPH W009	[5402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B8, 0x003F };
    uint32_t const ces[9] = { 0x5402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_036)
{
    // 133B8 0061;	
    // (𓎸) EGYPTIAN HIEROGLYPH W009	[5402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B8, 0x0061 };
    uint32_t const ces[9] = { 0x5402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_037)
{
    // 133B8 0041;	
    // (𓎸) EGYPTIAN HIEROGLYPH W009	[5402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B8, 0x0041 };
    uint32_t const ces[9] = { 0x5402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_038)
{
    // 133B8 0062;	
    // (𓎸) EGYPTIAN HIEROGLYPH W009	[5402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B8, 0x0062 };
    uint32_t const ces[9] = { 0x5402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_039)
{
    // 133B9 0021;	
    // (𓎹) EGYPTIAN HIEROGLYPH W009A	[5403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B9, 0x0021 };
    uint32_t const ces[9] = { 0x5403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_040)
{
    // 133B9 003F;	
    // (𓎹) EGYPTIAN HIEROGLYPH W009A	[5403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B9, 0x003F };
    uint32_t const ces[9] = { 0x5403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_041)
{
    // 133B9 0061;	
    // (𓎹) EGYPTIAN HIEROGLYPH W009A	[5403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B9, 0x0061 };
    uint32_t const ces[9] = { 0x5403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_042)
{
    // 133B9 0041;	
    // (𓎹) EGYPTIAN HIEROGLYPH W009A	[5403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133B9, 0x0041 };
    uint32_t const ces[9] = { 0x5403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_043)
{
    // 133B9 0062;	
    // (𓎹) EGYPTIAN HIEROGLYPH W009A	[5403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133B9, 0x0062 };
    uint32_t const ces[9] = { 0x5403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_044)
{
    // 133BA 0021;	
    // (𓎺) EGYPTIAN HIEROGLYPH W010	[5404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BA, 0x0021 };
    uint32_t const ces[9] = { 0x5404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_045)
{
    // 133BA 003F;	
    // (𓎺) EGYPTIAN HIEROGLYPH W010	[5404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BA, 0x003F };
    uint32_t const ces[9] = { 0x5404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_046)
{
    // 133BA 0061;	
    // (𓎺) EGYPTIAN HIEROGLYPH W010	[5404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BA, 0x0061 };
    uint32_t const ces[9] = { 0x5404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_047)
{
    // 133BA 0041;	
    // (𓎺) EGYPTIAN HIEROGLYPH W010	[5404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BA, 0x0041 };
    uint32_t const ces[9] = { 0x5404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_048)
{
    // 133BA 0062;	
    // (𓎺) EGYPTIAN HIEROGLYPH W010	[5404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BA, 0x0062 };
    uint32_t const ces[9] = { 0x5404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_049)
{
    // 133BB 0021;	
    // (𓎻) EGYPTIAN HIEROGLYPH W010A	[5405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BB, 0x0021 };
    uint32_t const ces[9] = { 0x5405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_050)
{
    // 133BB 003F;	
    // (𓎻) EGYPTIAN HIEROGLYPH W010A	[5405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BB, 0x003F };
    uint32_t const ces[9] = { 0x5405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_051)
{
    // 133BB 0061;	
    // (𓎻) EGYPTIAN HIEROGLYPH W010A	[5405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BB, 0x0061 };
    uint32_t const ces[9] = { 0x5405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_052)
{
    // 133BB 0041;	
    // (𓎻) EGYPTIAN HIEROGLYPH W010A	[5405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BB, 0x0041 };
    uint32_t const ces[9] = { 0x5405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_053)
{
    // 133BB 0062;	
    // (𓎻) EGYPTIAN HIEROGLYPH W010A	[5405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BB, 0x0062 };
    uint32_t const ces[9] = { 0x5405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_054)
{
    // 133BC 0021;	
    // (𓎼) EGYPTIAN HIEROGLYPH W011	[5406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BC, 0x0021 };
    uint32_t const ces[9] = { 0x5406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_055)
{
    // 133BC 003F;	
    // (𓎼) EGYPTIAN HIEROGLYPH W011	[5406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BC, 0x003F };
    uint32_t const ces[9] = { 0x5406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_056)
{
    // 133BC 0061;	
    // (𓎼) EGYPTIAN HIEROGLYPH W011	[5406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BC, 0x0061 };
    uint32_t const ces[9] = { 0x5406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_057)
{
    // 133BC 0041;	
    // (𓎼) EGYPTIAN HIEROGLYPH W011	[5406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BC, 0x0041 };
    uint32_t const ces[9] = { 0x5406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_058)
{
    // 133BC 0062;	
    // (𓎼) EGYPTIAN HIEROGLYPH W011	[5406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BC, 0x0062 };
    uint32_t const ces[9] = { 0x5406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_059)
{
    // 133BD 0021;	
    // (𓎽) EGYPTIAN HIEROGLYPH W012	[5407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BD, 0x0021 };
    uint32_t const ces[9] = { 0x5407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_060)
{
    // 133BD 003F;	
    // (𓎽) EGYPTIAN HIEROGLYPH W012	[5407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BD, 0x003F };
    uint32_t const ces[9] = { 0x5407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_061)
{
    // 133BD 0061;	
    // (𓎽) EGYPTIAN HIEROGLYPH W012	[5407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BD, 0x0061 };
    uint32_t const ces[9] = { 0x5407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_062)
{
    // 133BD 0041;	
    // (𓎽) EGYPTIAN HIEROGLYPH W012	[5407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BD, 0x0041 };
    uint32_t const ces[9] = { 0x5407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_063)
{
    // 133BD 0062;	
    // (𓎽) EGYPTIAN HIEROGLYPH W012	[5407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BD, 0x0062 };
    uint32_t const ces[9] = { 0x5407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_064)
{
    // 133BE 0021;	
    // (𓎾) EGYPTIAN HIEROGLYPH W013	[5408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BE, 0x0021 };
    uint32_t const ces[9] = { 0x5408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_065)
{
    // 133BE 003F;	
    // (𓎾) EGYPTIAN HIEROGLYPH W013	[5408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BE, 0x003F };
    uint32_t const ces[9] = { 0x5408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_066)
{
    // 133BE 0061;	
    // (𓎾) EGYPTIAN HIEROGLYPH W013	[5408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BE, 0x0061 };
    uint32_t const ces[9] = { 0x5408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_067)
{
    // 133BE 0041;	
    // (𓎾) EGYPTIAN HIEROGLYPH W013	[5408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BE, 0x0041 };
    uint32_t const ces[9] = { 0x5408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_068)
{
    // 133BE 0062;	
    // (𓎾) EGYPTIAN HIEROGLYPH W013	[5408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BE, 0x0062 };
    uint32_t const ces[9] = { 0x5408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_069)
{
    // 133BF 0021;	
    // (𓎿) EGYPTIAN HIEROGLYPH W014	[5409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BF, 0x0021 };
    uint32_t const ces[9] = { 0x5409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_070)
{
    // 133BF 003F;	
    // (𓎿) EGYPTIAN HIEROGLYPH W014	[5409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BF, 0x003F };
    uint32_t const ces[9] = { 0x5409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_071)
{
    // 133BF 0061;	
    // (𓎿) EGYPTIAN HIEROGLYPH W014	[5409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BF, 0x0061 };
    uint32_t const ces[9] = { 0x5409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_072)
{
    // 133BF 0041;	
    // (𓎿) EGYPTIAN HIEROGLYPH W014	[5409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133BF, 0x0041 };
    uint32_t const ces[9] = { 0x5409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_073)
{
    // 133BF 0062;	
    // (𓎿) EGYPTIAN HIEROGLYPH W014	[5409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133BF, 0x0062 };
    uint32_t const ces[9] = { 0x5409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_074)
{
    // 133C0 0021;	
    // (𓏀) EGYPTIAN HIEROGLYPH W014A	[540A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C0, 0x0021 };
    uint32_t const ces[9] = { 0x540A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_075)
{
    // 133C0 003F;	
    // (𓏀) EGYPTIAN HIEROGLYPH W014A	[540A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C0, 0x003F };
    uint32_t const ces[9] = { 0x540A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_076)
{
    // 133C0 0061;	
    // (𓏀) EGYPTIAN HIEROGLYPH W014A	[540A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C0, 0x0061 };
    uint32_t const ces[9] = { 0x540A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_077)
{
    // 133C0 0041;	
    // (𓏀) EGYPTIAN HIEROGLYPH W014A	[540A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C0, 0x0041 };
    uint32_t const ces[9] = { 0x540A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_078)
{
    // 133C0 0062;	
    // (𓏀) EGYPTIAN HIEROGLYPH W014A	[540A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C0, 0x0062 };
    uint32_t const ces[9] = { 0x540A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_079)
{
    // 133C1 0021;	
    // (𓏁) EGYPTIAN HIEROGLYPH W015	[540B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C1, 0x0021 };
    uint32_t const ces[9] = { 0x540B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_080)
{
    // 133C1 003F;	
    // (𓏁) EGYPTIAN HIEROGLYPH W015	[540B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C1, 0x003F };
    uint32_t const ces[9] = { 0x540B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_081)
{
    // 133C1 0061;	
    // (𓏁) EGYPTIAN HIEROGLYPH W015	[540B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C1, 0x0061 };
    uint32_t const ces[9] = { 0x540B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_082)
{
    // 133C1 0041;	
    // (𓏁) EGYPTIAN HIEROGLYPH W015	[540B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C1, 0x0041 };
    uint32_t const ces[9] = { 0x540B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_083)
{
    // 133C1 0062;	
    // (𓏁) EGYPTIAN HIEROGLYPH W015	[540B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C1, 0x0062 };
    uint32_t const ces[9] = { 0x540B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_084)
{
    // 133C2 0021;	
    // (𓏂) EGYPTIAN HIEROGLYPH W016	[540C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C2, 0x0021 };
    uint32_t const ces[9] = { 0x540C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_085)
{
    // 133C2 003F;	
    // (𓏂) EGYPTIAN HIEROGLYPH W016	[540C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C2, 0x003F };
    uint32_t const ces[9] = { 0x540C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_086)
{
    // 133C2 0061;	
    // (𓏂) EGYPTIAN HIEROGLYPH W016	[540C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C2, 0x0061 };
    uint32_t const ces[9] = { 0x540C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_087)
{
    // 133C2 0041;	
    // (𓏂) EGYPTIAN HIEROGLYPH W016	[540C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C2, 0x0041 };
    uint32_t const ces[9] = { 0x540C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_088)
{
    // 133C2 0062;	
    // (𓏂) EGYPTIAN HIEROGLYPH W016	[540C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C2, 0x0062 };
    uint32_t const ces[9] = { 0x540C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_089)
{
    // 133C3 0021;	
    // (𓏃) EGYPTIAN HIEROGLYPH W017	[540D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C3, 0x0021 };
    uint32_t const ces[9] = { 0x540D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_090)
{
    // 133C3 003F;	
    // (𓏃) EGYPTIAN HIEROGLYPH W017	[540D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C3, 0x003F };
    uint32_t const ces[9] = { 0x540D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_091)
{
    // 133C3 0061;	
    // (𓏃) EGYPTIAN HIEROGLYPH W017	[540D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C3, 0x0061 };
    uint32_t const ces[9] = { 0x540D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_092)
{
    // 133C3 0041;	
    // (𓏃) EGYPTIAN HIEROGLYPH W017	[540D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C3, 0x0041 };
    uint32_t const ces[9] = { 0x540D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_093)
{
    // 133C3 0062;	
    // (𓏃) EGYPTIAN HIEROGLYPH W017	[540D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C3, 0x0062 };
    uint32_t const ces[9] = { 0x540D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_094)
{
    // 133C4 0021;	
    // (𓏄) EGYPTIAN HIEROGLYPH W017A	[540E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C4, 0x0021 };
    uint32_t const ces[9] = { 0x540E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_095)
{
    // 133C4 003F;	
    // (𓏄) EGYPTIAN HIEROGLYPH W017A	[540E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C4, 0x003F };
    uint32_t const ces[9] = { 0x540E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_096)
{
    // 133C4 0061;	
    // (𓏄) EGYPTIAN HIEROGLYPH W017A	[540E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C4, 0x0061 };
    uint32_t const ces[9] = { 0x540E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_097)
{
    // 133C4 0041;	
    // (𓏄) EGYPTIAN HIEROGLYPH W017A	[540E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C4, 0x0041 };
    uint32_t const ces[9] = { 0x540E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_098)
{
    // 133C4 0062;	
    // (𓏄) EGYPTIAN HIEROGLYPH W017A	[540E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C4, 0x0062 };
    uint32_t const ces[9] = { 0x540E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_099)
{
    // 133C5 0021;	
    // (𓏅) EGYPTIAN HIEROGLYPH W018	[540F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C5, 0x0021 };
    uint32_t const ces[9] = { 0x540F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_100)
{
    // 133C5 003F;	
    // (𓏅) EGYPTIAN HIEROGLYPH W018	[540F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C5, 0x003F };
    uint32_t const ces[9] = { 0x540F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_101)
{
    // 133C5 0061;	
    // (𓏅) EGYPTIAN HIEROGLYPH W018	[540F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C5, 0x0061 };
    uint32_t const ces[9] = { 0x540F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_102)
{
    // 133C5 0041;	
    // (𓏅) EGYPTIAN HIEROGLYPH W018	[540F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C5, 0x0041 };
    uint32_t const ces[9] = { 0x540F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_103)
{
    // 133C5 0062;	
    // (𓏅) EGYPTIAN HIEROGLYPH W018	[540F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C5, 0x0062 };
    uint32_t const ces[9] = { 0x540F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_104)
{
    // 133C6 0021;	
    // (𓏆) EGYPTIAN HIEROGLYPH W018A	[5410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C6, 0x0021 };
    uint32_t const ces[9] = { 0x5410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_105)
{
    // 133C6 003F;	
    // (𓏆) EGYPTIAN HIEROGLYPH W018A	[5410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C6, 0x003F };
    uint32_t const ces[9] = { 0x5410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_106)
{
    // 133C6 0061;	
    // (𓏆) EGYPTIAN HIEROGLYPH W018A	[5410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C6, 0x0061 };
    uint32_t const ces[9] = { 0x5410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_107)
{
    // 133C6 0041;	
    // (𓏆) EGYPTIAN HIEROGLYPH W018A	[5410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C6, 0x0041 };
    uint32_t const ces[9] = { 0x5410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_108)
{
    // 133C6 0062;	
    // (𓏆) EGYPTIAN HIEROGLYPH W018A	[5410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C6, 0x0062 };
    uint32_t const ces[9] = { 0x5410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_109)
{
    // 133C7 0021;	
    // (𓏇) EGYPTIAN HIEROGLYPH W019	[5411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C7, 0x0021 };
    uint32_t const ces[9] = { 0x5411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_110)
{
    // 133C7 003F;	
    // (𓏇) EGYPTIAN HIEROGLYPH W019	[5411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C7, 0x003F };
    uint32_t const ces[9] = { 0x5411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_111)
{
    // 133C7 0061;	
    // (𓏇) EGYPTIAN HIEROGLYPH W019	[5411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C7, 0x0061 };
    uint32_t const ces[9] = { 0x5411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_112)
{
    // 133C7 0041;	
    // (𓏇) EGYPTIAN HIEROGLYPH W019	[5411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C7, 0x0041 };
    uint32_t const ces[9] = { 0x5411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_113)
{
    // 133C7 0062;	
    // (𓏇) EGYPTIAN HIEROGLYPH W019	[5411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C7, 0x0062 };
    uint32_t const ces[9] = { 0x5411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_114)
{
    // 133C8 0021;	
    // (𓏈) EGYPTIAN HIEROGLYPH W020	[5412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C8, 0x0021 };
    uint32_t const ces[9] = { 0x5412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_115)
{
    // 133C8 003F;	
    // (𓏈) EGYPTIAN HIEROGLYPH W020	[5412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C8, 0x003F };
    uint32_t const ces[9] = { 0x5412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_116)
{
    // 133C8 0061;	
    // (𓏈) EGYPTIAN HIEROGLYPH W020	[5412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C8, 0x0061 };
    uint32_t const ces[9] = { 0x5412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_117)
{
    // 133C8 0041;	
    // (𓏈) EGYPTIAN HIEROGLYPH W020	[5412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C8, 0x0041 };
    uint32_t const ces[9] = { 0x5412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_118)
{
    // 133C8 0062;	
    // (𓏈) EGYPTIAN HIEROGLYPH W020	[5412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C8, 0x0062 };
    uint32_t const ces[9] = { 0x5412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_119)
{
    // 133C9 0021;	
    // (𓏉) EGYPTIAN HIEROGLYPH W021	[5413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C9, 0x0021 };
    uint32_t const ces[9] = { 0x5413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_120)
{
    // 133C9 003F;	
    // (𓏉) EGYPTIAN HIEROGLYPH W021	[5413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C9, 0x003F };
    uint32_t const ces[9] = { 0x5413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_121)
{
    // 133C9 0061;	
    // (𓏉) EGYPTIAN HIEROGLYPH W021	[5413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C9, 0x0061 };
    uint32_t const ces[9] = { 0x5413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_122)
{
    // 133C9 0041;	
    // (𓏉) EGYPTIAN HIEROGLYPH W021	[5413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133C9, 0x0041 };
    uint32_t const ces[9] = { 0x5413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_123)
{
    // 133C9 0062;	
    // (𓏉) EGYPTIAN HIEROGLYPH W021	[5413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133C9, 0x0062 };
    uint32_t const ces[9] = { 0x5413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_124)
{
    // 133CA 0021;	
    // (𓏊) EGYPTIAN HIEROGLYPH W022	[5414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CA, 0x0021 };
    uint32_t const ces[9] = { 0x5414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_125)
{
    // 133CA 003F;	
    // (𓏊) EGYPTIAN HIEROGLYPH W022	[5414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CA, 0x003F };
    uint32_t const ces[9] = { 0x5414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_126)
{
    // 133CA 0061;	
    // (𓏊) EGYPTIAN HIEROGLYPH W022	[5414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CA, 0x0061 };
    uint32_t const ces[9] = { 0x5414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_127)
{
    // 133CA 0041;	
    // (𓏊) EGYPTIAN HIEROGLYPH W022	[5414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CA, 0x0041 };
    uint32_t const ces[9] = { 0x5414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_128)
{
    // 133CA 0062;	
    // (𓏊) EGYPTIAN HIEROGLYPH W022	[5414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CA, 0x0062 };
    uint32_t const ces[9] = { 0x5414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_129)
{
    // 133CB 0021;	
    // (𓏋) EGYPTIAN HIEROGLYPH W023	[5415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CB, 0x0021 };
    uint32_t const ces[9] = { 0x5415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_130)
{
    // 133CB 003F;	
    // (𓏋) EGYPTIAN HIEROGLYPH W023	[5415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CB, 0x003F };
    uint32_t const ces[9] = { 0x5415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_131)
{
    // 133CB 0061;	
    // (𓏋) EGYPTIAN HIEROGLYPH W023	[5415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CB, 0x0061 };
    uint32_t const ces[9] = { 0x5415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_132)
{
    // 133CB 0041;	
    // (𓏋) EGYPTIAN HIEROGLYPH W023	[5415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CB, 0x0041 };
    uint32_t const ces[9] = { 0x5415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_133)
{
    // 133CB 0062;	
    // (𓏋) EGYPTIAN HIEROGLYPH W023	[5415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CB, 0x0062 };
    uint32_t const ces[9] = { 0x5415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_134)
{
    // 133CC 0021;	
    // (𓏌) EGYPTIAN HIEROGLYPH W024	[5416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CC, 0x0021 };
    uint32_t const ces[9] = { 0x5416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_135)
{
    // 133CC 003F;	
    // (𓏌) EGYPTIAN HIEROGLYPH W024	[5416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CC, 0x003F };
    uint32_t const ces[9] = { 0x5416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_136)
{
    // 133CC 0061;	
    // (𓏌) EGYPTIAN HIEROGLYPH W024	[5416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CC, 0x0061 };
    uint32_t const ces[9] = { 0x5416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_137)
{
    // 133CC 0041;	
    // (𓏌) EGYPTIAN HIEROGLYPH W024	[5416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CC, 0x0041 };
    uint32_t const ces[9] = { 0x5416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_138)
{
    // 133CC 0062;	
    // (𓏌) EGYPTIAN HIEROGLYPH W024	[5416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CC, 0x0062 };
    uint32_t const ces[9] = { 0x5416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_139)
{
    // 133CD 0021;	
    // (𓏍) EGYPTIAN HIEROGLYPH W024A	[5417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CD, 0x0021 };
    uint32_t const ces[9] = { 0x5417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_140)
{
    // 133CD 003F;	
    // (𓏍) EGYPTIAN HIEROGLYPH W024A	[5417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CD, 0x003F };
    uint32_t const ces[9] = { 0x5417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_141)
{
    // 133CD 0061;	
    // (𓏍) EGYPTIAN HIEROGLYPH W024A	[5417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CD, 0x0061 };
    uint32_t const ces[9] = { 0x5417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_142)
{
    // 133CD 0041;	
    // (𓏍) EGYPTIAN HIEROGLYPH W024A	[5417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CD, 0x0041 };
    uint32_t const ces[9] = { 0x5417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_143)
{
    // 133CD 0062;	
    // (𓏍) EGYPTIAN HIEROGLYPH W024A	[5417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CD, 0x0062 };
    uint32_t const ces[9] = { 0x5417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_144)
{
    // 133CE 0021;	
    // (𓏎) EGYPTIAN HIEROGLYPH W025	[5418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CE, 0x0021 };
    uint32_t const ces[9] = { 0x5418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_145)
{
    // 133CE 003F;	
    // (𓏎) EGYPTIAN HIEROGLYPH W025	[5418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CE, 0x003F };
    uint32_t const ces[9] = { 0x5418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_146)
{
    // 133CE 0061;	
    // (𓏎) EGYPTIAN HIEROGLYPH W025	[5418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CE, 0x0061 };
    uint32_t const ces[9] = { 0x5418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_147)
{
    // 133CE 0041;	
    // (𓏎) EGYPTIAN HIEROGLYPH W025	[5418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CE, 0x0041 };
    uint32_t const ces[9] = { 0x5418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_148)
{
    // 133CE 0062;	
    // (𓏎) EGYPTIAN HIEROGLYPH W025	[5418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CE, 0x0062 };
    uint32_t const ces[9] = { 0x5418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_149)
{
    // 133CF 0021;	
    // (𓏏) EGYPTIAN HIEROGLYPH X001	[5419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CF, 0x0021 };
    uint32_t const ces[9] = { 0x5419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_150)
{
    // 133CF 003F;	
    // (𓏏) EGYPTIAN HIEROGLYPH X001	[5419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CF, 0x003F };
    uint32_t const ces[9] = { 0x5419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_151)
{
    // 133CF 0061;	
    // (𓏏) EGYPTIAN HIEROGLYPH X001	[5419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CF, 0x0061 };
    uint32_t const ces[9] = { 0x5419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_152)
{
    // 133CF 0041;	
    // (𓏏) EGYPTIAN HIEROGLYPH X001	[5419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133CF, 0x0041 };
    uint32_t const ces[9] = { 0x5419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_153)
{
    // 133CF 0062;	
    // (𓏏) EGYPTIAN HIEROGLYPH X001	[5419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133CF, 0x0062 };
    uint32_t const ces[9] = { 0x5419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_154)
{
    // 133D0 0021;	
    // (𓏐) EGYPTIAN HIEROGLYPH X002	[541A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D0, 0x0021 };
    uint32_t const ces[9] = { 0x541A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_155)
{
    // 133D0 003F;	
    // (𓏐) EGYPTIAN HIEROGLYPH X002	[541A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D0, 0x003F };
    uint32_t const ces[9] = { 0x541A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_156)
{
    // 133D0 0061;	
    // (𓏐) EGYPTIAN HIEROGLYPH X002	[541A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D0, 0x0061 };
    uint32_t const ces[9] = { 0x541A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_157)
{
    // 133D0 0041;	
    // (𓏐) EGYPTIAN HIEROGLYPH X002	[541A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D0, 0x0041 };
    uint32_t const ces[9] = { 0x541A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_158)
{
    // 133D0 0062;	
    // (𓏐) EGYPTIAN HIEROGLYPH X002	[541A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D0, 0x0062 };
    uint32_t const ces[9] = { 0x541A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_159)
{
    // 133D1 0021;	
    // (𓏑) EGYPTIAN HIEROGLYPH X003	[541B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D1, 0x0021 };
    uint32_t const ces[9] = { 0x541B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_160)
{
    // 133D1 003F;	
    // (𓏑) EGYPTIAN HIEROGLYPH X003	[541B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D1, 0x003F };
    uint32_t const ces[9] = { 0x541B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_161)
{
    // 133D1 0061;	
    // (𓏑) EGYPTIAN HIEROGLYPH X003	[541B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D1, 0x0061 };
    uint32_t const ces[9] = { 0x541B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_162)
{
    // 133D1 0041;	
    // (𓏑) EGYPTIAN HIEROGLYPH X003	[541B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D1, 0x0041 };
    uint32_t const ces[9] = { 0x541B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_163)
{
    // 133D1 0062;	
    // (𓏑) EGYPTIAN HIEROGLYPH X003	[541B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D1, 0x0062 };
    uint32_t const ces[9] = { 0x541B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_164)
{
    // 133D2 0021;	
    // (𓏒) EGYPTIAN HIEROGLYPH X004	[541C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D2, 0x0021 };
    uint32_t const ces[9] = { 0x541C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_165)
{
    // 133D2 003F;	
    // (𓏒) EGYPTIAN HIEROGLYPH X004	[541C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D2, 0x003F };
    uint32_t const ces[9] = { 0x541C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_166)
{
    // 133D2 0061;	
    // (𓏒) EGYPTIAN HIEROGLYPH X004	[541C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D2, 0x0061 };
    uint32_t const ces[9] = { 0x541C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_167)
{
    // 133D2 0041;	
    // (𓏒) EGYPTIAN HIEROGLYPH X004	[541C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D2, 0x0041 };
    uint32_t const ces[9] = { 0x541C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_168)
{
    // 133D2 0062;	
    // (𓏒) EGYPTIAN HIEROGLYPH X004	[541C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D2, 0x0062 };
    uint32_t const ces[9] = { 0x541C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_169)
{
    // 133D3 0021;	
    // (𓏓) EGYPTIAN HIEROGLYPH X004A	[541D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D3, 0x0021 };
    uint32_t const ces[9] = { 0x541D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_170)
{
    // 133D3 003F;	
    // (𓏓) EGYPTIAN HIEROGLYPH X004A	[541D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D3, 0x003F };
    uint32_t const ces[9] = { 0x541D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_171)
{
    // 133D3 0061;	
    // (𓏓) EGYPTIAN HIEROGLYPH X004A	[541D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D3, 0x0061 };
    uint32_t const ces[9] = { 0x541D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_172)
{
    // 133D3 0041;	
    // (𓏓) EGYPTIAN HIEROGLYPH X004A	[541D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D3, 0x0041 };
    uint32_t const ces[9] = { 0x541D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_173)
{
    // 133D3 0062;	
    // (𓏓) EGYPTIAN HIEROGLYPH X004A	[541D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D3, 0x0062 };
    uint32_t const ces[9] = { 0x541D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_174)
{
    // 133D4 0021;	
    // (𓏔) EGYPTIAN HIEROGLYPH X004B	[541E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D4, 0x0021 };
    uint32_t const ces[9] = { 0x541E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_175)
{
    // 133D4 003F;	
    // (𓏔) EGYPTIAN HIEROGLYPH X004B	[541E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D4, 0x003F };
    uint32_t const ces[9] = { 0x541E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_176)
{
    // 133D4 0061;	
    // (𓏔) EGYPTIAN HIEROGLYPH X004B	[541E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D4, 0x0061 };
    uint32_t const ces[9] = { 0x541E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_177)
{
    // 133D4 0041;	
    // (𓏔) EGYPTIAN HIEROGLYPH X004B	[541E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D4, 0x0041 };
    uint32_t const ces[9] = { 0x541E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_178)
{
    // 133D4 0062;	
    // (𓏔) EGYPTIAN HIEROGLYPH X004B	[541E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D4, 0x0062 };
    uint32_t const ces[9] = { 0x541E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_179)
{
    // 133D5 0021;	
    // (𓏕) EGYPTIAN HIEROGLYPH X005	[541F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D5, 0x0021 };
    uint32_t const ces[9] = { 0x541F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_180)
{
    // 133D5 003F;	
    // (𓏕) EGYPTIAN HIEROGLYPH X005	[541F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D5, 0x003F };
    uint32_t const ces[9] = { 0x541F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_181)
{
    // 133D5 0061;	
    // (𓏕) EGYPTIAN HIEROGLYPH X005	[541F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D5, 0x0061 };
    uint32_t const ces[9] = { 0x541F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_182)
{
    // 133D5 0041;	
    // (𓏕) EGYPTIAN HIEROGLYPH X005	[541F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D5, 0x0041 };
    uint32_t const ces[9] = { 0x541F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_183)
{
    // 133D5 0062;	
    // (𓏕) EGYPTIAN HIEROGLYPH X005	[541F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D5, 0x0062 };
    uint32_t const ces[9] = { 0x541F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_184)
{
    // 133D6 0021;	
    // (𓏖) EGYPTIAN HIEROGLYPH X006	[5420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D6, 0x0021 };
    uint32_t const ces[9] = { 0x5420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_185)
{
    // 133D6 003F;	
    // (𓏖) EGYPTIAN HIEROGLYPH X006	[5420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D6, 0x003F };
    uint32_t const ces[9] = { 0x5420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_186)
{
    // 133D6 0061;	
    // (𓏖) EGYPTIAN HIEROGLYPH X006	[5420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D6, 0x0061 };
    uint32_t const ces[9] = { 0x5420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_187)
{
    // 133D6 0041;	
    // (𓏖) EGYPTIAN HIEROGLYPH X006	[5420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D6, 0x0041 };
    uint32_t const ces[9] = { 0x5420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_188)
{
    // 133D6 0062;	
    // (𓏖) EGYPTIAN HIEROGLYPH X006	[5420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D6, 0x0062 };
    uint32_t const ces[9] = { 0x5420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_189)
{
    // 133D7 0021;	
    // (𓏗) EGYPTIAN HIEROGLYPH X006A	[5421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D7, 0x0021 };
    uint32_t const ces[9] = { 0x5421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_190)
{
    // 133D7 003F;	
    // (𓏗) EGYPTIAN HIEROGLYPH X006A	[5421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D7, 0x003F };
    uint32_t const ces[9] = { 0x5421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_191)
{
    // 133D7 0061;	
    // (𓏗) EGYPTIAN HIEROGLYPH X006A	[5421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D7, 0x0061 };
    uint32_t const ces[9] = { 0x5421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_192)
{
    // 133D7 0041;	
    // (𓏗) EGYPTIAN HIEROGLYPH X006A	[5421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D7, 0x0041 };
    uint32_t const ces[9] = { 0x5421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_193)
{
    // 133D7 0062;	
    // (𓏗) EGYPTIAN HIEROGLYPH X006A	[5421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D7, 0x0062 };
    uint32_t const ces[9] = { 0x5421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_194)
{
    // 133D8 0021;	
    // (𓏘) EGYPTIAN HIEROGLYPH X007	[5422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D8, 0x0021 };
    uint32_t const ces[9] = { 0x5422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_195)
{
    // 133D8 003F;	
    // (𓏘) EGYPTIAN HIEROGLYPH X007	[5422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D8, 0x003F };
    uint32_t const ces[9] = { 0x5422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_196)
{
    // 133D8 0061;	
    // (𓏘) EGYPTIAN HIEROGLYPH X007	[5422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D8, 0x0061 };
    uint32_t const ces[9] = { 0x5422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_197)
{
    // 133D8 0041;	
    // (𓏘) EGYPTIAN HIEROGLYPH X007	[5422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D8, 0x0041 };
    uint32_t const ces[9] = { 0x5422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_198)
{
    // 133D8 0062;	
    // (𓏘) EGYPTIAN HIEROGLYPH X007	[5422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D8, 0x0062 };
    uint32_t const ces[9] = { 0x5422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_199)
{
    // 133D9 0021;	
    // (𓏙) EGYPTIAN HIEROGLYPH X008	[5423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D9, 0x0021 };
    uint32_t const ces[9] = { 0x5423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_200)
{
    // 133D9 003F;	
    // (𓏙) EGYPTIAN HIEROGLYPH X008	[5423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D9, 0x003F };
    uint32_t const ces[9] = { 0x5423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_201)
{
    // 133D9 0061;	
    // (𓏙) EGYPTIAN HIEROGLYPH X008	[5423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D9, 0x0061 };
    uint32_t const ces[9] = { 0x5423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_202)
{
    // 133D9 0041;	
    // (𓏙) EGYPTIAN HIEROGLYPH X008	[5423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133D9, 0x0041 };
    uint32_t const ces[9] = { 0x5423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_203)
{
    // 133D9 0062;	
    // (𓏙) EGYPTIAN HIEROGLYPH X008	[5423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133D9, 0x0062 };
    uint32_t const ces[9] = { 0x5423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_204)
{
    // 133DA 0021;	
    // (𓏚) EGYPTIAN HIEROGLYPH X008A	[5424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DA, 0x0021 };
    uint32_t const ces[9] = { 0x5424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_205)
{
    // 133DA 003F;	
    // (𓏚) EGYPTIAN HIEROGLYPH X008A	[5424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DA, 0x003F };
    uint32_t const ces[9] = { 0x5424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_206)
{
    // 133DA 0061;	
    // (𓏚) EGYPTIAN HIEROGLYPH X008A	[5424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DA, 0x0061 };
    uint32_t const ces[9] = { 0x5424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_207)
{
    // 133DA 0041;	
    // (𓏚) EGYPTIAN HIEROGLYPH X008A	[5424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DA, 0x0041 };
    uint32_t const ces[9] = { 0x5424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_208)
{
    // 133DA 0062;	
    // (𓏚) EGYPTIAN HIEROGLYPH X008A	[5424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DA, 0x0062 };
    uint32_t const ces[9] = { 0x5424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_209)
{
    // 133DB 0021;	
    // (𓏛) EGYPTIAN HIEROGLYPH Y001	[5425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DB, 0x0021 };
    uint32_t const ces[9] = { 0x5425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_210)
{
    // 133DB 003F;	
    // (𓏛) EGYPTIAN HIEROGLYPH Y001	[5425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DB, 0x003F };
    uint32_t const ces[9] = { 0x5425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_211)
{
    // 133DB 0061;	
    // (𓏛) EGYPTIAN HIEROGLYPH Y001	[5425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DB, 0x0061 };
    uint32_t const ces[9] = { 0x5425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_212)
{
    // 133DB 0041;	
    // (𓏛) EGYPTIAN HIEROGLYPH Y001	[5425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DB, 0x0041 };
    uint32_t const ces[9] = { 0x5425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_213)
{
    // 133DB 0062;	
    // (𓏛) EGYPTIAN HIEROGLYPH Y001	[5425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DB, 0x0062 };
    uint32_t const ces[9] = { 0x5425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_214)
{
    // 133DC 0021;	
    // (𓏜) EGYPTIAN HIEROGLYPH Y001A	[5426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DC, 0x0021 };
    uint32_t const ces[9] = { 0x5426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_215)
{
    // 133DC 003F;	
    // (𓏜) EGYPTIAN HIEROGLYPH Y001A	[5426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DC, 0x003F };
    uint32_t const ces[9] = { 0x5426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_216)
{
    // 133DC 0061;	
    // (𓏜) EGYPTIAN HIEROGLYPH Y001A	[5426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DC, 0x0061 };
    uint32_t const ces[9] = { 0x5426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_217)
{
    // 133DC 0041;	
    // (𓏜) EGYPTIAN HIEROGLYPH Y001A	[5426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DC, 0x0041 };
    uint32_t const ces[9] = { 0x5426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_218)
{
    // 133DC 0062;	
    // (𓏜) EGYPTIAN HIEROGLYPH Y001A	[5426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DC, 0x0062 };
    uint32_t const ces[9] = { 0x5426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_219)
{
    // 133DD 0021;	
    // (𓏝) EGYPTIAN HIEROGLYPH Y002	[5427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DD, 0x0021 };
    uint32_t const ces[9] = { 0x5427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_220)
{
    // 133DD 003F;	
    // (𓏝) EGYPTIAN HIEROGLYPH Y002	[5427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DD, 0x003F };
    uint32_t const ces[9] = { 0x5427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_221)
{
    // 133DD 0061;	
    // (𓏝) EGYPTIAN HIEROGLYPH Y002	[5427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DD, 0x0061 };
    uint32_t const ces[9] = { 0x5427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_222)
{
    // 133DD 0041;	
    // (𓏝) EGYPTIAN HIEROGLYPH Y002	[5427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DD, 0x0041 };
    uint32_t const ces[9] = { 0x5427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_223)
{
    // 133DD 0062;	
    // (𓏝) EGYPTIAN HIEROGLYPH Y002	[5427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DD, 0x0062 };
    uint32_t const ces[9] = { 0x5427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_224)
{
    // 133DE 0021;	
    // (𓏞) EGYPTIAN HIEROGLYPH Y003	[5428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DE, 0x0021 };
    uint32_t const ces[9] = { 0x5428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_225)
{
    // 133DE 003F;	
    // (𓏞) EGYPTIAN HIEROGLYPH Y003	[5428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DE, 0x003F };
    uint32_t const ces[9] = { 0x5428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_226)
{
    // 133DE 0061;	
    // (𓏞) EGYPTIAN HIEROGLYPH Y003	[5428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DE, 0x0061 };
    uint32_t const ces[9] = { 0x5428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_227)
{
    // 133DE 0041;	
    // (𓏞) EGYPTIAN HIEROGLYPH Y003	[5428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DE, 0x0041 };
    uint32_t const ces[9] = { 0x5428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_228)
{
    // 133DE 0062;	
    // (𓏞) EGYPTIAN HIEROGLYPH Y003	[5428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DE, 0x0062 };
    uint32_t const ces[9] = { 0x5428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_229)
{
    // 133DF 0021;	
    // (𓏟) EGYPTIAN HIEROGLYPH Y004	[5429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DF, 0x0021 };
    uint32_t const ces[9] = { 0x5429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_230)
{
    // 133DF 003F;	
    // (𓏟) EGYPTIAN HIEROGLYPH Y004	[5429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DF, 0x003F };
    uint32_t const ces[9] = { 0x5429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_231)
{
    // 133DF 0061;	
    // (𓏟) EGYPTIAN HIEROGLYPH Y004	[5429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DF, 0x0061 };
    uint32_t const ces[9] = { 0x5429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_232)
{
    // 133DF 0041;	
    // (𓏟) EGYPTIAN HIEROGLYPH Y004	[5429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133DF, 0x0041 };
    uint32_t const ces[9] = { 0x5429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_233)
{
    // 133DF 0062;	
    // (𓏟) EGYPTIAN HIEROGLYPH Y004	[5429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133DF, 0x0062 };
    uint32_t const ces[9] = { 0x5429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_234)
{
    // 133E0 0021;	
    // (𓏠) EGYPTIAN HIEROGLYPH Y005	[542A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E0, 0x0021 };
    uint32_t const ces[9] = { 0x542A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_235)
{
    // 133E0 003F;	
    // (𓏠) EGYPTIAN HIEROGLYPH Y005	[542A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E0, 0x003F };
    uint32_t const ces[9] = { 0x542A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_236)
{
    // 133E0 0061;	
    // (𓏠) EGYPTIAN HIEROGLYPH Y005	[542A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E0, 0x0061 };
    uint32_t const ces[9] = { 0x542A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_237)
{
    // 133E0 0041;	
    // (𓏠) EGYPTIAN HIEROGLYPH Y005	[542A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E0, 0x0041 };
    uint32_t const ces[9] = { 0x542A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_238)
{
    // 133E0 0062;	
    // (𓏠) EGYPTIAN HIEROGLYPH Y005	[542A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E0, 0x0062 };
    uint32_t const ces[9] = { 0x542A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_239)
{
    // 133E1 0021;	
    // (𓏡) EGYPTIAN HIEROGLYPH Y006	[542B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E1, 0x0021 };
    uint32_t const ces[9] = { 0x542B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_240)
{
    // 133E1 003F;	
    // (𓏡) EGYPTIAN HIEROGLYPH Y006	[542B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E1, 0x003F };
    uint32_t const ces[9] = { 0x542B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_241)
{
    // 133E1 0061;	
    // (𓏡) EGYPTIAN HIEROGLYPH Y006	[542B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E1, 0x0061 };
    uint32_t const ces[9] = { 0x542B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_242)
{
    // 133E1 0041;	
    // (𓏡) EGYPTIAN HIEROGLYPH Y006	[542B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E1, 0x0041 };
    uint32_t const ces[9] = { 0x542B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_243)
{
    // 133E1 0062;	
    // (𓏡) EGYPTIAN HIEROGLYPH Y006	[542B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E1, 0x0062 };
    uint32_t const ces[9] = { 0x542B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_244)
{
    // 133E2 0021;	
    // (𓏢) EGYPTIAN HIEROGLYPH Y007	[542C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E2, 0x0021 };
    uint32_t const ces[9] = { 0x542C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_245)
{
    // 133E2 003F;	
    // (𓏢) EGYPTIAN HIEROGLYPH Y007	[542C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E2, 0x003F };
    uint32_t const ces[9] = { 0x542C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_246)
{
    // 133E2 0061;	
    // (𓏢) EGYPTIAN HIEROGLYPH Y007	[542C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E2, 0x0061 };
    uint32_t const ces[9] = { 0x542C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_247)
{
    // 133E2 0041;	
    // (𓏢) EGYPTIAN HIEROGLYPH Y007	[542C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E2, 0x0041 };
    uint32_t const ces[9] = { 0x542C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_248)
{
    // 133E2 0062;	
    // (𓏢) EGYPTIAN HIEROGLYPH Y007	[542C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E2, 0x0062 };
    uint32_t const ces[9] = { 0x542C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_249)
{
    // 133E3 0021;	
    // (𓏣) EGYPTIAN HIEROGLYPH Y008	[542D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E3, 0x0021 };
    uint32_t const ces[9] = { 0x542D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_250)
{
    // 133E3 003F;	
    // (𓏣) EGYPTIAN HIEROGLYPH Y008	[542D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E3, 0x003F };
    uint32_t const ces[9] = { 0x542D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_251)
{
    // 133E3 0061;	
    // (𓏣) EGYPTIAN HIEROGLYPH Y008	[542D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E3, 0x0061 };
    uint32_t const ces[9] = { 0x542D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_252)
{
    // 133E3 0041;	
    // (𓏣) EGYPTIAN HIEROGLYPH Y008	[542D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E3, 0x0041 };
    uint32_t const ces[9] = { 0x542D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_253)
{
    // 133E3 0062;	
    // (𓏣) EGYPTIAN HIEROGLYPH Y008	[542D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E3, 0x0062 };
    uint32_t const ces[9] = { 0x542D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_254)
{
    // 133E4 0021;	
    // (𓏤) EGYPTIAN HIEROGLYPH Z001	[542E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E4, 0x0021 };
    uint32_t const ces[9] = { 0x542E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_255)
{
    // 133E4 003F;	
    // (𓏤) EGYPTIAN HIEROGLYPH Z001	[542E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E4, 0x003F };
    uint32_t const ces[9] = { 0x542E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_256)
{
    // 133E4 0061;	
    // (𓏤) EGYPTIAN HIEROGLYPH Z001	[542E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E4, 0x0061 };
    uint32_t const ces[9] = { 0x542E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_257)
{
    // 133E4 0041;	
    // (𓏤) EGYPTIAN HIEROGLYPH Z001	[542E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E4, 0x0041 };
    uint32_t const ces[9] = { 0x542E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_258)
{
    // 133E4 0062;	
    // (𓏤) EGYPTIAN HIEROGLYPH Z001	[542E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E4, 0x0062 };
    uint32_t const ces[9] = { 0x542E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_259)
{
    // 133E5 0021;	
    // (𓏥) EGYPTIAN HIEROGLYPH Z002	[542F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E5, 0x0021 };
    uint32_t const ces[9] = { 0x542F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_260)
{
    // 133E5 003F;	
    // (𓏥) EGYPTIAN HIEROGLYPH Z002	[542F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E5, 0x003F };
    uint32_t const ces[9] = { 0x542F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_261)
{
    // 133E5 0061;	
    // (𓏥) EGYPTIAN HIEROGLYPH Z002	[542F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E5, 0x0061 };
    uint32_t const ces[9] = { 0x542F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_262)
{
    // 133E5 0041;	
    // (𓏥) EGYPTIAN HIEROGLYPH Z002	[542F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E5, 0x0041 };
    uint32_t const ces[9] = { 0x542F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_263)
{
    // 133E5 0062;	
    // (𓏥) EGYPTIAN HIEROGLYPH Z002	[542F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E5, 0x0062 };
    uint32_t const ces[9] = { 0x542F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_264)
{
    // 133E6 0021;	
    // (𓏦) EGYPTIAN HIEROGLYPH Z002A	[5430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E6, 0x0021 };
    uint32_t const ces[9] = { 0x5430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_265)
{
    // 133E6 003F;	
    // (𓏦) EGYPTIAN HIEROGLYPH Z002A	[5430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E6, 0x003F };
    uint32_t const ces[9] = { 0x5430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_266)
{
    // 133E6 0061;	
    // (𓏦) EGYPTIAN HIEROGLYPH Z002A	[5430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E6, 0x0061 };
    uint32_t const ces[9] = { 0x5430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_267)
{
    // 133E6 0041;	
    // (𓏦) EGYPTIAN HIEROGLYPH Z002A	[5430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E6, 0x0041 };
    uint32_t const ces[9] = { 0x5430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_268)
{
    // 133E6 0062;	
    // (𓏦) EGYPTIAN HIEROGLYPH Z002A	[5430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E6, 0x0062 };
    uint32_t const ces[9] = { 0x5430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_269)
{
    // 133E7 0021;	
    // (𓏧) EGYPTIAN HIEROGLYPH Z002B	[5431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E7, 0x0021 };
    uint32_t const ces[9] = { 0x5431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_270)
{
    // 133E7 003F;	
    // (𓏧) EGYPTIAN HIEROGLYPH Z002B	[5431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E7, 0x003F };
    uint32_t const ces[9] = { 0x5431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_271)
{
    // 133E7 0061;	
    // (𓏧) EGYPTIAN HIEROGLYPH Z002B	[5431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E7, 0x0061 };
    uint32_t const ces[9] = { 0x5431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_272)
{
    // 133E7 0041;	
    // (𓏧) EGYPTIAN HIEROGLYPH Z002B	[5431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E7, 0x0041 };
    uint32_t const ces[9] = { 0x5431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_273)
{
    // 133E7 0062;	
    // (𓏧) EGYPTIAN HIEROGLYPH Z002B	[5431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E7, 0x0062 };
    uint32_t const ces[9] = { 0x5431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_274)
{
    // 133E8 0021;	
    // (𓏨) EGYPTIAN HIEROGLYPH Z002C	[5432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E8, 0x0021 };
    uint32_t const ces[9] = { 0x5432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_275)
{
    // 133E8 003F;	
    // (𓏨) EGYPTIAN HIEROGLYPH Z002C	[5432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E8, 0x003F };
    uint32_t const ces[9] = { 0x5432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_276)
{
    // 133E8 0061;	
    // (𓏨) EGYPTIAN HIEROGLYPH Z002C	[5432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E8, 0x0061 };
    uint32_t const ces[9] = { 0x5432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_277)
{
    // 133E8 0041;	
    // (𓏨) EGYPTIAN HIEROGLYPH Z002C	[5432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E8, 0x0041 };
    uint32_t const ces[9] = { 0x5432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_278)
{
    // 133E8 0062;	
    // (𓏨) EGYPTIAN HIEROGLYPH Z002C	[5432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E8, 0x0062 };
    uint32_t const ces[9] = { 0x5432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_279)
{
    // 133E9 0021;	
    // (𓏩) EGYPTIAN HIEROGLYPH Z002D	[5433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E9, 0x0021 };
    uint32_t const ces[9] = { 0x5433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_280)
{
    // 133E9 003F;	
    // (𓏩) EGYPTIAN HIEROGLYPH Z002D	[5433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E9, 0x003F };
    uint32_t const ces[9] = { 0x5433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_281)
{
    // 133E9 0061;	
    // (𓏩) EGYPTIAN HIEROGLYPH Z002D	[5433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E9, 0x0061 };
    uint32_t const ces[9] = { 0x5433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_282)
{
    // 133E9 0041;	
    // (𓏩) EGYPTIAN HIEROGLYPH Z002D	[5433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133E9, 0x0041 };
    uint32_t const ces[9] = { 0x5433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_283)
{
    // 133E9 0062;	
    // (𓏩) EGYPTIAN HIEROGLYPH Z002D	[5433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133E9, 0x0062 };
    uint32_t const ces[9] = { 0x5433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_284)
{
    // 133EA 0021;	
    // (𓏪) EGYPTIAN HIEROGLYPH Z003	[5434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EA, 0x0021 };
    uint32_t const ces[9] = { 0x5434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_285)
{
    // 133EA 003F;	
    // (𓏪) EGYPTIAN HIEROGLYPH Z003	[5434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EA, 0x003F };
    uint32_t const ces[9] = { 0x5434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_286)
{
    // 133EA 0061;	
    // (𓏪) EGYPTIAN HIEROGLYPH Z003	[5434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EA, 0x0061 };
    uint32_t const ces[9] = { 0x5434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_287)
{
    // 133EA 0041;	
    // (𓏪) EGYPTIAN HIEROGLYPH Z003	[5434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133EA, 0x0041 };
    uint32_t const ces[9] = { 0x5434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_288)
{
    // 133EA 0062;	
    // (𓏪) EGYPTIAN HIEROGLYPH Z003	[5434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EA, 0x0062 };
    uint32_t const ces[9] = { 0x5434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_289)
{
    // 133EB 0021;	
    // (𓏫) EGYPTIAN HIEROGLYPH Z003A	[5435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EB, 0x0021 };
    uint32_t const ces[9] = { 0x5435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_290)
{
    // 133EB 003F;	
    // (𓏫) EGYPTIAN HIEROGLYPH Z003A	[5435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EB, 0x003F };
    uint32_t const ces[9] = { 0x5435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_291)
{
    // 133EB 0061;	
    // (𓏫) EGYPTIAN HIEROGLYPH Z003A	[5435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EB, 0x0061 };
    uint32_t const ces[9] = { 0x5435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_292)
{
    // 133EB 0041;	
    // (𓏫) EGYPTIAN HIEROGLYPH Z003A	[5435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133EB, 0x0041 };
    uint32_t const ces[9] = { 0x5435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_293)
{
    // 133EB 0062;	
    // (𓏫) EGYPTIAN HIEROGLYPH Z003A	[5435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EB, 0x0062 };
    uint32_t const ces[9] = { 0x5435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_294)
{
    // 133EC 0021;	
    // (𓏬) EGYPTIAN HIEROGLYPH Z003B	[5436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EC, 0x0021 };
    uint32_t const ces[9] = { 0x5436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_295)
{
    // 133EC 003F;	
    // (𓏬) EGYPTIAN HIEROGLYPH Z003B	[5436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EC, 0x003F };
    uint32_t const ces[9] = { 0x5436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_296)
{
    // 133EC 0061;	
    // (𓏬) EGYPTIAN HIEROGLYPH Z003B	[5436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EC, 0x0061 };
    uint32_t const ces[9] = { 0x5436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_297)
{
    // 133EC 0041;	
    // (𓏬) EGYPTIAN HIEROGLYPH Z003B	[5436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133EC, 0x0041 };
    uint32_t const ces[9] = { 0x5436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_298)
{
    // 133EC 0062;	
    // (𓏬) EGYPTIAN HIEROGLYPH Z003B	[5436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EC, 0x0062 };
    uint32_t const ces[9] = { 0x5436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_299)
{
    // 133ED 0021;	
    // (𓏭) EGYPTIAN HIEROGLYPH Z004	[5437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133ED, 0x0021 };
    uint32_t const ces[9] = { 0x5437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_300)
{
    // 133ED 003F;	
    // (𓏭) EGYPTIAN HIEROGLYPH Z004	[5437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133ED, 0x003F };
    uint32_t const ces[9] = { 0x5437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_301)
{
    // 133ED 0061;	
    // (𓏭) EGYPTIAN HIEROGLYPH Z004	[5437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133ED, 0x0061 };
    uint32_t const ces[9] = { 0x5437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_302)
{
    // 133ED 0041;	
    // (𓏭) EGYPTIAN HIEROGLYPH Z004	[5437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133ED, 0x0041 };
    uint32_t const ces[9] = { 0x5437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_303)
{
    // 133ED 0062;	
    // (𓏭) EGYPTIAN HIEROGLYPH Z004	[5437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133ED, 0x0062 };
    uint32_t const ces[9] = { 0x5437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_304)
{
    // 133EE 0021;	
    // (𓏮) EGYPTIAN HIEROGLYPH Z004A	[5438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EE, 0x0021 };
    uint32_t const ces[9] = { 0x5438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_305)
{
    // 133EE 003F;	
    // (𓏮) EGYPTIAN HIEROGLYPH Z004A	[5438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EE, 0x003F };
    uint32_t const ces[9] = { 0x5438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_306)
{
    // 133EE 0061;	
    // (𓏮) EGYPTIAN HIEROGLYPH Z004A	[5438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EE, 0x0061 };
    uint32_t const ces[9] = { 0x5438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_307)
{
    // 133EE 0041;	
    // (𓏮) EGYPTIAN HIEROGLYPH Z004A	[5438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133EE, 0x0041 };
    uint32_t const ces[9] = { 0x5438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_308)
{
    // 133EE 0062;	
    // (𓏮) EGYPTIAN HIEROGLYPH Z004A	[5438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EE, 0x0062 };
    uint32_t const ces[9] = { 0x5438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_309)
{
    // 133EF 0021;	
    // (𓏯) EGYPTIAN HIEROGLYPH Z005	[5439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EF, 0x0021 };
    uint32_t const ces[9] = { 0x5439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_310)
{
    // 133EF 003F;	
    // (𓏯) EGYPTIAN HIEROGLYPH Z005	[5439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EF, 0x003F };
    uint32_t const ces[9] = { 0x5439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_311)
{
    // 133EF 0061;	
    // (𓏯) EGYPTIAN HIEROGLYPH Z005	[5439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EF, 0x0061 };
    uint32_t const ces[9] = { 0x5439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_312)
{
    // 133EF 0041;	
    // (𓏯) EGYPTIAN HIEROGLYPH Z005	[5439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133EF, 0x0041 };
    uint32_t const ces[9] = { 0x5439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_313)
{
    // 133EF 0062;	
    // (𓏯) EGYPTIAN HIEROGLYPH Z005	[5439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133EF, 0x0062 };
    uint32_t const ces[9] = { 0x5439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_314)
{
    // 133F0 0021;	
    // (𓏰) EGYPTIAN HIEROGLYPH Z005A	[543A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F0, 0x0021 };
    uint32_t const ces[9] = { 0x543A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_315)
{
    // 133F0 003F;	
    // (𓏰) EGYPTIAN HIEROGLYPH Z005A	[543A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F0, 0x003F };
    uint32_t const ces[9] = { 0x543A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_316)
{
    // 133F0 0061;	
    // (𓏰) EGYPTIAN HIEROGLYPH Z005A	[543A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F0, 0x0061 };
    uint32_t const ces[9] = { 0x543A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_317)
{
    // 133F0 0041;	
    // (𓏰) EGYPTIAN HIEROGLYPH Z005A	[543A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F0, 0x0041 };
    uint32_t const ces[9] = { 0x543A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_318)
{
    // 133F0 0062;	
    // (𓏰) EGYPTIAN HIEROGLYPH Z005A	[543A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F0, 0x0062 };
    uint32_t const ces[9] = { 0x543A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_319)
{
    // 133F1 0021;	
    // (𓏱) EGYPTIAN HIEROGLYPH Z006	[543B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F1, 0x0021 };
    uint32_t const ces[9] = { 0x543B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_320)
{
    // 133F1 003F;	
    // (𓏱) EGYPTIAN HIEROGLYPH Z006	[543B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F1, 0x003F };
    uint32_t const ces[9] = { 0x543B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_321)
{
    // 133F1 0061;	
    // (𓏱) EGYPTIAN HIEROGLYPH Z006	[543B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F1, 0x0061 };
    uint32_t const ces[9] = { 0x543B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_322)
{
    // 133F1 0041;	
    // (𓏱) EGYPTIAN HIEROGLYPH Z006	[543B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F1, 0x0041 };
    uint32_t const ces[9] = { 0x543B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_323)
{
    // 133F1 0062;	
    // (𓏱) EGYPTIAN HIEROGLYPH Z006	[543B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F1, 0x0062 };
    uint32_t const ces[9] = { 0x543B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_324)
{
    // 133F2 0021;	
    // (𓏲) EGYPTIAN HIEROGLYPH Z007	[543C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F2, 0x0021 };
    uint32_t const ces[9] = { 0x543C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_325)
{
    // 133F2 003F;	
    // (𓏲) EGYPTIAN HIEROGLYPH Z007	[543C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F2, 0x003F };
    uint32_t const ces[9] = { 0x543C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_326)
{
    // 133F2 0061;	
    // (𓏲) EGYPTIAN HIEROGLYPH Z007	[543C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F2, 0x0061 };
    uint32_t const ces[9] = { 0x543C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_327)
{
    // 133F2 0041;	
    // (𓏲) EGYPTIAN HIEROGLYPH Z007	[543C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F2, 0x0041 };
    uint32_t const ces[9] = { 0x543C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_328)
{
    // 133F2 0062;	
    // (𓏲) EGYPTIAN HIEROGLYPH Z007	[543C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F2, 0x0062 };
    uint32_t const ces[9] = { 0x543C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_329)
{
    // 133F3 0021;	
    // (𓏳) EGYPTIAN HIEROGLYPH Z008	[543D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F3, 0x0021 };
    uint32_t const ces[9] = { 0x543D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_330)
{
    // 133F3 003F;	
    // (𓏳) EGYPTIAN HIEROGLYPH Z008	[543D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F3, 0x003F };
    uint32_t const ces[9] = { 0x543D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_331)
{
    // 133F3 0061;	
    // (𓏳) EGYPTIAN HIEROGLYPH Z008	[543D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F3, 0x0061 };
    uint32_t const ces[9] = { 0x543D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_332)
{
    // 133F3 0041;	
    // (𓏳) EGYPTIAN HIEROGLYPH Z008	[543D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F3, 0x0041 };
    uint32_t const ces[9] = { 0x543D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_333)
{
    // 133F3 0062;	
    // (𓏳) EGYPTIAN HIEROGLYPH Z008	[543D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F3, 0x0062 };
    uint32_t const ces[9] = { 0x543D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_334)
{
    // 133F4 0021;	
    // (𓏴) EGYPTIAN HIEROGLYPH Z009	[543E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F4, 0x0021 };
    uint32_t const ces[9] = { 0x543E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_335)
{
    // 133F4 003F;	
    // (𓏴) EGYPTIAN HIEROGLYPH Z009	[543E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F4, 0x003F };
    uint32_t const ces[9] = { 0x543E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_336)
{
    // 133F4 0061;	
    // (𓏴) EGYPTIAN HIEROGLYPH Z009	[543E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F4, 0x0061 };
    uint32_t const ces[9] = { 0x543E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_337)
{
    // 133F4 0041;	
    // (𓏴) EGYPTIAN HIEROGLYPH Z009	[543E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F4, 0x0041 };
    uint32_t const ces[9] = { 0x543E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_338)
{
    // 133F4 0062;	
    // (𓏴) EGYPTIAN HIEROGLYPH Z009	[543E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F4, 0x0062 };
    uint32_t const ces[9] = { 0x543E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_339)
{
    // 133F5 0021;	
    // (𓏵) EGYPTIAN HIEROGLYPH Z010	[543F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F5, 0x0021 };
    uint32_t const ces[9] = { 0x543F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_340)
{
    // 133F5 003F;	
    // (𓏵) EGYPTIAN HIEROGLYPH Z010	[543F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F5, 0x003F };
    uint32_t const ces[9] = { 0x543F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_341)
{
    // 133F5 0061;	
    // (𓏵) EGYPTIAN HIEROGLYPH Z010	[543F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F5, 0x0061 };
    uint32_t const ces[9] = { 0x543F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_342)
{
    // 133F5 0041;	
    // (𓏵) EGYPTIAN HIEROGLYPH Z010	[543F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F5, 0x0041 };
    uint32_t const ces[9] = { 0x543F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_343)
{
    // 133F5 0062;	
    // (𓏵) EGYPTIAN HIEROGLYPH Z010	[543F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F5, 0x0062 };
    uint32_t const ces[9] = { 0x543F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_344)
{
    // 133F6 0021;	
    // (𓏶) EGYPTIAN HIEROGLYPH Z011	[5440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F6, 0x0021 };
    uint32_t const ces[9] = { 0x5440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_345)
{
    // 133F6 003F;	
    // (𓏶) EGYPTIAN HIEROGLYPH Z011	[5440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F6, 0x003F };
    uint32_t const ces[9] = { 0x5440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_346)
{
    // 133F6 0061;	
    // (𓏶) EGYPTIAN HIEROGLYPH Z011	[5440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F6, 0x0061 };
    uint32_t const ces[9] = { 0x5440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_347)
{
    // 133F6 0041;	
    // (𓏶) EGYPTIAN HIEROGLYPH Z011	[5440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F6, 0x0041 };
    uint32_t const ces[9] = { 0x5440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_348)
{
    // 133F6 0062;	
    // (𓏶) EGYPTIAN HIEROGLYPH Z011	[5440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F6, 0x0062 };
    uint32_t const ces[9] = { 0x5440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_349)
{
    // 133F7 0021;	
    // (𓏷) EGYPTIAN HIEROGLYPH Z012	[5441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F7, 0x0021 };
    uint32_t const ces[9] = { 0x5441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_350)
{
    // 133F7 003F;	
    // (𓏷) EGYPTIAN HIEROGLYPH Z012	[5441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F7, 0x003F };
    uint32_t const ces[9] = { 0x5441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_351)
{
    // 133F7 0061;	
    // (𓏷) EGYPTIAN HIEROGLYPH Z012	[5441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F7, 0x0061 };
    uint32_t const ces[9] = { 0x5441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_352)
{
    // 133F7 0041;	
    // (𓏷) EGYPTIAN HIEROGLYPH Z012	[5441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F7, 0x0041 };
    uint32_t const ces[9] = { 0x5441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_353)
{
    // 133F7 0062;	
    // (𓏷) EGYPTIAN HIEROGLYPH Z012	[5441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F7, 0x0062 };
    uint32_t const ces[9] = { 0x5441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_354)
{
    // 133F8 0021;	
    // (𓏸) EGYPTIAN HIEROGLYPH Z013	[5442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F8, 0x0021 };
    uint32_t const ces[9] = { 0x5442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_355)
{
    // 133F8 003F;	
    // (𓏸) EGYPTIAN HIEROGLYPH Z013	[5442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F8, 0x003F };
    uint32_t const ces[9] = { 0x5442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_356)
{
    // 133F8 0061;	
    // (𓏸) EGYPTIAN HIEROGLYPH Z013	[5442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F8, 0x0061 };
    uint32_t const ces[9] = { 0x5442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_357)
{
    // 133F8 0041;	
    // (𓏸) EGYPTIAN HIEROGLYPH Z013	[5442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F8, 0x0041 };
    uint32_t const ces[9] = { 0x5442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_358)
{
    // 133F8 0062;	
    // (𓏸) EGYPTIAN HIEROGLYPH Z013	[5442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F8, 0x0062 };
    uint32_t const ces[9] = { 0x5442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_359)
{
    // 133F9 0021;	
    // (𓏹) EGYPTIAN HIEROGLYPH Z014	[5443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F9, 0x0021 };
    uint32_t const ces[9] = { 0x5443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_360)
{
    // 133F9 003F;	
    // (𓏹) EGYPTIAN HIEROGLYPH Z014	[5443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F9, 0x003F };
    uint32_t const ces[9] = { 0x5443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_361)
{
    // 133F9 0061;	
    // (𓏹) EGYPTIAN HIEROGLYPH Z014	[5443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F9, 0x0061 };
    uint32_t const ces[9] = { 0x5443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_362)
{
    // 133F9 0041;	
    // (𓏹) EGYPTIAN HIEROGLYPH Z014	[5443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133F9, 0x0041 };
    uint32_t const ces[9] = { 0x5443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_363)
{
    // 133F9 0062;	
    // (𓏹) EGYPTIAN HIEROGLYPH Z014	[5443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133F9, 0x0062 };
    uint32_t const ces[9] = { 0x5443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_364)
{
    // 133FA 0021;	
    // (𓏺) EGYPTIAN HIEROGLYPH Z015	[5444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FA, 0x0021 };
    uint32_t const ces[9] = { 0x5444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_365)
{
    // 133FA 003F;	
    // (𓏺) EGYPTIAN HIEROGLYPH Z015	[5444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FA, 0x003F };
    uint32_t const ces[9] = { 0x5444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_366)
{
    // 133FA 0061;	
    // (𓏺) EGYPTIAN HIEROGLYPH Z015	[5444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FA, 0x0061 };
    uint32_t const ces[9] = { 0x5444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_367)
{
    // 133FA 0041;	
    // (𓏺) EGYPTIAN HIEROGLYPH Z015	[5444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FA, 0x0041 };
    uint32_t const ces[9] = { 0x5444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_368)
{
    // 133FA 0062;	
    // (𓏺) EGYPTIAN HIEROGLYPH Z015	[5444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FA, 0x0062 };
    uint32_t const ces[9] = { 0x5444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_369)
{
    // 133FB 0021;	
    // (𓏻) EGYPTIAN HIEROGLYPH Z015A	[5445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FB, 0x0021 };
    uint32_t const ces[9] = { 0x5445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_370)
{
    // 133FB 003F;	
    // (𓏻) EGYPTIAN HIEROGLYPH Z015A	[5445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FB, 0x003F };
    uint32_t const ces[9] = { 0x5445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_371)
{
    // 133FB 0061;	
    // (𓏻) EGYPTIAN HIEROGLYPH Z015A	[5445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FB, 0x0061 };
    uint32_t const ces[9] = { 0x5445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_372)
{
    // 133FB 0041;	
    // (𓏻) EGYPTIAN HIEROGLYPH Z015A	[5445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FB, 0x0041 };
    uint32_t const ces[9] = { 0x5445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_373)
{
    // 133FB 0062;	
    // (𓏻) EGYPTIAN HIEROGLYPH Z015A	[5445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FB, 0x0062 };
    uint32_t const ces[9] = { 0x5445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_374)
{
    // 133FC 0021;	
    // (𓏼) EGYPTIAN HIEROGLYPH Z015B	[5446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FC, 0x0021 };
    uint32_t const ces[9] = { 0x5446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_375)
{
    // 133FC 003F;	
    // (𓏼) EGYPTIAN HIEROGLYPH Z015B	[5446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FC, 0x003F };
    uint32_t const ces[9] = { 0x5446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_376)
{
    // 133FC 0061;	
    // (𓏼) EGYPTIAN HIEROGLYPH Z015B	[5446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FC, 0x0061 };
    uint32_t const ces[9] = { 0x5446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_377)
{
    // 133FC 0041;	
    // (𓏼) EGYPTIAN HIEROGLYPH Z015B	[5446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FC, 0x0041 };
    uint32_t const ces[9] = { 0x5446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_378)
{
    // 133FC 0062;	
    // (𓏼) EGYPTIAN HIEROGLYPH Z015B	[5446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FC, 0x0062 };
    uint32_t const ces[9] = { 0x5446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_379)
{
    // 133FD 0021;	
    // (𓏽) EGYPTIAN HIEROGLYPH Z015C	[5447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FD, 0x0021 };
    uint32_t const ces[9] = { 0x5447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_380)
{
    // 133FD 003F;	
    // (𓏽) EGYPTIAN HIEROGLYPH Z015C	[5447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FD, 0x003F };
    uint32_t const ces[9] = { 0x5447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_381)
{
    // 133FD 0061;	
    // (𓏽) EGYPTIAN HIEROGLYPH Z015C	[5447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FD, 0x0061 };
    uint32_t const ces[9] = { 0x5447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_382)
{
    // 133FD 0041;	
    // (𓏽) EGYPTIAN HIEROGLYPH Z015C	[5447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FD, 0x0041 };
    uint32_t const ces[9] = { 0x5447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_383)
{
    // 133FD 0062;	
    // (𓏽) EGYPTIAN HIEROGLYPH Z015C	[5447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FD, 0x0062 };
    uint32_t const ces[9] = { 0x5447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_384)
{
    // 133FE 0021;	
    // (𓏾) EGYPTIAN HIEROGLYPH Z015D	[5448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FE, 0x0021 };
    uint32_t const ces[9] = { 0x5448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_385)
{
    // 133FE 003F;	
    // (𓏾) EGYPTIAN HIEROGLYPH Z015D	[5448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FE, 0x003F };
    uint32_t const ces[9] = { 0x5448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_386)
{
    // 133FE 0061;	
    // (𓏾) EGYPTIAN HIEROGLYPH Z015D	[5448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FE, 0x0061 };
    uint32_t const ces[9] = { 0x5448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_387)
{
    // 133FE 0041;	
    // (𓏾) EGYPTIAN HIEROGLYPH Z015D	[5448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FE, 0x0041 };
    uint32_t const ces[9] = { 0x5448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_388)
{
    // 133FE 0062;	
    // (𓏾) EGYPTIAN HIEROGLYPH Z015D	[5448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FE, 0x0062 };
    uint32_t const ces[9] = { 0x5448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_389)
{
    // 133FF 0021;	
    // (𓏿) EGYPTIAN HIEROGLYPH Z015E	[5449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FF, 0x0021 };
    uint32_t const ces[9] = { 0x5449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_390)
{
    // 133FF 003F;	
    // (𓏿) EGYPTIAN HIEROGLYPH Z015E	[5449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FF, 0x003F };
    uint32_t const ces[9] = { 0x5449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_391)
{
    // 133FF 0061;	
    // (𓏿) EGYPTIAN HIEROGLYPH Z015E	[5449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FF, 0x0061 };
    uint32_t const ces[9] = { 0x5449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_392)
{
    // 133FF 0041;	
    // (𓏿) EGYPTIAN HIEROGLYPH Z015E	[5449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x133FF, 0x0041 };
    uint32_t const ces[9] = { 0x5449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_393)
{
    // 133FF 0062;	
    // (𓏿) EGYPTIAN HIEROGLYPH Z015E	[5449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x133FF, 0x0062 };
    uint32_t const ces[9] = { 0x5449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_394)
{
    // 13400 0021;	
    // (𓐀) EGYPTIAN HIEROGLYPH Z015F	[544A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13400, 0x0021 };
    uint32_t const ces[9] = { 0x544A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_395)
{
    // 13400 003F;	
    // (𓐀) EGYPTIAN HIEROGLYPH Z015F	[544A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13400, 0x003F };
    uint32_t const ces[9] = { 0x544A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_396)
{
    // 13400 0061;	
    // (𓐀) EGYPTIAN HIEROGLYPH Z015F	[544A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13400, 0x0061 };
    uint32_t const ces[9] = { 0x544A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_397)
{
    // 13400 0041;	
    // (𓐀) EGYPTIAN HIEROGLYPH Z015F	[544A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13400, 0x0041 };
    uint32_t const ces[9] = { 0x544A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_398)
{
    // 13400 0062;	
    // (𓐀) EGYPTIAN HIEROGLYPH Z015F	[544A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13400, 0x0062 };
    uint32_t const ces[9] = { 0x544A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_399)
{
    // 13401 0021;	
    // (𓐁) EGYPTIAN HIEROGLYPH Z015G	[544B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13401, 0x0021 };
    uint32_t const ces[9] = { 0x544B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_400)
{
    // 13401 003F;	
    // (𓐁) EGYPTIAN HIEROGLYPH Z015G	[544B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13401, 0x003F };
    uint32_t const ces[9] = { 0x544B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_401)
{
    // 13401 0061;	
    // (𓐁) EGYPTIAN HIEROGLYPH Z015G	[544B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13401, 0x0061 };
    uint32_t const ces[9] = { 0x544B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_402)
{
    // 13401 0041;	
    // (𓐁) EGYPTIAN HIEROGLYPH Z015G	[544B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13401, 0x0041 };
    uint32_t const ces[9] = { 0x544B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_403)
{
    // 13401 0062;	
    // (𓐁) EGYPTIAN HIEROGLYPH Z015G	[544B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13401, 0x0062 };
    uint32_t const ces[9] = { 0x544B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_404)
{
    // 13402 0021;	
    // (𓐂) EGYPTIAN HIEROGLYPH Z015H	[544C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13402, 0x0021 };
    uint32_t const ces[9] = { 0x544C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_405)
{
    // 13402 003F;	
    // (𓐂) EGYPTIAN HIEROGLYPH Z015H	[544C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13402, 0x003F };
    uint32_t const ces[9] = { 0x544C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_406)
{
    // 13402 0061;	
    // (𓐂) EGYPTIAN HIEROGLYPH Z015H	[544C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13402, 0x0061 };
    uint32_t const ces[9] = { 0x544C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_407)
{
    // 13402 0041;	
    // (𓐂) EGYPTIAN HIEROGLYPH Z015H	[544C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13402, 0x0041 };
    uint32_t const ces[9] = { 0x544C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_408)
{
    // 13402 0062;	
    // (𓐂) EGYPTIAN HIEROGLYPH Z015H	[544C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13402, 0x0062 };
    uint32_t const ces[9] = { 0x544C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_409)
{
    // 13403 0021;	
    // (𓐃) EGYPTIAN HIEROGLYPH Z015I	[544D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13403, 0x0021 };
    uint32_t const ces[9] = { 0x544D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_410)
{
    // 13403 003F;	
    // (𓐃) EGYPTIAN HIEROGLYPH Z015I	[544D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13403, 0x003F };
    uint32_t const ces[9] = { 0x544D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_411)
{
    // 13403 0061;	
    // (𓐃) EGYPTIAN HIEROGLYPH Z015I	[544D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13403, 0x0061 };
    uint32_t const ces[9] = { 0x544D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_412)
{
    // 13403 0041;	
    // (𓐃) EGYPTIAN HIEROGLYPH Z015I	[544D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13403, 0x0041 };
    uint32_t const ces[9] = { 0x544D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_413)
{
    // 13403 0062;	
    // (𓐃) EGYPTIAN HIEROGLYPH Z015I	[544D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13403, 0x0062 };
    uint32_t const ces[9] = { 0x544D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_414)
{
    // 13404 0021;	
    // (𓐄) EGYPTIAN HIEROGLYPH Z016	[544E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13404, 0x0021 };
    uint32_t const ces[9] = { 0x544E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_415)
{
    // 13404 003F;	
    // (𓐄) EGYPTIAN HIEROGLYPH Z016	[544E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13404, 0x003F };
    uint32_t const ces[9] = { 0x544E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_416)
{
    // 13404 0061;	
    // (𓐄) EGYPTIAN HIEROGLYPH Z016	[544E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13404, 0x0061 };
    uint32_t const ces[9] = { 0x544E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_417)
{
    // 13404 0041;	
    // (𓐄) EGYPTIAN HIEROGLYPH Z016	[544E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13404, 0x0041 };
    uint32_t const ces[9] = { 0x544E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_418)
{
    // 13404 0062;	
    // (𓐄) EGYPTIAN HIEROGLYPH Z016	[544E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13404, 0x0062 };
    uint32_t const ces[9] = { 0x544E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_419)
{
    // 13405 0021;	
    // (𓐅) EGYPTIAN HIEROGLYPH Z016A	[544F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13405, 0x0021 };
    uint32_t const ces[9] = { 0x544F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_420)
{
    // 13405 003F;	
    // (𓐅) EGYPTIAN HIEROGLYPH Z016A	[544F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13405, 0x003F };
    uint32_t const ces[9] = { 0x544F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_421)
{
    // 13405 0061;	
    // (𓐅) EGYPTIAN HIEROGLYPH Z016A	[544F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13405, 0x0061 };
    uint32_t const ces[9] = { 0x544F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_422)
{
    // 13405 0041;	
    // (𓐅) EGYPTIAN HIEROGLYPH Z016A	[544F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13405, 0x0041 };
    uint32_t const ces[9] = { 0x544F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_423)
{
    // 13405 0062;	
    // (𓐅) EGYPTIAN HIEROGLYPH Z016A	[544F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13405, 0x0062 };
    uint32_t const ces[9] = { 0x544F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_424)
{
    // 13406 0021;	
    // (𓐆) EGYPTIAN HIEROGLYPH Z016B	[5450 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13406, 0x0021 };
    uint32_t const ces[9] = { 0x5450, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_425)
{
    // 13406 003F;	
    // (𓐆) EGYPTIAN HIEROGLYPH Z016B	[5450 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13406, 0x003F };
    uint32_t const ces[9] = { 0x5450, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_426)
{
    // 13406 0061;	
    // (𓐆) EGYPTIAN HIEROGLYPH Z016B	[5450 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13406, 0x0061 };
    uint32_t const ces[9] = { 0x5450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_427)
{
    // 13406 0041;	
    // (𓐆) EGYPTIAN HIEROGLYPH Z016B	[5450 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13406, 0x0041 };
    uint32_t const ces[9] = { 0x5450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_428)
{
    // 13406 0062;	
    // (𓐆) EGYPTIAN HIEROGLYPH Z016B	[5450 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13406, 0x0062 };
    uint32_t const ces[9] = { 0x5450, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_429)
{
    // 13407 0021;	
    // (𓐇) EGYPTIAN HIEROGLYPH Z016C	[5451 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13407, 0x0021 };
    uint32_t const ces[9] = { 0x5451, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_430)
{
    // 13407 003F;	
    // (𓐇) EGYPTIAN HIEROGLYPH Z016C	[5451 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13407, 0x003F };
    uint32_t const ces[9] = { 0x5451, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_431)
{
    // 13407 0061;	
    // (𓐇) EGYPTIAN HIEROGLYPH Z016C	[5451 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13407, 0x0061 };
    uint32_t const ces[9] = { 0x5451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_432)
{
    // 13407 0041;	
    // (𓐇) EGYPTIAN HIEROGLYPH Z016C	[5451 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13407, 0x0041 };
    uint32_t const ces[9] = { 0x5451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_433)
{
    // 13407 0062;	
    // (𓐇) EGYPTIAN HIEROGLYPH Z016C	[5451 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13407, 0x0062 };
    uint32_t const ces[9] = { 0x5451, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_434)
{
    // 13408 0021;	
    // (𓐈) EGYPTIAN HIEROGLYPH Z016D	[5452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13408, 0x0021 };
    uint32_t const ces[9] = { 0x5452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_435)
{
    // 13408 003F;	
    // (𓐈) EGYPTIAN HIEROGLYPH Z016D	[5452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13408, 0x003F };
    uint32_t const ces[9] = { 0x5452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_436)
{
    // 13408 0061;	
    // (𓐈) EGYPTIAN HIEROGLYPH Z016D	[5452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13408, 0x0061 };
    uint32_t const ces[9] = { 0x5452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_437)
{
    // 13408 0041;	
    // (𓐈) EGYPTIAN HIEROGLYPH Z016D	[5452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13408, 0x0041 };
    uint32_t const ces[9] = { 0x5452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_438)
{
    // 13408 0062;	
    // (𓐈) EGYPTIAN HIEROGLYPH Z016D	[5452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13408, 0x0062 };
    uint32_t const ces[9] = { 0x5452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_439)
{
    // 13409 0021;	
    // (𓐉) EGYPTIAN HIEROGLYPH Z016E	[5453 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13409, 0x0021 };
    uint32_t const ces[9] = { 0x5453, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_440)
{
    // 13409 003F;	
    // (𓐉) EGYPTIAN HIEROGLYPH Z016E	[5453 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13409, 0x003F };
    uint32_t const ces[9] = { 0x5453, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_441)
{
    // 13409 0061;	
    // (𓐉) EGYPTIAN HIEROGLYPH Z016E	[5453 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13409, 0x0061 };
    uint32_t const ces[9] = { 0x5453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_442)
{
    // 13409 0041;	
    // (𓐉) EGYPTIAN HIEROGLYPH Z016E	[5453 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13409, 0x0041 };
    uint32_t const ces[9] = { 0x5453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_443)
{
    // 13409 0062;	
    // (𓐉) EGYPTIAN HIEROGLYPH Z016E	[5453 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13409, 0x0062 };
    uint32_t const ces[9] = { 0x5453, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_444)
{
    // 1340A 0021;	
    // (𓐊) EGYPTIAN HIEROGLYPH Z016F	[5454 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340A, 0x0021 };
    uint32_t const ces[9] = { 0x5454, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_445)
{
    // 1340A 003F;	
    // (𓐊) EGYPTIAN HIEROGLYPH Z016F	[5454 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340A, 0x003F };
    uint32_t const ces[9] = { 0x5454, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_446)
{
    // 1340A 0061;	
    // (𓐊) EGYPTIAN HIEROGLYPH Z016F	[5454 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340A, 0x0061 };
    uint32_t const ces[9] = { 0x5454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_447)
{
    // 1340A 0041;	
    // (𓐊) EGYPTIAN HIEROGLYPH Z016F	[5454 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340A, 0x0041 };
    uint32_t const ces[9] = { 0x5454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_448)
{
    // 1340A 0062;	
    // (𓐊) EGYPTIAN HIEROGLYPH Z016F	[5454 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340A, 0x0062 };
    uint32_t const ces[9] = { 0x5454, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_449)
{
    // 1340B 0021;	
    // (𓐋) EGYPTIAN HIEROGLYPH Z016G	[5455 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340B, 0x0021 };
    uint32_t const ces[9] = { 0x5455, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_450)
{
    // 1340B 003F;	
    // (𓐋) EGYPTIAN HIEROGLYPH Z016G	[5455 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340B, 0x003F };
    uint32_t const ces[9] = { 0x5455, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_451)
{
    // 1340B 0061;	
    // (𓐋) EGYPTIAN HIEROGLYPH Z016G	[5455 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340B, 0x0061 };
    uint32_t const ces[9] = { 0x5455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_452)
{
    // 1340B 0041;	
    // (𓐋) EGYPTIAN HIEROGLYPH Z016G	[5455 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340B, 0x0041 };
    uint32_t const ces[9] = { 0x5455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_453)
{
    // 1340B 0062;	
    // (𓐋) EGYPTIAN HIEROGLYPH Z016G	[5455 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340B, 0x0062 };
    uint32_t const ces[9] = { 0x5455, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_454)
{
    // 1340C 0021;	
    // (𓐌) EGYPTIAN HIEROGLYPH Z016H	[5456 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340C, 0x0021 };
    uint32_t const ces[9] = { 0x5456, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_455)
{
    // 1340C 003F;	
    // (𓐌) EGYPTIAN HIEROGLYPH Z016H	[5456 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340C, 0x003F };
    uint32_t const ces[9] = { 0x5456, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_456)
{
    // 1340C 0061;	
    // (𓐌) EGYPTIAN HIEROGLYPH Z016H	[5456 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340C, 0x0061 };
    uint32_t const ces[9] = { 0x5456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_457)
{
    // 1340C 0041;	
    // (𓐌) EGYPTIAN HIEROGLYPH Z016H	[5456 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340C, 0x0041 };
    uint32_t const ces[9] = { 0x5456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_458)
{
    // 1340C 0062;	
    // (𓐌) EGYPTIAN HIEROGLYPH Z016H	[5456 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340C, 0x0062 };
    uint32_t const ces[9] = { 0x5456, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_459)
{
    // 1340D 0021;	
    // (𓐍) EGYPTIAN HIEROGLYPH AA001	[5457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340D, 0x0021 };
    uint32_t const ces[9] = { 0x5457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_460)
{
    // 1340D 003F;	
    // (𓐍) EGYPTIAN HIEROGLYPH AA001	[5457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340D, 0x003F };
    uint32_t const ces[9] = { 0x5457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_461)
{
    // 1340D 0061;	
    // (𓐍) EGYPTIAN HIEROGLYPH AA001	[5457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340D, 0x0061 };
    uint32_t const ces[9] = { 0x5457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_462)
{
    // 1340D 0041;	
    // (𓐍) EGYPTIAN HIEROGLYPH AA001	[5457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340D, 0x0041 };
    uint32_t const ces[9] = { 0x5457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_463)
{
    // 1340D 0062;	
    // (𓐍) EGYPTIAN HIEROGLYPH AA001	[5457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340D, 0x0062 };
    uint32_t const ces[9] = { 0x5457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_464)
{
    // 1340E 0021;	
    // (𓐎) EGYPTIAN HIEROGLYPH AA002	[5458 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340E, 0x0021 };
    uint32_t const ces[9] = { 0x5458, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_465)
{
    // 1340E 003F;	
    // (𓐎) EGYPTIAN HIEROGLYPH AA002	[5458 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340E, 0x003F };
    uint32_t const ces[9] = { 0x5458, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_466)
{
    // 1340E 0061;	
    // (𓐎) EGYPTIAN HIEROGLYPH AA002	[5458 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340E, 0x0061 };
    uint32_t const ces[9] = { 0x5458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_467)
{
    // 1340E 0041;	
    // (𓐎) EGYPTIAN HIEROGLYPH AA002	[5458 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340E, 0x0041 };
    uint32_t const ces[9] = { 0x5458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_468)
{
    // 1340E 0062;	
    // (𓐎) EGYPTIAN HIEROGLYPH AA002	[5458 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340E, 0x0062 };
    uint32_t const ces[9] = { 0x5458, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_469)
{
    // 1340F 0021;	
    // (𓐏) EGYPTIAN HIEROGLYPH AA003	[5459 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340F, 0x0021 };
    uint32_t const ces[9] = { 0x5459, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_470)
{
    // 1340F 003F;	
    // (𓐏) EGYPTIAN HIEROGLYPH AA003	[5459 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340F, 0x003F };
    uint32_t const ces[9] = { 0x5459, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_471)
{
    // 1340F 0061;	
    // (𓐏) EGYPTIAN HIEROGLYPH AA003	[5459 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340F, 0x0061 };
    uint32_t const ces[9] = { 0x5459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_472)
{
    // 1340F 0041;	
    // (𓐏) EGYPTIAN HIEROGLYPH AA003	[5459 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1340F, 0x0041 };
    uint32_t const ces[9] = { 0x5459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_473)
{
    // 1340F 0062;	
    // (𓐏) EGYPTIAN HIEROGLYPH AA003	[5459 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1340F, 0x0062 };
    uint32_t const ces[9] = { 0x5459, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_474)
{
    // 13410 0021;	
    // (𓐐) EGYPTIAN HIEROGLYPH AA004	[545A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13410, 0x0021 };
    uint32_t const ces[9] = { 0x545A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_475)
{
    // 13410 003F;	
    // (𓐐) EGYPTIAN HIEROGLYPH AA004	[545A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13410, 0x003F };
    uint32_t const ces[9] = { 0x545A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_476)
{
    // 13410 0061;	
    // (𓐐) EGYPTIAN HIEROGLYPH AA004	[545A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13410, 0x0061 };
    uint32_t const ces[9] = { 0x545A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_477)
{
    // 13410 0041;	
    // (𓐐) EGYPTIAN HIEROGLYPH AA004	[545A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13410, 0x0041 };
    uint32_t const ces[9] = { 0x545A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_478)
{
    // 13410 0062;	
    // (𓐐) EGYPTIAN HIEROGLYPH AA004	[545A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13410, 0x0062 };
    uint32_t const ces[9] = { 0x545A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_479)
{
    // 13411 0021;	
    // (𓐑) EGYPTIAN HIEROGLYPH AA005	[545B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13411, 0x0021 };
    uint32_t const ces[9] = { 0x545B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_480)
{
    // 13411 003F;	
    // (𓐑) EGYPTIAN HIEROGLYPH AA005	[545B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13411, 0x003F };
    uint32_t const ces[9] = { 0x545B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_481)
{
    // 13411 0061;	
    // (𓐑) EGYPTIAN HIEROGLYPH AA005	[545B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13411, 0x0061 };
    uint32_t const ces[9] = { 0x545B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_482)
{
    // 13411 0041;	
    // (𓐑) EGYPTIAN HIEROGLYPH AA005	[545B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13411, 0x0041 };
    uint32_t const ces[9] = { 0x545B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_483)
{
    // 13411 0062;	
    // (𓐑) EGYPTIAN HIEROGLYPH AA005	[545B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13411, 0x0062 };
    uint32_t const ces[9] = { 0x545B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_484)
{
    // 13412 0021;	
    // (𓐒) EGYPTIAN HIEROGLYPH AA006	[545C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13412, 0x0021 };
    uint32_t const ces[9] = { 0x545C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_485)
{
    // 13412 003F;	
    // (𓐒) EGYPTIAN HIEROGLYPH AA006	[545C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13412, 0x003F };
    uint32_t const ces[9] = { 0x545C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_486)
{
    // 13412 0061;	
    // (𓐒) EGYPTIAN HIEROGLYPH AA006	[545C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13412, 0x0061 };
    uint32_t const ces[9] = { 0x545C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_487)
{
    // 13412 0041;	
    // (𓐒) EGYPTIAN HIEROGLYPH AA006	[545C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13412, 0x0041 };
    uint32_t const ces[9] = { 0x545C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_488)
{
    // 13412 0062;	
    // (𓐒) EGYPTIAN HIEROGLYPH AA006	[545C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13412, 0x0062 };
    uint32_t const ces[9] = { 0x545C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_489)
{
    // 13413 0021;	
    // (𓐓) EGYPTIAN HIEROGLYPH AA007	[545D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13413, 0x0021 };
    uint32_t const ces[9] = { 0x545D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_490)
{
    // 13413 003F;	
    // (𓐓) EGYPTIAN HIEROGLYPH AA007	[545D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13413, 0x003F };
    uint32_t const ces[9] = { 0x545D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_491)
{
    // 13413 0061;	
    // (𓐓) EGYPTIAN HIEROGLYPH AA007	[545D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13413, 0x0061 };
    uint32_t const ces[9] = { 0x545D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_492)
{
    // 13413 0041;	
    // (𓐓) EGYPTIAN HIEROGLYPH AA007	[545D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13413, 0x0041 };
    uint32_t const ces[9] = { 0x545D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_493)
{
    // 13413 0062;	
    // (𓐓) EGYPTIAN HIEROGLYPH AA007	[545D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13413, 0x0062 };
    uint32_t const ces[9] = { 0x545D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_494)
{
    // 13414 0021;	
    // (𓐔) EGYPTIAN HIEROGLYPH AA007A	[545E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13414, 0x0021 };
    uint32_t const ces[9] = { 0x545E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_495)
{
    // 13414 003F;	
    // (𓐔) EGYPTIAN HIEROGLYPH AA007A	[545E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13414, 0x003F };
    uint32_t const ces[9] = { 0x545E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_496)
{
    // 13414 0061;	
    // (𓐔) EGYPTIAN HIEROGLYPH AA007A	[545E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13414, 0x0061 };
    uint32_t const ces[9] = { 0x545E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_497)
{
    // 13414 0041;	
    // (𓐔) EGYPTIAN HIEROGLYPH AA007A	[545E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13414, 0x0041 };
    uint32_t const ces[9] = { 0x545E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_498)
{
    // 13414 0062;	
    // (𓐔) EGYPTIAN HIEROGLYPH AA007A	[545E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13414, 0x0062 };
    uint32_t const ces[9] = { 0x545E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_306_499)
{
    // 13415 0021;	
    // (𓐕) EGYPTIAN HIEROGLYPH AA007B	[545F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13415, 0x0021 };
    uint32_t const ces[9] = { 0x545F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

