// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_274_000)
{
    // 1049B 003F;	
    // (êíõ) OSMANYA LETTER AA	[4787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049B, 0x003F };
    uint32_t const ces[9] = { 0x4787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_001)
{
    // 1049B 0061;	
    // (êíõ) OSMANYA LETTER AA	[4787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049B, 0x0061 };
    uint32_t const ces[9] = { 0x4787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_002)
{
    // 1049B 0041;	
    // (êíõ) OSMANYA LETTER AA	[4787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1049B, 0x0041 };
    uint32_t const ces[9] = { 0x4787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_003)
{
    // 1049B 0062;	
    // (êíõ) OSMANYA LETTER AA	[4787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049B, 0x0062 };
    uint32_t const ces[9] = { 0x4787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_004)
{
    // 1049C 0021;	
    // (êíú) OSMANYA LETTER EE	[4788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049C, 0x0021 };
    uint32_t const ces[9] = { 0x4788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_005)
{
    // 1049C 003F;	
    // (êíú) OSMANYA LETTER EE	[4788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049C, 0x003F };
    uint32_t const ces[9] = { 0x4788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_006)
{
    // 1049C 0061;	
    // (êíú) OSMANYA LETTER EE	[4788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049C, 0x0061 };
    uint32_t const ces[9] = { 0x4788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_007)
{
    // 1049C 0041;	
    // (êíú) OSMANYA LETTER EE	[4788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1049C, 0x0041 };
    uint32_t const ces[9] = { 0x4788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_008)
{
    // 1049C 0062;	
    // (êíú) OSMANYA LETTER EE	[4788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049C, 0x0062 };
    uint32_t const ces[9] = { 0x4788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_009)
{
    // 1049D 0021;	
    // (êíù) OSMANYA LETTER OO	[4789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049D, 0x0021 };
    uint32_t const ces[9] = { 0x4789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_010)
{
    // 1049D 003F;	
    // (êíù) OSMANYA LETTER OO	[4789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049D, 0x003F };
    uint32_t const ces[9] = { 0x4789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_011)
{
    // 1049D 0061;	
    // (êíù) OSMANYA LETTER OO	[4789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049D, 0x0061 };
    uint32_t const ces[9] = { 0x4789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_012)
{
    // 1049D 0041;	
    // (êíù) OSMANYA LETTER OO	[4789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1049D, 0x0041 };
    uint32_t const ces[9] = { 0x4789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_013)
{
    // 1049D 0062;	
    // (êíù) OSMANYA LETTER OO	[4789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049D, 0x0062 };
    uint32_t const ces[9] = { 0x4789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_014)
{
    // 10500 0021;	
    // (êîÄ) ELBASAN LETTER A	[478A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10500, 0x0021 };
    uint32_t const ces[9] = { 0x478A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_015)
{
    // 10500 003F;	
    // (êîÄ) ELBASAN LETTER A	[478A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10500, 0x003F };
    uint32_t const ces[9] = { 0x478A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_016)
{
    // 10500 0061;	
    // (êîÄ) ELBASAN LETTER A	[478A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10500, 0x0061 };
    uint32_t const ces[9] = { 0x478A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_017)
{
    // 10500 0041;	
    // (êîÄ) ELBASAN LETTER A	[478A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10500, 0x0041 };
    uint32_t const ces[9] = { 0x478A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_018)
{
    // 10500 0062;	
    // (êîÄ) ELBASAN LETTER A	[478A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10500, 0x0062 };
    uint32_t const ces[9] = { 0x478A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_019)
{
    // 10501 0021;	
    // (êîÅ) ELBASAN LETTER BE	[478B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10501, 0x0021 };
    uint32_t const ces[9] = { 0x478B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_020)
{
    // 10501 003F;	
    // (êîÅ) ELBASAN LETTER BE	[478B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10501, 0x003F };
    uint32_t const ces[9] = { 0x478B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_021)
{
    // 10501 0061;	
    // (êîÅ) ELBASAN LETTER BE	[478B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10501, 0x0061 };
    uint32_t const ces[9] = { 0x478B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_022)
{
    // 10501 0041;	
    // (êîÅ) ELBASAN LETTER BE	[478B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10501, 0x0041 };
    uint32_t const ces[9] = { 0x478B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_023)
{
    // 10501 0062;	
    // (êîÅ) ELBASAN LETTER BE	[478B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10501, 0x0062 };
    uint32_t const ces[9] = { 0x478B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_024)
{
    // 10502 0021;	
    // (êîÇ) ELBASAN LETTER CE	[478C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10502, 0x0021 };
    uint32_t const ces[9] = { 0x478C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_025)
{
    // 10502 003F;	
    // (êîÇ) ELBASAN LETTER CE	[478C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10502, 0x003F };
    uint32_t const ces[9] = { 0x478C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_026)
{
    // 10502 0061;	
    // (êîÇ) ELBASAN LETTER CE	[478C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10502, 0x0061 };
    uint32_t const ces[9] = { 0x478C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_027)
{
    // 10502 0041;	
    // (êîÇ) ELBASAN LETTER CE	[478C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10502, 0x0041 };
    uint32_t const ces[9] = { 0x478C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_028)
{
    // 10502 0062;	
    // (êîÇ) ELBASAN LETTER CE	[478C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10502, 0x0062 };
    uint32_t const ces[9] = { 0x478C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_029)
{
    // 10503 0021;	
    // (êîÉ) ELBASAN LETTER CHE	[478D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10503, 0x0021 };
    uint32_t const ces[9] = { 0x478D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_030)
{
    // 10503 003F;	
    // (êîÉ) ELBASAN LETTER CHE	[478D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10503, 0x003F };
    uint32_t const ces[9] = { 0x478D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_031)
{
    // 10503 0061;	
    // (êîÉ) ELBASAN LETTER CHE	[478D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10503, 0x0061 };
    uint32_t const ces[9] = { 0x478D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_032)
{
    // 10503 0041;	
    // (êîÉ) ELBASAN LETTER CHE	[478D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10503, 0x0041 };
    uint32_t const ces[9] = { 0x478D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_033)
{
    // 10503 0062;	
    // (êîÉ) ELBASAN LETTER CHE	[478D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10503, 0x0062 };
    uint32_t const ces[9] = { 0x478D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_034)
{
    // 10504 0021;	
    // (êîÑ) ELBASAN LETTER DE	[478E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10504, 0x0021 };
    uint32_t const ces[9] = { 0x478E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_035)
{
    // 10504 003F;	
    // (êîÑ) ELBASAN LETTER DE	[478E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10504, 0x003F };
    uint32_t const ces[9] = { 0x478E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_036)
{
    // 10504 0061;	
    // (êîÑ) ELBASAN LETTER DE	[478E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10504, 0x0061 };
    uint32_t const ces[9] = { 0x478E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_037)
{
    // 10504 0041;	
    // (êîÑ) ELBASAN LETTER DE	[478E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10504, 0x0041 };
    uint32_t const ces[9] = { 0x478E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_038)
{
    // 10504 0062;	
    // (êîÑ) ELBASAN LETTER DE	[478E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10504, 0x0062 };
    uint32_t const ces[9] = { 0x478E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_039)
{
    // 10505 0021;	
    // (êîÖ) ELBASAN LETTER NDE	[478F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10505, 0x0021 };
    uint32_t const ces[9] = { 0x478F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_040)
{
    // 10505 003F;	
    // (êîÖ) ELBASAN LETTER NDE	[478F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10505, 0x003F };
    uint32_t const ces[9] = { 0x478F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_041)
{
    // 10505 0061;	
    // (êîÖ) ELBASAN LETTER NDE	[478F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10505, 0x0061 };
    uint32_t const ces[9] = { 0x478F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_042)
{
    // 10505 0041;	
    // (êîÖ) ELBASAN LETTER NDE	[478F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10505, 0x0041 };
    uint32_t const ces[9] = { 0x478F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_043)
{
    // 10505 0062;	
    // (êîÖ) ELBASAN LETTER NDE	[478F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10505, 0x0062 };
    uint32_t const ces[9] = { 0x478F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_044)
{
    // 10506 0021;	
    // (êîÜ) ELBASAN LETTER DHE	[4790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10506, 0x0021 };
    uint32_t const ces[9] = { 0x4790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_045)
{
    // 10506 003F;	
    // (êîÜ) ELBASAN LETTER DHE	[4790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10506, 0x003F };
    uint32_t const ces[9] = { 0x4790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_046)
{
    // 10506 0061;	
    // (êîÜ) ELBASAN LETTER DHE	[4790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10506, 0x0061 };
    uint32_t const ces[9] = { 0x4790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_047)
{
    // 10506 0041;	
    // (êîÜ) ELBASAN LETTER DHE	[4790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10506, 0x0041 };
    uint32_t const ces[9] = { 0x4790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_048)
{
    // 10506 0062;	
    // (êîÜ) ELBASAN LETTER DHE	[4790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10506, 0x0062 };
    uint32_t const ces[9] = { 0x4790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_049)
{
    // 10507 0021;	
    // (êîá) ELBASAN LETTER EI	[4791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10507, 0x0021 };
    uint32_t const ces[9] = { 0x4791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_050)
{
    // 10507 003F;	
    // (êîá) ELBASAN LETTER EI	[4791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10507, 0x003F };
    uint32_t const ces[9] = { 0x4791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_051)
{
    // 10507 0061;	
    // (êîá) ELBASAN LETTER EI	[4791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10507, 0x0061 };
    uint32_t const ces[9] = { 0x4791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_052)
{
    // 10507 0041;	
    // (êîá) ELBASAN LETTER EI	[4791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10507, 0x0041 };
    uint32_t const ces[9] = { 0x4791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_053)
{
    // 10507 0062;	
    // (êîá) ELBASAN LETTER EI	[4791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10507, 0x0062 };
    uint32_t const ces[9] = { 0x4791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_054)
{
    // 10508 0021;	
    // (êîà) ELBASAN LETTER E	[4792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10508, 0x0021 };
    uint32_t const ces[9] = { 0x4792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_055)
{
    // 10508 003F;	
    // (êîà) ELBASAN LETTER E	[4792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10508, 0x003F };
    uint32_t const ces[9] = { 0x4792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_056)
{
    // 10508 0061;	
    // (êîà) ELBASAN LETTER E	[4792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10508, 0x0061 };
    uint32_t const ces[9] = { 0x4792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_057)
{
    // 10508 0041;	
    // (êîà) ELBASAN LETTER E	[4792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10508, 0x0041 };
    uint32_t const ces[9] = { 0x4792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_058)
{
    // 10508 0062;	
    // (êîà) ELBASAN LETTER E	[4792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10508, 0x0062 };
    uint32_t const ces[9] = { 0x4792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_059)
{
    // 10509 0021;	
    // (êîâ) ELBASAN LETTER FE	[4793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10509, 0x0021 };
    uint32_t const ces[9] = { 0x4793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_060)
{
    // 10509 003F;	
    // (êîâ) ELBASAN LETTER FE	[4793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10509, 0x003F };
    uint32_t const ces[9] = { 0x4793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_061)
{
    // 10509 0061;	
    // (êîâ) ELBASAN LETTER FE	[4793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10509, 0x0061 };
    uint32_t const ces[9] = { 0x4793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_062)
{
    // 10509 0041;	
    // (êîâ) ELBASAN LETTER FE	[4793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10509, 0x0041 };
    uint32_t const ces[9] = { 0x4793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_063)
{
    // 10509 0062;	
    // (êîâ) ELBASAN LETTER FE	[4793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10509, 0x0062 };
    uint32_t const ces[9] = { 0x4793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_064)
{
    // 1050A 0021;	
    // (êîä) ELBASAN LETTER GE	[4794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050A, 0x0021 };
    uint32_t const ces[9] = { 0x4794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_065)
{
    // 1050A 003F;	
    // (êîä) ELBASAN LETTER GE	[4794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050A, 0x003F };
    uint32_t const ces[9] = { 0x4794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_066)
{
    // 1050A 0061;	
    // (êîä) ELBASAN LETTER GE	[4794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050A, 0x0061 };
    uint32_t const ces[9] = { 0x4794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_067)
{
    // 1050A 0041;	
    // (êîä) ELBASAN LETTER GE	[4794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050A, 0x0041 };
    uint32_t const ces[9] = { 0x4794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_068)
{
    // 1050A 0062;	
    // (êîä) ELBASAN LETTER GE	[4794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050A, 0x0062 };
    uint32_t const ces[9] = { 0x4794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_069)
{
    // 1050B 0021;	
    // (êîã) ELBASAN LETTER GJE	[4795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050B, 0x0021 };
    uint32_t const ces[9] = { 0x4795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_070)
{
    // 1050B 003F;	
    // (êîã) ELBASAN LETTER GJE	[4795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050B, 0x003F };
    uint32_t const ces[9] = { 0x4795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_071)
{
    // 1050B 0061;	
    // (êîã) ELBASAN LETTER GJE	[4795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050B, 0x0061 };
    uint32_t const ces[9] = { 0x4795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_072)
{
    // 1050B 0041;	
    // (êîã) ELBASAN LETTER GJE	[4795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050B, 0x0041 };
    uint32_t const ces[9] = { 0x4795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_073)
{
    // 1050B 0062;	
    // (êîã) ELBASAN LETTER GJE	[4795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050B, 0x0062 };
    uint32_t const ces[9] = { 0x4795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_074)
{
    // 1050C 0021;	
    // (êîå) ELBASAN LETTER HE	[4796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050C, 0x0021 };
    uint32_t const ces[9] = { 0x4796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_075)
{
    // 1050C 003F;	
    // (êîå) ELBASAN LETTER HE	[4796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050C, 0x003F };
    uint32_t const ces[9] = { 0x4796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_076)
{
    // 1050C 0061;	
    // (êîå) ELBASAN LETTER HE	[4796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050C, 0x0061 };
    uint32_t const ces[9] = { 0x4796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_077)
{
    // 1050C 0041;	
    // (êîå) ELBASAN LETTER HE	[4796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050C, 0x0041 };
    uint32_t const ces[9] = { 0x4796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_078)
{
    // 1050C 0062;	
    // (êîå) ELBASAN LETTER HE	[4796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050C, 0x0062 };
    uint32_t const ces[9] = { 0x4796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_079)
{
    // 1050D 0021;	
    // (êîç) ELBASAN LETTER I	[4797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050D, 0x0021 };
    uint32_t const ces[9] = { 0x4797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_080)
{
    // 1050D 003F;	
    // (êîç) ELBASAN LETTER I	[4797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050D, 0x003F };
    uint32_t const ces[9] = { 0x4797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_081)
{
    // 1050D 0061;	
    // (êîç) ELBASAN LETTER I	[4797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050D, 0x0061 };
    uint32_t const ces[9] = { 0x4797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_082)
{
    // 1050D 0041;	
    // (êîç) ELBASAN LETTER I	[4797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050D, 0x0041 };
    uint32_t const ces[9] = { 0x4797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_083)
{
    // 1050D 0062;	
    // (êîç) ELBASAN LETTER I	[4797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050D, 0x0062 };
    uint32_t const ces[9] = { 0x4797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_084)
{
    // 1050E 0021;	
    // (êîé) ELBASAN LETTER JE	[4798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050E, 0x0021 };
    uint32_t const ces[9] = { 0x4798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_085)
{
    // 1050E 003F;	
    // (êîé) ELBASAN LETTER JE	[4798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050E, 0x003F };
    uint32_t const ces[9] = { 0x4798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_086)
{
    // 1050E 0061;	
    // (êîé) ELBASAN LETTER JE	[4798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050E, 0x0061 };
    uint32_t const ces[9] = { 0x4798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_087)
{
    // 1050E 0041;	
    // (êîé) ELBASAN LETTER JE	[4798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050E, 0x0041 };
    uint32_t const ces[9] = { 0x4798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_088)
{
    // 1050E 0062;	
    // (êîé) ELBASAN LETTER JE	[4798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050E, 0x0062 };
    uint32_t const ces[9] = { 0x4798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_089)
{
    // 1050F 0021;	
    // (êîè) ELBASAN LETTER KE	[4799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050F, 0x0021 };
    uint32_t const ces[9] = { 0x4799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_090)
{
    // 1050F 003F;	
    // (êîè) ELBASAN LETTER KE	[4799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050F, 0x003F };
    uint32_t const ces[9] = { 0x4799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_091)
{
    // 1050F 0061;	
    // (êîè) ELBASAN LETTER KE	[4799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050F, 0x0061 };
    uint32_t const ces[9] = { 0x4799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_092)
{
    // 1050F 0041;	
    // (êîè) ELBASAN LETTER KE	[4799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050F, 0x0041 };
    uint32_t const ces[9] = { 0x4799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_093)
{
    // 1050F 0062;	
    // (êîè) ELBASAN LETTER KE	[4799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050F, 0x0062 };
    uint32_t const ces[9] = { 0x4799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_094)
{
    // 10510 0021;	
    // (êîê) ELBASAN LETTER LE	[479A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10510, 0x0021 };
    uint32_t const ces[9] = { 0x479A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_095)
{
    // 10510 003F;	
    // (êîê) ELBASAN LETTER LE	[479A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10510, 0x003F };
    uint32_t const ces[9] = { 0x479A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_096)
{
    // 10510 0061;	
    // (êîê) ELBASAN LETTER LE	[479A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10510, 0x0061 };
    uint32_t const ces[9] = { 0x479A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_097)
{
    // 10510 0041;	
    // (êîê) ELBASAN LETTER LE	[479A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10510, 0x0041 };
    uint32_t const ces[9] = { 0x479A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_098)
{
    // 10510 0062;	
    // (êîê) ELBASAN LETTER LE	[479A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10510, 0x0062 };
    uint32_t const ces[9] = { 0x479A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_099)
{
    // 10511 0021;	
    // (êîë) ELBASAN LETTER LLE	[479B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10511, 0x0021 };
    uint32_t const ces[9] = { 0x479B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_100)
{
    // 10511 003F;	
    // (êîë) ELBASAN LETTER LLE	[479B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10511, 0x003F };
    uint32_t const ces[9] = { 0x479B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_101)
{
    // 10511 0061;	
    // (êîë) ELBASAN LETTER LLE	[479B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10511, 0x0061 };
    uint32_t const ces[9] = { 0x479B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_102)
{
    // 10511 0041;	
    // (êîë) ELBASAN LETTER LLE	[479B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10511, 0x0041 };
    uint32_t const ces[9] = { 0x479B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_103)
{
    // 10511 0062;	
    // (êîë) ELBASAN LETTER LLE	[479B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10511, 0x0062 };
    uint32_t const ces[9] = { 0x479B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_104)
{
    // 10512 0021;	
    // (êîí) ELBASAN LETTER ME	[479C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10512, 0x0021 };
    uint32_t const ces[9] = { 0x479C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_105)
{
    // 10512 003F;	
    // (êîí) ELBASAN LETTER ME	[479C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10512, 0x003F };
    uint32_t const ces[9] = { 0x479C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_106)
{
    // 10512 0061;	
    // (êîí) ELBASAN LETTER ME	[479C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10512, 0x0061 };
    uint32_t const ces[9] = { 0x479C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_107)
{
    // 10512 0041;	
    // (êîí) ELBASAN LETTER ME	[479C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10512, 0x0041 };
    uint32_t const ces[9] = { 0x479C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_108)
{
    // 10512 0062;	
    // (êîí) ELBASAN LETTER ME	[479C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10512, 0x0062 };
    uint32_t const ces[9] = { 0x479C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_109)
{
    // 10513 0021;	
    // (êîì) ELBASAN LETTER NE	[479D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10513, 0x0021 };
    uint32_t const ces[9] = { 0x479D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_110)
{
    // 10513 003F;	
    // (êîì) ELBASAN LETTER NE	[479D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10513, 0x003F };
    uint32_t const ces[9] = { 0x479D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_111)
{
    // 10513 0061;	
    // (êîì) ELBASAN LETTER NE	[479D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10513, 0x0061 };
    uint32_t const ces[9] = { 0x479D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_112)
{
    // 10513 0041;	
    // (êîì) ELBASAN LETTER NE	[479D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10513, 0x0041 };
    uint32_t const ces[9] = { 0x479D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_113)
{
    // 10513 0062;	
    // (êîì) ELBASAN LETTER NE	[479D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10513, 0x0062 };
    uint32_t const ces[9] = { 0x479D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_114)
{
    // 10514 0021;	
    // (êîî) ELBASAN LETTER NA	[479E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10514, 0x0021 };
    uint32_t const ces[9] = { 0x479E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_115)
{
    // 10514 003F;	
    // (êîî) ELBASAN LETTER NA	[479E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10514, 0x003F };
    uint32_t const ces[9] = { 0x479E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_116)
{
    // 10514 0061;	
    // (êîî) ELBASAN LETTER NA	[479E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10514, 0x0061 };
    uint32_t const ces[9] = { 0x479E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_117)
{
    // 10514 0041;	
    // (êîî) ELBASAN LETTER NA	[479E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10514, 0x0041 };
    uint32_t const ces[9] = { 0x479E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_118)
{
    // 10514 0062;	
    // (êîî) ELBASAN LETTER NA	[479E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10514, 0x0062 };
    uint32_t const ces[9] = { 0x479E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_119)
{
    // 10515 0021;	
    // (êîï) ELBASAN LETTER NJE	[479F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10515, 0x0021 };
    uint32_t const ces[9] = { 0x479F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_120)
{
    // 10515 003F;	
    // (êîï) ELBASAN LETTER NJE	[479F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10515, 0x003F };
    uint32_t const ces[9] = { 0x479F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_121)
{
    // 10515 0061;	
    // (êîï) ELBASAN LETTER NJE	[479F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10515, 0x0061 };
    uint32_t const ces[9] = { 0x479F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_122)
{
    // 10515 0041;	
    // (êîï) ELBASAN LETTER NJE	[479F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10515, 0x0041 };
    uint32_t const ces[9] = { 0x479F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_123)
{
    // 10515 0062;	
    // (êîï) ELBASAN LETTER NJE	[479F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10515, 0x0062 };
    uint32_t const ces[9] = { 0x479F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_124)
{
    // 10516 0021;	
    // (êîñ) ELBASAN LETTER O	[47A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10516, 0x0021 };
    uint32_t const ces[9] = { 0x47A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_125)
{
    // 10516 003F;	
    // (êîñ) ELBASAN LETTER O	[47A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10516, 0x003F };
    uint32_t const ces[9] = { 0x47A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_126)
{
    // 10516 0061;	
    // (êîñ) ELBASAN LETTER O	[47A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10516, 0x0061 };
    uint32_t const ces[9] = { 0x47A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_127)
{
    // 10516 0041;	
    // (êîñ) ELBASAN LETTER O	[47A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10516, 0x0041 };
    uint32_t const ces[9] = { 0x47A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_128)
{
    // 10516 0062;	
    // (êîñ) ELBASAN LETTER O	[47A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10516, 0x0062 };
    uint32_t const ces[9] = { 0x47A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_129)
{
    // 10517 0021;	
    // (êîó) ELBASAN LETTER PE	[47A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10517, 0x0021 };
    uint32_t const ces[9] = { 0x47A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_130)
{
    // 10517 003F;	
    // (êîó) ELBASAN LETTER PE	[47A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10517, 0x003F };
    uint32_t const ces[9] = { 0x47A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_131)
{
    // 10517 0061;	
    // (êîó) ELBASAN LETTER PE	[47A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10517, 0x0061 };
    uint32_t const ces[9] = { 0x47A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_132)
{
    // 10517 0041;	
    // (êîó) ELBASAN LETTER PE	[47A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10517, 0x0041 };
    uint32_t const ces[9] = { 0x47A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_133)
{
    // 10517 0062;	
    // (êîó) ELBASAN LETTER PE	[47A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10517, 0x0062 };
    uint32_t const ces[9] = { 0x47A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_134)
{
    // 10518 0021;	
    // (êîò) ELBASAN LETTER QE	[47A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10518, 0x0021 };
    uint32_t const ces[9] = { 0x47A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_135)
{
    // 10518 003F;	
    // (êîò) ELBASAN LETTER QE	[47A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10518, 0x003F };
    uint32_t const ces[9] = { 0x47A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_136)
{
    // 10518 0061;	
    // (êîò) ELBASAN LETTER QE	[47A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10518, 0x0061 };
    uint32_t const ces[9] = { 0x47A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_137)
{
    // 10518 0041;	
    // (êîò) ELBASAN LETTER QE	[47A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10518, 0x0041 };
    uint32_t const ces[9] = { 0x47A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_138)
{
    // 10518 0062;	
    // (êîò) ELBASAN LETTER QE	[47A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10518, 0x0062 };
    uint32_t const ces[9] = { 0x47A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_139)
{
    // 10519 0021;	
    // (êîô) ELBASAN LETTER RE	[47A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10519, 0x0021 };
    uint32_t const ces[9] = { 0x47A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_140)
{
    // 10519 003F;	
    // (êîô) ELBASAN LETTER RE	[47A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10519, 0x003F };
    uint32_t const ces[9] = { 0x47A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_141)
{
    // 10519 0061;	
    // (êîô) ELBASAN LETTER RE	[47A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10519, 0x0061 };
    uint32_t const ces[9] = { 0x47A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_142)
{
    // 10519 0041;	
    // (êîô) ELBASAN LETTER RE	[47A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10519, 0x0041 };
    uint32_t const ces[9] = { 0x47A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_143)
{
    // 10519 0062;	
    // (êîô) ELBASAN LETTER RE	[47A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10519, 0x0062 };
    uint32_t const ces[9] = { 0x47A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_144)
{
    // 1051A 0021;	
    // (êîö) ELBASAN LETTER RRE	[47A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051A, 0x0021 };
    uint32_t const ces[9] = { 0x47A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_145)
{
    // 1051A 003F;	
    // (êîö) ELBASAN LETTER RRE	[47A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051A, 0x003F };
    uint32_t const ces[9] = { 0x47A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_146)
{
    // 1051A 0061;	
    // (êîö) ELBASAN LETTER RRE	[47A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051A, 0x0061 };
    uint32_t const ces[9] = { 0x47A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_147)
{
    // 1051A 0041;	
    // (êîö) ELBASAN LETTER RRE	[47A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051A, 0x0041 };
    uint32_t const ces[9] = { 0x47A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_148)
{
    // 1051A 0062;	
    // (êîö) ELBASAN LETTER RRE	[47A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051A, 0x0062 };
    uint32_t const ces[9] = { 0x47A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_149)
{
    // 1051B 0021;	
    // (êîõ) ELBASAN LETTER SE	[47A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051B, 0x0021 };
    uint32_t const ces[9] = { 0x47A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_150)
{
    // 1051B 003F;	
    // (êîõ) ELBASAN LETTER SE	[47A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051B, 0x003F };
    uint32_t const ces[9] = { 0x47A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_151)
{
    // 1051B 0061;	
    // (êîõ) ELBASAN LETTER SE	[47A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051B, 0x0061 };
    uint32_t const ces[9] = { 0x47A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_152)
{
    // 1051B 0041;	
    // (êîõ) ELBASAN LETTER SE	[47A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051B, 0x0041 };
    uint32_t const ces[9] = { 0x47A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_153)
{
    // 1051B 0062;	
    // (êîõ) ELBASAN LETTER SE	[47A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051B, 0x0062 };
    uint32_t const ces[9] = { 0x47A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_154)
{
    // 1051C 0021;	
    // (êîú) ELBASAN LETTER SHE	[47A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051C, 0x0021 };
    uint32_t const ces[9] = { 0x47A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_155)
{
    // 1051C 003F;	
    // (êîú) ELBASAN LETTER SHE	[47A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051C, 0x003F };
    uint32_t const ces[9] = { 0x47A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_156)
{
    // 1051C 0061;	
    // (êîú) ELBASAN LETTER SHE	[47A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051C, 0x0061 };
    uint32_t const ces[9] = { 0x47A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_157)
{
    // 1051C 0041;	
    // (êîú) ELBASAN LETTER SHE	[47A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051C, 0x0041 };
    uint32_t const ces[9] = { 0x47A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_158)
{
    // 1051C 0062;	
    // (êîú) ELBASAN LETTER SHE	[47A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051C, 0x0062 };
    uint32_t const ces[9] = { 0x47A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_159)
{
    // 1051D 0021;	
    // (êîù) ELBASAN LETTER TE	[47A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051D, 0x0021 };
    uint32_t const ces[9] = { 0x47A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_160)
{
    // 1051D 003F;	
    // (êîù) ELBASAN LETTER TE	[47A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051D, 0x003F };
    uint32_t const ces[9] = { 0x47A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_161)
{
    // 1051D 0061;	
    // (êîù) ELBASAN LETTER TE	[47A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051D, 0x0061 };
    uint32_t const ces[9] = { 0x47A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_162)
{
    // 1051D 0041;	
    // (êîù) ELBASAN LETTER TE	[47A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051D, 0x0041 };
    uint32_t const ces[9] = { 0x47A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_163)
{
    // 1051D 0062;	
    // (êîù) ELBASAN LETTER TE	[47A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051D, 0x0062 };
    uint32_t const ces[9] = { 0x47A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_164)
{
    // 1051E 0021;	
    // (êîû) ELBASAN LETTER THE	[47A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051E, 0x0021 };
    uint32_t const ces[9] = { 0x47A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_165)
{
    // 1051E 003F;	
    // (êîû) ELBASAN LETTER THE	[47A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051E, 0x003F };
    uint32_t const ces[9] = { 0x47A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_166)
{
    // 1051E 0061;	
    // (êîû) ELBASAN LETTER THE	[47A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051E, 0x0061 };
    uint32_t const ces[9] = { 0x47A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_167)
{
    // 1051E 0041;	
    // (êîû) ELBASAN LETTER THE	[47A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051E, 0x0041 };
    uint32_t const ces[9] = { 0x47A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_168)
{
    // 1051E 0062;	
    // (êîû) ELBASAN LETTER THE	[47A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051E, 0x0062 };
    uint32_t const ces[9] = { 0x47A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_169)
{
    // 1051F 0021;	
    // (êîü) ELBASAN LETTER U	[47A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051F, 0x0021 };
    uint32_t const ces[9] = { 0x47A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_170)
{
    // 1051F 003F;	
    // (êîü) ELBASAN LETTER U	[47A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051F, 0x003F };
    uint32_t const ces[9] = { 0x47A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_171)
{
    // 1051F 0061;	
    // (êîü) ELBASAN LETTER U	[47A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051F, 0x0061 };
    uint32_t const ces[9] = { 0x47A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_172)
{
    // 1051F 0041;	
    // (êîü) ELBASAN LETTER U	[47A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051F, 0x0041 };
    uint32_t const ces[9] = { 0x47A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_173)
{
    // 1051F 0062;	
    // (êîü) ELBASAN LETTER U	[47A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051F, 0x0062 };
    uint32_t const ces[9] = { 0x47A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_174)
{
    // 10520 0021;	
    // (êî†) ELBASAN LETTER VE	[47AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10520, 0x0021 };
    uint32_t const ces[9] = { 0x47AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_175)
{
    // 10520 003F;	
    // (êî†) ELBASAN LETTER VE	[47AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10520, 0x003F };
    uint32_t const ces[9] = { 0x47AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_176)
{
    // 10520 0061;	
    // (êî†) ELBASAN LETTER VE	[47AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10520, 0x0061 };
    uint32_t const ces[9] = { 0x47AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_177)
{
    // 10520 0041;	
    // (êî†) ELBASAN LETTER VE	[47AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10520, 0x0041 };
    uint32_t const ces[9] = { 0x47AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_178)
{
    // 10520 0062;	
    // (êî†) ELBASAN LETTER VE	[47AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10520, 0x0062 };
    uint32_t const ces[9] = { 0x47AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_179)
{
    // 10521 0021;	
    // (êî°) ELBASAN LETTER XE	[47AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10521, 0x0021 };
    uint32_t const ces[9] = { 0x47AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_180)
{
    // 10521 003F;	
    // (êî°) ELBASAN LETTER XE	[47AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10521, 0x003F };
    uint32_t const ces[9] = { 0x47AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_181)
{
    // 10521 0061;	
    // (êî°) ELBASAN LETTER XE	[47AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10521, 0x0061 };
    uint32_t const ces[9] = { 0x47AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_182)
{
    // 10521 0041;	
    // (êî°) ELBASAN LETTER XE	[47AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10521, 0x0041 };
    uint32_t const ces[9] = { 0x47AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_183)
{
    // 10521 0062;	
    // (êî°) ELBASAN LETTER XE	[47AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10521, 0x0062 };
    uint32_t const ces[9] = { 0x47AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_184)
{
    // 10522 0021;	
    // (êî¢) ELBASAN LETTER Y	[47AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10522, 0x0021 };
    uint32_t const ces[9] = { 0x47AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_185)
{
    // 10522 003F;	
    // (êî¢) ELBASAN LETTER Y	[47AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10522, 0x003F };
    uint32_t const ces[9] = { 0x47AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_186)
{
    // 10522 0061;	
    // (êî¢) ELBASAN LETTER Y	[47AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10522, 0x0061 };
    uint32_t const ces[9] = { 0x47AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_187)
{
    // 10522 0041;	
    // (êî¢) ELBASAN LETTER Y	[47AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10522, 0x0041 };
    uint32_t const ces[9] = { 0x47AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_188)
{
    // 10522 0062;	
    // (êî¢) ELBASAN LETTER Y	[47AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10522, 0x0062 };
    uint32_t const ces[9] = { 0x47AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_189)
{
    // 10523 0021;	
    // (êî£) ELBASAN LETTER ZE	[47AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10523, 0x0021 };
    uint32_t const ces[9] = { 0x47AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_190)
{
    // 10523 003F;	
    // (êî£) ELBASAN LETTER ZE	[47AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10523, 0x003F };
    uint32_t const ces[9] = { 0x47AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_191)
{
    // 10523 0061;	
    // (êî£) ELBASAN LETTER ZE	[47AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10523, 0x0061 };
    uint32_t const ces[9] = { 0x47AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_192)
{
    // 10523 0041;	
    // (êî£) ELBASAN LETTER ZE	[47AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10523, 0x0041 };
    uint32_t const ces[9] = { 0x47AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_193)
{
    // 10523 0062;	
    // (êî£) ELBASAN LETTER ZE	[47AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10523, 0x0062 };
    uint32_t const ces[9] = { 0x47AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_194)
{
    // 10524 0021;	
    // (êî§) ELBASAN LETTER ZHE	[47AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10524, 0x0021 };
    uint32_t const ces[9] = { 0x47AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_195)
{
    // 10524 003F;	
    // (êî§) ELBASAN LETTER ZHE	[47AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10524, 0x003F };
    uint32_t const ces[9] = { 0x47AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_196)
{
    // 10524 0061;	
    // (êî§) ELBASAN LETTER ZHE	[47AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10524, 0x0061 };
    uint32_t const ces[9] = { 0x47AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_197)
{
    // 10524 0041;	
    // (êî§) ELBASAN LETTER ZHE	[47AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10524, 0x0041 };
    uint32_t const ces[9] = { 0x47AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_198)
{
    // 10524 0062;	
    // (êî§) ELBASAN LETTER ZHE	[47AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10524, 0x0062 };
    uint32_t const ces[9] = { 0x47AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_199)
{
    // 10525 0021;	
    // (êî•) ELBASAN LETTER GHE	[47AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10525, 0x0021 };
    uint32_t const ces[9] = { 0x47AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_200)
{
    // 10525 003F;	
    // (êî•) ELBASAN LETTER GHE	[47AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10525, 0x003F };
    uint32_t const ces[9] = { 0x47AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_201)
{
    // 10525 0061;	
    // (êî•) ELBASAN LETTER GHE	[47AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10525, 0x0061 };
    uint32_t const ces[9] = { 0x47AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_202)
{
    // 10525 0041;	
    // (êî•) ELBASAN LETTER GHE	[47AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10525, 0x0041 };
    uint32_t const ces[9] = { 0x47AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_203)
{
    // 10525 0062;	
    // (êî•) ELBASAN LETTER GHE	[47AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10525, 0x0062 };
    uint32_t const ces[9] = { 0x47AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_204)
{
    // 10526 0021;	
    // (êî¶) ELBASAN LETTER GHAMMA	[47B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10526, 0x0021 };
    uint32_t const ces[9] = { 0x47B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_205)
{
    // 10526 003F;	
    // (êî¶) ELBASAN LETTER GHAMMA	[47B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10526, 0x003F };
    uint32_t const ces[9] = { 0x47B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_206)
{
    // 10526 0061;	
    // (êî¶) ELBASAN LETTER GHAMMA	[47B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10526, 0x0061 };
    uint32_t const ces[9] = { 0x47B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_207)
{
    // 10526 0041;	
    // (êî¶) ELBASAN LETTER GHAMMA	[47B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10526, 0x0041 };
    uint32_t const ces[9] = { 0x47B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_208)
{
    // 10526 0062;	
    // (êî¶) ELBASAN LETTER GHAMMA	[47B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10526, 0x0062 };
    uint32_t const ces[9] = { 0x47B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_209)
{
    // 10527 0021;	
    // (êîß) ELBASAN LETTER KHE	[47B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10527, 0x0021 };
    uint32_t const ces[9] = { 0x47B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_210)
{
    // 10527 003F;	
    // (êîß) ELBASAN LETTER KHE	[47B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10527, 0x003F };
    uint32_t const ces[9] = { 0x47B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_211)
{
    // 10527 0061;	
    // (êîß) ELBASAN LETTER KHE	[47B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10527, 0x0061 };
    uint32_t const ces[9] = { 0x47B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_212)
{
    // 10527 0041;	
    // (êîß) ELBASAN LETTER KHE	[47B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10527, 0x0041 };
    uint32_t const ces[9] = { 0x47B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_213)
{
    // 10527 0062;	
    // (êîß) ELBASAN LETTER KHE	[47B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10527, 0x0062 };
    uint32_t const ces[9] = { 0x47B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_214)
{
    // 10530 0021;	
    // (êî∞) CAUCASIAN ALBANIAN LETTER ALT	[47B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10530, 0x0021 };
    uint32_t const ces[9] = { 0x47B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_215)
{
    // 10530 003F;	
    // (êî∞) CAUCASIAN ALBANIAN LETTER ALT	[47B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10530, 0x003F };
    uint32_t const ces[9] = { 0x47B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_216)
{
    // 10530 0061;	
    // (êî∞) CAUCASIAN ALBANIAN LETTER ALT	[47B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10530, 0x0061 };
    uint32_t const ces[9] = { 0x47B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_217)
{
    // 10530 0041;	
    // (êî∞) CAUCASIAN ALBANIAN LETTER ALT	[47B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10530, 0x0041 };
    uint32_t const ces[9] = { 0x47B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_218)
{
    // 10530 0062;	
    // (êî∞) CAUCASIAN ALBANIAN LETTER ALT	[47B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10530, 0x0062 };
    uint32_t const ces[9] = { 0x47B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_219)
{
    // 10531 0021;	
    // (êî±) CAUCASIAN ALBANIAN LETTER BET	[47B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10531, 0x0021 };
    uint32_t const ces[9] = { 0x47B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_220)
{
    // 10531 003F;	
    // (êî±) CAUCASIAN ALBANIAN LETTER BET	[47B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10531, 0x003F };
    uint32_t const ces[9] = { 0x47B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_221)
{
    // 10531 0061;	
    // (êî±) CAUCASIAN ALBANIAN LETTER BET	[47B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10531, 0x0061 };
    uint32_t const ces[9] = { 0x47B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_222)
{
    // 10531 0041;	
    // (êî±) CAUCASIAN ALBANIAN LETTER BET	[47B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10531, 0x0041 };
    uint32_t const ces[9] = { 0x47B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_223)
{
    // 10531 0062;	
    // (êî±) CAUCASIAN ALBANIAN LETTER BET	[47B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10531, 0x0062 };
    uint32_t const ces[9] = { 0x47B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_224)
{
    // 10532 0021;	
    // (êî≤) CAUCASIAN ALBANIAN LETTER GIM	[47B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10532, 0x0021 };
    uint32_t const ces[9] = { 0x47B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_225)
{
    // 10532 003F;	
    // (êî≤) CAUCASIAN ALBANIAN LETTER GIM	[47B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10532, 0x003F };
    uint32_t const ces[9] = { 0x47B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_226)
{
    // 10532 0061;	
    // (êî≤) CAUCASIAN ALBANIAN LETTER GIM	[47B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10532, 0x0061 };
    uint32_t const ces[9] = { 0x47B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_227)
{
    // 10532 0041;	
    // (êî≤) CAUCASIAN ALBANIAN LETTER GIM	[47B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10532, 0x0041 };
    uint32_t const ces[9] = { 0x47B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_228)
{
    // 10532 0062;	
    // (êî≤) CAUCASIAN ALBANIAN LETTER GIM	[47B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10532, 0x0062 };
    uint32_t const ces[9] = { 0x47B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_229)
{
    // 10533 0021;	
    // (êî≥) CAUCASIAN ALBANIAN LETTER DAT	[47B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10533, 0x0021 };
    uint32_t const ces[9] = { 0x47B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_230)
{
    // 10533 003F;	
    // (êî≥) CAUCASIAN ALBANIAN LETTER DAT	[47B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10533, 0x003F };
    uint32_t const ces[9] = { 0x47B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_231)
{
    // 10533 0061;	
    // (êî≥) CAUCASIAN ALBANIAN LETTER DAT	[47B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10533, 0x0061 };
    uint32_t const ces[9] = { 0x47B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_232)
{
    // 10533 0041;	
    // (êî≥) CAUCASIAN ALBANIAN LETTER DAT	[47B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10533, 0x0041 };
    uint32_t const ces[9] = { 0x47B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_233)
{
    // 10533 0062;	
    // (êî≥) CAUCASIAN ALBANIAN LETTER DAT	[47B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10533, 0x0062 };
    uint32_t const ces[9] = { 0x47B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_234)
{
    // 10534 0021;	
    // (êî¥) CAUCASIAN ALBANIAN LETTER EB	[47B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10534, 0x0021 };
    uint32_t const ces[9] = { 0x47B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_235)
{
    // 10534 003F;	
    // (êî¥) CAUCASIAN ALBANIAN LETTER EB	[47B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10534, 0x003F };
    uint32_t const ces[9] = { 0x47B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_236)
{
    // 10534 0061;	
    // (êî¥) CAUCASIAN ALBANIAN LETTER EB	[47B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10534, 0x0061 };
    uint32_t const ces[9] = { 0x47B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_237)
{
    // 10534 0041;	
    // (êî¥) CAUCASIAN ALBANIAN LETTER EB	[47B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10534, 0x0041 };
    uint32_t const ces[9] = { 0x47B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_238)
{
    // 10534 0062;	
    // (êî¥) CAUCASIAN ALBANIAN LETTER EB	[47B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10534, 0x0062 };
    uint32_t const ces[9] = { 0x47B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_239)
{
    // 10535 0021;	
    // (êîµ) CAUCASIAN ALBANIAN LETTER ZARL	[47B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10535, 0x0021 };
    uint32_t const ces[9] = { 0x47B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_240)
{
    // 10535 003F;	
    // (êîµ) CAUCASIAN ALBANIAN LETTER ZARL	[47B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10535, 0x003F };
    uint32_t const ces[9] = { 0x47B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_241)
{
    // 10535 0061;	
    // (êîµ) CAUCASIAN ALBANIAN LETTER ZARL	[47B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10535, 0x0061 };
    uint32_t const ces[9] = { 0x47B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_242)
{
    // 10535 0041;	
    // (êîµ) CAUCASIAN ALBANIAN LETTER ZARL	[47B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10535, 0x0041 };
    uint32_t const ces[9] = { 0x47B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_243)
{
    // 10535 0062;	
    // (êîµ) CAUCASIAN ALBANIAN LETTER ZARL	[47B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10535, 0x0062 };
    uint32_t const ces[9] = { 0x47B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_244)
{
    // 10536 0021;	
    // (êî∂) CAUCASIAN ALBANIAN LETTER EYN	[47B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10536, 0x0021 };
    uint32_t const ces[9] = { 0x47B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_245)
{
    // 10536 003F;	
    // (êî∂) CAUCASIAN ALBANIAN LETTER EYN	[47B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10536, 0x003F };
    uint32_t const ces[9] = { 0x47B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_246)
{
    // 10536 0061;	
    // (êî∂) CAUCASIAN ALBANIAN LETTER EYN	[47B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10536, 0x0061 };
    uint32_t const ces[9] = { 0x47B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_247)
{
    // 10536 0041;	
    // (êî∂) CAUCASIAN ALBANIAN LETTER EYN	[47B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10536, 0x0041 };
    uint32_t const ces[9] = { 0x47B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_248)
{
    // 10536 0062;	
    // (êî∂) CAUCASIAN ALBANIAN LETTER EYN	[47B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10536, 0x0062 };
    uint32_t const ces[9] = { 0x47B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_249)
{
    // 10537 0021;	
    // (êî∑) CAUCASIAN ALBANIAN LETTER ZHIL	[47B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10537, 0x0021 };
    uint32_t const ces[9] = { 0x47B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_250)
{
    // 10537 003F;	
    // (êî∑) CAUCASIAN ALBANIAN LETTER ZHIL	[47B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10537, 0x003F };
    uint32_t const ces[9] = { 0x47B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_251)
{
    // 10537 0061;	
    // (êî∑) CAUCASIAN ALBANIAN LETTER ZHIL	[47B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10537, 0x0061 };
    uint32_t const ces[9] = { 0x47B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_252)
{
    // 10537 0041;	
    // (êî∑) CAUCASIAN ALBANIAN LETTER ZHIL	[47B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10537, 0x0041 };
    uint32_t const ces[9] = { 0x47B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_253)
{
    // 10537 0062;	
    // (êî∑) CAUCASIAN ALBANIAN LETTER ZHIL	[47B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10537, 0x0062 };
    uint32_t const ces[9] = { 0x47B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_254)
{
    // 10538 0021;	
    // (êî∏) CAUCASIAN ALBANIAN LETTER TAS	[47BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10538, 0x0021 };
    uint32_t const ces[9] = { 0x47BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_255)
{
    // 10538 003F;	
    // (êî∏) CAUCASIAN ALBANIAN LETTER TAS	[47BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10538, 0x003F };
    uint32_t const ces[9] = { 0x47BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_256)
{
    // 10538 0061;	
    // (êî∏) CAUCASIAN ALBANIAN LETTER TAS	[47BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10538, 0x0061 };
    uint32_t const ces[9] = { 0x47BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_257)
{
    // 10538 0041;	
    // (êî∏) CAUCASIAN ALBANIAN LETTER TAS	[47BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10538, 0x0041 };
    uint32_t const ces[9] = { 0x47BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_258)
{
    // 10538 0062;	
    // (êî∏) CAUCASIAN ALBANIAN LETTER TAS	[47BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10538, 0x0062 };
    uint32_t const ces[9] = { 0x47BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_259)
{
    // 10539 0021;	
    // (êîπ) CAUCASIAN ALBANIAN LETTER CHA	[47BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10539, 0x0021 };
    uint32_t const ces[9] = { 0x47BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_260)
{
    // 10539 003F;	
    // (êîπ) CAUCASIAN ALBANIAN LETTER CHA	[47BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10539, 0x003F };
    uint32_t const ces[9] = { 0x47BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_261)
{
    // 10539 0061;	
    // (êîπ) CAUCASIAN ALBANIAN LETTER CHA	[47BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10539, 0x0061 };
    uint32_t const ces[9] = { 0x47BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_262)
{
    // 10539 0041;	
    // (êîπ) CAUCASIAN ALBANIAN LETTER CHA	[47BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10539, 0x0041 };
    uint32_t const ces[9] = { 0x47BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_263)
{
    // 10539 0062;	
    // (êîπ) CAUCASIAN ALBANIAN LETTER CHA	[47BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10539, 0x0062 };
    uint32_t const ces[9] = { 0x47BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_264)
{
    // 1053A 0021;	
    // (êî∫) CAUCASIAN ALBANIAN LETTER YOWD	[47BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053A, 0x0021 };
    uint32_t const ces[9] = { 0x47BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_265)
{
    // 1053A 003F;	
    // (êî∫) CAUCASIAN ALBANIAN LETTER YOWD	[47BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053A, 0x003F };
    uint32_t const ces[9] = { 0x47BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_266)
{
    // 1053A 0061;	
    // (êî∫) CAUCASIAN ALBANIAN LETTER YOWD	[47BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053A, 0x0061 };
    uint32_t const ces[9] = { 0x47BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_267)
{
    // 1053A 0041;	
    // (êî∫) CAUCASIAN ALBANIAN LETTER YOWD	[47BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053A, 0x0041 };
    uint32_t const ces[9] = { 0x47BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_268)
{
    // 1053A 0062;	
    // (êî∫) CAUCASIAN ALBANIAN LETTER YOWD	[47BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053A, 0x0062 };
    uint32_t const ces[9] = { 0x47BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_269)
{
    // 1053B 0021;	
    // (êîª) CAUCASIAN ALBANIAN LETTER ZHA	[47BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053B, 0x0021 };
    uint32_t const ces[9] = { 0x47BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_270)
{
    // 1053B 003F;	
    // (êîª) CAUCASIAN ALBANIAN LETTER ZHA	[47BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053B, 0x003F };
    uint32_t const ces[9] = { 0x47BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_271)
{
    // 1053B 0061;	
    // (êîª) CAUCASIAN ALBANIAN LETTER ZHA	[47BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053B, 0x0061 };
    uint32_t const ces[9] = { 0x47BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_272)
{
    // 1053B 0041;	
    // (êîª) CAUCASIAN ALBANIAN LETTER ZHA	[47BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053B, 0x0041 };
    uint32_t const ces[9] = { 0x47BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_273)
{
    // 1053B 0062;	
    // (êîª) CAUCASIAN ALBANIAN LETTER ZHA	[47BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053B, 0x0062 };
    uint32_t const ces[9] = { 0x47BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_274)
{
    // 1053C 0021;	
    // (êîº) CAUCASIAN ALBANIAN LETTER IRB	[47BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053C, 0x0021 };
    uint32_t const ces[9] = { 0x47BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_275)
{
    // 1053C 003F;	
    // (êîº) CAUCASIAN ALBANIAN LETTER IRB	[47BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053C, 0x003F };
    uint32_t const ces[9] = { 0x47BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_276)
{
    // 1053C 0061;	
    // (êîº) CAUCASIAN ALBANIAN LETTER IRB	[47BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053C, 0x0061 };
    uint32_t const ces[9] = { 0x47BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_277)
{
    // 1053C 0041;	
    // (êîº) CAUCASIAN ALBANIAN LETTER IRB	[47BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053C, 0x0041 };
    uint32_t const ces[9] = { 0x47BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_278)
{
    // 1053C 0062;	
    // (êîº) CAUCASIAN ALBANIAN LETTER IRB	[47BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053C, 0x0062 };
    uint32_t const ces[9] = { 0x47BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_279)
{
    // 1053D 0021;	
    // (êîΩ) CAUCASIAN ALBANIAN LETTER SHA	[47BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053D, 0x0021 };
    uint32_t const ces[9] = { 0x47BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_280)
{
    // 1053D 003F;	
    // (êîΩ) CAUCASIAN ALBANIAN LETTER SHA	[47BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053D, 0x003F };
    uint32_t const ces[9] = { 0x47BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_281)
{
    // 1053D 0061;	
    // (êîΩ) CAUCASIAN ALBANIAN LETTER SHA	[47BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053D, 0x0061 };
    uint32_t const ces[9] = { 0x47BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_282)
{
    // 1053D 0041;	
    // (êîΩ) CAUCASIAN ALBANIAN LETTER SHA	[47BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053D, 0x0041 };
    uint32_t const ces[9] = { 0x47BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_283)
{
    // 1053D 0062;	
    // (êîΩ) CAUCASIAN ALBANIAN LETTER SHA	[47BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053D, 0x0062 };
    uint32_t const ces[9] = { 0x47BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_284)
{
    // 1053E 0021;	
    // (êîæ) CAUCASIAN ALBANIAN LETTER LAN	[47C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053E, 0x0021 };
    uint32_t const ces[9] = { 0x47C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_285)
{
    // 1053E 003F;	
    // (êîæ) CAUCASIAN ALBANIAN LETTER LAN	[47C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053E, 0x003F };
    uint32_t const ces[9] = { 0x47C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_286)
{
    // 1053E 0061;	
    // (êîæ) CAUCASIAN ALBANIAN LETTER LAN	[47C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053E, 0x0061 };
    uint32_t const ces[9] = { 0x47C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_287)
{
    // 1053E 0041;	
    // (êîæ) CAUCASIAN ALBANIAN LETTER LAN	[47C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053E, 0x0041 };
    uint32_t const ces[9] = { 0x47C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_288)
{
    // 1053E 0062;	
    // (êîæ) CAUCASIAN ALBANIAN LETTER LAN	[47C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053E, 0x0062 };
    uint32_t const ces[9] = { 0x47C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_289)
{
    // 1053F 0021;	
    // (êîø) CAUCASIAN ALBANIAN LETTER INYA	[47C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053F, 0x0021 };
    uint32_t const ces[9] = { 0x47C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_290)
{
    // 1053F 003F;	
    // (êîø) CAUCASIAN ALBANIAN LETTER INYA	[47C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053F, 0x003F };
    uint32_t const ces[9] = { 0x47C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_291)
{
    // 1053F 0061;	
    // (êîø) CAUCASIAN ALBANIAN LETTER INYA	[47C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053F, 0x0061 };
    uint32_t const ces[9] = { 0x47C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_292)
{
    // 1053F 0041;	
    // (êîø) CAUCASIAN ALBANIAN LETTER INYA	[47C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053F, 0x0041 };
    uint32_t const ces[9] = { 0x47C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_293)
{
    // 1053F 0062;	
    // (êîø) CAUCASIAN ALBANIAN LETTER INYA	[47C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053F, 0x0062 };
    uint32_t const ces[9] = { 0x47C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_294)
{
    // 10540 0021;	
    // (êïÄ) CAUCASIAN ALBANIAN LETTER XEYN	[47C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10540, 0x0021 };
    uint32_t const ces[9] = { 0x47C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_295)
{
    // 10540 003F;	
    // (êïÄ) CAUCASIAN ALBANIAN LETTER XEYN	[47C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10540, 0x003F };
    uint32_t const ces[9] = { 0x47C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_296)
{
    // 10540 0061;	
    // (êïÄ) CAUCASIAN ALBANIAN LETTER XEYN	[47C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10540, 0x0061 };
    uint32_t const ces[9] = { 0x47C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_297)
{
    // 10540 0041;	
    // (êïÄ) CAUCASIAN ALBANIAN LETTER XEYN	[47C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10540, 0x0041 };
    uint32_t const ces[9] = { 0x47C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_298)
{
    // 10540 0062;	
    // (êïÄ) CAUCASIAN ALBANIAN LETTER XEYN	[47C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10540, 0x0062 };
    uint32_t const ces[9] = { 0x47C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_299)
{
    // 10541 0021;	
    // (êïÅ) CAUCASIAN ALBANIAN LETTER DYAN	[47C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10541, 0x0021 };
    uint32_t const ces[9] = { 0x47C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_300)
{
    // 10541 003F;	
    // (êïÅ) CAUCASIAN ALBANIAN LETTER DYAN	[47C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10541, 0x003F };
    uint32_t const ces[9] = { 0x47C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_301)
{
    // 10541 0061;	
    // (êïÅ) CAUCASIAN ALBANIAN LETTER DYAN	[47C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10541, 0x0061 };
    uint32_t const ces[9] = { 0x47C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_302)
{
    // 10541 0041;	
    // (êïÅ) CAUCASIAN ALBANIAN LETTER DYAN	[47C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10541, 0x0041 };
    uint32_t const ces[9] = { 0x47C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_303)
{
    // 10541 0062;	
    // (êïÅ) CAUCASIAN ALBANIAN LETTER DYAN	[47C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10541, 0x0062 };
    uint32_t const ces[9] = { 0x47C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_304)
{
    // 10542 0021;	
    // (êïÇ) CAUCASIAN ALBANIAN LETTER CAR	[47C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10542, 0x0021 };
    uint32_t const ces[9] = { 0x47C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_305)
{
    // 10542 003F;	
    // (êïÇ) CAUCASIAN ALBANIAN LETTER CAR	[47C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10542, 0x003F };
    uint32_t const ces[9] = { 0x47C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_306)
{
    // 10542 0061;	
    // (êïÇ) CAUCASIAN ALBANIAN LETTER CAR	[47C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10542, 0x0061 };
    uint32_t const ces[9] = { 0x47C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_307)
{
    // 10542 0041;	
    // (êïÇ) CAUCASIAN ALBANIAN LETTER CAR	[47C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10542, 0x0041 };
    uint32_t const ces[9] = { 0x47C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_308)
{
    // 10542 0062;	
    // (êïÇ) CAUCASIAN ALBANIAN LETTER CAR	[47C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10542, 0x0062 };
    uint32_t const ces[9] = { 0x47C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_309)
{
    // 10543 0021;	
    // (êïÉ) CAUCASIAN ALBANIAN LETTER JHOX	[47C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10543, 0x0021 };
    uint32_t const ces[9] = { 0x47C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_310)
{
    // 10543 003F;	
    // (êïÉ) CAUCASIAN ALBANIAN LETTER JHOX	[47C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10543, 0x003F };
    uint32_t const ces[9] = { 0x47C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_311)
{
    // 10543 0061;	
    // (êïÉ) CAUCASIAN ALBANIAN LETTER JHOX	[47C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10543, 0x0061 };
    uint32_t const ces[9] = { 0x47C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_312)
{
    // 10543 0041;	
    // (êïÉ) CAUCASIAN ALBANIAN LETTER JHOX	[47C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10543, 0x0041 };
    uint32_t const ces[9] = { 0x47C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_313)
{
    // 10543 0062;	
    // (êïÉ) CAUCASIAN ALBANIAN LETTER JHOX	[47C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10543, 0x0062 };
    uint32_t const ces[9] = { 0x47C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_314)
{
    // 10544 0021;	
    // (êïÑ) CAUCASIAN ALBANIAN LETTER KAR	[47C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10544, 0x0021 };
    uint32_t const ces[9] = { 0x47C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_315)
{
    // 10544 003F;	
    // (êïÑ) CAUCASIAN ALBANIAN LETTER KAR	[47C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10544, 0x003F };
    uint32_t const ces[9] = { 0x47C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_316)
{
    // 10544 0061;	
    // (êïÑ) CAUCASIAN ALBANIAN LETTER KAR	[47C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10544, 0x0061 };
    uint32_t const ces[9] = { 0x47C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_317)
{
    // 10544 0041;	
    // (êïÑ) CAUCASIAN ALBANIAN LETTER KAR	[47C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10544, 0x0041 };
    uint32_t const ces[9] = { 0x47C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_318)
{
    // 10544 0062;	
    // (êïÑ) CAUCASIAN ALBANIAN LETTER KAR	[47C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10544, 0x0062 };
    uint32_t const ces[9] = { 0x47C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_319)
{
    // 10545 0021;	
    // (êïÖ) CAUCASIAN ALBANIAN LETTER LYIT	[47C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10545, 0x0021 };
    uint32_t const ces[9] = { 0x47C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_320)
{
    // 10545 003F;	
    // (êïÖ) CAUCASIAN ALBANIAN LETTER LYIT	[47C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10545, 0x003F };
    uint32_t const ces[9] = { 0x47C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_321)
{
    // 10545 0061;	
    // (êïÖ) CAUCASIAN ALBANIAN LETTER LYIT	[47C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10545, 0x0061 };
    uint32_t const ces[9] = { 0x47C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_322)
{
    // 10545 0041;	
    // (êïÖ) CAUCASIAN ALBANIAN LETTER LYIT	[47C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10545, 0x0041 };
    uint32_t const ces[9] = { 0x47C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_323)
{
    // 10545 0062;	
    // (êïÖ) CAUCASIAN ALBANIAN LETTER LYIT	[47C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10545, 0x0062 };
    uint32_t const ces[9] = { 0x47C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_324)
{
    // 10546 0021;	
    // (êïÜ) CAUCASIAN ALBANIAN LETTER HEYT	[47C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10546, 0x0021 };
    uint32_t const ces[9] = { 0x47C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_325)
{
    // 10546 003F;	
    // (êïÜ) CAUCASIAN ALBANIAN LETTER HEYT	[47C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10546, 0x003F };
    uint32_t const ces[9] = { 0x47C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_326)
{
    // 10546 0061;	
    // (êïÜ) CAUCASIAN ALBANIAN LETTER HEYT	[47C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10546, 0x0061 };
    uint32_t const ces[9] = { 0x47C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_327)
{
    // 10546 0041;	
    // (êïÜ) CAUCASIAN ALBANIAN LETTER HEYT	[47C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10546, 0x0041 };
    uint32_t const ces[9] = { 0x47C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_328)
{
    // 10546 0062;	
    // (êïÜ) CAUCASIAN ALBANIAN LETTER HEYT	[47C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10546, 0x0062 };
    uint32_t const ces[9] = { 0x47C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_329)
{
    // 10547 0021;	
    // (êïá) CAUCASIAN ALBANIAN LETTER QAY	[47C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10547, 0x0021 };
    uint32_t const ces[9] = { 0x47C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_330)
{
    // 10547 003F;	
    // (êïá) CAUCASIAN ALBANIAN LETTER QAY	[47C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10547, 0x003F };
    uint32_t const ces[9] = { 0x47C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_331)
{
    // 10547 0061;	
    // (êïá) CAUCASIAN ALBANIAN LETTER QAY	[47C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10547, 0x0061 };
    uint32_t const ces[9] = { 0x47C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_332)
{
    // 10547 0041;	
    // (êïá) CAUCASIAN ALBANIAN LETTER QAY	[47C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10547, 0x0041 };
    uint32_t const ces[9] = { 0x47C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_333)
{
    // 10547 0062;	
    // (êïá) CAUCASIAN ALBANIAN LETTER QAY	[47C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10547, 0x0062 };
    uint32_t const ces[9] = { 0x47C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_334)
{
    // 10548 0021;	
    // (êïà) CAUCASIAN ALBANIAN LETTER AOR	[47CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10548, 0x0021 };
    uint32_t const ces[9] = { 0x47CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_335)
{
    // 10548 003F;	
    // (êïà) CAUCASIAN ALBANIAN LETTER AOR	[47CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10548, 0x003F };
    uint32_t const ces[9] = { 0x47CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_336)
{
    // 10548 0061;	
    // (êïà) CAUCASIAN ALBANIAN LETTER AOR	[47CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10548, 0x0061 };
    uint32_t const ces[9] = { 0x47CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_337)
{
    // 10548 0041;	
    // (êïà) CAUCASIAN ALBANIAN LETTER AOR	[47CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10548, 0x0041 };
    uint32_t const ces[9] = { 0x47CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_338)
{
    // 10548 0062;	
    // (êïà) CAUCASIAN ALBANIAN LETTER AOR	[47CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10548, 0x0062 };
    uint32_t const ces[9] = { 0x47CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_339)
{
    // 10549 0021;	
    // (êïâ) CAUCASIAN ALBANIAN LETTER CHOY	[47CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10549, 0x0021 };
    uint32_t const ces[9] = { 0x47CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_340)
{
    // 10549 003F;	
    // (êïâ) CAUCASIAN ALBANIAN LETTER CHOY	[47CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10549, 0x003F };
    uint32_t const ces[9] = { 0x47CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_341)
{
    // 10549 0061;	
    // (êïâ) CAUCASIAN ALBANIAN LETTER CHOY	[47CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10549, 0x0061 };
    uint32_t const ces[9] = { 0x47CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_342)
{
    // 10549 0041;	
    // (êïâ) CAUCASIAN ALBANIAN LETTER CHOY	[47CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10549, 0x0041 };
    uint32_t const ces[9] = { 0x47CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_343)
{
    // 10549 0062;	
    // (êïâ) CAUCASIAN ALBANIAN LETTER CHOY	[47CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10549, 0x0062 };
    uint32_t const ces[9] = { 0x47CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_344)
{
    // 1054A 0021;	
    // (êïä) CAUCASIAN ALBANIAN LETTER CHI	[47CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054A, 0x0021 };
    uint32_t const ces[9] = { 0x47CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_345)
{
    // 1054A 003F;	
    // (êïä) CAUCASIAN ALBANIAN LETTER CHI	[47CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054A, 0x003F };
    uint32_t const ces[9] = { 0x47CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_346)
{
    // 1054A 0061;	
    // (êïä) CAUCASIAN ALBANIAN LETTER CHI	[47CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054A, 0x0061 };
    uint32_t const ces[9] = { 0x47CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_347)
{
    // 1054A 0041;	
    // (êïä) CAUCASIAN ALBANIAN LETTER CHI	[47CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054A, 0x0041 };
    uint32_t const ces[9] = { 0x47CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_348)
{
    // 1054A 0062;	
    // (êïä) CAUCASIAN ALBANIAN LETTER CHI	[47CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054A, 0x0062 };
    uint32_t const ces[9] = { 0x47CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_349)
{
    // 1054B 0021;	
    // (êïã) CAUCASIAN ALBANIAN LETTER CYAY	[47CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054B, 0x0021 };
    uint32_t const ces[9] = { 0x47CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_350)
{
    // 1054B 003F;	
    // (êïã) CAUCASIAN ALBANIAN LETTER CYAY	[47CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054B, 0x003F };
    uint32_t const ces[9] = { 0x47CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_351)
{
    // 1054B 0061;	
    // (êïã) CAUCASIAN ALBANIAN LETTER CYAY	[47CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054B, 0x0061 };
    uint32_t const ces[9] = { 0x47CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_352)
{
    // 1054B 0041;	
    // (êïã) CAUCASIAN ALBANIAN LETTER CYAY	[47CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054B, 0x0041 };
    uint32_t const ces[9] = { 0x47CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_353)
{
    // 1054B 0062;	
    // (êïã) CAUCASIAN ALBANIAN LETTER CYAY	[47CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054B, 0x0062 };
    uint32_t const ces[9] = { 0x47CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_354)
{
    // 1054C 0021;	
    // (êïå) CAUCASIAN ALBANIAN LETTER MAQ	[47CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054C, 0x0021 };
    uint32_t const ces[9] = { 0x47CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_355)
{
    // 1054C 003F;	
    // (êïå) CAUCASIAN ALBANIAN LETTER MAQ	[47CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054C, 0x003F };
    uint32_t const ces[9] = { 0x47CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_356)
{
    // 1054C 0061;	
    // (êïå) CAUCASIAN ALBANIAN LETTER MAQ	[47CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054C, 0x0061 };
    uint32_t const ces[9] = { 0x47CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_357)
{
    // 1054C 0041;	
    // (êïå) CAUCASIAN ALBANIAN LETTER MAQ	[47CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054C, 0x0041 };
    uint32_t const ces[9] = { 0x47CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_358)
{
    // 1054C 0062;	
    // (êïå) CAUCASIAN ALBANIAN LETTER MAQ	[47CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054C, 0x0062 };
    uint32_t const ces[9] = { 0x47CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_359)
{
    // 1054D 0021;	
    // (êïç) CAUCASIAN ALBANIAN LETTER QAR	[47CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054D, 0x0021 };
    uint32_t const ces[9] = { 0x47CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_360)
{
    // 1054D 003F;	
    // (êïç) CAUCASIAN ALBANIAN LETTER QAR	[47CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054D, 0x003F };
    uint32_t const ces[9] = { 0x47CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_361)
{
    // 1054D 0061;	
    // (êïç) CAUCASIAN ALBANIAN LETTER QAR	[47CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054D, 0x0061 };
    uint32_t const ces[9] = { 0x47CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_362)
{
    // 1054D 0041;	
    // (êïç) CAUCASIAN ALBANIAN LETTER QAR	[47CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054D, 0x0041 };
    uint32_t const ces[9] = { 0x47CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_363)
{
    // 1054D 0062;	
    // (êïç) CAUCASIAN ALBANIAN LETTER QAR	[47CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054D, 0x0062 };
    uint32_t const ces[9] = { 0x47CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_364)
{
    // 1054E 0021;	
    // (êïé) CAUCASIAN ALBANIAN LETTER NOWC	[47D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054E, 0x0021 };
    uint32_t const ces[9] = { 0x47D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_365)
{
    // 1054E 003F;	
    // (êïé) CAUCASIAN ALBANIAN LETTER NOWC	[47D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054E, 0x003F };
    uint32_t const ces[9] = { 0x47D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_366)
{
    // 1054E 0061;	
    // (êïé) CAUCASIAN ALBANIAN LETTER NOWC	[47D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054E, 0x0061 };
    uint32_t const ces[9] = { 0x47D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_367)
{
    // 1054E 0041;	
    // (êïé) CAUCASIAN ALBANIAN LETTER NOWC	[47D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054E, 0x0041 };
    uint32_t const ces[9] = { 0x47D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_368)
{
    // 1054E 0062;	
    // (êïé) CAUCASIAN ALBANIAN LETTER NOWC	[47D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054E, 0x0062 };
    uint32_t const ces[9] = { 0x47D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_369)
{
    // 1054F 0021;	
    // (êïè) CAUCASIAN ALBANIAN LETTER DZYAY	[47D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054F, 0x0021 };
    uint32_t const ces[9] = { 0x47D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_370)
{
    // 1054F 003F;	
    // (êïè) CAUCASIAN ALBANIAN LETTER DZYAY	[47D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054F, 0x003F };
    uint32_t const ces[9] = { 0x47D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_371)
{
    // 1054F 0061;	
    // (êïè) CAUCASIAN ALBANIAN LETTER DZYAY	[47D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054F, 0x0061 };
    uint32_t const ces[9] = { 0x47D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_372)
{
    // 1054F 0041;	
    // (êïè) CAUCASIAN ALBANIAN LETTER DZYAY	[47D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054F, 0x0041 };
    uint32_t const ces[9] = { 0x47D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_373)
{
    // 1054F 0062;	
    // (êïè) CAUCASIAN ALBANIAN LETTER DZYAY	[47D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054F, 0x0062 };
    uint32_t const ces[9] = { 0x47D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_374)
{
    // 10550 0021;	
    // (êïê) CAUCASIAN ALBANIAN LETTER SHAK	[47D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10550, 0x0021 };
    uint32_t const ces[9] = { 0x47D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_375)
{
    // 10550 003F;	
    // (êïê) CAUCASIAN ALBANIAN LETTER SHAK	[47D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10550, 0x003F };
    uint32_t const ces[9] = { 0x47D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_376)
{
    // 10550 0061;	
    // (êïê) CAUCASIAN ALBANIAN LETTER SHAK	[47D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10550, 0x0061 };
    uint32_t const ces[9] = { 0x47D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_377)
{
    // 10550 0041;	
    // (êïê) CAUCASIAN ALBANIAN LETTER SHAK	[47D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10550, 0x0041 };
    uint32_t const ces[9] = { 0x47D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_378)
{
    // 10550 0062;	
    // (êïê) CAUCASIAN ALBANIAN LETTER SHAK	[47D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10550, 0x0062 };
    uint32_t const ces[9] = { 0x47D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_379)
{
    // 10551 0021;	
    // (êïë) CAUCASIAN ALBANIAN LETTER JAYN	[47D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10551, 0x0021 };
    uint32_t const ces[9] = { 0x47D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_380)
{
    // 10551 003F;	
    // (êïë) CAUCASIAN ALBANIAN LETTER JAYN	[47D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10551, 0x003F };
    uint32_t const ces[9] = { 0x47D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_381)
{
    // 10551 0061;	
    // (êïë) CAUCASIAN ALBANIAN LETTER JAYN	[47D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10551, 0x0061 };
    uint32_t const ces[9] = { 0x47D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_382)
{
    // 10551 0041;	
    // (êïë) CAUCASIAN ALBANIAN LETTER JAYN	[47D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10551, 0x0041 };
    uint32_t const ces[9] = { 0x47D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_383)
{
    // 10551 0062;	
    // (êïë) CAUCASIAN ALBANIAN LETTER JAYN	[47D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10551, 0x0062 };
    uint32_t const ces[9] = { 0x47D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_384)
{
    // 10552 0021;	
    // (êïí) CAUCASIAN ALBANIAN LETTER ON	[47D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10552, 0x0021 };
    uint32_t const ces[9] = { 0x47D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_385)
{
    // 10552 003F;	
    // (êïí) CAUCASIAN ALBANIAN LETTER ON	[47D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10552, 0x003F };
    uint32_t const ces[9] = { 0x47D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_386)
{
    // 10552 0061;	
    // (êïí) CAUCASIAN ALBANIAN LETTER ON	[47D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10552, 0x0061 };
    uint32_t const ces[9] = { 0x47D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_387)
{
    // 10552 0041;	
    // (êïí) CAUCASIAN ALBANIAN LETTER ON	[47D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10552, 0x0041 };
    uint32_t const ces[9] = { 0x47D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_388)
{
    // 10552 0062;	
    // (êïí) CAUCASIAN ALBANIAN LETTER ON	[47D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10552, 0x0062 };
    uint32_t const ces[9] = { 0x47D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_389)
{
    // 10553 0021;	
    // (êïì) CAUCASIAN ALBANIAN LETTER TYAY	[47D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10553, 0x0021 };
    uint32_t const ces[9] = { 0x47D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_390)
{
    // 10553 003F;	
    // (êïì) CAUCASIAN ALBANIAN LETTER TYAY	[47D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10553, 0x003F };
    uint32_t const ces[9] = { 0x47D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_391)
{
    // 10553 0061;	
    // (êïì) CAUCASIAN ALBANIAN LETTER TYAY	[47D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10553, 0x0061 };
    uint32_t const ces[9] = { 0x47D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_392)
{
    // 10553 0041;	
    // (êïì) CAUCASIAN ALBANIAN LETTER TYAY	[47D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10553, 0x0041 };
    uint32_t const ces[9] = { 0x47D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_393)
{
    // 10553 0062;	
    // (êïì) CAUCASIAN ALBANIAN LETTER TYAY	[47D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10553, 0x0062 };
    uint32_t const ces[9] = { 0x47D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_394)
{
    // 10554 0021;	
    // (êïî) CAUCASIAN ALBANIAN LETTER FAM	[47D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10554, 0x0021 };
    uint32_t const ces[9] = { 0x47D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_395)
{
    // 10554 003F;	
    // (êïî) CAUCASIAN ALBANIAN LETTER FAM	[47D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10554, 0x003F };
    uint32_t const ces[9] = { 0x47D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_396)
{
    // 10554 0061;	
    // (êïî) CAUCASIAN ALBANIAN LETTER FAM	[47D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10554, 0x0061 };
    uint32_t const ces[9] = { 0x47D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_397)
{
    // 10554 0041;	
    // (êïî) CAUCASIAN ALBANIAN LETTER FAM	[47D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10554, 0x0041 };
    uint32_t const ces[9] = { 0x47D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_398)
{
    // 10554 0062;	
    // (êïî) CAUCASIAN ALBANIAN LETTER FAM	[47D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10554, 0x0062 };
    uint32_t const ces[9] = { 0x47D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_399)
{
    // 10555 0021;	
    // (êïï) CAUCASIAN ALBANIAN LETTER DZAY	[47D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10555, 0x0021 };
    uint32_t const ces[9] = { 0x47D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_400)
{
    // 10555 003F;	
    // (êïï) CAUCASIAN ALBANIAN LETTER DZAY	[47D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10555, 0x003F };
    uint32_t const ces[9] = { 0x47D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_401)
{
    // 10555 0061;	
    // (êïï) CAUCASIAN ALBANIAN LETTER DZAY	[47D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10555, 0x0061 };
    uint32_t const ces[9] = { 0x47D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_402)
{
    // 10555 0041;	
    // (êïï) CAUCASIAN ALBANIAN LETTER DZAY	[47D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10555, 0x0041 };
    uint32_t const ces[9] = { 0x47D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_403)
{
    // 10555 0062;	
    // (êïï) CAUCASIAN ALBANIAN LETTER DZAY	[47D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10555, 0x0062 };
    uint32_t const ces[9] = { 0x47D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_404)
{
    // 10556 0021;	
    // (êïñ) CAUCASIAN ALBANIAN LETTER CHAT	[47D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10556, 0x0021 };
    uint32_t const ces[9] = { 0x47D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_405)
{
    // 10556 003F;	
    // (êïñ) CAUCASIAN ALBANIAN LETTER CHAT	[47D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10556, 0x003F };
    uint32_t const ces[9] = { 0x47D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_406)
{
    // 10556 0061;	
    // (êïñ) CAUCASIAN ALBANIAN LETTER CHAT	[47D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10556, 0x0061 };
    uint32_t const ces[9] = { 0x47D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_407)
{
    // 10556 0041;	
    // (êïñ) CAUCASIAN ALBANIAN LETTER CHAT	[47D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10556, 0x0041 };
    uint32_t const ces[9] = { 0x47D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_408)
{
    // 10556 0062;	
    // (êïñ) CAUCASIAN ALBANIAN LETTER CHAT	[47D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10556, 0x0062 };
    uint32_t const ces[9] = { 0x47D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_409)
{
    // 10557 0021;	
    // (êïó) CAUCASIAN ALBANIAN LETTER PEN	[47D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10557, 0x0021 };
    uint32_t const ces[9] = { 0x47D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_410)
{
    // 10557 003F;	
    // (êïó) CAUCASIAN ALBANIAN LETTER PEN	[47D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10557, 0x003F };
    uint32_t const ces[9] = { 0x47D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_411)
{
    // 10557 0061;	
    // (êïó) CAUCASIAN ALBANIAN LETTER PEN	[47D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10557, 0x0061 };
    uint32_t const ces[9] = { 0x47D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_412)
{
    // 10557 0041;	
    // (êïó) CAUCASIAN ALBANIAN LETTER PEN	[47D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10557, 0x0041 };
    uint32_t const ces[9] = { 0x47D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_413)
{
    // 10557 0062;	
    // (êïó) CAUCASIAN ALBANIAN LETTER PEN	[47D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10557, 0x0062 };
    uint32_t const ces[9] = { 0x47D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_414)
{
    // 10558 0021;	
    // (êïò) CAUCASIAN ALBANIAN LETTER GHEYS	[47DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10558, 0x0021 };
    uint32_t const ces[9] = { 0x47DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_415)
{
    // 10558 003F;	
    // (êïò) CAUCASIAN ALBANIAN LETTER GHEYS	[47DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10558, 0x003F };
    uint32_t const ces[9] = { 0x47DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_416)
{
    // 10558 0061;	
    // (êïò) CAUCASIAN ALBANIAN LETTER GHEYS	[47DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10558, 0x0061 };
    uint32_t const ces[9] = { 0x47DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_417)
{
    // 10558 0041;	
    // (êïò) CAUCASIAN ALBANIAN LETTER GHEYS	[47DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10558, 0x0041 };
    uint32_t const ces[9] = { 0x47DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_418)
{
    // 10558 0062;	
    // (êïò) CAUCASIAN ALBANIAN LETTER GHEYS	[47DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10558, 0x0062 };
    uint32_t const ces[9] = { 0x47DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_419)
{
    // 10559 0021;	
    // (êïô) CAUCASIAN ALBANIAN LETTER RAT	[47DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10559, 0x0021 };
    uint32_t const ces[9] = { 0x47DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_420)
{
    // 10559 003F;	
    // (êïô) CAUCASIAN ALBANIAN LETTER RAT	[47DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10559, 0x003F };
    uint32_t const ces[9] = { 0x47DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_421)
{
    // 10559 0061;	
    // (êïô) CAUCASIAN ALBANIAN LETTER RAT	[47DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10559, 0x0061 };
    uint32_t const ces[9] = { 0x47DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_422)
{
    // 10559 0041;	
    // (êïô) CAUCASIAN ALBANIAN LETTER RAT	[47DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10559, 0x0041 };
    uint32_t const ces[9] = { 0x47DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_423)
{
    // 10559 0062;	
    // (êïô) CAUCASIAN ALBANIAN LETTER RAT	[47DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10559, 0x0062 };
    uint32_t const ces[9] = { 0x47DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_424)
{
    // 1055A 0021;	
    // (êïö) CAUCASIAN ALBANIAN LETTER SEYK	[47DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055A, 0x0021 };
    uint32_t const ces[9] = { 0x47DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_425)
{
    // 1055A 003F;	
    // (êïö) CAUCASIAN ALBANIAN LETTER SEYK	[47DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055A, 0x003F };
    uint32_t const ces[9] = { 0x47DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_426)
{
    // 1055A 0061;	
    // (êïö) CAUCASIAN ALBANIAN LETTER SEYK	[47DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055A, 0x0061 };
    uint32_t const ces[9] = { 0x47DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_427)
{
    // 1055A 0041;	
    // (êïö) CAUCASIAN ALBANIAN LETTER SEYK	[47DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055A, 0x0041 };
    uint32_t const ces[9] = { 0x47DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_428)
{
    // 1055A 0062;	
    // (êïö) CAUCASIAN ALBANIAN LETTER SEYK	[47DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055A, 0x0062 };
    uint32_t const ces[9] = { 0x47DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_429)
{
    // 1055B 0021;	
    // (êïõ) CAUCASIAN ALBANIAN LETTER VEYZ	[47DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055B, 0x0021 };
    uint32_t const ces[9] = { 0x47DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_430)
{
    // 1055B 003F;	
    // (êïõ) CAUCASIAN ALBANIAN LETTER VEYZ	[47DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055B, 0x003F };
    uint32_t const ces[9] = { 0x47DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_431)
{
    // 1055B 0061;	
    // (êïõ) CAUCASIAN ALBANIAN LETTER VEYZ	[47DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055B, 0x0061 };
    uint32_t const ces[9] = { 0x47DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_432)
{
    // 1055B 0041;	
    // (êïõ) CAUCASIAN ALBANIAN LETTER VEYZ	[47DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055B, 0x0041 };
    uint32_t const ces[9] = { 0x47DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_433)
{
    // 1055B 0062;	
    // (êïõ) CAUCASIAN ALBANIAN LETTER VEYZ	[47DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055B, 0x0062 };
    uint32_t const ces[9] = { 0x47DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_434)
{
    // 1055C 0021;	
    // (êïú) CAUCASIAN ALBANIAN LETTER TIWR	[47DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055C, 0x0021 };
    uint32_t const ces[9] = { 0x47DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_435)
{
    // 1055C 003F;	
    // (êïú) CAUCASIAN ALBANIAN LETTER TIWR	[47DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055C, 0x003F };
    uint32_t const ces[9] = { 0x47DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_436)
{
    // 1055C 0061;	
    // (êïú) CAUCASIAN ALBANIAN LETTER TIWR	[47DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055C, 0x0061 };
    uint32_t const ces[9] = { 0x47DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_437)
{
    // 1055C 0041;	
    // (êïú) CAUCASIAN ALBANIAN LETTER TIWR	[47DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055C, 0x0041 };
    uint32_t const ces[9] = { 0x47DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_438)
{
    // 1055C 0062;	
    // (êïú) CAUCASIAN ALBANIAN LETTER TIWR	[47DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055C, 0x0062 };
    uint32_t const ces[9] = { 0x47DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_439)
{
    // 1055D 0021;	
    // (êïù) CAUCASIAN ALBANIAN LETTER SHOY	[47DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055D, 0x0021 };
    uint32_t const ces[9] = { 0x47DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_440)
{
    // 1055D 003F;	
    // (êïù) CAUCASIAN ALBANIAN LETTER SHOY	[47DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055D, 0x003F };
    uint32_t const ces[9] = { 0x47DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_441)
{
    // 1055D 0061;	
    // (êïù) CAUCASIAN ALBANIAN LETTER SHOY	[47DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055D, 0x0061 };
    uint32_t const ces[9] = { 0x47DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_442)
{
    // 1055D 0041;	
    // (êïù) CAUCASIAN ALBANIAN LETTER SHOY	[47DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055D, 0x0041 };
    uint32_t const ces[9] = { 0x47DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_443)
{
    // 1055D 0062;	
    // (êïù) CAUCASIAN ALBANIAN LETTER SHOY	[47DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055D, 0x0062 };
    uint32_t const ces[9] = { 0x47DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_444)
{
    // 1055E 0021;	
    // (êïû) CAUCASIAN ALBANIAN LETTER IWN	[47E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055E, 0x0021 };
    uint32_t const ces[9] = { 0x47E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_445)
{
    // 1055E 003F;	
    // (êïû) CAUCASIAN ALBANIAN LETTER IWN	[47E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055E, 0x003F };
    uint32_t const ces[9] = { 0x47E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_446)
{
    // 1055E 0061;	
    // (êïû) CAUCASIAN ALBANIAN LETTER IWN	[47E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055E, 0x0061 };
    uint32_t const ces[9] = { 0x47E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_447)
{
    // 1055E 0041;	
    // (êïû) CAUCASIAN ALBANIAN LETTER IWN	[47E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055E, 0x0041 };
    uint32_t const ces[9] = { 0x47E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_448)
{
    // 1055E 0062;	
    // (êïû) CAUCASIAN ALBANIAN LETTER IWN	[47E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055E, 0x0062 };
    uint32_t const ces[9] = { 0x47E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_449)
{
    // 1055F 0021;	
    // (êïü) CAUCASIAN ALBANIAN LETTER CYAW	[47E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055F, 0x0021 };
    uint32_t const ces[9] = { 0x47E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_450)
{
    // 1055F 003F;	
    // (êïü) CAUCASIAN ALBANIAN LETTER CYAW	[47E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055F, 0x003F };
    uint32_t const ces[9] = { 0x47E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_451)
{
    // 1055F 0061;	
    // (êïü) CAUCASIAN ALBANIAN LETTER CYAW	[47E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055F, 0x0061 };
    uint32_t const ces[9] = { 0x47E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_452)
{
    // 1055F 0041;	
    // (êïü) CAUCASIAN ALBANIAN LETTER CYAW	[47E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055F, 0x0041 };
    uint32_t const ces[9] = { 0x47E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_453)
{
    // 1055F 0062;	
    // (êïü) CAUCASIAN ALBANIAN LETTER CYAW	[47E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055F, 0x0062 };
    uint32_t const ces[9] = { 0x47E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_454)
{
    // 10560 0021;	
    // (êï†) CAUCASIAN ALBANIAN LETTER CAYN	[47E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10560, 0x0021 };
    uint32_t const ces[9] = { 0x47E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_455)
{
    // 10560 003F;	
    // (êï†) CAUCASIAN ALBANIAN LETTER CAYN	[47E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10560, 0x003F };
    uint32_t const ces[9] = { 0x47E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_456)
{
    // 10560 0061;	
    // (êï†) CAUCASIAN ALBANIAN LETTER CAYN	[47E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10560, 0x0061 };
    uint32_t const ces[9] = { 0x47E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_457)
{
    // 10560 0041;	
    // (êï†) CAUCASIAN ALBANIAN LETTER CAYN	[47E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10560, 0x0041 };
    uint32_t const ces[9] = { 0x47E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_458)
{
    // 10560 0062;	
    // (êï†) CAUCASIAN ALBANIAN LETTER CAYN	[47E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10560, 0x0062 };
    uint32_t const ces[9] = { 0x47E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_459)
{
    // 10561 0021;	
    // (êï°) CAUCASIAN ALBANIAN LETTER YAYD	[47E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10561, 0x0021 };
    uint32_t const ces[9] = { 0x47E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_460)
{
    // 10561 003F;	
    // (êï°) CAUCASIAN ALBANIAN LETTER YAYD	[47E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10561, 0x003F };
    uint32_t const ces[9] = { 0x47E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_461)
{
    // 10561 0061;	
    // (êï°) CAUCASIAN ALBANIAN LETTER YAYD	[47E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10561, 0x0061 };
    uint32_t const ces[9] = { 0x47E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_462)
{
    // 10561 0041;	
    // (êï°) CAUCASIAN ALBANIAN LETTER YAYD	[47E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10561, 0x0041 };
    uint32_t const ces[9] = { 0x47E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_463)
{
    // 10561 0062;	
    // (êï°) CAUCASIAN ALBANIAN LETTER YAYD	[47E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10561, 0x0062 };
    uint32_t const ces[9] = { 0x47E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_464)
{
    // 10562 0021;	
    // (êï¢) CAUCASIAN ALBANIAN LETTER PIWR	[47E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10562, 0x0021 };
    uint32_t const ces[9] = { 0x47E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_465)
{
    // 10562 003F;	
    // (êï¢) CAUCASIAN ALBANIAN LETTER PIWR	[47E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10562, 0x003F };
    uint32_t const ces[9] = { 0x47E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_466)
{
    // 10562 0061;	
    // (êï¢) CAUCASIAN ALBANIAN LETTER PIWR	[47E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10562, 0x0061 };
    uint32_t const ces[9] = { 0x47E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_467)
{
    // 10562 0041;	
    // (êï¢) CAUCASIAN ALBANIAN LETTER PIWR	[47E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10562, 0x0041 };
    uint32_t const ces[9] = { 0x47E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_468)
{
    // 10562 0062;	
    // (êï¢) CAUCASIAN ALBANIAN LETTER PIWR	[47E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10562, 0x0062 };
    uint32_t const ces[9] = { 0x47E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_469)
{
    // 10563 0021;	
    // (êï£) CAUCASIAN ALBANIAN LETTER KIW	[47E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10563, 0x0021 };
    uint32_t const ces[9] = { 0x47E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_470)
{
    // 10563 003F;	
    // (êï£) CAUCASIAN ALBANIAN LETTER KIW	[47E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10563, 0x003F };
    uint32_t const ces[9] = { 0x47E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_471)
{
    // 10563 0061;	
    // (êï£) CAUCASIAN ALBANIAN LETTER KIW	[47E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10563, 0x0061 };
    uint32_t const ces[9] = { 0x47E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_472)
{
    // 10563 0041;	
    // (êï£) CAUCASIAN ALBANIAN LETTER KIW	[47E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10563, 0x0041 };
    uint32_t const ces[9] = { 0x47E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_473)
{
    // 10563 0062;	
    // (êï£) CAUCASIAN ALBANIAN LETTER KIW	[47E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10563, 0x0062 };
    uint32_t const ces[9] = { 0x47E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_474)
{
    // 110D0 0021;	
    // (ëÉê) SORA SOMPENG LETTER SAH	[47E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D0, 0x0021 };
    uint32_t const ces[9] = { 0x47E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_475)
{
    // 110D0 003F;	
    // (ëÉê) SORA SOMPENG LETTER SAH	[47E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D0, 0x003F };
    uint32_t const ces[9] = { 0x47E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_476)
{
    // 110D0 0061;	
    // (ëÉê) SORA SOMPENG LETTER SAH	[47E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D0, 0x0061 };
    uint32_t const ces[9] = { 0x47E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_477)
{
    // 110D0 0041;	
    // (ëÉê) SORA SOMPENG LETTER SAH	[47E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D0, 0x0041 };
    uint32_t const ces[9] = { 0x47E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_478)
{
    // 110D0 0062;	
    // (ëÉê) SORA SOMPENG LETTER SAH	[47E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D0, 0x0062 };
    uint32_t const ces[9] = { 0x47E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_479)
{
    // 110D1 0021;	
    // (ëÉë) SORA SOMPENG LETTER TAH	[47E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D1, 0x0021 };
    uint32_t const ces[9] = { 0x47E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_480)
{
    // 110D1 003F;	
    // (ëÉë) SORA SOMPENG LETTER TAH	[47E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D1, 0x003F };
    uint32_t const ces[9] = { 0x47E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_481)
{
    // 110D1 0061;	
    // (ëÉë) SORA SOMPENG LETTER TAH	[47E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D1, 0x0061 };
    uint32_t const ces[9] = { 0x47E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_482)
{
    // 110D1 0041;	
    // (ëÉë) SORA SOMPENG LETTER TAH	[47E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D1, 0x0041 };
    uint32_t const ces[9] = { 0x47E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_483)
{
    // 110D1 0062;	
    // (ëÉë) SORA SOMPENG LETTER TAH	[47E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D1, 0x0062 };
    uint32_t const ces[9] = { 0x47E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_484)
{
    // 110D2 0021;	
    // (ëÉí) SORA SOMPENG LETTER BAH	[47E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D2, 0x0021 };
    uint32_t const ces[9] = { 0x47E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_485)
{
    // 110D2 003F;	
    // (ëÉí) SORA SOMPENG LETTER BAH	[47E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D2, 0x003F };
    uint32_t const ces[9] = { 0x47E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_486)
{
    // 110D2 0061;	
    // (ëÉí) SORA SOMPENG LETTER BAH	[47E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D2, 0x0061 };
    uint32_t const ces[9] = { 0x47E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_487)
{
    // 110D2 0041;	
    // (ëÉí) SORA SOMPENG LETTER BAH	[47E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D2, 0x0041 };
    uint32_t const ces[9] = { 0x47E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_488)
{
    // 110D2 0062;	
    // (ëÉí) SORA SOMPENG LETTER BAH	[47E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D2, 0x0062 };
    uint32_t const ces[9] = { 0x47E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_489)
{
    // 110D3 0021;	
    // (ëÉì) SORA SOMPENG LETTER CAH	[47E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D3, 0x0021 };
    uint32_t const ces[9] = { 0x47E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_490)
{
    // 110D3 003F;	
    // (ëÉì) SORA SOMPENG LETTER CAH	[47E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D3, 0x003F };
    uint32_t const ces[9] = { 0x47E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_491)
{
    // 110D3 0061;	
    // (ëÉì) SORA SOMPENG LETTER CAH	[47E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D3, 0x0061 };
    uint32_t const ces[9] = { 0x47E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_492)
{
    // 110D3 0041;	
    // (ëÉì) SORA SOMPENG LETTER CAH	[47E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D3, 0x0041 };
    uint32_t const ces[9] = { 0x47E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_493)
{
    // 110D3 0062;	
    // (ëÉì) SORA SOMPENG LETTER CAH	[47E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D3, 0x0062 };
    uint32_t const ces[9] = { 0x47E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_494)
{
    // 110D4 0021;	
    // (ëÉî) SORA SOMPENG LETTER DAH	[47EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D4, 0x0021 };
    uint32_t const ces[9] = { 0x47EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_495)
{
    // 110D4 003F;	
    // (ëÉî) SORA SOMPENG LETTER DAH	[47EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D4, 0x003F };
    uint32_t const ces[9] = { 0x47EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_496)
{
    // 110D4 0061;	
    // (ëÉî) SORA SOMPENG LETTER DAH	[47EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D4, 0x0061 };
    uint32_t const ces[9] = { 0x47EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_497)
{
    // 110D4 0041;	
    // (ëÉî) SORA SOMPENG LETTER DAH	[47EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110D4, 0x0041 };
    uint32_t const ces[9] = { 0x47EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_498)
{
    // 110D4 0062;	
    // (ëÉî) SORA SOMPENG LETTER DAH	[47EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D4, 0x0062 };
    uint32_t const ces[9] = { 0x47EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_274_499)
{
    // 110D5 0021;	
    // (ëÉï) SORA SOMPENG LETTER GAH	[47EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110D5, 0x0021 };
    uint32_t const ces[9] = { 0x47EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

