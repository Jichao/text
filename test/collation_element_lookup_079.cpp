// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_079_000)
{
    // 30F1  ; [.3E9F.0020.0011] 
    // KATAKANA LETTER WE

    uint32_t const cps[1] = { 0x30f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9f), uint8_t(0x1), uint8_t(0x11)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_001)
{
    // 30F2  ; [.3EA0.0020.0011] 
    // KATAKANA LETTER WO

    uint32_t const cps[1] = { 0x30f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ea0), uint8_t(0x1), uint8_t(0x11)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_002)
{
    // 30F3  ; [.3EA1.0020.0011] 
    // KATAKANA LETTER N

    uint32_t const cps[1] = { 0x30f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x11)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_003)
{
    // 30F4  ; [.3E73.0020.0011][.0000.0037.0002] 
    // KATAKANA LETTER VU

    uint32_t const cps[1] = { 0x30f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e73), uint8_t(0x1), uint8_t(0x11)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_004)
{
    // 30F5  ; [.3E77.0020.000F] 
    // KATAKANA LETTER SMALL KA

    uint32_t const cps[1] = { 0x30f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0xf)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_005)
{
    // 30F6  ; [.3E7A.0020.000F] 
    // KATAKANA LETTER SMALL KE

    uint32_t const cps[1] = { 0x30f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7a), uint8_t(0x1), uint8_t(0xf)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_006)
{
    // 30F7  ; [.3E9D.0020.0011][.0000.0037.0002] 
    // KATAKANA LETTER VA

    uint32_t const cps[1] = { 0x30f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e9d), uint8_t(0x1), uint8_t(0x11)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_007)
{
    // 30F8  ; [.3E9E.0020.0011][.0000.0037.0002] 
    // KATAKANA LETTER VI

    uint32_t const cps[1] = { 0x30f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e9e), uint8_t(0x1), uint8_t(0x11)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_008)
{
    // 30F9  ; [.3E9F.0020.0011][.0000.0037.0002] 
    // KATAKANA LETTER VE

    uint32_t const cps[1] = { 0x30f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e9f), uint8_t(0x1), uint8_t(0x11)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_009)
{
    // 30FA  ; [.3EA0.0020.0011][.0000.0037.0002] 
    // KATAKANA LETTER VO

    uint32_t const cps[1] = { 0x30fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3ea0), uint8_t(0x1), uint8_t(0x11)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_010)
{
    // 30FB  ; [*0221.0020.0002] 
    // KATAKANA MIDDLE DOT

    uint32_t const cps[1] = { 0x30fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x221), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_011)
{
    // 30FC  ; [.1C73.0020.0002] 
    // KATAKANA-HIRAGANA PROLONGED SOUND MARK

    uint32_t const cps[1] = { 0x30fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_012)
{
    // 30FD  ; [.1C74.0020.0002] 
    // KATAKANA ITERATION MARK

    uint32_t const cps[1] = { 0x30fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c74), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_013)
{
    // 30FE  ; [.1C74.0020.0002][.0000.0037.0002] 
    // KATAKANA VOICED ITERATION MARK

    uint32_t const cps[1] = { 0x30fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1c74), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_014)
{
    // 30FF  ; [.3E7B.0020.0016][.3E85.0020.0016] 
    // KATAKANA DIGRAPH KOTO

    uint32_t const cps[1] = { 0x30ff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x16)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x16)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_079_015)
{
    // 3105  ; [.3FC0.0020.0002] 
    // BOPOMOFO LETTER B

    uint32_t const cps[1] = { 0x3105 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_016)
{
    // 3106  ; [.3FC1.0020.0002] 
    // BOPOMOFO LETTER P

    uint32_t const cps[1] = { 0x3106 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_017)
{
    // 3107  ; [.3FC2.0020.0002] 
    // BOPOMOFO LETTER M

    uint32_t const cps[1] = { 0x3107 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_018)
{
    // 3108  ; [.3FC3.0020.0002] 
    // BOPOMOFO LETTER F

    uint32_t const cps[1] = { 0x3108 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_019)
{
    // 3109  ; [.3FC5.0020.0002] 
    // BOPOMOFO LETTER D

    uint32_t const cps[1] = { 0x3109 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_020)
{
    // 310A  ; [.3FC6.0020.0002] 
    // BOPOMOFO LETTER T

    uint32_t const cps[1] = { 0x310a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_021)
{
    // 310B  ; [.3FC7.0020.0002] 
    // BOPOMOFO LETTER N

    uint32_t const cps[1] = { 0x310b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_022)
{
    // 310C  ; [.3FC8.0020.0002] 
    // BOPOMOFO LETTER L

    uint32_t const cps[1] = { 0x310c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_023)
{
    // 310D  ; [.3FC9.0020.0002] 
    // BOPOMOFO LETTER G

    uint32_t const cps[1] = { 0x310d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_024)
{
    // 310E  ; [.3FCA.0020.0002] 
    // BOPOMOFO LETTER K

    uint32_t const cps[1] = { 0x310e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fca), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_025)
{
    // 310F  ; [.3FCD.0020.0002] 
    // BOPOMOFO LETTER H

    uint32_t const cps[1] = { 0x310f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fcd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_026)
{
    // 3110  ; [.3FCE.0020.0002] 
    // BOPOMOFO LETTER J

    uint32_t const cps[1] = { 0x3110 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fce), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_027)
{
    // 3111  ; [.3FCF.0020.0002] 
    // BOPOMOFO LETTER Q

    uint32_t const cps[1] = { 0x3111 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fcf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_028)
{
    // 3112  ; [.3FD0.0020.0002] 
    // BOPOMOFO LETTER X

    uint32_t const cps[1] = { 0x3112 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_029)
{
    // 3113  ; [.3FD2.0020.0002] 
    // BOPOMOFO LETTER ZH

    uint32_t const cps[1] = { 0x3113 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_030)
{
    // 3114  ; [.3FD3.0020.0002] 
    // BOPOMOFO LETTER CH

    uint32_t const cps[1] = { 0x3114 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_031)
{
    // 3115  ; [.3FD4.0020.0002] 
    // BOPOMOFO LETTER SH

    uint32_t const cps[1] = { 0x3115 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_032)
{
    // 3116  ; [.3FD5.0020.0002] 
    // BOPOMOFO LETTER R

    uint32_t const cps[1] = { 0x3116 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_033)
{
    // 3117  ; [.3FD6.0020.0002] 
    // BOPOMOFO LETTER Z

    uint32_t const cps[1] = { 0x3117 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_034)
{
    // 3118  ; [.3FD7.0020.0002] 
    // BOPOMOFO LETTER C

    uint32_t const cps[1] = { 0x3118 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_035)
{
    // 3119  ; [.3FD8.0020.0002] 
    // BOPOMOFO LETTER S

    uint32_t const cps[1] = { 0x3119 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_036)
{
    // 311A  ; [.3FDC.0020.0002] 
    // BOPOMOFO LETTER A

    uint32_t const cps[1] = { 0x311a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fdc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_037)
{
    // 311B  ; [.3FDD.0020.0002] 
    // BOPOMOFO LETTER O

    uint32_t const cps[1] = { 0x311b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fdd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_038)
{
    // 311C  ; [.3FDF.0020.0002] 
    // BOPOMOFO LETTER E

    uint32_t const cps[1] = { 0x311c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fdf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_039)
{
    // 311D  ; [.3FE0.0020.0002] 
    // BOPOMOFO LETTER EH

    uint32_t const cps[1] = { 0x311d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_040)
{
    // 311E  ; [.3FE2.0020.0002] 
    // BOPOMOFO LETTER AI

    uint32_t const cps[1] = { 0x311e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_041)
{
    // 311F  ; [.3FE3.0020.0002] 
    // BOPOMOFO LETTER EI

    uint32_t const cps[1] = { 0x311f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_042)
{
    // 3120  ; [.3FE4.0020.0002] 
    // BOPOMOFO LETTER AU

    uint32_t const cps[1] = { 0x3120 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_043)
{
    // 3121  ; [.3FE5.0020.0002] 
    // BOPOMOFO LETTER OU

    uint32_t const cps[1] = { 0x3121 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_044)
{
    // 3122  ; [.3FE6.0020.0002] 
    // BOPOMOFO LETTER AN

    uint32_t const cps[1] = { 0x3122 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_045)
{
    // 3123  ; [.3FE7.0020.0002] 
    // BOPOMOFO LETTER EN

    uint32_t const cps[1] = { 0x3123 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_046)
{
    // 3124  ; [.3FE8.0020.0002] 
    // BOPOMOFO LETTER ANG

    uint32_t const cps[1] = { 0x3124 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fe8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_047)
{
    // 3125  ; [.3FEA.0020.0002] 
    // BOPOMOFO LETTER ENG

    uint32_t const cps[1] = { 0x3125 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fea), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_048)
{
    // 3126  ; [.3FEE.0020.0002] 
    // BOPOMOFO LETTER ER

    uint32_t const cps[1] = { 0x3126 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fee), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_049)
{
    // 3127  ; [.3FEF.0020.0002] 
    // BOPOMOFO LETTER I

    uint32_t const cps[1] = { 0x3127 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fef), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_050)
{
    // 3128  ; [.3FF0.0020.0002] 
    // BOPOMOFO LETTER U

    uint32_t const cps[1] = { 0x3128 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ff0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_051)
{
    // 3129  ; [.3FF1.0020.0002] 
    // BOPOMOFO LETTER IU

    uint32_t const cps[1] = { 0x3129 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ff1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_052)
{
    // 312A  ; [.3FC4.0020.0002] 
    // BOPOMOFO LETTER V

    uint32_t const cps[1] = { 0x312a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fc4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_053)
{
    // 312B  ; [.3FCB.0020.0002] 
    // BOPOMOFO LETTER NG

    uint32_t const cps[1] = { 0x312b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fcb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_054)
{
    // 312C  ; [.3FD1.0020.0002] 
    // BOPOMOFO LETTER GN

    uint32_t const cps[1] = { 0x312c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fd1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_055)
{
    // 312D  ; [.3FF2.0020.0002] 
    // BOPOMOFO LETTER IH

    uint32_t const cps[1] = { 0x312d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ff2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_056)
{
    // 312E  ; [.3FDF.0020.0004] 
    // BOPOMOFO LETTER O WITH DOT ABOVE

    uint32_t const cps[1] = { 0x312e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3fdf), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_057)
{
    // 3131  ; [.3D0C.0020.0004] 
    // HANGUL LETTER KIYEOK

    uint32_t const cps[1] = { 0x3131 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_058)
{
    // 3132  ; [.3D0D.0020.0004] 
    // HANGUL LETTER SSANGKIYEOK

    uint32_t const cps[1] = { 0x3132 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_059)
{
    // 3133  ; [.3DEA.0020.0004] 
    // HANGUL LETTER KIYEOK-SIOS

    uint32_t const cps[1] = { 0x3133 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dea), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_060)
{
    // 3134  ; [.3D0E.0020.0004] 
    // HANGUL LETTER NIEUN

    uint32_t const cps[1] = { 0x3134 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_061)
{
    // 3135  ; [.3DEC.0020.0004] 
    // HANGUL LETTER NIEUN-CIEUC

    uint32_t const cps[1] = { 0x3135 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dec), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_062)
{
    // 3136  ; [.3DED.0020.0004] 
    // HANGUL LETTER NIEUN-HIEUH

    uint32_t const cps[1] = { 0x3136 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ded), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_063)
{
    // 3137  ; [.3D0F.0020.0004] 
    // HANGUL LETTER TIKEUT

    uint32_t const cps[1] = { 0x3137 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0f), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_064)
{
    // 3138  ; [.3D10.0020.0004] 
    // HANGUL LETTER SSANGTIKEUT

    uint32_t const cps[1] = { 0x3138 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d10), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_065)
{
    // 3139  ; [.3D11.0020.0004] 
    // HANGUL LETTER RIEUL

    uint32_t const cps[1] = { 0x3139 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d11), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_066)
{
    // 313A  ; [.3DF0.0020.0004] 
    // HANGUL LETTER RIEUL-KIYEOK

    uint32_t const cps[1] = { 0x313a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df0), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_067)
{
    // 313B  ; [.3DF1.0020.0004] 
    // HANGUL LETTER RIEUL-MIEUM

    uint32_t const cps[1] = { 0x313b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df1), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_068)
{
    // 313C  ; [.3DF2.0020.0004] 
    // HANGUL LETTER RIEUL-PIEUP

    uint32_t const cps[1] = { 0x313c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df2), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_069)
{
    // 313D  ; [.3DF3.0020.0004] 
    // HANGUL LETTER RIEUL-SIOS

    uint32_t const cps[1] = { 0x313d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df3), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_070)
{
    // 313E  ; [.3DF4.0020.0004] 
    // HANGUL LETTER RIEUL-THIEUTH

    uint32_t const cps[1] = { 0x313e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df4), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_071)
{
    // 313F  ; [.3DF5.0020.0004] 
    // HANGUL LETTER RIEUL-PHIEUPH

    uint32_t const cps[1] = { 0x313f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df5), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_072)
{
    // 3140  ; [.3D26.0020.0004] 
    // HANGUL LETTER RIEUL-HIEUH

    uint32_t const cps[1] = { 0x3140 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d26), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_073)
{
    // 3141  ; [.3D12.0020.0004] 
    // HANGUL LETTER MIEUM

    uint32_t const cps[1] = { 0x3141 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d12), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_074)
{
    // 3142  ; [.3D13.0020.0004] 
    // HANGUL LETTER PIEUP

    uint32_t const cps[1] = { 0x3142 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d13), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_075)
{
    // 3143  ; [.3D14.0020.0004] 
    // HANGUL LETTER SSANGPIEUP

    uint32_t const cps[1] = { 0x3143 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d14), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_076)
{
    // 3144  ; [.3D2D.0020.0004] 
    // HANGUL LETTER PIEUP-SIOS

    uint32_t const cps[1] = { 0x3144 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_077)
{
    // 3145  ; [.3D15.0020.0004] 
    // HANGUL LETTER SIOS

    uint32_t const cps[1] = { 0x3145 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d15), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_078)
{
    // 3146  ; [.3D16.0020.0004] 
    // HANGUL LETTER SSANGSIOS

    uint32_t const cps[1] = { 0x3146 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d16), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_079)
{
    // 3147  ; [.3D17.0020.0004] 
    // HANGUL LETTER IEUNG

    uint32_t const cps[1] = { 0x3147 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_080)
{
    // 3148  ; [.3D18.0020.0004] 
    // HANGUL LETTER CIEUC

    uint32_t const cps[1] = { 0x3148 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d18), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_081)
{
    // 3149  ; [.3D19.0020.0004] 
    // HANGUL LETTER SSANGCIEUC

    uint32_t const cps[1] = { 0x3149 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d19), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_082)
{
    // 314A  ; [.3D1A.0020.0004] 
    // HANGUL LETTER CHIEUCH

    uint32_t const cps[1] = { 0x314a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1a), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_083)
{
    // 314B  ; [.3D1B.0020.0004] 
    // HANGUL LETTER KHIEUKH

    uint32_t const cps[1] = { 0x314b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1b), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_084)
{
    // 314C  ; [.3D1C.0020.0004] 
    // HANGUL LETTER THIEUTH

    uint32_t const cps[1] = { 0x314c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_085)
{
    // 314D  ; [.3D1D.0020.0004] 
    // HANGUL LETTER PHIEUPH

    uint32_t const cps[1] = { 0x314d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_086)
{
    // 314E  ; [.3D1E.0020.0004] 
    // HANGUL LETTER HIEUH

    uint32_t const cps[1] = { 0x314e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_087)
{
    // 314F  ; [.3D8A.0020.0004] 
    // HANGUL LETTER A

    uint32_t const cps[1] = { 0x314f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_088)
{
    // 3150  ; [.3D8B.0020.0004] 
    // HANGUL LETTER AE

    uint32_t const cps[1] = { 0x3150 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8b), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_089)
{
    // 3151  ; [.3D8C.0020.0004] 
    // HANGUL LETTER YA

    uint32_t const cps[1] = { 0x3151 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_090)
{
    // 3152  ; [.3D8D.0020.0004] 
    // HANGUL LETTER YAE

    uint32_t const cps[1] = { 0x3152 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_091)
{
    // 3153  ; [.3D8E.0020.0004] 
    // HANGUL LETTER EO

    uint32_t const cps[1] = { 0x3153 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_092)
{
    // 3154  ; [.3D8F.0020.0004] 
    // HANGUL LETTER E

    uint32_t const cps[1] = { 0x3154 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8f), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_093)
{
    // 3155  ; [.3D90.0020.0004] 
    // HANGUL LETTER YEO

    uint32_t const cps[1] = { 0x3155 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d90), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_094)
{
    // 3156  ; [.3D91.0020.0004] 
    // HANGUL LETTER YE

    uint32_t const cps[1] = { 0x3156 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d91), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_095)
{
    // 3157  ; [.3D92.0020.0004] 
    // HANGUL LETTER O

    uint32_t const cps[1] = { 0x3157 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d92), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_096)
{
    // 3158  ; [.3D93.0020.0004] 
    // HANGUL LETTER WA

    uint32_t const cps[1] = { 0x3158 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d93), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_097)
{
    // 3159  ; [.3D94.0020.0004] 
    // HANGUL LETTER WAE

    uint32_t const cps[1] = { 0x3159 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d94), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_098)
{
    // 315A  ; [.3D95.0020.0004] 
    // HANGUL LETTER OE

    uint32_t const cps[1] = { 0x315a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d95), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_099)
{
    // 315B  ; [.3D96.0020.0004] 
    // HANGUL LETTER YO

    uint32_t const cps[1] = { 0x315b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d96), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_100)
{
    // 315C  ; [.3D97.0020.0004] 
    // HANGUL LETTER U

    uint32_t const cps[1] = { 0x315c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d97), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_101)
{
    // 315D  ; [.3D98.0020.0004] 
    // HANGUL LETTER WEO

    uint32_t const cps[1] = { 0x315d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d98), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_102)
{
    // 315E  ; [.3D99.0020.0004] 
    // HANGUL LETTER WE

    uint32_t const cps[1] = { 0x315e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d99), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_103)
{
    // 315F  ; [.3D9A.0020.0004] 
    // HANGUL LETTER WI

    uint32_t const cps[1] = { 0x315f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d9a), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_104)
{
    // 3160  ; [.3D9B.0020.0004] 
    // HANGUL LETTER YU

    uint32_t const cps[1] = { 0x3160 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d9b), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_105)
{
    // 3161  ; [.3D9C.0020.0004] 
    // HANGUL LETTER EU

    uint32_t const cps[1] = { 0x3161 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d9c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_106)
{
    // 3162  ; [.3D9D.0020.0004] 
    // HANGUL LETTER YI

    uint32_t const cps[1] = { 0x3162 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d9d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_107)
{
    // 3163  ; [.3D9E.0020.0004] 
    // HANGUL LETTER I

    uint32_t const cps[1] = { 0x3163 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d9e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_108)
{
    // 3164  ; [.3D89.0020.0004] 
    // HANGUL FILLER

    uint32_t const cps[1] = { 0x3164 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d89), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_109)
{
    // 3165  ; [.3D20.0020.0004] 
    // HANGUL LETTER SSANGNIEUN

    uint32_t const cps[1] = { 0x3165 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d20), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_110)
{
    // 3166  ; [.3D21.0020.0004] 
    // HANGUL LETTER NIEUN-TIKEUT

    uint32_t const cps[1] = { 0x3166 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d21), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_111)
{
    // 3167  ; [.3E07.0020.0004] 
    // HANGUL LETTER NIEUN-SIOS

    uint32_t const cps[1] = { 0x3167 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e07), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_112)
{
    // 3168  ; [.3E08.0020.0004] 
    // HANGUL LETTER NIEUN-PANSIOS

    uint32_t const cps[1] = { 0x3168 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e08), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_113)
{
    // 3169  ; [.3E0C.0020.0004] 
    // HANGUL LETTER RIEUL-KIYEOK-SIOS

    uint32_t const cps[1] = { 0x3169 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e0c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_114)
{
    // 316A  ; [.3E0E.0020.0004] 
    // HANGUL LETTER RIEUL-TIKEUT

    uint32_t const cps[1] = { 0x316a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e0e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_115)
{
    // 316B  ; [.3E13.0020.0004] 
    // HANGUL LETTER RIEUL-PIEUP-SIOS

    uint32_t const cps[1] = { 0x316b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e13), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_116)
{
    // 316C  ; [.3E17.0020.0004] 
    // HANGUL LETTER RIEUL-PANSIOS

    uint32_t const cps[1] = { 0x316c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e17), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_117)
{
    // 316D  ; [.3E19.0020.0004] 
    // HANGUL LETTER RIEUL-YEORINHIEUH

    uint32_t const cps[1] = { 0x316d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e19), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_118)
{
    // 316E  ; [.3D28.0020.0004] 
    // HANGUL LETTER MIEUM-PIEUP

    uint32_t const cps[1] = { 0x316e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d28), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_119)
{
    // 316F  ; [.3E1D.0020.0004] 
    // HANGUL LETTER MIEUM-SIOS

    uint32_t const cps[1] = { 0x316f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e1d), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_120)
{
    // 3170  ; [.3E1F.0020.0004] 
    // HANGUL LETTER MIEUM-PANSIOS

    uint32_t const cps[1] = { 0x3170 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e1f), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_121)
{
    // 3171  ; [.3D29.0020.0004] 
    // HANGUL LETTER KAPYEOUNMIEUM

    uint32_t const cps[1] = { 0x3171 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d29), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_122)
{
    // 3172  ; [.3D2A.0020.0004] 
    // HANGUL LETTER PIEUP-KIYEOK

    uint32_t const cps[1] = { 0x3172 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2a), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_123)
{
    // 3173  ; [.3D2C.0020.0004] 
    // HANGUL LETTER PIEUP-TIKEUT

    uint32_t const cps[1] = { 0x3173 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_124)
{
    // 3174  ; [.3D2E.0020.0004] 
    // HANGUL LETTER PIEUP-SIOS-KIYEOK

    uint32_t const cps[1] = { 0x3174 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_125)
{
    // 3175  ; [.3D2F.0020.0004] 
    // HANGUL LETTER PIEUP-SIOS-TIKEUT

    uint32_t const cps[1] = { 0x3175 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2f), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_126)
{
    // 3176  ; [.3D33.0020.0004] 
    // HANGUL LETTER PIEUP-CIEUC

    uint32_t const cps[1] = { 0x3176 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d33), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_127)
{
    // 3177  ; [.3D35.0020.0004] 
    // HANGUL LETTER PIEUP-THIEUTH

    uint32_t const cps[1] = { 0x3177 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d35), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_128)
{
    // 3178  ; [.3D37.0020.0004] 
    // HANGUL LETTER KAPYEOUNPIEUP

    uint32_t const cps[1] = { 0x3178 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d37), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_129)
{
    // 3179  ; [.3D38.0020.0004] 
    // HANGUL LETTER KAPYEOUNSSANGPIEUP

    uint32_t const cps[1] = { 0x3179 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d38), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_130)
{
    // 317A  ; [.3D39.0020.0004] 
    // HANGUL LETTER SIOS-KIYEOK

    uint32_t const cps[1] = { 0x317a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d39), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_131)
{
    // 317B  ; [.3D3A.0020.0004] 
    // HANGUL LETTER SIOS-NIEUN

    uint32_t const cps[1] = { 0x317b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d3a), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_132)
{
    // 317C  ; [.3D3B.0020.0004] 
    // HANGUL LETTER SIOS-TIKEUT

    uint32_t const cps[1] = { 0x317c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d3b), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_133)
{
    // 317D  ; [.3D3E.0020.0004] 
    // HANGUL LETTER SIOS-PIEUP

    uint32_t const cps[1] = { 0x317d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d3e), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_134)
{
    // 317E  ; [.3D42.0020.0004] 
    // HANGUL LETTER SIOS-CIEUC

    uint32_t const cps[1] = { 0x317e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d42), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_135)
{
    // 317F  ; [.3D4C.0020.0004] 
    // HANGUL LETTER PANSIOS

    uint32_t const cps[1] = { 0x317f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d4c), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_136)
{
    // 3180  ; [.3D53.0020.0004] 
    // HANGUL LETTER SSANGIEUNG

    uint32_t const cps[1] = { 0x3180 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d53), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_137)
{
    // 3181  ; [.3D58.0020.0004] 
    // HANGUL LETTER YESIEUNG

    uint32_t const cps[1] = { 0x3181 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d58), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_138)
{
    // 3182  ; [.3E31.0020.0004] 
    // HANGUL LETTER YESIEUNG-SIOS

    uint32_t const cps[1] = { 0x3182 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e31), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_139)
{
    // 3183  ; [.3E32.0020.0004] 
    // HANGUL LETTER YESIEUNG-PANSIOS

    uint32_t const cps[1] = { 0x3183 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e32), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_140)
{
    // 3184  ; [.3D63.0020.0004] 
    // HANGUL LETTER KAPYEOUNPHIEUPH

    uint32_t const cps[1] = { 0x3184 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d63), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_141)
{
    // 3185  ; [.3D64.0020.0004] 
    // HANGUL LETTER SSANGHIEUH

    uint32_t const cps[1] = { 0x3185 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d64), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_142)
{
    // 3186  ; [.3D65.0020.0004] 
    // HANGUL LETTER YEORINHIEUH

    uint32_t const cps[1] = { 0x3186 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d65), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_143)
{
    // 3187  ; [.3DAD.0020.0004] 
    // HANGUL LETTER YO-YA

    uint32_t const cps[1] = { 0x3187 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dad), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_144)
{
    // 3188  ; [.3DAE.0020.0004] 
    // HANGUL LETTER YO-YAE

    uint32_t const cps[1] = { 0x3188 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dae), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_145)
{
    // 3189  ; [.3DB1.0020.0004] 
    // HANGUL LETTER YO-I

    uint32_t const cps[1] = { 0x3189 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3db1), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_146)
{
    // 318A  ; [.3DBA.0020.0004] 
    // HANGUL LETTER YU-YEO

    uint32_t const cps[1] = { 0x318a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dba), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_147)
{
    // 318B  ; [.3DBB.0020.0004] 
    // HANGUL LETTER YU-YE

    uint32_t const cps[1] = { 0x318b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dbb), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_148)
{
    // 318C  ; [.3DBD.0020.0004] 
    // HANGUL LETTER YU-I

    uint32_t const cps[1] = { 0x318c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dbd), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_079_149)
{
    // 318D  ; [.3DC7.0020.0004] 
    // HANGUL LETTER ARAEA

    uint32_t const cps[1] = { 0x318d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dc7), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

