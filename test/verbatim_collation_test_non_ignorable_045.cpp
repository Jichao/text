// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_045_000)
{
    // 4DDB 003F;	
    // (䷛) HEXAGRAM FOR GREAT PREPONDERANCE	[0EDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDB, 0x003F };
    uint32_t const ces[9] = { 0x0EDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_001)
{
    // 4DDB 0061;	
    // (䷛) HEXAGRAM FOR GREAT PREPONDERANCE	[0EDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDB, 0x0061 };
    uint32_t const ces[9] = { 0x0EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_002)
{
    // 4DDB 0041;	
    // (䷛) HEXAGRAM FOR GREAT PREPONDERANCE	[0EDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDB, 0x0041 };
    uint32_t const ces[9] = { 0x0EDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_003)
{
    // 4DDB 0062;	
    // (䷛) HEXAGRAM FOR GREAT PREPONDERANCE	[0EDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDB, 0x0062 };
    uint32_t const ces[9] = { 0x0EDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_004)
{
    // 4DDC 0021;	
    // (䷜) HEXAGRAM FOR THE ABYSMAL WATER	[0EDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDC, 0x0021 };
    uint32_t const ces[9] = { 0x0EDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_005)
{
    // 4DDC 003F;	
    // (䷜) HEXAGRAM FOR THE ABYSMAL WATER	[0EDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDC, 0x003F };
    uint32_t const ces[9] = { 0x0EDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_006)
{
    // 4DDC 0061;	
    // (䷜) HEXAGRAM FOR THE ABYSMAL WATER	[0EDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDC, 0x0061 };
    uint32_t const ces[9] = { 0x0EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_007)
{
    // 4DDC 0041;	
    // (䷜) HEXAGRAM FOR THE ABYSMAL WATER	[0EDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDC, 0x0041 };
    uint32_t const ces[9] = { 0x0EDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_008)
{
    // 4DDC 0062;	
    // (䷜) HEXAGRAM FOR THE ABYSMAL WATER	[0EDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDC, 0x0062 };
    uint32_t const ces[9] = { 0x0EDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_009)
{
    // 4DDD 0021;	
    // (䷝) HEXAGRAM FOR THE CLINGING FIRE	[0EDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDD, 0x0021 };
    uint32_t const ces[9] = { 0x0EDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_010)
{
    // 4DDD 003F;	
    // (䷝) HEXAGRAM FOR THE CLINGING FIRE	[0EDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDD, 0x003F };
    uint32_t const ces[9] = { 0x0EDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_011)
{
    // 4DDD 0061;	
    // (䷝) HEXAGRAM FOR THE CLINGING FIRE	[0EDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDD, 0x0061 };
    uint32_t const ces[9] = { 0x0EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_012)
{
    // 4DDD 0041;	
    // (䷝) HEXAGRAM FOR THE CLINGING FIRE	[0EDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDD, 0x0041 };
    uint32_t const ces[9] = { 0x0EDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_013)
{
    // 4DDD 0062;	
    // (䷝) HEXAGRAM FOR THE CLINGING FIRE	[0EDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDD, 0x0062 };
    uint32_t const ces[9] = { 0x0EDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_014)
{
    // 4DDE 0021;	
    // (䷞) HEXAGRAM FOR INFLUENCE	[0EE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDE, 0x0021 };
    uint32_t const ces[9] = { 0x0EE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_015)
{
    // 4DDE 003F;	
    // (䷞) HEXAGRAM FOR INFLUENCE	[0EE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDE, 0x003F };
    uint32_t const ces[9] = { 0x0EE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_016)
{
    // 4DDE 0061;	
    // (䷞) HEXAGRAM FOR INFLUENCE	[0EE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDE, 0x0061 };
    uint32_t const ces[9] = { 0x0EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_017)
{
    // 4DDE 0041;	
    // (䷞) HEXAGRAM FOR INFLUENCE	[0EE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDE, 0x0041 };
    uint32_t const ces[9] = { 0x0EE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_018)
{
    // 4DDE 0062;	
    // (䷞) HEXAGRAM FOR INFLUENCE	[0EE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDE, 0x0062 };
    uint32_t const ces[9] = { 0x0EE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_019)
{
    // 4DDF 0021;	
    // (䷟) HEXAGRAM FOR DURATION	[0EE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDF, 0x0021 };
    uint32_t const ces[9] = { 0x0EE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_020)
{
    // 4DDF 003F;	
    // (䷟) HEXAGRAM FOR DURATION	[0EE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDF, 0x003F };
    uint32_t const ces[9] = { 0x0EE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_021)
{
    // 4DDF 0061;	
    // (䷟) HEXAGRAM FOR DURATION	[0EE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDF, 0x0061 };
    uint32_t const ces[9] = { 0x0EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_022)
{
    // 4DDF 0041;	
    // (䷟) HEXAGRAM FOR DURATION	[0EE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DDF, 0x0041 };
    uint32_t const ces[9] = { 0x0EE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_023)
{
    // 4DDF 0062;	
    // (䷟) HEXAGRAM FOR DURATION	[0EE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DDF, 0x0062 };
    uint32_t const ces[9] = { 0x0EE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_024)
{
    // 4DE0 0021;	
    // (䷠) HEXAGRAM FOR RETREAT	[0EE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE0, 0x0021 };
    uint32_t const ces[9] = { 0x0EE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_025)
{
    // 4DE0 003F;	
    // (䷠) HEXAGRAM FOR RETREAT	[0EE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE0, 0x003F };
    uint32_t const ces[9] = { 0x0EE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_026)
{
    // 4DE0 0061;	
    // (䷠) HEXAGRAM FOR RETREAT	[0EE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE0, 0x0061 };
    uint32_t const ces[9] = { 0x0EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_027)
{
    // 4DE0 0041;	
    // (䷠) HEXAGRAM FOR RETREAT	[0EE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE0, 0x0041 };
    uint32_t const ces[9] = { 0x0EE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_028)
{
    // 4DE0 0062;	
    // (䷠) HEXAGRAM FOR RETREAT	[0EE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE0, 0x0062 };
    uint32_t const ces[9] = { 0x0EE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_029)
{
    // 4DE1 0021;	
    // (䷡) HEXAGRAM FOR GREAT POWER	[0EE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE1, 0x0021 };
    uint32_t const ces[9] = { 0x0EE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_030)
{
    // 4DE1 003F;	
    // (䷡) HEXAGRAM FOR GREAT POWER	[0EE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE1, 0x003F };
    uint32_t const ces[9] = { 0x0EE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_031)
{
    // 4DE1 0061;	
    // (䷡) HEXAGRAM FOR GREAT POWER	[0EE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE1, 0x0061 };
    uint32_t const ces[9] = { 0x0EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_032)
{
    // 4DE1 0041;	
    // (䷡) HEXAGRAM FOR GREAT POWER	[0EE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE1, 0x0041 };
    uint32_t const ces[9] = { 0x0EE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_033)
{
    // 4DE1 0062;	
    // (䷡) HEXAGRAM FOR GREAT POWER	[0EE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE1, 0x0062 };
    uint32_t const ces[9] = { 0x0EE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_034)
{
    // 4DE2 0021;	
    // (䷢) HEXAGRAM FOR PROGRESS	[0EE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE2, 0x0021 };
    uint32_t const ces[9] = { 0x0EE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_035)
{
    // 4DE2 003F;	
    // (䷢) HEXAGRAM FOR PROGRESS	[0EE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE2, 0x003F };
    uint32_t const ces[9] = { 0x0EE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_036)
{
    // 4DE2 0061;	
    // (䷢) HEXAGRAM FOR PROGRESS	[0EE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE2, 0x0061 };
    uint32_t const ces[9] = { 0x0EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_037)
{
    // 4DE2 0041;	
    // (䷢) HEXAGRAM FOR PROGRESS	[0EE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE2, 0x0041 };
    uint32_t const ces[9] = { 0x0EE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_038)
{
    // 4DE2 0062;	
    // (䷢) HEXAGRAM FOR PROGRESS	[0EE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE2, 0x0062 };
    uint32_t const ces[9] = { 0x0EE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_039)
{
    // 4DE3 0021;	
    // (䷣) HEXAGRAM FOR DARKENING OF THE LIGHT	[0EE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE3, 0x0021 };
    uint32_t const ces[9] = { 0x0EE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_040)
{
    // 4DE3 003F;	
    // (䷣) HEXAGRAM FOR DARKENING OF THE LIGHT	[0EE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE3, 0x003F };
    uint32_t const ces[9] = { 0x0EE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_041)
{
    // 4DE3 0061;	
    // (䷣) HEXAGRAM FOR DARKENING OF THE LIGHT	[0EE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE3, 0x0061 };
    uint32_t const ces[9] = { 0x0EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_042)
{
    // 4DE3 0041;	
    // (䷣) HEXAGRAM FOR DARKENING OF THE LIGHT	[0EE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE3, 0x0041 };
    uint32_t const ces[9] = { 0x0EE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_043)
{
    // 4DE3 0062;	
    // (䷣) HEXAGRAM FOR DARKENING OF THE LIGHT	[0EE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE3, 0x0062 };
    uint32_t const ces[9] = { 0x0EE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_044)
{
    // 4DE4 0021;	
    // (䷤) HEXAGRAM FOR THE FAMILY	[0EE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE4, 0x0021 };
    uint32_t const ces[9] = { 0x0EE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_045)
{
    // 4DE4 003F;	
    // (䷤) HEXAGRAM FOR THE FAMILY	[0EE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE4, 0x003F };
    uint32_t const ces[9] = { 0x0EE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_046)
{
    // 4DE4 0061;	
    // (䷤) HEXAGRAM FOR THE FAMILY	[0EE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE4, 0x0061 };
    uint32_t const ces[9] = { 0x0EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_047)
{
    // 4DE4 0041;	
    // (䷤) HEXAGRAM FOR THE FAMILY	[0EE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE4, 0x0041 };
    uint32_t const ces[9] = { 0x0EE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_048)
{
    // 4DE4 0062;	
    // (䷤) HEXAGRAM FOR THE FAMILY	[0EE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE4, 0x0062 };
    uint32_t const ces[9] = { 0x0EE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_049)
{
    // 4DE5 0021;	
    // (䷥) HEXAGRAM FOR OPPOSITION	[0EE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE5, 0x0021 };
    uint32_t const ces[9] = { 0x0EE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_050)
{
    // 4DE5 003F;	
    // (䷥) HEXAGRAM FOR OPPOSITION	[0EE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE5, 0x003F };
    uint32_t const ces[9] = { 0x0EE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_051)
{
    // 4DE5 0061;	
    // (䷥) HEXAGRAM FOR OPPOSITION	[0EE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE5, 0x0061 };
    uint32_t const ces[9] = { 0x0EE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_052)
{
    // 4DE5 0041;	
    // (䷥) HEXAGRAM FOR OPPOSITION	[0EE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE5, 0x0041 };
    uint32_t const ces[9] = { 0x0EE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_053)
{
    // 4DE5 0062;	
    // (䷥) HEXAGRAM FOR OPPOSITION	[0EE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE5, 0x0062 };
    uint32_t const ces[9] = { 0x0EE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_054)
{
    // 4DE6 0021;	
    // (䷦) HEXAGRAM FOR OBSTRUCTION	[0EE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE6, 0x0021 };
    uint32_t const ces[9] = { 0x0EE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_055)
{
    // 4DE6 003F;	
    // (䷦) HEXAGRAM FOR OBSTRUCTION	[0EE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE6, 0x003F };
    uint32_t const ces[9] = { 0x0EE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_056)
{
    // 4DE6 0061;	
    // (䷦) HEXAGRAM FOR OBSTRUCTION	[0EE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE6, 0x0061 };
    uint32_t const ces[9] = { 0x0EE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_057)
{
    // 4DE6 0041;	
    // (䷦) HEXAGRAM FOR OBSTRUCTION	[0EE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE6, 0x0041 };
    uint32_t const ces[9] = { 0x0EE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_058)
{
    // 4DE6 0062;	
    // (䷦) HEXAGRAM FOR OBSTRUCTION	[0EE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE6, 0x0062 };
    uint32_t const ces[9] = { 0x0EE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_059)
{
    // 4DE7 0021;	
    // (䷧) HEXAGRAM FOR DELIVERANCE	[0EE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE7, 0x0021 };
    uint32_t const ces[9] = { 0x0EE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_060)
{
    // 4DE7 003F;	
    // (䷧) HEXAGRAM FOR DELIVERANCE	[0EE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE7, 0x003F };
    uint32_t const ces[9] = { 0x0EE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_061)
{
    // 4DE7 0061;	
    // (䷧) HEXAGRAM FOR DELIVERANCE	[0EE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE7, 0x0061 };
    uint32_t const ces[9] = { 0x0EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_062)
{
    // 4DE7 0041;	
    // (䷧) HEXAGRAM FOR DELIVERANCE	[0EE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE7, 0x0041 };
    uint32_t const ces[9] = { 0x0EE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_063)
{
    // 4DE7 0062;	
    // (䷧) HEXAGRAM FOR DELIVERANCE	[0EE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE7, 0x0062 };
    uint32_t const ces[9] = { 0x0EE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_064)
{
    // 4DE8 0021;	
    // (䷨) HEXAGRAM FOR DECREASE	[0EEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE8, 0x0021 };
    uint32_t const ces[9] = { 0x0EEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_065)
{
    // 4DE8 003F;	
    // (䷨) HEXAGRAM FOR DECREASE	[0EEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE8, 0x003F };
    uint32_t const ces[9] = { 0x0EEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_066)
{
    // 4DE8 0061;	
    // (䷨) HEXAGRAM FOR DECREASE	[0EEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE8, 0x0061 };
    uint32_t const ces[9] = { 0x0EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_067)
{
    // 4DE8 0041;	
    // (䷨) HEXAGRAM FOR DECREASE	[0EEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE8, 0x0041 };
    uint32_t const ces[9] = { 0x0EEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_068)
{
    // 4DE8 0062;	
    // (䷨) HEXAGRAM FOR DECREASE	[0EEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE8, 0x0062 };
    uint32_t const ces[9] = { 0x0EEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_069)
{
    // 4DE9 0021;	
    // (䷩) HEXAGRAM FOR INCREASE	[0EEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE9, 0x0021 };
    uint32_t const ces[9] = { 0x0EEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_070)
{
    // 4DE9 003F;	
    // (䷩) HEXAGRAM FOR INCREASE	[0EEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE9, 0x003F };
    uint32_t const ces[9] = { 0x0EEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_071)
{
    // 4DE9 0061;	
    // (䷩) HEXAGRAM FOR INCREASE	[0EEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE9, 0x0061 };
    uint32_t const ces[9] = { 0x0EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_072)
{
    // 4DE9 0041;	
    // (䷩) HEXAGRAM FOR INCREASE	[0EEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DE9, 0x0041 };
    uint32_t const ces[9] = { 0x0EEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_073)
{
    // 4DE9 0062;	
    // (䷩) HEXAGRAM FOR INCREASE	[0EEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DE9, 0x0062 };
    uint32_t const ces[9] = { 0x0EEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_074)
{
    // 4DEA 0021;	
    // (䷪) HEXAGRAM FOR BREAKTHROUGH	[0EEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEA, 0x0021 };
    uint32_t const ces[9] = { 0x0EEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_075)
{
    // 4DEA 003F;	
    // (䷪) HEXAGRAM FOR BREAKTHROUGH	[0EEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEA, 0x003F };
    uint32_t const ces[9] = { 0x0EEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_076)
{
    // 4DEA 0061;	
    // (䷪) HEXAGRAM FOR BREAKTHROUGH	[0EEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEA, 0x0061 };
    uint32_t const ces[9] = { 0x0EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_077)
{
    // 4DEA 0041;	
    // (䷪) HEXAGRAM FOR BREAKTHROUGH	[0EEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DEA, 0x0041 };
    uint32_t const ces[9] = { 0x0EEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_078)
{
    // 4DEA 0062;	
    // (䷪) HEXAGRAM FOR BREAKTHROUGH	[0EEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEA, 0x0062 };
    uint32_t const ces[9] = { 0x0EEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_079)
{
    // 4DEB 0021;	
    // (䷫) HEXAGRAM FOR COMING TO MEET	[0EED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEB, 0x0021 };
    uint32_t const ces[9] = { 0x0EED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_080)
{
    // 4DEB 003F;	
    // (䷫) HEXAGRAM FOR COMING TO MEET	[0EED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEB, 0x003F };
    uint32_t const ces[9] = { 0x0EED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_081)
{
    // 4DEB 0061;	
    // (䷫) HEXAGRAM FOR COMING TO MEET	[0EED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEB, 0x0061 };
    uint32_t const ces[9] = { 0x0EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_082)
{
    // 4DEB 0041;	
    // (䷫) HEXAGRAM FOR COMING TO MEET	[0EED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DEB, 0x0041 };
    uint32_t const ces[9] = { 0x0EED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_083)
{
    // 4DEB 0062;	
    // (䷫) HEXAGRAM FOR COMING TO MEET	[0EED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEB, 0x0062 };
    uint32_t const ces[9] = { 0x0EED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_084)
{
    // 4DEC 0021;	
    // (䷬) HEXAGRAM FOR GATHERING TOGETHER	[0EEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEC, 0x0021 };
    uint32_t const ces[9] = { 0x0EEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_085)
{
    // 4DEC 003F;	
    // (䷬) HEXAGRAM FOR GATHERING TOGETHER	[0EEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEC, 0x003F };
    uint32_t const ces[9] = { 0x0EEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_086)
{
    // 4DEC 0061;	
    // (䷬) HEXAGRAM FOR GATHERING TOGETHER	[0EEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEC, 0x0061 };
    uint32_t const ces[9] = { 0x0EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_087)
{
    // 4DEC 0041;	
    // (䷬) HEXAGRAM FOR GATHERING TOGETHER	[0EEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DEC, 0x0041 };
    uint32_t const ces[9] = { 0x0EEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_088)
{
    // 4DEC 0062;	
    // (䷬) HEXAGRAM FOR GATHERING TOGETHER	[0EEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEC, 0x0062 };
    uint32_t const ces[9] = { 0x0EEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_089)
{
    // 4DED 0021;	
    // (䷭) HEXAGRAM FOR PUSHING UPWARD	[0EEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DED, 0x0021 };
    uint32_t const ces[9] = { 0x0EEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_090)
{
    // 4DED 003F;	
    // (䷭) HEXAGRAM FOR PUSHING UPWARD	[0EEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DED, 0x003F };
    uint32_t const ces[9] = { 0x0EEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_091)
{
    // 4DED 0061;	
    // (䷭) HEXAGRAM FOR PUSHING UPWARD	[0EEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DED, 0x0061 };
    uint32_t const ces[9] = { 0x0EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_092)
{
    // 4DED 0041;	
    // (䷭) HEXAGRAM FOR PUSHING UPWARD	[0EEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DED, 0x0041 };
    uint32_t const ces[9] = { 0x0EEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_093)
{
    // 4DED 0062;	
    // (䷭) HEXAGRAM FOR PUSHING UPWARD	[0EEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DED, 0x0062 };
    uint32_t const ces[9] = { 0x0EEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_094)
{
    // 4DEE 0021;	
    // (䷮) HEXAGRAM FOR OPPRESSION	[0EF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEE, 0x0021 };
    uint32_t const ces[9] = { 0x0EF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_095)
{
    // 4DEE 003F;	
    // (䷮) HEXAGRAM FOR OPPRESSION	[0EF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEE, 0x003F };
    uint32_t const ces[9] = { 0x0EF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_096)
{
    // 4DEE 0061;	
    // (䷮) HEXAGRAM FOR OPPRESSION	[0EF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEE, 0x0061 };
    uint32_t const ces[9] = { 0x0EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_097)
{
    // 4DEE 0041;	
    // (䷮) HEXAGRAM FOR OPPRESSION	[0EF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DEE, 0x0041 };
    uint32_t const ces[9] = { 0x0EF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_098)
{
    // 4DEE 0062;	
    // (䷮) HEXAGRAM FOR OPPRESSION	[0EF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEE, 0x0062 };
    uint32_t const ces[9] = { 0x0EF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_099)
{
    // 4DEF 0021;	
    // (䷯) HEXAGRAM FOR THE WELL	[0EF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEF, 0x0021 };
    uint32_t const ces[9] = { 0x0EF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_100)
{
    // 4DEF 003F;	
    // (䷯) HEXAGRAM FOR THE WELL	[0EF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEF, 0x003F };
    uint32_t const ces[9] = { 0x0EF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_101)
{
    // 4DEF 0061;	
    // (䷯) HEXAGRAM FOR THE WELL	[0EF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEF, 0x0061 };
    uint32_t const ces[9] = { 0x0EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_102)
{
    // 4DEF 0041;	
    // (䷯) HEXAGRAM FOR THE WELL	[0EF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DEF, 0x0041 };
    uint32_t const ces[9] = { 0x0EF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_103)
{
    // 4DEF 0062;	
    // (䷯) HEXAGRAM FOR THE WELL	[0EF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DEF, 0x0062 };
    uint32_t const ces[9] = { 0x0EF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_104)
{
    // 4DF0 0021;	
    // (䷰) HEXAGRAM FOR REVOLUTION	[0EF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF0, 0x0021 };
    uint32_t const ces[9] = { 0x0EF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_105)
{
    // 4DF0 003F;	
    // (䷰) HEXAGRAM FOR REVOLUTION	[0EF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF0, 0x003F };
    uint32_t const ces[9] = { 0x0EF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_106)
{
    // 4DF0 0061;	
    // (䷰) HEXAGRAM FOR REVOLUTION	[0EF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF0, 0x0061 };
    uint32_t const ces[9] = { 0x0EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_107)
{
    // 4DF0 0041;	
    // (䷰) HEXAGRAM FOR REVOLUTION	[0EF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF0, 0x0041 };
    uint32_t const ces[9] = { 0x0EF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_108)
{
    // 4DF0 0062;	
    // (䷰) HEXAGRAM FOR REVOLUTION	[0EF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF0, 0x0062 };
    uint32_t const ces[9] = { 0x0EF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_109)
{
    // 4DF1 0021;	
    // (䷱) HEXAGRAM FOR THE CAULDRON	[0EF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF1, 0x0021 };
    uint32_t const ces[9] = { 0x0EF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_110)
{
    // 4DF1 003F;	
    // (䷱) HEXAGRAM FOR THE CAULDRON	[0EF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF1, 0x003F };
    uint32_t const ces[9] = { 0x0EF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_111)
{
    // 4DF1 0061;	
    // (䷱) HEXAGRAM FOR THE CAULDRON	[0EF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF1, 0x0061 };
    uint32_t const ces[9] = { 0x0EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_112)
{
    // 4DF1 0041;	
    // (䷱) HEXAGRAM FOR THE CAULDRON	[0EF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF1, 0x0041 };
    uint32_t const ces[9] = { 0x0EF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_113)
{
    // 4DF1 0062;	
    // (䷱) HEXAGRAM FOR THE CAULDRON	[0EF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF1, 0x0062 };
    uint32_t const ces[9] = { 0x0EF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_114)
{
    // 4DF2 0021;	
    // (䷲) HEXAGRAM FOR THE AROUSING THUNDER	[0EF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF2, 0x0021 };
    uint32_t const ces[9] = { 0x0EF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_115)
{
    // 4DF2 003F;	
    // (䷲) HEXAGRAM FOR THE AROUSING THUNDER	[0EF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF2, 0x003F };
    uint32_t const ces[9] = { 0x0EF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_116)
{
    // 4DF2 0061;	
    // (䷲) HEXAGRAM FOR THE AROUSING THUNDER	[0EF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF2, 0x0061 };
    uint32_t const ces[9] = { 0x0EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_117)
{
    // 4DF2 0041;	
    // (䷲) HEXAGRAM FOR THE AROUSING THUNDER	[0EF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF2, 0x0041 };
    uint32_t const ces[9] = { 0x0EF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_118)
{
    // 4DF2 0062;	
    // (䷲) HEXAGRAM FOR THE AROUSING THUNDER	[0EF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF2, 0x0062 };
    uint32_t const ces[9] = { 0x0EF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_119)
{
    // 4DF3 0021;	
    // (䷳) HEXAGRAM FOR THE KEEPING STILL MOUNTAIN	[0EF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF3, 0x0021 };
    uint32_t const ces[9] = { 0x0EF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_120)
{
    // 4DF3 003F;	
    // (䷳) HEXAGRAM FOR THE KEEPING STILL MOUNTAIN	[0EF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF3, 0x003F };
    uint32_t const ces[9] = { 0x0EF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_121)
{
    // 4DF3 0061;	
    // (䷳) HEXAGRAM FOR THE KEEPING STILL MOUNTAIN	[0EF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF3, 0x0061 };
    uint32_t const ces[9] = { 0x0EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_122)
{
    // 4DF3 0041;	
    // (䷳) HEXAGRAM FOR THE KEEPING STILL MOUNTAIN	[0EF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF3, 0x0041 };
    uint32_t const ces[9] = { 0x0EF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_123)
{
    // 4DF3 0062;	
    // (䷳) HEXAGRAM FOR THE KEEPING STILL MOUNTAIN	[0EF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF3, 0x0062 };
    uint32_t const ces[9] = { 0x0EF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_124)
{
    // 4DF4 0021;	
    // (䷴) HEXAGRAM FOR DEVELOPMENT	[0EF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF4, 0x0021 };
    uint32_t const ces[9] = { 0x0EF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_125)
{
    // 4DF4 003F;	
    // (䷴) HEXAGRAM FOR DEVELOPMENT	[0EF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF4, 0x003F };
    uint32_t const ces[9] = { 0x0EF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_126)
{
    // 4DF4 0061;	
    // (䷴) HEXAGRAM FOR DEVELOPMENT	[0EF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF4, 0x0061 };
    uint32_t const ces[9] = { 0x0EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_127)
{
    // 4DF4 0041;	
    // (䷴) HEXAGRAM FOR DEVELOPMENT	[0EF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF4, 0x0041 };
    uint32_t const ces[9] = { 0x0EF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_128)
{
    // 4DF4 0062;	
    // (䷴) HEXAGRAM FOR DEVELOPMENT	[0EF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF4, 0x0062 };
    uint32_t const ces[9] = { 0x0EF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_129)
{
    // 4DF5 0021;	
    // (䷵) HEXAGRAM FOR THE MARRYING MAIDEN	[0EF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF5, 0x0021 };
    uint32_t const ces[9] = { 0x0EF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_130)
{
    // 4DF5 003F;	
    // (䷵) HEXAGRAM FOR THE MARRYING MAIDEN	[0EF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF5, 0x003F };
    uint32_t const ces[9] = { 0x0EF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_131)
{
    // 4DF5 0061;	
    // (䷵) HEXAGRAM FOR THE MARRYING MAIDEN	[0EF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF5, 0x0061 };
    uint32_t const ces[9] = { 0x0EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_132)
{
    // 4DF5 0041;	
    // (䷵) HEXAGRAM FOR THE MARRYING MAIDEN	[0EF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF5, 0x0041 };
    uint32_t const ces[9] = { 0x0EF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_133)
{
    // 4DF5 0062;	
    // (䷵) HEXAGRAM FOR THE MARRYING MAIDEN	[0EF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF5, 0x0062 };
    uint32_t const ces[9] = { 0x0EF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_134)
{
    // 4DF6 0021;	
    // (䷶) HEXAGRAM FOR ABUNDANCE	[0EF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF6, 0x0021 };
    uint32_t const ces[9] = { 0x0EF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_135)
{
    // 4DF6 003F;	
    // (䷶) HEXAGRAM FOR ABUNDANCE	[0EF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF6, 0x003F };
    uint32_t const ces[9] = { 0x0EF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_136)
{
    // 4DF6 0061;	
    // (䷶) HEXAGRAM FOR ABUNDANCE	[0EF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF6, 0x0061 };
    uint32_t const ces[9] = { 0x0EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_137)
{
    // 4DF6 0041;	
    // (䷶) HEXAGRAM FOR ABUNDANCE	[0EF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF6, 0x0041 };
    uint32_t const ces[9] = { 0x0EF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_138)
{
    // 4DF6 0062;	
    // (䷶) HEXAGRAM FOR ABUNDANCE	[0EF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF6, 0x0062 };
    uint32_t const ces[9] = { 0x0EF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_139)
{
    // 4DF7 0021;	
    // (䷷) HEXAGRAM FOR THE WANDERER	[0EF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF7, 0x0021 };
    uint32_t const ces[9] = { 0x0EF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_140)
{
    // 4DF7 003F;	
    // (䷷) HEXAGRAM FOR THE WANDERER	[0EF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF7, 0x003F };
    uint32_t const ces[9] = { 0x0EF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_141)
{
    // 4DF7 0061;	
    // (䷷) HEXAGRAM FOR THE WANDERER	[0EF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF7, 0x0061 };
    uint32_t const ces[9] = { 0x0EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_142)
{
    // 4DF7 0041;	
    // (䷷) HEXAGRAM FOR THE WANDERER	[0EF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF7, 0x0041 };
    uint32_t const ces[9] = { 0x0EF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_143)
{
    // 4DF7 0062;	
    // (䷷) HEXAGRAM FOR THE WANDERER	[0EF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF7, 0x0062 };
    uint32_t const ces[9] = { 0x0EF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_144)
{
    // 4DF8 0021;	
    // (䷸) HEXAGRAM FOR THE GENTLE WIND	[0EFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF8, 0x0021 };
    uint32_t const ces[9] = { 0x0EFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_145)
{
    // 4DF8 003F;	
    // (䷸) HEXAGRAM FOR THE GENTLE WIND	[0EFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF8, 0x003F };
    uint32_t const ces[9] = { 0x0EFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_146)
{
    // 4DF8 0061;	
    // (䷸) HEXAGRAM FOR THE GENTLE WIND	[0EFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF8, 0x0061 };
    uint32_t const ces[9] = { 0x0EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_147)
{
    // 4DF8 0041;	
    // (䷸) HEXAGRAM FOR THE GENTLE WIND	[0EFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF8, 0x0041 };
    uint32_t const ces[9] = { 0x0EFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_148)
{
    // 4DF8 0062;	
    // (䷸) HEXAGRAM FOR THE GENTLE WIND	[0EFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF8, 0x0062 };
    uint32_t const ces[9] = { 0x0EFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_149)
{
    // 4DF9 0021;	
    // (䷹) HEXAGRAM FOR THE JOYOUS LAKE	[0EFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF9, 0x0021 };
    uint32_t const ces[9] = { 0x0EFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_150)
{
    // 4DF9 003F;	
    // (䷹) HEXAGRAM FOR THE JOYOUS LAKE	[0EFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF9, 0x003F };
    uint32_t const ces[9] = { 0x0EFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_151)
{
    // 4DF9 0061;	
    // (䷹) HEXAGRAM FOR THE JOYOUS LAKE	[0EFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF9, 0x0061 };
    uint32_t const ces[9] = { 0x0EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_152)
{
    // 4DF9 0041;	
    // (䷹) HEXAGRAM FOR THE JOYOUS LAKE	[0EFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DF9, 0x0041 };
    uint32_t const ces[9] = { 0x0EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_153)
{
    // 4DF9 0062;	
    // (䷹) HEXAGRAM FOR THE JOYOUS LAKE	[0EFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DF9, 0x0062 };
    uint32_t const ces[9] = { 0x0EFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_154)
{
    // 4DFA 0021;	
    // (䷺) HEXAGRAM FOR DISPERSION	[0EFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFA, 0x0021 };
    uint32_t const ces[9] = { 0x0EFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_155)
{
    // 4DFA 003F;	
    // (䷺) HEXAGRAM FOR DISPERSION	[0EFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFA, 0x003F };
    uint32_t const ces[9] = { 0x0EFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_156)
{
    // 4DFA 0061;	
    // (䷺) HEXAGRAM FOR DISPERSION	[0EFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFA, 0x0061 };
    uint32_t const ces[9] = { 0x0EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_157)
{
    // 4DFA 0041;	
    // (䷺) HEXAGRAM FOR DISPERSION	[0EFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFA, 0x0041 };
    uint32_t const ces[9] = { 0x0EFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_158)
{
    // 4DFA 0062;	
    // (䷺) HEXAGRAM FOR DISPERSION	[0EFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFA, 0x0062 };
    uint32_t const ces[9] = { 0x0EFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_159)
{
    // 4DFB 0021;	
    // (䷻) HEXAGRAM FOR LIMITATION	[0EFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFB, 0x0021 };
    uint32_t const ces[9] = { 0x0EFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_160)
{
    // 4DFB 003F;	
    // (䷻) HEXAGRAM FOR LIMITATION	[0EFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFB, 0x003F };
    uint32_t const ces[9] = { 0x0EFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_161)
{
    // 4DFB 0061;	
    // (䷻) HEXAGRAM FOR LIMITATION	[0EFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFB, 0x0061 };
    uint32_t const ces[9] = { 0x0EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_162)
{
    // 4DFB 0041;	
    // (䷻) HEXAGRAM FOR LIMITATION	[0EFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFB, 0x0041 };
    uint32_t const ces[9] = { 0x0EFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_163)
{
    // 4DFB 0062;	
    // (䷻) HEXAGRAM FOR LIMITATION	[0EFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFB, 0x0062 };
    uint32_t const ces[9] = { 0x0EFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_164)
{
    // 4DFC 0021;	
    // (䷼) HEXAGRAM FOR INNER TRUTH	[0EFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFC, 0x0021 };
    uint32_t const ces[9] = { 0x0EFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_165)
{
    // 4DFC 003F;	
    // (䷼) HEXAGRAM FOR INNER TRUTH	[0EFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFC, 0x003F };
    uint32_t const ces[9] = { 0x0EFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_166)
{
    // 4DFC 0061;	
    // (䷼) HEXAGRAM FOR INNER TRUTH	[0EFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFC, 0x0061 };
    uint32_t const ces[9] = { 0x0EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_167)
{
    // 4DFC 0041;	
    // (䷼) HEXAGRAM FOR INNER TRUTH	[0EFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFC, 0x0041 };
    uint32_t const ces[9] = { 0x0EFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_168)
{
    // 4DFC 0062;	
    // (䷼) HEXAGRAM FOR INNER TRUTH	[0EFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFC, 0x0062 };
    uint32_t const ces[9] = { 0x0EFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_169)
{
    // 4DFD 0021;	
    // (䷽) HEXAGRAM FOR SMALL PREPONDERANCE	[0EFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFD, 0x0021 };
    uint32_t const ces[9] = { 0x0EFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_170)
{
    // 4DFD 003F;	
    // (䷽) HEXAGRAM FOR SMALL PREPONDERANCE	[0EFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFD, 0x003F };
    uint32_t const ces[9] = { 0x0EFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_171)
{
    // 4DFD 0061;	
    // (䷽) HEXAGRAM FOR SMALL PREPONDERANCE	[0EFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFD, 0x0061 };
    uint32_t const ces[9] = { 0x0EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_172)
{
    // 4DFD 0041;	
    // (䷽) HEXAGRAM FOR SMALL PREPONDERANCE	[0EFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFD, 0x0041 };
    uint32_t const ces[9] = { 0x0EFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_173)
{
    // 4DFD 0062;	
    // (䷽) HEXAGRAM FOR SMALL PREPONDERANCE	[0EFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFD, 0x0062 };
    uint32_t const ces[9] = { 0x0EFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_174)
{
    // 4DFE 0021;	
    // (䷾) HEXAGRAM FOR AFTER COMPLETION	[0F00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFE, 0x0021 };
    uint32_t const ces[9] = { 0x0F00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_175)
{
    // 4DFE 003F;	
    // (䷾) HEXAGRAM FOR AFTER COMPLETION	[0F00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFE, 0x003F };
    uint32_t const ces[9] = { 0x0F00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_176)
{
    // 4DFE 0061;	
    // (䷾) HEXAGRAM FOR AFTER COMPLETION	[0F00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFE, 0x0061 };
    uint32_t const ces[9] = { 0x0F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_177)
{
    // 4DFE 0041;	
    // (䷾) HEXAGRAM FOR AFTER COMPLETION	[0F00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFE, 0x0041 };
    uint32_t const ces[9] = { 0x0F00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_178)
{
    // 4DFE 0062;	
    // (䷾) HEXAGRAM FOR AFTER COMPLETION	[0F00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFE, 0x0062 };
    uint32_t const ces[9] = { 0x0F00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_179)
{
    // 4DFF 0021;	
    // (䷿) HEXAGRAM FOR BEFORE COMPLETION	[0F01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFF, 0x0021 };
    uint32_t const ces[9] = { 0x0F01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_180)
{
    // 4DFF 003F;	
    // (䷿) HEXAGRAM FOR BEFORE COMPLETION	[0F01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFF, 0x003F };
    uint32_t const ces[9] = { 0x0F01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_181)
{
    // 4DFF 0061;	
    // (䷿) HEXAGRAM FOR BEFORE COMPLETION	[0F01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFF, 0x0061 };
    uint32_t const ces[9] = { 0x0F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_182)
{
    // 4DFF 0041;	
    // (䷿) HEXAGRAM FOR BEFORE COMPLETION	[0F01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DFF, 0x0041 };
    uint32_t const ces[9] = { 0x0F01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_183)
{
    // 4DFF 0062;	
    // (䷿) HEXAGRAM FOR BEFORE COMPLETION	[0F01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DFF, 0x0062 };
    uint32_t const ces[9] = { 0x0F01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_184)
{
    // 1D300 0021;	
    // (𝌀) MONOGRAM FOR EARTH	[0F02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D300, 0x0021 };
    uint32_t const ces[9] = { 0x0F02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_185)
{
    // 1D300 003F;	
    // (𝌀) MONOGRAM FOR EARTH	[0F02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D300, 0x003F };
    uint32_t const ces[9] = { 0x0F02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_186)
{
    // 1D300 0061;	
    // (𝌀) MONOGRAM FOR EARTH	[0F02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D300, 0x0061 };
    uint32_t const ces[9] = { 0x0F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_187)
{
    // 1D300 0041;	
    // (𝌀) MONOGRAM FOR EARTH	[0F02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D300, 0x0041 };
    uint32_t const ces[9] = { 0x0F02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_188)
{
    // 1D300 0062;	
    // (𝌀) MONOGRAM FOR EARTH	[0F02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D300, 0x0062 };
    uint32_t const ces[9] = { 0x0F02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_189)
{
    // 1D301 0021;	
    // (𝌁) DIGRAM FOR HEAVENLY EARTH	[0F03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D301, 0x0021 };
    uint32_t const ces[9] = { 0x0F03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_190)
{
    // 1D301 003F;	
    // (𝌁) DIGRAM FOR HEAVENLY EARTH	[0F03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D301, 0x003F };
    uint32_t const ces[9] = { 0x0F03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_191)
{
    // 1D301 0061;	
    // (𝌁) DIGRAM FOR HEAVENLY EARTH	[0F03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D301, 0x0061 };
    uint32_t const ces[9] = { 0x0F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_192)
{
    // 1D301 0041;	
    // (𝌁) DIGRAM FOR HEAVENLY EARTH	[0F03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D301, 0x0041 };
    uint32_t const ces[9] = { 0x0F03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_193)
{
    // 1D301 0062;	
    // (𝌁) DIGRAM FOR HEAVENLY EARTH	[0F03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D301, 0x0062 };
    uint32_t const ces[9] = { 0x0F03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_194)
{
    // 1D302 0021;	
    // (𝌂) DIGRAM FOR HUMAN EARTH	[0F04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D302, 0x0021 };
    uint32_t const ces[9] = { 0x0F04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_195)
{
    // 1D302 003F;	
    // (𝌂) DIGRAM FOR HUMAN EARTH	[0F04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D302, 0x003F };
    uint32_t const ces[9] = { 0x0F04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_196)
{
    // 1D302 0061;	
    // (𝌂) DIGRAM FOR HUMAN EARTH	[0F04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D302, 0x0061 };
    uint32_t const ces[9] = { 0x0F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_197)
{
    // 1D302 0041;	
    // (𝌂) DIGRAM FOR HUMAN EARTH	[0F04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D302, 0x0041 };
    uint32_t const ces[9] = { 0x0F04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_198)
{
    // 1D302 0062;	
    // (𝌂) DIGRAM FOR HUMAN EARTH	[0F04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D302, 0x0062 };
    uint32_t const ces[9] = { 0x0F04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_199)
{
    // 1D303 0021;	
    // (𝌃) DIGRAM FOR EARTHLY HEAVEN	[0F05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D303, 0x0021 };
    uint32_t const ces[9] = { 0x0F05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_200)
{
    // 1D303 003F;	
    // (𝌃) DIGRAM FOR EARTHLY HEAVEN	[0F05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D303, 0x003F };
    uint32_t const ces[9] = { 0x0F05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_201)
{
    // 1D303 0061;	
    // (𝌃) DIGRAM FOR EARTHLY HEAVEN	[0F05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D303, 0x0061 };
    uint32_t const ces[9] = { 0x0F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_202)
{
    // 1D303 0041;	
    // (𝌃) DIGRAM FOR EARTHLY HEAVEN	[0F05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D303, 0x0041 };
    uint32_t const ces[9] = { 0x0F05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_203)
{
    // 1D303 0062;	
    // (𝌃) DIGRAM FOR EARTHLY HEAVEN	[0F05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D303, 0x0062 };
    uint32_t const ces[9] = { 0x0F05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_204)
{
    // 1D304 0021;	
    // (𝌄) DIGRAM FOR EARTHLY HUMAN	[0F06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D304, 0x0021 };
    uint32_t const ces[9] = { 0x0F06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_205)
{
    // 1D304 003F;	
    // (𝌄) DIGRAM FOR EARTHLY HUMAN	[0F06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D304, 0x003F };
    uint32_t const ces[9] = { 0x0F06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_206)
{
    // 1D304 0061;	
    // (𝌄) DIGRAM FOR EARTHLY HUMAN	[0F06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D304, 0x0061 };
    uint32_t const ces[9] = { 0x0F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_207)
{
    // 1D304 0041;	
    // (𝌄) DIGRAM FOR EARTHLY HUMAN	[0F06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D304, 0x0041 };
    uint32_t const ces[9] = { 0x0F06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_208)
{
    // 1D304 0062;	
    // (𝌄) DIGRAM FOR EARTHLY HUMAN	[0F06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D304, 0x0062 };
    uint32_t const ces[9] = { 0x0F06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_209)
{
    // 1D305 0021;	
    // (𝌅) DIGRAM FOR EARTH	[0F07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D305, 0x0021 };
    uint32_t const ces[9] = { 0x0F07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_210)
{
    // 1D305 003F;	
    // (𝌅) DIGRAM FOR EARTH	[0F07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D305, 0x003F };
    uint32_t const ces[9] = { 0x0F07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_211)
{
    // 1D305 0061;	
    // (𝌅) DIGRAM FOR EARTH	[0F07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D305, 0x0061 };
    uint32_t const ces[9] = { 0x0F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_212)
{
    // 1D305 0041;	
    // (𝌅) DIGRAM FOR EARTH	[0F07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D305, 0x0041 };
    uint32_t const ces[9] = { 0x0F07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_213)
{
    // 1D305 0062;	
    // (𝌅) DIGRAM FOR EARTH	[0F07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D305, 0x0062 };
    uint32_t const ces[9] = { 0x0F07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_214)
{
    // 1D306 0021;	
    // (𝌆) TETRAGRAM FOR CENTRE	[0F08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D306, 0x0021 };
    uint32_t const ces[9] = { 0x0F08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_215)
{
    // 1D306 003F;	
    // (𝌆) TETRAGRAM FOR CENTRE	[0F08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D306, 0x003F };
    uint32_t const ces[9] = { 0x0F08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_216)
{
    // 1D306 0061;	
    // (𝌆) TETRAGRAM FOR CENTRE	[0F08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D306, 0x0061 };
    uint32_t const ces[9] = { 0x0F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_217)
{
    // 1D306 0041;	
    // (𝌆) TETRAGRAM FOR CENTRE	[0F08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D306, 0x0041 };
    uint32_t const ces[9] = { 0x0F08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_218)
{
    // 1D306 0062;	
    // (𝌆) TETRAGRAM FOR CENTRE	[0F08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D306, 0x0062 };
    uint32_t const ces[9] = { 0x0F08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_219)
{
    // 1D307 0021;	
    // (𝌇) TETRAGRAM FOR FULL CIRCLE	[0F09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D307, 0x0021 };
    uint32_t const ces[9] = { 0x0F09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_220)
{
    // 1D307 003F;	
    // (𝌇) TETRAGRAM FOR FULL CIRCLE	[0F09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D307, 0x003F };
    uint32_t const ces[9] = { 0x0F09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_221)
{
    // 1D307 0061;	
    // (𝌇) TETRAGRAM FOR FULL CIRCLE	[0F09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D307, 0x0061 };
    uint32_t const ces[9] = { 0x0F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_222)
{
    // 1D307 0041;	
    // (𝌇) TETRAGRAM FOR FULL CIRCLE	[0F09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D307, 0x0041 };
    uint32_t const ces[9] = { 0x0F09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_223)
{
    // 1D307 0062;	
    // (𝌇) TETRAGRAM FOR FULL CIRCLE	[0F09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D307, 0x0062 };
    uint32_t const ces[9] = { 0x0F09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_224)
{
    // 1D308 0021;	
    // (𝌈) TETRAGRAM FOR MIRED	[0F0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D308, 0x0021 };
    uint32_t const ces[9] = { 0x0F0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_225)
{
    // 1D308 003F;	
    // (𝌈) TETRAGRAM FOR MIRED	[0F0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D308, 0x003F };
    uint32_t const ces[9] = { 0x0F0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_226)
{
    // 1D308 0061;	
    // (𝌈) TETRAGRAM FOR MIRED	[0F0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D308, 0x0061 };
    uint32_t const ces[9] = { 0x0F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_227)
{
    // 1D308 0041;	
    // (𝌈) TETRAGRAM FOR MIRED	[0F0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D308, 0x0041 };
    uint32_t const ces[9] = { 0x0F0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_228)
{
    // 1D308 0062;	
    // (𝌈) TETRAGRAM FOR MIRED	[0F0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D308, 0x0062 };
    uint32_t const ces[9] = { 0x0F0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_229)
{
    // 1D309 0021;	
    // (𝌉) TETRAGRAM FOR BARRIER	[0F0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D309, 0x0021 };
    uint32_t const ces[9] = { 0x0F0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_230)
{
    // 1D309 003F;	
    // (𝌉) TETRAGRAM FOR BARRIER	[0F0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D309, 0x003F };
    uint32_t const ces[9] = { 0x0F0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_231)
{
    // 1D309 0061;	
    // (𝌉) TETRAGRAM FOR BARRIER	[0F0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D309, 0x0061 };
    uint32_t const ces[9] = { 0x0F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_232)
{
    // 1D309 0041;	
    // (𝌉) TETRAGRAM FOR BARRIER	[0F0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D309, 0x0041 };
    uint32_t const ces[9] = { 0x0F0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_233)
{
    // 1D309 0062;	
    // (𝌉) TETRAGRAM FOR BARRIER	[0F0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D309, 0x0062 };
    uint32_t const ces[9] = { 0x0F0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_234)
{
    // 1D30A 0021;	
    // (𝌊) TETRAGRAM FOR KEEPING SMALL	[0F0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30A, 0x0021 };
    uint32_t const ces[9] = { 0x0F0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_235)
{
    // 1D30A 003F;	
    // (𝌊) TETRAGRAM FOR KEEPING SMALL	[0F0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30A, 0x003F };
    uint32_t const ces[9] = { 0x0F0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_236)
{
    // 1D30A 0061;	
    // (𝌊) TETRAGRAM FOR KEEPING SMALL	[0F0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30A, 0x0061 };
    uint32_t const ces[9] = { 0x0F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_237)
{
    // 1D30A 0041;	
    // (𝌊) TETRAGRAM FOR KEEPING SMALL	[0F0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30A, 0x0041 };
    uint32_t const ces[9] = { 0x0F0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_238)
{
    // 1D30A 0062;	
    // (𝌊) TETRAGRAM FOR KEEPING SMALL	[0F0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30A, 0x0062 };
    uint32_t const ces[9] = { 0x0F0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_239)
{
    // 1D30B 0021;	
    // (𝌋) TETRAGRAM FOR CONTRARIETY	[0F0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30B, 0x0021 };
    uint32_t const ces[9] = { 0x0F0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_240)
{
    // 1D30B 003F;	
    // (𝌋) TETRAGRAM FOR CONTRARIETY	[0F0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30B, 0x003F };
    uint32_t const ces[9] = { 0x0F0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_241)
{
    // 1D30B 0061;	
    // (𝌋) TETRAGRAM FOR CONTRARIETY	[0F0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30B, 0x0061 };
    uint32_t const ces[9] = { 0x0F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_242)
{
    // 1D30B 0041;	
    // (𝌋) TETRAGRAM FOR CONTRARIETY	[0F0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30B, 0x0041 };
    uint32_t const ces[9] = { 0x0F0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_243)
{
    // 1D30B 0062;	
    // (𝌋) TETRAGRAM FOR CONTRARIETY	[0F0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30B, 0x0062 };
    uint32_t const ces[9] = { 0x0F0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_244)
{
    // 1D30C 0021;	
    // (𝌌) TETRAGRAM FOR ASCENT	[0F0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30C, 0x0021 };
    uint32_t const ces[9] = { 0x0F0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_245)
{
    // 1D30C 003F;	
    // (𝌌) TETRAGRAM FOR ASCENT	[0F0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30C, 0x003F };
    uint32_t const ces[9] = { 0x0F0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_246)
{
    // 1D30C 0061;	
    // (𝌌) TETRAGRAM FOR ASCENT	[0F0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30C, 0x0061 };
    uint32_t const ces[9] = { 0x0F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_247)
{
    // 1D30C 0041;	
    // (𝌌) TETRAGRAM FOR ASCENT	[0F0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30C, 0x0041 };
    uint32_t const ces[9] = { 0x0F0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_248)
{
    // 1D30C 0062;	
    // (𝌌) TETRAGRAM FOR ASCENT	[0F0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30C, 0x0062 };
    uint32_t const ces[9] = { 0x0F0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_249)
{
    // 1D30D 0021;	
    // (𝌍) TETRAGRAM FOR OPPOSITION	[0F0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30D, 0x0021 };
    uint32_t const ces[9] = { 0x0F0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_250)
{
    // 1D30D 003F;	
    // (𝌍) TETRAGRAM FOR OPPOSITION	[0F0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30D, 0x003F };
    uint32_t const ces[9] = { 0x0F0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_251)
{
    // 1D30D 0061;	
    // (𝌍) TETRAGRAM FOR OPPOSITION	[0F0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30D, 0x0061 };
    uint32_t const ces[9] = { 0x0F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_252)
{
    // 1D30D 0041;	
    // (𝌍) TETRAGRAM FOR OPPOSITION	[0F0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30D, 0x0041 };
    uint32_t const ces[9] = { 0x0F0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_253)
{
    // 1D30D 0062;	
    // (𝌍) TETRAGRAM FOR OPPOSITION	[0F0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30D, 0x0062 };
    uint32_t const ces[9] = { 0x0F0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_254)
{
    // 1D30E 0021;	
    // (𝌎) TETRAGRAM FOR BRANCHING OUT	[0F10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30E, 0x0021 };
    uint32_t const ces[9] = { 0x0F10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_255)
{
    // 1D30E 003F;	
    // (𝌎) TETRAGRAM FOR BRANCHING OUT	[0F10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30E, 0x003F };
    uint32_t const ces[9] = { 0x0F10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_256)
{
    // 1D30E 0061;	
    // (𝌎) TETRAGRAM FOR BRANCHING OUT	[0F10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30E, 0x0061 };
    uint32_t const ces[9] = { 0x0F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_257)
{
    // 1D30E 0041;	
    // (𝌎) TETRAGRAM FOR BRANCHING OUT	[0F10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30E, 0x0041 };
    uint32_t const ces[9] = { 0x0F10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_258)
{
    // 1D30E 0062;	
    // (𝌎) TETRAGRAM FOR BRANCHING OUT	[0F10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30E, 0x0062 };
    uint32_t const ces[9] = { 0x0F10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_259)
{
    // 1D30F 0021;	
    // (𝌏) TETRAGRAM FOR DEFECTIVENESS OR DISTORTION	[0F11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30F, 0x0021 };
    uint32_t const ces[9] = { 0x0F11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_260)
{
    // 1D30F 003F;	
    // (𝌏) TETRAGRAM FOR DEFECTIVENESS OR DISTORTION	[0F11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30F, 0x003F };
    uint32_t const ces[9] = { 0x0F11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_261)
{
    // 1D30F 0061;	
    // (𝌏) TETRAGRAM FOR DEFECTIVENESS OR DISTORTION	[0F11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30F, 0x0061 };
    uint32_t const ces[9] = { 0x0F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_262)
{
    // 1D30F 0041;	
    // (𝌏) TETRAGRAM FOR DEFECTIVENESS OR DISTORTION	[0F11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D30F, 0x0041 };
    uint32_t const ces[9] = { 0x0F11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_263)
{
    // 1D30F 0062;	
    // (𝌏) TETRAGRAM FOR DEFECTIVENESS OR DISTORTION	[0F11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D30F, 0x0062 };
    uint32_t const ces[9] = { 0x0F11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_264)
{
    // 1D310 0021;	
    // (𝌐) TETRAGRAM FOR DIVERGENCE	[0F12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D310, 0x0021 };
    uint32_t const ces[9] = { 0x0F12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_265)
{
    // 1D310 003F;	
    // (𝌐) TETRAGRAM FOR DIVERGENCE	[0F12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D310, 0x003F };
    uint32_t const ces[9] = { 0x0F12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_266)
{
    // 1D310 0061;	
    // (𝌐) TETRAGRAM FOR DIVERGENCE	[0F12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D310, 0x0061 };
    uint32_t const ces[9] = { 0x0F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_267)
{
    // 1D310 0041;	
    // (𝌐) TETRAGRAM FOR DIVERGENCE	[0F12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D310, 0x0041 };
    uint32_t const ces[9] = { 0x0F12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_268)
{
    // 1D310 0062;	
    // (𝌐) TETRAGRAM FOR DIVERGENCE	[0F12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D310, 0x0062 };
    uint32_t const ces[9] = { 0x0F12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_269)
{
    // 1D311 0021;	
    // (𝌑) TETRAGRAM FOR YOUTHFULNESS	[0F13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D311, 0x0021 };
    uint32_t const ces[9] = { 0x0F13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_270)
{
    // 1D311 003F;	
    // (𝌑) TETRAGRAM FOR YOUTHFULNESS	[0F13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D311, 0x003F };
    uint32_t const ces[9] = { 0x0F13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_271)
{
    // 1D311 0061;	
    // (𝌑) TETRAGRAM FOR YOUTHFULNESS	[0F13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D311, 0x0061 };
    uint32_t const ces[9] = { 0x0F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_272)
{
    // 1D311 0041;	
    // (𝌑) TETRAGRAM FOR YOUTHFULNESS	[0F13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D311, 0x0041 };
    uint32_t const ces[9] = { 0x0F13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_273)
{
    // 1D311 0062;	
    // (𝌑) TETRAGRAM FOR YOUTHFULNESS	[0F13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D311, 0x0062 };
    uint32_t const ces[9] = { 0x0F13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_274)
{
    // 1D312 0021;	
    // (𝌒) TETRAGRAM FOR INCREASE	[0F14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D312, 0x0021 };
    uint32_t const ces[9] = { 0x0F14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_275)
{
    // 1D312 003F;	
    // (𝌒) TETRAGRAM FOR INCREASE	[0F14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D312, 0x003F };
    uint32_t const ces[9] = { 0x0F14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_276)
{
    // 1D312 0061;	
    // (𝌒) TETRAGRAM FOR INCREASE	[0F14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D312, 0x0061 };
    uint32_t const ces[9] = { 0x0F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_277)
{
    // 1D312 0041;	
    // (𝌒) TETRAGRAM FOR INCREASE	[0F14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D312, 0x0041 };
    uint32_t const ces[9] = { 0x0F14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_278)
{
    // 1D312 0062;	
    // (𝌒) TETRAGRAM FOR INCREASE	[0F14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D312, 0x0062 };
    uint32_t const ces[9] = { 0x0F14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_279)
{
    // 1D313 0021;	
    // (𝌓) TETRAGRAM FOR PENETRATION	[0F15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D313, 0x0021 };
    uint32_t const ces[9] = { 0x0F15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_280)
{
    // 1D313 003F;	
    // (𝌓) TETRAGRAM FOR PENETRATION	[0F15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D313, 0x003F };
    uint32_t const ces[9] = { 0x0F15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_281)
{
    // 1D313 0061;	
    // (𝌓) TETRAGRAM FOR PENETRATION	[0F15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D313, 0x0061 };
    uint32_t const ces[9] = { 0x0F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_282)
{
    // 1D313 0041;	
    // (𝌓) TETRAGRAM FOR PENETRATION	[0F15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D313, 0x0041 };
    uint32_t const ces[9] = { 0x0F15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_283)
{
    // 1D313 0062;	
    // (𝌓) TETRAGRAM FOR PENETRATION	[0F15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D313, 0x0062 };
    uint32_t const ces[9] = { 0x0F15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_284)
{
    // 1D314 0021;	
    // (𝌔) TETRAGRAM FOR REACH	[0F16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D314, 0x0021 };
    uint32_t const ces[9] = { 0x0F16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_285)
{
    // 1D314 003F;	
    // (𝌔) TETRAGRAM FOR REACH	[0F16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D314, 0x003F };
    uint32_t const ces[9] = { 0x0F16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_286)
{
    // 1D314 0061;	
    // (𝌔) TETRAGRAM FOR REACH	[0F16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D314, 0x0061 };
    uint32_t const ces[9] = { 0x0F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_287)
{
    // 1D314 0041;	
    // (𝌔) TETRAGRAM FOR REACH	[0F16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D314, 0x0041 };
    uint32_t const ces[9] = { 0x0F16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_288)
{
    // 1D314 0062;	
    // (𝌔) TETRAGRAM FOR REACH	[0F16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D314, 0x0062 };
    uint32_t const ces[9] = { 0x0F16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_289)
{
    // 1D315 0021;	
    // (𝌕) TETRAGRAM FOR CONTACT	[0F17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D315, 0x0021 };
    uint32_t const ces[9] = { 0x0F17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_290)
{
    // 1D315 003F;	
    // (𝌕) TETRAGRAM FOR CONTACT	[0F17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D315, 0x003F };
    uint32_t const ces[9] = { 0x0F17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_291)
{
    // 1D315 0061;	
    // (𝌕) TETRAGRAM FOR CONTACT	[0F17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D315, 0x0061 };
    uint32_t const ces[9] = { 0x0F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_292)
{
    // 1D315 0041;	
    // (𝌕) TETRAGRAM FOR CONTACT	[0F17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D315, 0x0041 };
    uint32_t const ces[9] = { 0x0F17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_293)
{
    // 1D315 0062;	
    // (𝌕) TETRAGRAM FOR CONTACT	[0F17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D315, 0x0062 };
    uint32_t const ces[9] = { 0x0F17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_294)
{
    // 1D316 0021;	
    // (𝌖) TETRAGRAM FOR HOLDING BACK	[0F18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D316, 0x0021 };
    uint32_t const ces[9] = { 0x0F18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_295)
{
    // 1D316 003F;	
    // (𝌖) TETRAGRAM FOR HOLDING BACK	[0F18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D316, 0x003F };
    uint32_t const ces[9] = { 0x0F18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_296)
{
    // 1D316 0061;	
    // (𝌖) TETRAGRAM FOR HOLDING BACK	[0F18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D316, 0x0061 };
    uint32_t const ces[9] = { 0x0F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_297)
{
    // 1D316 0041;	
    // (𝌖) TETRAGRAM FOR HOLDING BACK	[0F18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D316, 0x0041 };
    uint32_t const ces[9] = { 0x0F18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_298)
{
    // 1D316 0062;	
    // (𝌖) TETRAGRAM FOR HOLDING BACK	[0F18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D316, 0x0062 };
    uint32_t const ces[9] = { 0x0F18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_299)
{
    // 1D317 0021;	
    // (𝌗) TETRAGRAM FOR WAITING	[0F19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D317, 0x0021 };
    uint32_t const ces[9] = { 0x0F19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_300)
{
    // 1D317 003F;	
    // (𝌗) TETRAGRAM FOR WAITING	[0F19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D317, 0x003F };
    uint32_t const ces[9] = { 0x0F19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_301)
{
    // 1D317 0061;	
    // (𝌗) TETRAGRAM FOR WAITING	[0F19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D317, 0x0061 };
    uint32_t const ces[9] = { 0x0F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_302)
{
    // 1D317 0041;	
    // (𝌗) TETRAGRAM FOR WAITING	[0F19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D317, 0x0041 };
    uint32_t const ces[9] = { 0x0F19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_303)
{
    // 1D317 0062;	
    // (𝌗) TETRAGRAM FOR WAITING	[0F19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D317, 0x0062 };
    uint32_t const ces[9] = { 0x0F19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_304)
{
    // 1D318 0021;	
    // (𝌘) TETRAGRAM FOR FOLLOWING	[0F1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D318, 0x0021 };
    uint32_t const ces[9] = { 0x0F1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_305)
{
    // 1D318 003F;	
    // (𝌘) TETRAGRAM FOR FOLLOWING	[0F1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D318, 0x003F };
    uint32_t const ces[9] = { 0x0F1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_306)
{
    // 1D318 0061;	
    // (𝌘) TETRAGRAM FOR FOLLOWING	[0F1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D318, 0x0061 };
    uint32_t const ces[9] = { 0x0F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_307)
{
    // 1D318 0041;	
    // (𝌘) TETRAGRAM FOR FOLLOWING	[0F1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D318, 0x0041 };
    uint32_t const ces[9] = { 0x0F1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_308)
{
    // 1D318 0062;	
    // (𝌘) TETRAGRAM FOR FOLLOWING	[0F1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D318, 0x0062 };
    uint32_t const ces[9] = { 0x0F1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_309)
{
    // 1D319 0021;	
    // (𝌙) TETRAGRAM FOR ADVANCE	[0F1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D319, 0x0021 };
    uint32_t const ces[9] = { 0x0F1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_310)
{
    // 1D319 003F;	
    // (𝌙) TETRAGRAM FOR ADVANCE	[0F1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D319, 0x003F };
    uint32_t const ces[9] = { 0x0F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_311)
{
    // 1D319 0061;	
    // (𝌙) TETRAGRAM FOR ADVANCE	[0F1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D319, 0x0061 };
    uint32_t const ces[9] = { 0x0F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_312)
{
    // 1D319 0041;	
    // (𝌙) TETRAGRAM FOR ADVANCE	[0F1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D319, 0x0041 };
    uint32_t const ces[9] = { 0x0F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_313)
{
    // 1D319 0062;	
    // (𝌙) TETRAGRAM FOR ADVANCE	[0F1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D319, 0x0062 };
    uint32_t const ces[9] = { 0x0F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_314)
{
    // 1D31A 0021;	
    // (𝌚) TETRAGRAM FOR RELEASE	[0F1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31A, 0x0021 };
    uint32_t const ces[9] = { 0x0F1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_315)
{
    // 1D31A 003F;	
    // (𝌚) TETRAGRAM FOR RELEASE	[0F1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31A, 0x003F };
    uint32_t const ces[9] = { 0x0F1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_316)
{
    // 1D31A 0061;	
    // (𝌚) TETRAGRAM FOR RELEASE	[0F1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31A, 0x0061 };
    uint32_t const ces[9] = { 0x0F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_317)
{
    // 1D31A 0041;	
    // (𝌚) TETRAGRAM FOR RELEASE	[0F1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31A, 0x0041 };
    uint32_t const ces[9] = { 0x0F1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_318)
{
    // 1D31A 0062;	
    // (𝌚) TETRAGRAM FOR RELEASE	[0F1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31A, 0x0062 };
    uint32_t const ces[9] = { 0x0F1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_319)
{
    // 1D31B 0021;	
    // (𝌛) TETRAGRAM FOR RESISTANCE	[0F1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31B, 0x0021 };
    uint32_t const ces[9] = { 0x0F1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_320)
{
    // 1D31B 003F;	
    // (𝌛) TETRAGRAM FOR RESISTANCE	[0F1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31B, 0x003F };
    uint32_t const ces[9] = { 0x0F1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_321)
{
    // 1D31B 0061;	
    // (𝌛) TETRAGRAM FOR RESISTANCE	[0F1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31B, 0x0061 };
    uint32_t const ces[9] = { 0x0F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_322)
{
    // 1D31B 0041;	
    // (𝌛) TETRAGRAM FOR RESISTANCE	[0F1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31B, 0x0041 };
    uint32_t const ces[9] = { 0x0F1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_323)
{
    // 1D31B 0062;	
    // (𝌛) TETRAGRAM FOR RESISTANCE	[0F1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31B, 0x0062 };
    uint32_t const ces[9] = { 0x0F1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_324)
{
    // 1D31C 0021;	
    // (𝌜) TETRAGRAM FOR EASE	[0F1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31C, 0x0021 };
    uint32_t const ces[9] = { 0x0F1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_325)
{
    // 1D31C 003F;	
    // (𝌜) TETRAGRAM FOR EASE	[0F1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31C, 0x003F };
    uint32_t const ces[9] = { 0x0F1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_326)
{
    // 1D31C 0061;	
    // (𝌜) TETRAGRAM FOR EASE	[0F1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31C, 0x0061 };
    uint32_t const ces[9] = { 0x0F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_327)
{
    // 1D31C 0041;	
    // (𝌜) TETRAGRAM FOR EASE	[0F1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31C, 0x0041 };
    uint32_t const ces[9] = { 0x0F1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_328)
{
    // 1D31C 0062;	
    // (𝌜) TETRAGRAM FOR EASE	[0F1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31C, 0x0062 };
    uint32_t const ces[9] = { 0x0F1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_329)
{
    // 1D31D 0021;	
    // (𝌝) TETRAGRAM FOR JOY	[0F1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31D, 0x0021 };
    uint32_t const ces[9] = { 0x0F1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_330)
{
    // 1D31D 003F;	
    // (𝌝) TETRAGRAM FOR JOY	[0F1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31D, 0x003F };
    uint32_t const ces[9] = { 0x0F1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_331)
{
    // 1D31D 0061;	
    // (𝌝) TETRAGRAM FOR JOY	[0F1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31D, 0x0061 };
    uint32_t const ces[9] = { 0x0F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_332)
{
    // 1D31D 0041;	
    // (𝌝) TETRAGRAM FOR JOY	[0F1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31D, 0x0041 };
    uint32_t const ces[9] = { 0x0F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_333)
{
    // 1D31D 0062;	
    // (𝌝) TETRAGRAM FOR JOY	[0F1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31D, 0x0062 };
    uint32_t const ces[9] = { 0x0F1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_334)
{
    // 1D31E 0021;	
    // (𝌞) TETRAGRAM FOR CONTENTION	[0F20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31E, 0x0021 };
    uint32_t const ces[9] = { 0x0F20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_335)
{
    // 1D31E 003F;	
    // (𝌞) TETRAGRAM FOR CONTENTION	[0F20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31E, 0x003F };
    uint32_t const ces[9] = { 0x0F20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_336)
{
    // 1D31E 0061;	
    // (𝌞) TETRAGRAM FOR CONTENTION	[0F20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31E, 0x0061 };
    uint32_t const ces[9] = { 0x0F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_337)
{
    // 1D31E 0041;	
    // (𝌞) TETRAGRAM FOR CONTENTION	[0F20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31E, 0x0041 };
    uint32_t const ces[9] = { 0x0F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_338)
{
    // 1D31E 0062;	
    // (𝌞) TETRAGRAM FOR CONTENTION	[0F20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31E, 0x0062 };
    uint32_t const ces[9] = { 0x0F20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_339)
{
    // 1D31F 0021;	
    // (𝌟) TETRAGRAM FOR ENDEAVOUR	[0F21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31F, 0x0021 };
    uint32_t const ces[9] = { 0x0F21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_340)
{
    // 1D31F 003F;	
    // (𝌟) TETRAGRAM FOR ENDEAVOUR	[0F21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31F, 0x003F };
    uint32_t const ces[9] = { 0x0F21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_341)
{
    // 1D31F 0061;	
    // (𝌟) TETRAGRAM FOR ENDEAVOUR	[0F21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31F, 0x0061 };
    uint32_t const ces[9] = { 0x0F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_342)
{
    // 1D31F 0041;	
    // (𝌟) TETRAGRAM FOR ENDEAVOUR	[0F21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D31F, 0x0041 };
    uint32_t const ces[9] = { 0x0F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_343)
{
    // 1D31F 0062;	
    // (𝌟) TETRAGRAM FOR ENDEAVOUR	[0F21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D31F, 0x0062 };
    uint32_t const ces[9] = { 0x0F21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_344)
{
    // 1D320 0021;	
    // (𝌠) TETRAGRAM FOR DUTIES	[0F22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D320, 0x0021 };
    uint32_t const ces[9] = { 0x0F22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_345)
{
    // 1D320 003F;	
    // (𝌠) TETRAGRAM FOR DUTIES	[0F22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D320, 0x003F };
    uint32_t const ces[9] = { 0x0F22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_346)
{
    // 1D320 0061;	
    // (𝌠) TETRAGRAM FOR DUTIES	[0F22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D320, 0x0061 };
    uint32_t const ces[9] = { 0x0F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_347)
{
    // 1D320 0041;	
    // (𝌠) TETRAGRAM FOR DUTIES	[0F22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D320, 0x0041 };
    uint32_t const ces[9] = { 0x0F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_348)
{
    // 1D320 0062;	
    // (𝌠) TETRAGRAM FOR DUTIES	[0F22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D320, 0x0062 };
    uint32_t const ces[9] = { 0x0F22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_349)
{
    // 1D321 0021;	
    // (𝌡) TETRAGRAM FOR CHANGE	[0F23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D321, 0x0021 };
    uint32_t const ces[9] = { 0x0F23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_350)
{
    // 1D321 003F;	
    // (𝌡) TETRAGRAM FOR CHANGE	[0F23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D321, 0x003F };
    uint32_t const ces[9] = { 0x0F23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_351)
{
    // 1D321 0061;	
    // (𝌡) TETRAGRAM FOR CHANGE	[0F23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D321, 0x0061 };
    uint32_t const ces[9] = { 0x0F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_352)
{
    // 1D321 0041;	
    // (𝌡) TETRAGRAM FOR CHANGE	[0F23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D321, 0x0041 };
    uint32_t const ces[9] = { 0x0F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_353)
{
    // 1D321 0062;	
    // (𝌡) TETRAGRAM FOR CHANGE	[0F23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D321, 0x0062 };
    uint32_t const ces[9] = { 0x0F23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_354)
{
    // 1D322 0021;	
    // (𝌢) TETRAGRAM FOR DECISIVENESS	[0F24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D322, 0x0021 };
    uint32_t const ces[9] = { 0x0F24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_355)
{
    // 1D322 003F;	
    // (𝌢) TETRAGRAM FOR DECISIVENESS	[0F24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D322, 0x003F };
    uint32_t const ces[9] = { 0x0F24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_356)
{
    // 1D322 0061;	
    // (𝌢) TETRAGRAM FOR DECISIVENESS	[0F24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D322, 0x0061 };
    uint32_t const ces[9] = { 0x0F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_357)
{
    // 1D322 0041;	
    // (𝌢) TETRAGRAM FOR DECISIVENESS	[0F24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D322, 0x0041 };
    uint32_t const ces[9] = { 0x0F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_358)
{
    // 1D322 0062;	
    // (𝌢) TETRAGRAM FOR DECISIVENESS	[0F24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D322, 0x0062 };
    uint32_t const ces[9] = { 0x0F24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_359)
{
    // 1D323 0021;	
    // (𝌣) TETRAGRAM FOR BOLD RESOLUTION	[0F25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D323, 0x0021 };
    uint32_t const ces[9] = { 0x0F25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_360)
{
    // 1D323 003F;	
    // (𝌣) TETRAGRAM FOR BOLD RESOLUTION	[0F25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D323, 0x003F };
    uint32_t const ces[9] = { 0x0F25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_361)
{
    // 1D323 0061;	
    // (𝌣) TETRAGRAM FOR BOLD RESOLUTION	[0F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D323, 0x0061 };
    uint32_t const ces[9] = { 0x0F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_362)
{
    // 1D323 0041;	
    // (𝌣) TETRAGRAM FOR BOLD RESOLUTION	[0F25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D323, 0x0041 };
    uint32_t const ces[9] = { 0x0F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_363)
{
    // 1D323 0062;	
    // (𝌣) TETRAGRAM FOR BOLD RESOLUTION	[0F25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D323, 0x0062 };
    uint32_t const ces[9] = { 0x0F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_364)
{
    // 1D324 0021;	
    // (𝌤) TETRAGRAM FOR PACKING	[0F26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D324, 0x0021 };
    uint32_t const ces[9] = { 0x0F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_365)
{
    // 1D324 003F;	
    // (𝌤) TETRAGRAM FOR PACKING	[0F26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D324, 0x003F };
    uint32_t const ces[9] = { 0x0F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_366)
{
    // 1D324 0061;	
    // (𝌤) TETRAGRAM FOR PACKING	[0F26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D324, 0x0061 };
    uint32_t const ces[9] = { 0x0F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_367)
{
    // 1D324 0041;	
    // (𝌤) TETRAGRAM FOR PACKING	[0F26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D324, 0x0041 };
    uint32_t const ces[9] = { 0x0F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_368)
{
    // 1D324 0062;	
    // (𝌤) TETRAGRAM FOR PACKING	[0F26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D324, 0x0062 };
    uint32_t const ces[9] = { 0x0F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_369)
{
    // 1D325 0021;	
    // (𝌥) TETRAGRAM FOR LEGION	[0F27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D325, 0x0021 };
    uint32_t const ces[9] = { 0x0F27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_370)
{
    // 1D325 003F;	
    // (𝌥) TETRAGRAM FOR LEGION	[0F27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D325, 0x003F };
    uint32_t const ces[9] = { 0x0F27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_371)
{
    // 1D325 0061;	
    // (𝌥) TETRAGRAM FOR LEGION	[0F27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D325, 0x0061 };
    uint32_t const ces[9] = { 0x0F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_372)
{
    // 1D325 0041;	
    // (𝌥) TETRAGRAM FOR LEGION	[0F27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D325, 0x0041 };
    uint32_t const ces[9] = { 0x0F27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_373)
{
    // 1D325 0062;	
    // (𝌥) TETRAGRAM FOR LEGION	[0F27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D325, 0x0062 };
    uint32_t const ces[9] = { 0x0F27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_374)
{
    // 1D326 0021;	
    // (𝌦) TETRAGRAM FOR CLOSENESS	[0F28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D326, 0x0021 };
    uint32_t const ces[9] = { 0x0F28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_375)
{
    // 1D326 003F;	
    // (𝌦) TETRAGRAM FOR CLOSENESS	[0F28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D326, 0x003F };
    uint32_t const ces[9] = { 0x0F28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_376)
{
    // 1D326 0061;	
    // (𝌦) TETRAGRAM FOR CLOSENESS	[0F28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D326, 0x0061 };
    uint32_t const ces[9] = { 0x0F28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_377)
{
    // 1D326 0041;	
    // (𝌦) TETRAGRAM FOR CLOSENESS	[0F28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D326, 0x0041 };
    uint32_t const ces[9] = { 0x0F28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_378)
{
    // 1D326 0062;	
    // (𝌦) TETRAGRAM FOR CLOSENESS	[0F28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D326, 0x0062 };
    uint32_t const ces[9] = { 0x0F28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_379)
{
    // 1D327 0021;	
    // (𝌧) TETRAGRAM FOR KINSHIP	[0F29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D327, 0x0021 };
    uint32_t const ces[9] = { 0x0F29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_380)
{
    // 1D327 003F;	
    // (𝌧) TETRAGRAM FOR KINSHIP	[0F29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D327, 0x003F };
    uint32_t const ces[9] = { 0x0F29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_381)
{
    // 1D327 0061;	
    // (𝌧) TETRAGRAM FOR KINSHIP	[0F29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D327, 0x0061 };
    uint32_t const ces[9] = { 0x0F29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_382)
{
    // 1D327 0041;	
    // (𝌧) TETRAGRAM FOR KINSHIP	[0F29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D327, 0x0041 };
    uint32_t const ces[9] = { 0x0F29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_383)
{
    // 1D327 0062;	
    // (𝌧) TETRAGRAM FOR KINSHIP	[0F29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D327, 0x0062 };
    uint32_t const ces[9] = { 0x0F29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_384)
{
    // 1D328 0021;	
    // (𝌨) TETRAGRAM FOR GATHERING	[0F2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D328, 0x0021 };
    uint32_t const ces[9] = { 0x0F2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_385)
{
    // 1D328 003F;	
    // (𝌨) TETRAGRAM FOR GATHERING	[0F2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D328, 0x003F };
    uint32_t const ces[9] = { 0x0F2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_386)
{
    // 1D328 0061;	
    // (𝌨) TETRAGRAM FOR GATHERING	[0F2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D328, 0x0061 };
    uint32_t const ces[9] = { 0x0F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_387)
{
    // 1D328 0041;	
    // (𝌨) TETRAGRAM FOR GATHERING	[0F2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D328, 0x0041 };
    uint32_t const ces[9] = { 0x0F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_388)
{
    // 1D328 0062;	
    // (𝌨) TETRAGRAM FOR GATHERING	[0F2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D328, 0x0062 };
    uint32_t const ces[9] = { 0x0F2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_389)
{
    // 1D329 0021;	
    // (𝌩) TETRAGRAM FOR STRENGTH	[0F2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D329, 0x0021 };
    uint32_t const ces[9] = { 0x0F2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_390)
{
    // 1D329 003F;	
    // (𝌩) TETRAGRAM FOR STRENGTH	[0F2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D329, 0x003F };
    uint32_t const ces[9] = { 0x0F2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_391)
{
    // 1D329 0061;	
    // (𝌩) TETRAGRAM FOR STRENGTH	[0F2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D329, 0x0061 };
    uint32_t const ces[9] = { 0x0F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_392)
{
    // 1D329 0041;	
    // (𝌩) TETRAGRAM FOR STRENGTH	[0F2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D329, 0x0041 };
    uint32_t const ces[9] = { 0x0F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_393)
{
    // 1D329 0062;	
    // (𝌩) TETRAGRAM FOR STRENGTH	[0F2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D329, 0x0062 };
    uint32_t const ces[9] = { 0x0F2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_394)
{
    // 1D32A 0021;	
    // (𝌪) TETRAGRAM FOR PURITY	[0F2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32A, 0x0021 };
    uint32_t const ces[9] = { 0x0F2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_395)
{
    // 1D32A 003F;	
    // (𝌪) TETRAGRAM FOR PURITY	[0F2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32A, 0x003F };
    uint32_t const ces[9] = { 0x0F2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_396)
{
    // 1D32A 0061;	
    // (𝌪) TETRAGRAM FOR PURITY	[0F2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32A, 0x0061 };
    uint32_t const ces[9] = { 0x0F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_397)
{
    // 1D32A 0041;	
    // (𝌪) TETRAGRAM FOR PURITY	[0F2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32A, 0x0041 };
    uint32_t const ces[9] = { 0x0F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_398)
{
    // 1D32A 0062;	
    // (𝌪) TETRAGRAM FOR PURITY	[0F2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32A, 0x0062 };
    uint32_t const ces[9] = { 0x0F2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_399)
{
    // 1D32B 0021;	
    // (𝌫) TETRAGRAM FOR FULLNESS	[0F2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32B, 0x0021 };
    uint32_t const ces[9] = { 0x0F2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_400)
{
    // 1D32B 003F;	
    // (𝌫) TETRAGRAM FOR FULLNESS	[0F2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32B, 0x003F };
    uint32_t const ces[9] = { 0x0F2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_401)
{
    // 1D32B 0061;	
    // (𝌫) TETRAGRAM FOR FULLNESS	[0F2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32B, 0x0061 };
    uint32_t const ces[9] = { 0x0F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_402)
{
    // 1D32B 0041;	
    // (𝌫) TETRAGRAM FOR FULLNESS	[0F2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32B, 0x0041 };
    uint32_t const ces[9] = { 0x0F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_403)
{
    // 1D32B 0062;	
    // (𝌫) TETRAGRAM FOR FULLNESS	[0F2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32B, 0x0062 };
    uint32_t const ces[9] = { 0x0F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_404)
{
    // 1D32C 0021;	
    // (𝌬) TETRAGRAM FOR RESIDENCE	[0F2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32C, 0x0021 };
    uint32_t const ces[9] = { 0x0F2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_405)
{
    // 1D32C 003F;	
    // (𝌬) TETRAGRAM FOR RESIDENCE	[0F2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32C, 0x003F };
    uint32_t const ces[9] = { 0x0F2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_406)
{
    // 1D32C 0061;	
    // (𝌬) TETRAGRAM FOR RESIDENCE	[0F2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32C, 0x0061 };
    uint32_t const ces[9] = { 0x0F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_407)
{
    // 1D32C 0041;	
    // (𝌬) TETRAGRAM FOR RESIDENCE	[0F2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32C, 0x0041 };
    uint32_t const ces[9] = { 0x0F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_408)
{
    // 1D32C 0062;	
    // (𝌬) TETRAGRAM FOR RESIDENCE	[0F2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32C, 0x0062 };
    uint32_t const ces[9] = { 0x0F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_409)
{
    // 1D32D 0021;	
    // (𝌭) TETRAGRAM FOR LAW OR MODEL	[0F2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32D, 0x0021 };
    uint32_t const ces[9] = { 0x0F2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_410)
{
    // 1D32D 003F;	
    // (𝌭) TETRAGRAM FOR LAW OR MODEL	[0F2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32D, 0x003F };
    uint32_t const ces[9] = { 0x0F2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_411)
{
    // 1D32D 0061;	
    // (𝌭) TETRAGRAM FOR LAW OR MODEL	[0F2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32D, 0x0061 };
    uint32_t const ces[9] = { 0x0F2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_412)
{
    // 1D32D 0041;	
    // (𝌭) TETRAGRAM FOR LAW OR MODEL	[0F2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32D, 0x0041 };
    uint32_t const ces[9] = { 0x0F2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_413)
{
    // 1D32D 0062;	
    // (𝌭) TETRAGRAM FOR LAW OR MODEL	[0F2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32D, 0x0062 };
    uint32_t const ces[9] = { 0x0F2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_414)
{
    // 1D32E 0021;	
    // (𝌮) TETRAGRAM FOR RESPONSE	[0F30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32E, 0x0021 };
    uint32_t const ces[9] = { 0x0F30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_415)
{
    // 1D32E 003F;	
    // (𝌮) TETRAGRAM FOR RESPONSE	[0F30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32E, 0x003F };
    uint32_t const ces[9] = { 0x0F30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_416)
{
    // 1D32E 0061;	
    // (𝌮) TETRAGRAM FOR RESPONSE	[0F30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32E, 0x0061 };
    uint32_t const ces[9] = { 0x0F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_417)
{
    // 1D32E 0041;	
    // (𝌮) TETRAGRAM FOR RESPONSE	[0F30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32E, 0x0041 };
    uint32_t const ces[9] = { 0x0F30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_418)
{
    // 1D32E 0062;	
    // (𝌮) TETRAGRAM FOR RESPONSE	[0F30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32E, 0x0062 };
    uint32_t const ces[9] = { 0x0F30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_419)
{
    // 1D32F 0021;	
    // (𝌯) TETRAGRAM FOR GOING TO MEET	[0F31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32F, 0x0021 };
    uint32_t const ces[9] = { 0x0F31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_420)
{
    // 1D32F 003F;	
    // (𝌯) TETRAGRAM FOR GOING TO MEET	[0F31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32F, 0x003F };
    uint32_t const ces[9] = { 0x0F31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_421)
{
    // 1D32F 0061;	
    // (𝌯) TETRAGRAM FOR GOING TO MEET	[0F31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32F, 0x0061 };
    uint32_t const ces[9] = { 0x0F31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_422)
{
    // 1D32F 0041;	
    // (𝌯) TETRAGRAM FOR GOING TO MEET	[0F31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D32F, 0x0041 };
    uint32_t const ces[9] = { 0x0F31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_423)
{
    // 1D32F 0062;	
    // (𝌯) TETRAGRAM FOR GOING TO MEET	[0F31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D32F, 0x0062 };
    uint32_t const ces[9] = { 0x0F31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_424)
{
    // 1D330 0021;	
    // (𝌰) TETRAGRAM FOR ENCOUNTERS	[0F32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D330, 0x0021 };
    uint32_t const ces[9] = { 0x0F32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_425)
{
    // 1D330 003F;	
    // (𝌰) TETRAGRAM FOR ENCOUNTERS	[0F32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D330, 0x003F };
    uint32_t const ces[9] = { 0x0F32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_426)
{
    // 1D330 0061;	
    // (𝌰) TETRAGRAM FOR ENCOUNTERS	[0F32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D330, 0x0061 };
    uint32_t const ces[9] = { 0x0F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_427)
{
    // 1D330 0041;	
    // (𝌰) TETRAGRAM FOR ENCOUNTERS	[0F32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D330, 0x0041 };
    uint32_t const ces[9] = { 0x0F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_428)
{
    // 1D330 0062;	
    // (𝌰) TETRAGRAM FOR ENCOUNTERS	[0F32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D330, 0x0062 };
    uint32_t const ces[9] = { 0x0F32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_429)
{
    // 1D331 0021;	
    // (𝌱) TETRAGRAM FOR STOVE	[0F33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D331, 0x0021 };
    uint32_t const ces[9] = { 0x0F33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_430)
{
    // 1D331 003F;	
    // (𝌱) TETRAGRAM FOR STOVE	[0F33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D331, 0x003F };
    uint32_t const ces[9] = { 0x0F33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_431)
{
    // 1D331 0061;	
    // (𝌱) TETRAGRAM FOR STOVE	[0F33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D331, 0x0061 };
    uint32_t const ces[9] = { 0x0F33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_432)
{
    // 1D331 0041;	
    // (𝌱) TETRAGRAM FOR STOVE	[0F33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D331, 0x0041 };
    uint32_t const ces[9] = { 0x0F33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_433)
{
    // 1D331 0062;	
    // (𝌱) TETRAGRAM FOR STOVE	[0F33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D331, 0x0062 };
    uint32_t const ces[9] = { 0x0F33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_434)
{
    // 1D332 0021;	
    // (𝌲) TETRAGRAM FOR GREATNESS	[0F34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D332, 0x0021 };
    uint32_t const ces[9] = { 0x0F34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_435)
{
    // 1D332 003F;	
    // (𝌲) TETRAGRAM FOR GREATNESS	[0F34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D332, 0x003F };
    uint32_t const ces[9] = { 0x0F34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_436)
{
    // 1D332 0061;	
    // (𝌲) TETRAGRAM FOR GREATNESS	[0F34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D332, 0x0061 };
    uint32_t const ces[9] = { 0x0F34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_437)
{
    // 1D332 0041;	
    // (𝌲) TETRAGRAM FOR GREATNESS	[0F34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D332, 0x0041 };
    uint32_t const ces[9] = { 0x0F34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_438)
{
    // 1D332 0062;	
    // (𝌲) TETRAGRAM FOR GREATNESS	[0F34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D332, 0x0062 };
    uint32_t const ces[9] = { 0x0F34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_439)
{
    // 1D333 0021;	
    // (𝌳) TETRAGRAM FOR ENLARGEMENT	[0F35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D333, 0x0021 };
    uint32_t const ces[9] = { 0x0F35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_440)
{
    // 1D333 003F;	
    // (𝌳) TETRAGRAM FOR ENLARGEMENT	[0F35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D333, 0x003F };
    uint32_t const ces[9] = { 0x0F35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_441)
{
    // 1D333 0061;	
    // (𝌳) TETRAGRAM FOR ENLARGEMENT	[0F35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D333, 0x0061 };
    uint32_t const ces[9] = { 0x0F35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_442)
{
    // 1D333 0041;	
    // (𝌳) TETRAGRAM FOR ENLARGEMENT	[0F35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D333, 0x0041 };
    uint32_t const ces[9] = { 0x0F35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_443)
{
    // 1D333 0062;	
    // (𝌳) TETRAGRAM FOR ENLARGEMENT	[0F35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D333, 0x0062 };
    uint32_t const ces[9] = { 0x0F35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_444)
{
    // 1D334 0021;	
    // (𝌴) TETRAGRAM FOR PATTERN	[0F36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D334, 0x0021 };
    uint32_t const ces[9] = { 0x0F36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_445)
{
    // 1D334 003F;	
    // (𝌴) TETRAGRAM FOR PATTERN	[0F36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D334, 0x003F };
    uint32_t const ces[9] = { 0x0F36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_446)
{
    // 1D334 0061;	
    // (𝌴) TETRAGRAM FOR PATTERN	[0F36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D334, 0x0061 };
    uint32_t const ces[9] = { 0x0F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_447)
{
    // 1D334 0041;	
    // (𝌴) TETRAGRAM FOR PATTERN	[0F36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D334, 0x0041 };
    uint32_t const ces[9] = { 0x0F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_448)
{
    // 1D334 0062;	
    // (𝌴) TETRAGRAM FOR PATTERN	[0F36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D334, 0x0062 };
    uint32_t const ces[9] = { 0x0F36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_449)
{
    // 1D335 0021;	
    // (𝌵) TETRAGRAM FOR RITUAL	[0F37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D335, 0x0021 };
    uint32_t const ces[9] = { 0x0F37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_450)
{
    // 1D335 003F;	
    // (𝌵) TETRAGRAM FOR RITUAL	[0F37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D335, 0x003F };
    uint32_t const ces[9] = { 0x0F37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_451)
{
    // 1D335 0061;	
    // (𝌵) TETRAGRAM FOR RITUAL	[0F37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D335, 0x0061 };
    uint32_t const ces[9] = { 0x0F37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_452)
{
    // 1D335 0041;	
    // (𝌵) TETRAGRAM FOR RITUAL	[0F37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D335, 0x0041 };
    uint32_t const ces[9] = { 0x0F37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_453)
{
    // 1D335 0062;	
    // (𝌵) TETRAGRAM FOR RITUAL	[0F37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D335, 0x0062 };
    uint32_t const ces[9] = { 0x0F37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_454)
{
    // 1D336 0021;	
    // (𝌶) TETRAGRAM FOR FLIGHT	[0F38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D336, 0x0021 };
    uint32_t const ces[9] = { 0x0F38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_455)
{
    // 1D336 003F;	
    // (𝌶) TETRAGRAM FOR FLIGHT	[0F38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D336, 0x003F };
    uint32_t const ces[9] = { 0x0F38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_456)
{
    // 1D336 0061;	
    // (𝌶) TETRAGRAM FOR FLIGHT	[0F38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D336, 0x0061 };
    uint32_t const ces[9] = { 0x0F38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_457)
{
    // 1D336 0041;	
    // (𝌶) TETRAGRAM FOR FLIGHT	[0F38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D336, 0x0041 };
    uint32_t const ces[9] = { 0x0F38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_458)
{
    // 1D336 0062;	
    // (𝌶) TETRAGRAM FOR FLIGHT	[0F38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D336, 0x0062 };
    uint32_t const ces[9] = { 0x0F38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_459)
{
    // 1D337 0021;	
    // (𝌷) TETRAGRAM FOR VASTNESS OR WASTING	[0F39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D337, 0x0021 };
    uint32_t const ces[9] = { 0x0F39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_460)
{
    // 1D337 003F;	
    // (𝌷) TETRAGRAM FOR VASTNESS OR WASTING	[0F39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D337, 0x003F };
    uint32_t const ces[9] = { 0x0F39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_461)
{
    // 1D337 0061;	
    // (𝌷) TETRAGRAM FOR VASTNESS OR WASTING	[0F39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D337, 0x0061 };
    uint32_t const ces[9] = { 0x0F39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_462)
{
    // 1D337 0041;	
    // (𝌷) TETRAGRAM FOR VASTNESS OR WASTING	[0F39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D337, 0x0041 };
    uint32_t const ces[9] = { 0x0F39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_463)
{
    // 1D337 0062;	
    // (𝌷) TETRAGRAM FOR VASTNESS OR WASTING	[0F39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D337, 0x0062 };
    uint32_t const ces[9] = { 0x0F39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_464)
{
    // 1D338 0021;	
    // (𝌸) TETRAGRAM FOR CONSTANCY	[0F3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D338, 0x0021 };
    uint32_t const ces[9] = { 0x0F3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_465)
{
    // 1D338 003F;	
    // (𝌸) TETRAGRAM FOR CONSTANCY	[0F3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D338, 0x003F };
    uint32_t const ces[9] = { 0x0F3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_466)
{
    // 1D338 0061;	
    // (𝌸) TETRAGRAM FOR CONSTANCY	[0F3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D338, 0x0061 };
    uint32_t const ces[9] = { 0x0F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_467)
{
    // 1D338 0041;	
    // (𝌸) TETRAGRAM FOR CONSTANCY	[0F3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D338, 0x0041 };
    uint32_t const ces[9] = { 0x0F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_468)
{
    // 1D338 0062;	
    // (𝌸) TETRAGRAM FOR CONSTANCY	[0F3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D338, 0x0062 };
    uint32_t const ces[9] = { 0x0F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_469)
{
    // 1D339 0021;	
    // (𝌹) TETRAGRAM FOR MEASURE	[0F3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D339, 0x0021 };
    uint32_t const ces[9] = { 0x0F3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_470)
{
    // 1D339 003F;	
    // (𝌹) TETRAGRAM FOR MEASURE	[0F3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D339, 0x003F };
    uint32_t const ces[9] = { 0x0F3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_471)
{
    // 1D339 0061;	
    // (𝌹) TETRAGRAM FOR MEASURE	[0F3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D339, 0x0061 };
    uint32_t const ces[9] = { 0x0F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_472)
{
    // 1D339 0041;	
    // (𝌹) TETRAGRAM FOR MEASURE	[0F3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D339, 0x0041 };
    uint32_t const ces[9] = { 0x0F3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_473)
{
    // 1D339 0062;	
    // (𝌹) TETRAGRAM FOR MEASURE	[0F3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D339, 0x0062 };
    uint32_t const ces[9] = { 0x0F3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_474)
{
    // 1D33A 0021;	
    // (𝌺) TETRAGRAM FOR ETERNITY	[0F3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33A, 0x0021 };
    uint32_t const ces[9] = { 0x0F3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_475)
{
    // 1D33A 003F;	
    // (𝌺) TETRAGRAM FOR ETERNITY	[0F3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33A, 0x003F };
    uint32_t const ces[9] = { 0x0F3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_476)
{
    // 1D33A 0061;	
    // (𝌺) TETRAGRAM FOR ETERNITY	[0F3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33A, 0x0061 };
    uint32_t const ces[9] = { 0x0F3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_477)
{
    // 1D33A 0041;	
    // (𝌺) TETRAGRAM FOR ETERNITY	[0F3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33A, 0x0041 };
    uint32_t const ces[9] = { 0x0F3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_478)
{
    // 1D33A 0062;	
    // (𝌺) TETRAGRAM FOR ETERNITY	[0F3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33A, 0x0062 };
    uint32_t const ces[9] = { 0x0F3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_479)
{
    // 1D33B 0021;	
    // (𝌻) TETRAGRAM FOR UNITY	[0F3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33B, 0x0021 };
    uint32_t const ces[9] = { 0x0F3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_480)
{
    // 1D33B 003F;	
    // (𝌻) TETRAGRAM FOR UNITY	[0F3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33B, 0x003F };
    uint32_t const ces[9] = { 0x0F3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_481)
{
    // 1D33B 0061;	
    // (𝌻) TETRAGRAM FOR UNITY	[0F3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33B, 0x0061 };
    uint32_t const ces[9] = { 0x0F3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_482)
{
    // 1D33B 0041;	
    // (𝌻) TETRAGRAM FOR UNITY	[0F3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33B, 0x0041 };
    uint32_t const ces[9] = { 0x0F3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_483)
{
    // 1D33B 0062;	
    // (𝌻) TETRAGRAM FOR UNITY	[0F3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33B, 0x0062 };
    uint32_t const ces[9] = { 0x0F3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_484)
{
    // 1D33C 0021;	
    // (𝌼) TETRAGRAM FOR DIMINISHMENT	[0F3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33C, 0x0021 };
    uint32_t const ces[9] = { 0x0F3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_485)
{
    // 1D33C 003F;	
    // (𝌼) TETRAGRAM FOR DIMINISHMENT	[0F3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33C, 0x003F };
    uint32_t const ces[9] = { 0x0F3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_486)
{
    // 1D33C 0061;	
    // (𝌼) TETRAGRAM FOR DIMINISHMENT	[0F3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33C, 0x0061 };
    uint32_t const ces[9] = { 0x0F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_487)
{
    // 1D33C 0041;	
    // (𝌼) TETRAGRAM FOR DIMINISHMENT	[0F3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33C, 0x0041 };
    uint32_t const ces[9] = { 0x0F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_488)
{
    // 1D33C 0062;	
    // (𝌼) TETRAGRAM FOR DIMINISHMENT	[0F3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33C, 0x0062 };
    uint32_t const ces[9] = { 0x0F3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_489)
{
    // 1D33D 0021;	
    // (𝌽) TETRAGRAM FOR CLOSED MOUTH	[0F3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33D, 0x0021 };
    uint32_t const ces[9] = { 0x0F3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_490)
{
    // 1D33D 003F;	
    // (𝌽) TETRAGRAM FOR CLOSED MOUTH	[0F3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33D, 0x003F };
    uint32_t const ces[9] = { 0x0F3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_491)
{
    // 1D33D 0061;	
    // (𝌽) TETRAGRAM FOR CLOSED MOUTH	[0F3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33D, 0x0061 };
    uint32_t const ces[9] = { 0x0F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_492)
{
    // 1D33D 0041;	
    // (𝌽) TETRAGRAM FOR CLOSED MOUTH	[0F3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33D, 0x0041 };
    uint32_t const ces[9] = { 0x0F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_493)
{
    // 1D33D 0062;	
    // (𝌽) TETRAGRAM FOR CLOSED MOUTH	[0F3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33D, 0x0062 };
    uint32_t const ces[9] = { 0x0F3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_494)
{
    // 1D33E 0021;	
    // (𝌾) TETRAGRAM FOR GUARDEDNESS	[0F40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33E, 0x0021 };
    uint32_t const ces[9] = { 0x0F40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_495)
{
    // 1D33E 003F;	
    // (𝌾) TETRAGRAM FOR GUARDEDNESS	[0F40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33E, 0x003F };
    uint32_t const ces[9] = { 0x0F40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_496)
{
    // 1D33E 0061;	
    // (𝌾) TETRAGRAM FOR GUARDEDNESS	[0F40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33E, 0x0061 };
    uint32_t const ces[9] = { 0x0F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_497)
{
    // 1D33E 0041;	
    // (𝌾) TETRAGRAM FOR GUARDEDNESS	[0F40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33E, 0x0041 };
    uint32_t const ces[9] = { 0x0F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_498)
{
    // 1D33E 0062;	
    // (𝌾) TETRAGRAM FOR GUARDEDNESS	[0F40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33E, 0x0062 };
    uint32_t const ces[9] = { 0x0F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_045_499)
{
    // 1D33F 0021;	
    // (𝌿) TETRAGRAM FOR GATHERING IN	[0F41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33F, 0x0021 };
    uint32_t const ces[9] = { 0x0F41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

