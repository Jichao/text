// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_146_000)
{
    // 05D4 05BC 0334;	
    // (‎‎הּ‎‎) HEBREW LETTER HE, HEBREW POINT DAGESH OR MAPIQ	[2321 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D4, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2321, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_001)
{
    // FB34 0334;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB34, 0x0334 };
    uint32_t const ces[10] = { 0x2321, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_002)
{
    // 05D4 0021;	
    // (‎‎ה‎‎) HEBREW LETTER HE	[2321 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D4, 0x0021 };
    uint32_t const ces[9] = { 0x2321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_003)
{
    // FB23 0021;	
    // (‎‎ﬣ‎‎) HEBREW LETTER WIDE HE	[2321 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB23, 0x0021 };
    uint32_t const ces[9] = { 0x2321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_004)
{
    // FB34 0021;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB34, 0x0021 };
    uint32_t const ces[11] = { 0x2321, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_005)
{
    // 05D4 003F;	
    // (‎‎ה‎‎) HEBREW LETTER HE	[2321 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D4, 0x003F };
    uint32_t const ces[9] = { 0x2321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_006)
{
    // FB23 003F;	
    // (‎‎ﬣ‎‎) HEBREW LETTER WIDE HE	[2321 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB23, 0x003F };
    uint32_t const ces[9] = { 0x2321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_007)
{
    // FB34 003F;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB34, 0x003F };
    uint32_t const ces[11] = { 0x2321, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_008)
{
    // 05D4 0061;	
    // (‎‎ה‎‎) HEBREW LETTER HE	[2321 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D4, 0x0061 };
    uint32_t const ces[9] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_009)
{
    // 05D4 0041;	
    // (‎‎ה‎‎) HEBREW LETTER HE	[2321 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D4, 0x0041 };
    uint32_t const ces[9] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_010)
{
    // FB23 0061;	
    // (‎‎ﬣ‎‎) HEBREW LETTER WIDE HE	[2321 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB23, 0x0061 };
    uint32_t const ces[9] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_011)
{
    // FB23 0041;	
    // (‎‎ﬣ‎‎) HEBREW LETTER WIDE HE	[2321 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB23, 0x0041 };
    uint32_t const ces[9] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_012)
{
    // FB34 0061;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB34, 0x0061 };
    uint32_t const ces[11] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_013)
{
    // FB34 0041;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB34, 0x0041 };
    uint32_t const ces[11] = { 0x2321, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_014)
{
    // 05D4 0062;	
    // (‎‎ה‎‎) HEBREW LETTER HE	[2321 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D4, 0x0062 };
    uint32_t const ces[9] = { 0x2321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_015)
{
    // FB23 0062;	
    // (‎‎ﬣ‎‎) HEBREW LETTER WIDE HE	[2321 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB23, 0x0062 };
    uint32_t const ces[9] = { 0x2321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_016)
{
    // FB34 0062;	
    // (‎‎הּ‎‎) HEBREW LETTER HE WITH MAPIQ	[2321 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB34, 0x0062 };
    uint32_t const ces[11] = { 0x2321, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_017)
{
    // 05D5 0334 05B9;	
    // (‎‎ו̴‎‎) HEBREW LETTER VAV, COMBINING TILDE OVERLAY	[2322 | 0020 004A 005B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D5, 0x0334, 0x05B9 };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_018)
{
    // 05D5 05B9 0334;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV, HEBREW POINT HOLAM	[2322 | 0020 004A 005B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D5, 0x05B9, 0x0334 };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_019)
{
    // FB4B 0334;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 | 0020 004A 005B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4B, 0x0334 };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_020)
{
    // 05D5 0334 05BC;	
    // (‎‎ו̴‎‎) HEBREW LETTER VAV, COMBINING TILDE OVERLAY	[2322 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D5, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_021)
{
    // 05D5 05BC 0334;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV, HEBREW POINT DAGESH OR MAPIQ	[2322 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D5, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_022)
{
    // FB35 0334;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB35, 0x0334 };
    uint32_t const ces[10] = { 0x2322, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_023)
{
    // 05D5 0021;	
    // (‎‎ו‎‎) HEBREW LETTER VAV	[2322 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D5, 0x0021 };
    uint32_t const ces[9] = { 0x2322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_024)
{
    // FB4B 0021;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 0261 | 0020 005B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4B, 0x0021 };
    uint32_t const ces[11] = { 0x2322, 0x0261, 0x0000, 0x0020, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_025)
{
    // FB35 0021;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB35, 0x0021 };
    uint32_t const ces[11] = { 0x2322, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_026)
{
    // 05D5 003F;	
    // (‎‎ו‎‎) HEBREW LETTER VAV	[2322 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D5, 0x003F };
    uint32_t const ces[9] = { 0x2322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_027)
{
    // FB4B 003F;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 0267 | 0020 005B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4B, 0x003F };
    uint32_t const ces[11] = { 0x2322, 0x0267, 0x0000, 0x0020, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_028)
{
    // FB35 003F;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB35, 0x003F };
    uint32_t const ces[11] = { 0x2322, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_029)
{
    // 05D5 0061;	
    // (‎‎ו‎‎) HEBREW LETTER VAV	[2322 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D5, 0x0061 };
    uint32_t const ces[9] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_030)
{
    // 05D5 0041;	
    // (‎‎ו‎‎) HEBREW LETTER VAV	[2322 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D5, 0x0041 };
    uint32_t const ces[9] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_031)
{
    // FB4B 0061;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 1CAD | 0020 005B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4B, 0x0061 };
    uint32_t const ces[11] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_032)
{
    // FB4B 0041;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 1CAD | 0020 005B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB4B, 0x0041 };
    uint32_t const ces[11] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_033)
{
    // FB35 0061;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB35, 0x0061 };
    uint32_t const ces[11] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_034)
{
    // FB35 0041;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB35, 0x0041 };
    uint32_t const ces[11] = { 0x2322, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_035)
{
    // 05D5 0062;	
    // (‎‎ו‎‎) HEBREW LETTER VAV	[2322 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D5, 0x0062 };
    uint32_t const ces[9] = { 0x2322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_036)
{
    // FB4B 0062;	
    // (‎‎וֹ‎‎) HEBREW LETTER VAV WITH HOLAM	[2322 1CC6 | 0020 005B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4B, 0x0062 };
    uint32_t const ces[11] = { 0x2322, 0x1CC6, 0x0000, 0x0020, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_037)
{
    // FB35 0062;	
    // (‎‎וּ‎‎) HEBREW LETTER VAV WITH DAGESH	[2322 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB35, 0x0062 };
    uint32_t const ces[11] = { 0x2322, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_038)
{
    // 05F0 0021;	
    // (‎‎װ‎‎) HEBREW LIGATURE YIDDISH DOUBLE VAV	[2322 2322 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F0, 0x0021 };
    uint32_t const ces[12] = { 0x2322, 0x2322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_039)
{
    // 05F0 003F;	
    // (‎‎װ‎‎) HEBREW LIGATURE YIDDISH DOUBLE VAV	[2322 2322 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F0, 0x003F };
    uint32_t const ces[12] = { 0x2322, 0x2322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_040)
{
    // 05F0 0061;	
    // (‎‎װ‎‎) HEBREW LIGATURE YIDDISH DOUBLE VAV	[2322 2322 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F0, 0x0061 };
    uint32_t const ces[12] = { 0x2322, 0x2322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_041)
{
    // 05F0 0041;	
    // (‎‎װ‎‎) HEBREW LIGATURE YIDDISH DOUBLE VAV	[2322 2322 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x05F0, 0x0041 };
    uint32_t const ces[12] = { 0x2322, 0x2322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_042)
{
    // 05F0 0062;	
    // (‎‎װ‎‎) HEBREW LIGATURE YIDDISH DOUBLE VAV	[2322 2322 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F0, 0x0062 };
    uint32_t const ces[12] = { 0x2322, 0x2322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_043)
{
    // 05F1 0021;	
    // (‎‎ױ‎‎) HEBREW LIGATURE YIDDISH VAV YOD	[2322 2326 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F1, 0x0021 };
    uint32_t const ces[12] = { 0x2322, 0x2326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_044)
{
    // 05F1 003F;	
    // (‎‎ױ‎‎) HEBREW LIGATURE YIDDISH VAV YOD	[2322 2326 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F1, 0x003F };
    uint32_t const ces[12] = { 0x2322, 0x2326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_045)
{
    // 05F1 0061;	
    // (‎‎ױ‎‎) HEBREW LIGATURE YIDDISH VAV YOD	[2322 2326 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F1, 0x0061 };
    uint32_t const ces[12] = { 0x2322, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_046)
{
    // 05F1 0041;	
    // (‎‎ױ‎‎) HEBREW LIGATURE YIDDISH VAV YOD	[2322 2326 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x05F1, 0x0041 };
    uint32_t const ces[12] = { 0x2322, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_047)
{
    // 05F1 0062;	
    // (‎‎ױ‎‎) HEBREW LIGATURE YIDDISH VAV YOD	[2322 2326 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F1, 0x0062 };
    uint32_t const ces[12] = { 0x2322, 0x2326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_048)
{
    // 05D6 0334 05BC;	
    // (‎‎ז̴‎‎) HEBREW LETTER ZAYIN, COMBINING TILDE OVERLAY	[2323 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D6, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2323, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_049)
{
    // 05D6 05BC 0334;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN, HEBREW POINT DAGESH OR MAPIQ	[2323 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D6, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2323, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_050)
{
    // FB36 0334;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB36, 0x0334 };
    uint32_t const ces[10] = { 0x2323, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_051)
{
    // 05D6 0021;	
    // (‎‎ז‎‎) HEBREW LETTER ZAYIN	[2323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D6, 0x0021 };
    uint32_t const ces[9] = { 0x2323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_052)
{
    // FB36 0021;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB36, 0x0021 };
    uint32_t const ces[11] = { 0x2323, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_053)
{
    // 05D6 003F;	
    // (‎‎ז‎‎) HEBREW LETTER ZAYIN	[2323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D6, 0x003F };
    uint32_t const ces[9] = { 0x2323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_054)
{
    // FB36 003F;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB36, 0x003F };
    uint32_t const ces[11] = { 0x2323, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_055)
{
    // 05D6 0061;	
    // (‎‎ז‎‎) HEBREW LETTER ZAYIN	[2323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D6, 0x0061 };
    uint32_t const ces[9] = { 0x2323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_056)
{
    // 05D6 0041;	
    // (‎‎ז‎‎) HEBREW LETTER ZAYIN	[2323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D6, 0x0041 };
    uint32_t const ces[9] = { 0x2323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_057)
{
    // FB36 0061;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB36, 0x0061 };
    uint32_t const ces[11] = { 0x2323, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_058)
{
    // FB36 0041;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB36, 0x0041 };
    uint32_t const ces[11] = { 0x2323, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_059)
{
    // 05D6 0062;	
    // (‎‎ז‎‎) HEBREW LETTER ZAYIN	[2323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D6, 0x0062 };
    uint32_t const ces[9] = { 0x2323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_060)
{
    // FB36 0062;	
    // (‎‎זּ‎‎) HEBREW LETTER ZAYIN WITH DAGESH	[2323 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB36, 0x0062 };
    uint32_t const ces[11] = { 0x2323, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_061)
{
    // 05D7 0021;	
    // (‎‎ח‎‎) HEBREW LETTER HET	[2324 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D7, 0x0021 };
    uint32_t const ces[9] = { 0x2324, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_062)
{
    // 05D7 003F;	
    // (‎‎ח‎‎) HEBREW LETTER HET	[2324 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D7, 0x003F };
    uint32_t const ces[9] = { 0x2324, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_063)
{
    // 05D7 0061;	
    // (‎‎ח‎‎) HEBREW LETTER HET	[2324 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D7, 0x0061 };
    uint32_t const ces[9] = { 0x2324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_064)
{
    // 05D7 0041;	
    // (‎‎ח‎‎) HEBREW LETTER HET	[2324 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D7, 0x0041 };
    uint32_t const ces[9] = { 0x2324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_065)
{
    // 05D7 0062;	
    // (‎‎ח‎‎) HEBREW LETTER HET	[2324 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D7, 0x0062 };
    uint32_t const ces[9] = { 0x2324, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_066)
{
    // 05D8 0334 05BC;	
    // (‎‎ט̴‎‎) HEBREW LETTER TET, COMBINING TILDE OVERLAY	[2325 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D8, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2325, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_067)
{
    // 05D8 05BC 0334;	
    // (‎‎טּ‎‎) HEBREW LETTER TET, HEBREW POINT DAGESH OR MAPIQ	[2325 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D8, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2325, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_068)
{
    // FB38 0334;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB38, 0x0334 };
    uint32_t const ces[10] = { 0x2325, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_069)
{
    // 05D8 0021;	
    // (‎‎ט‎‎) HEBREW LETTER TET	[2325 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D8, 0x0021 };
    uint32_t const ces[9] = { 0x2325, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_070)
{
    // FB38 0021;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB38, 0x0021 };
    uint32_t const ces[11] = { 0x2325, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_071)
{
    // 05D8 003F;	
    // (‎‎ט‎‎) HEBREW LETTER TET	[2325 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D8, 0x003F };
    uint32_t const ces[9] = { 0x2325, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_072)
{
    // FB38 003F;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB38, 0x003F };
    uint32_t const ces[11] = { 0x2325, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_073)
{
    // 05D8 0061;	
    // (‎‎ט‎‎) HEBREW LETTER TET	[2325 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D8, 0x0061 };
    uint32_t const ces[9] = { 0x2325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_074)
{
    // 05D8 0041;	
    // (‎‎ט‎‎) HEBREW LETTER TET	[2325 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D8, 0x0041 };
    uint32_t const ces[9] = { 0x2325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_075)
{
    // FB38 0061;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB38, 0x0061 };
    uint32_t const ces[11] = { 0x2325, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_076)
{
    // FB38 0041;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB38, 0x0041 };
    uint32_t const ces[11] = { 0x2325, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_077)
{
    // 05D8 0062;	
    // (‎‎ט‎‎) HEBREW LETTER TET	[2325 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D8, 0x0062 };
    uint32_t const ces[9] = { 0x2325, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_078)
{
    // FB38 0062;	
    // (‎‎טּ‎‎) HEBREW LETTER TET WITH DAGESH	[2325 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB38, 0x0062 };
    uint32_t const ces[11] = { 0x2325, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_079)
{
    // 05D9 0334 05B4;	
    // (‎‎י̴‎‎) HEBREW LETTER YOD, COMBINING TILDE OVERLAY	[2326 | 0020 004A 0056 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D9, 0x0334, 0x05B4 };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x0056, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_080)
{
    // 05D9 05B4 0334;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD, HEBREW POINT HIRIQ	[2326 | 0020 004A 0056 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D9, 0x05B4, 0x0334 };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x0056, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_081)
{
    // FB1D 0334;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 | 0020 004A 0056 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB1D, 0x0334 };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x0056, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_082)
{
    // 05D9 0334 05BC;	
    // (‎‎י̴‎‎) HEBREW LETTER YOD, COMBINING TILDE OVERLAY	[2326 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D9, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_083)
{
    // 05D9 05BC 0334;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD, HEBREW POINT DAGESH OR MAPIQ	[2326 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05D9, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_084)
{
    // FB39 0334;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB39, 0x0334 };
    uint32_t const ces[10] = { 0x2326, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_085)
{
    // 05D9 0021;	
    // (‎‎י‎‎) HEBREW LETTER YOD	[2326 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D9, 0x0021 };
    uint32_t const ces[9] = { 0x2326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_086)
{
    // FB1D 0021;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 0261 | 0020 0056 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB1D, 0x0021 };
    uint32_t const ces[11] = { 0x2326, 0x0261, 0x0000, 0x0020, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_087)
{
    // FB39 0021;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB39, 0x0021 };
    uint32_t const ces[11] = { 0x2326, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_088)
{
    // 05D9 003F;	
    // (‎‎י‎‎) HEBREW LETTER YOD	[2326 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D9, 0x003F };
    uint32_t const ces[9] = { 0x2326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_089)
{
    // FB1D 003F;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 0267 | 0020 0056 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB1D, 0x003F };
    uint32_t const ces[11] = { 0x2326, 0x0267, 0x0000, 0x0020, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_090)
{
    // FB39 003F;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB39, 0x003F };
    uint32_t const ces[11] = { 0x2326, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_091)
{
    // 05D9 0061;	
    // (‎‎י‎‎) HEBREW LETTER YOD	[2326 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D9, 0x0061 };
    uint32_t const ces[9] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_092)
{
    // 05D9 0041;	
    // (‎‎י‎‎) HEBREW LETTER YOD	[2326 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05D9, 0x0041 };
    uint32_t const ces[9] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_093)
{
    // FB1D 0061;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 1CAD | 0020 0056 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB1D, 0x0061 };
    uint32_t const ces[11] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_094)
{
    // FB1D 0041;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 1CAD | 0020 0056 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB1D, 0x0041 };
    uint32_t const ces[11] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_095)
{
    // FB39 0061;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB39, 0x0061 };
    uint32_t const ces[11] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_096)
{
    // FB39 0041;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB39, 0x0041 };
    uint32_t const ces[11] = { 0x2326, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_097)
{
    // 05D9 0062;	
    // (‎‎י‎‎) HEBREW LETTER YOD	[2326 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05D9, 0x0062 };
    uint32_t const ces[9] = { 0x2326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_098)
{
    // FB1D 0062;	
    // (‎‎יִ‎‎) HEBREW LETTER YOD WITH HIRIQ	[2326 1CC6 | 0020 0056 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB1D, 0x0062 };
    uint32_t const ces[11] = { 0x2326, 0x1CC6, 0x0000, 0x0020, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_099)
{
    // FB39 0062;	
    // (‎‎יּ‎‎) HEBREW LETTER YOD WITH DAGESH	[2326 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB39, 0x0062 };
    uint32_t const ces[11] = { 0x2326, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_100)
{
    // 05F2 0334 05B7;	
    // (‎‎ײ̴‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD, COMBINING TILDE OVERLAY	[2326 2326 | 0020 0020 004A 0059 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x05F2, 0x0334, 0x05B7 };
    uint32_t const ces[13] = { 0x2326, 0x2326, 0x0000, 0x0020, 0x0020, 0x004A, 0x0059, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_101)
{
    // 05F2 05B7 0334;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD, HEBREW POINT PATAH	[2326 2326 | 0020 0020 004A 0059 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x05F2, 0x05B7, 0x0334 };
    uint32_t const ces[13] = { 0x2326, 0x2326, 0x0000, 0x0020, 0x0020, 0x004A, 0x0059, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_102)
{
    // FB1F 0334;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 | 0020 0020 004A 0059 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0xFB1F, 0x0334 };
    uint32_t const ces[13] = { 0x2326, 0x2326, 0x0000, 0x0020, 0x0020, 0x004A, 0x0059, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_103)
{
    // 05F2 0021;	
    // (‎‎ײ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD	[2326 2326 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F2, 0x0021 };
    uint32_t const ces[12] = { 0x2326, 0x2326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_104)
{
    // FB1F 0021;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 0261 | 0020 0020 0059 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0xFB1F, 0x0021 };
    uint32_t const ces[14] = { 0x2326, 0x2326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0059, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_105)
{
    // 05F2 003F;	
    // (‎‎ײ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD	[2326 2326 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F2, 0x003F };
    uint32_t const ces[12] = { 0x2326, 0x2326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_106)
{
    // FB1F 003F;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 0267 | 0020 0020 0059 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0xFB1F, 0x003F };
    uint32_t const ces[14] = { 0x2326, 0x2326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0059, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_107)
{
    // 05F2 0061;	
    // (‎‎ײ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD	[2326 2326 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F2, 0x0061 };
    uint32_t const ces[12] = { 0x2326, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_108)
{
    // 05F2 0041;	
    // (‎‎ײ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD	[2326 2326 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x05F2, 0x0041 };
    uint32_t const ces[12] = { 0x2326, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_109)
{
    // FB1F 0061;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 1CAD | 0020 0020 0059 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0xFB1F, 0x0061 };
    uint32_t const ces[14] = { 0x2326, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0059, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_110)
{
    // FB1F 0041;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 1CAD | 0020 0020 0059 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[2] = { 0xFB1F, 0x0041 };
    uint32_t const ces[14] = { 0x2326, 0x2326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0059, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_111)
{
    // 05F2 0062;	
    // (‎‎ײ‎‎) HEBREW LIGATURE YIDDISH DOUBLE YOD	[2326 2326 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x05F2, 0x0062 };
    uint32_t const ces[12] = { 0x2326, 0x2326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_112)
{
    // FB1F 0062;	
    // (‎‎ײַ‎‎) HEBREW LIGATURE YIDDISH YOD YOD PATAH	[2326 2326 1CC6 | 0020 0020 0059 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[2] = { 0xFB1F, 0x0062 };
    uint32_t const ces[14] = { 0x2326, 0x2326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0059, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_113)
{
    // 05DB 0334 05BC;	
    // (‎‎כ̴‎‎) HEBREW LETTER KAF, COMBINING TILDE OVERLAY	[2327 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DB, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_114)
{
    // 05DB 05BC 0334;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF, HEBREW POINT DAGESH OR MAPIQ	[2327 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DB, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_115)
{
    // FB3B 0334;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3B, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_116)
{
    // 05DA 0334 05BC;	
    // (‎‎ך̴‎‎) HEBREW LETTER FINAL KAF, COMBINING TILDE OVERLAY	[2327 | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[3] = { 0x05DA, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_117)
{
    // 05DA 05BC 0334;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF, HEBREW POINT DAGESH OR MAPIQ	[2327 | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[3] = { 0x05DA, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_118)
{
    // FB3A 0334;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB3A, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_119)
{
    // 05DB 0334 05BF;	
    // (‎‎כ̴‎‎) HEBREW LETTER KAF, COMBINING TILDE OVERLAY	[2327 | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DB, 0x0334, 0x05BF };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_120)
{
    // 05DB 05BF 0334;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF, HEBREW POINT RAFE	[2327 | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DB, 0x05BF, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_121)
{
    // FB4D 0334;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4D, 0x0334 };
    uint32_t const ces[10] = { 0x2327, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_122)
{
    // 05DB 0021;	
    // (‎‎כ‎‎) HEBREW LETTER KAF	[2327 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DB, 0x0021 };
    uint32_t const ces[9] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_123)
{
    // FB24 0021;	
    // (‎‎ﬤ‎‎) HEBREW LETTER WIDE KAF	[2327 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB24, 0x0021 };
    uint32_t const ces[9] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_124)
{
    // 05DA 0021;	
    // (‎‎ך‎‎) HEBREW LETTER FINAL KAF	[2327 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DA, 0x0021 };
    uint32_t const ces[9] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_125)
{
    // FB3B 0021;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3B, 0x0021 };
    uint32_t const ces[11] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_126)
{
    // FB3A 0021;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 0261 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB3A, 0x0021 };
    uint32_t const ces[11] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_127)
{
    // FB4D 0021;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 0261 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4D, 0x0021 };
    uint32_t const ces[11] = { 0x2327, 0x0261, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_128)
{
    // 05DB 003F;	
    // (‎‎כ‎‎) HEBREW LETTER KAF	[2327 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DB, 0x003F };
    uint32_t const ces[9] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_129)
{
    // FB24 003F;	
    // (‎‎ﬤ‎‎) HEBREW LETTER WIDE KAF	[2327 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB24, 0x003F };
    uint32_t const ces[9] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_130)
{
    // 05DA 003F;	
    // (‎‎ך‎‎) HEBREW LETTER FINAL KAF	[2327 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DA, 0x003F };
    uint32_t const ces[9] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_131)
{
    // FB3B 003F;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3B, 0x003F };
    uint32_t const ces[11] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_132)
{
    // FB3A 003F;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 0267 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB3A, 0x003F };
    uint32_t const ces[11] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_133)
{
    // FB4D 003F;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 0267 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4D, 0x003F };
    uint32_t const ces[11] = { 0x2327, 0x0267, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_134)
{
    // 05DB 0061;	
    // (‎‎כ‎‎) HEBREW LETTER KAF	[2327 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DB, 0x0061 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_135)
{
    // 05DB 0041;	
    // (‎‎כ‎‎) HEBREW LETTER KAF	[2327 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05DB, 0x0041 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_136)
{
    // FB24 0061;	
    // (‎‎ﬤ‎‎) HEBREW LETTER WIDE KAF	[2327 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB24, 0x0061 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_137)
{
    // FB24 0041;	
    // (‎‎ﬤ‎‎) HEBREW LETTER WIDE KAF	[2327 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB24, 0x0041 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_138)
{
    // 05DA 0061;	
    // (‎‎ך‎‎) HEBREW LETTER FINAL KAF	[2327 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DA, 0x0061 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_139)
{
    // 05DA 0041;	
    // (‎‎ך‎‎) HEBREW LETTER FINAL KAF	[2327 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x05DA, 0x0041 };
    uint32_t const ces[9] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_140)
{
    // FB3B 0061;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3B, 0x0061 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_141)
{
    // FB3B 0041;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB3B, 0x0041 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_142)
{
    // FB3A 0061;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 1CAD | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB3A, 0x0061 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_143)
{
    // FB3A 0041;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 1CAD | 0020 005F 0020 | 0019 0002 0008 |]

    uint32_t cps[2] = { 0xFB3A, 0x0041 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_144)
{
    // FB4D 0061;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 1CAD | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4D, 0x0061 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_145)
{
    // FB4D 0041;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 1CAD | 0020 0060 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB4D, 0x0041 };
    uint32_t const ces[11] = { 0x2327, 0x1CAD, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_146)
{
    // 05DB 0062;	
    // (‎‎כ‎‎) HEBREW LETTER KAF	[2327 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DB, 0x0062 };
    uint32_t const ces[9] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_147)
{
    // FB24 0062;	
    // (‎‎ﬤ‎‎) HEBREW LETTER WIDE KAF	[2327 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB24, 0x0062 };
    uint32_t const ces[9] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_148)
{
    // 05DA 0062;	
    // (‎‎ך‎‎) HEBREW LETTER FINAL KAF	[2327 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DA, 0x0062 };
    uint32_t const ces[9] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_149)
{
    // FB3B 0062;	
    // (‎‎כּ‎‎) HEBREW LETTER KAF WITH DAGESH	[2327 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3B, 0x0062 };
    uint32_t const ces[11] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_150)
{
    // FB3A 0062;	
    // (‎‎ךּ‎‎) HEBREW LETTER FINAL KAF WITH DAGESH	[2327 1CC6 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB3A, 0x0062 };
    uint32_t const ces[11] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_151)
{
    // FB4D 0062;	
    // (‎‎כֿ‎‎) HEBREW LETTER KAF WITH RAFE	[2327 1CC6 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4D, 0x0062 };
    uint32_t const ces[11] = { 0x2327, 0x1CC6, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_152)
{
    // 05DC 0334 05BC;	
    // (‎‎ל̴‎‎) HEBREW LETTER LAMED, COMBINING TILDE OVERLAY	[2328 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DC, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2328, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_153)
{
    // 05DC 05BC 0334;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED, HEBREW POINT DAGESH OR MAPIQ	[2328 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DC, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2328, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_154)
{
    // FB3C 0334;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3C, 0x0334 };
    uint32_t const ces[10] = { 0x2328, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_155)
{
    // 05DC 0021;	
    // (‎‎ל‎‎) HEBREW LETTER LAMED	[2328 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DC, 0x0021 };
    uint32_t const ces[9] = { 0x2328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_156)
{
    // FB25 0021;	
    // (‎‎ﬥ‎‎) HEBREW LETTER WIDE LAMED	[2328 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB25, 0x0021 };
    uint32_t const ces[9] = { 0x2328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_157)
{
    // FB3C 0021;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3C, 0x0021 };
    uint32_t const ces[11] = { 0x2328, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_158)
{
    // 05DC 003F;	
    // (‎‎ל‎‎) HEBREW LETTER LAMED	[2328 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DC, 0x003F };
    uint32_t const ces[9] = { 0x2328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_159)
{
    // FB25 003F;	
    // (‎‎ﬥ‎‎) HEBREW LETTER WIDE LAMED	[2328 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB25, 0x003F };
    uint32_t const ces[9] = { 0x2328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_160)
{
    // FB3C 003F;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3C, 0x003F };
    uint32_t const ces[11] = { 0x2328, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_161)
{
    // 05DC 0061;	
    // (‎‎ל‎‎) HEBREW LETTER LAMED	[2328 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DC, 0x0061 };
    uint32_t const ces[9] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_162)
{
    // 05DC 0041;	
    // (‎‎ל‎‎) HEBREW LETTER LAMED	[2328 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05DC, 0x0041 };
    uint32_t const ces[9] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_163)
{
    // FB25 0061;	
    // (‎‎ﬥ‎‎) HEBREW LETTER WIDE LAMED	[2328 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB25, 0x0061 };
    uint32_t const ces[9] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_164)
{
    // FB25 0041;	
    // (‎‎ﬥ‎‎) HEBREW LETTER WIDE LAMED	[2328 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB25, 0x0041 };
    uint32_t const ces[9] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_165)
{
    // FB3C 0061;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3C, 0x0061 };
    uint32_t const ces[11] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_166)
{
    // FB3C 0041;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB3C, 0x0041 };
    uint32_t const ces[11] = { 0x2328, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_167)
{
    // 05DC 0062;	
    // (‎‎ל‎‎) HEBREW LETTER LAMED	[2328 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DC, 0x0062 };
    uint32_t const ces[9] = { 0x2328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_168)
{
    // FB25 0062;	
    // (‎‎ﬥ‎‎) HEBREW LETTER WIDE LAMED	[2328 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB25, 0x0062 };
    uint32_t const ces[9] = { 0x2328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_169)
{
    // FB3C 0062;	
    // (‎‎לּ‎‎) HEBREW LETTER LAMED WITH DAGESH	[2328 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3C, 0x0062 };
    uint32_t const ces[11] = { 0x2328, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_170)
{
    // 05DE 0334 05BC;	
    // (‎‎מ̴‎‎) HEBREW LETTER MEM, COMBINING TILDE OVERLAY	[2329 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DE, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2329, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_171)
{
    // 05DE 05BC 0334;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM, HEBREW POINT DAGESH OR MAPIQ	[2329 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05DE, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2329, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_172)
{
    // FB3E 0334;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3E, 0x0334 };
    uint32_t const ces[10] = { 0x2329, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_173)
{
    // 05DE 0021;	
    // (‎‎מ‎‎) HEBREW LETTER MEM	[2329 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DE, 0x0021 };
    uint32_t const ces[9] = { 0x2329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_174)
{
    // FB26 0021;	
    // (‎‎ﬦ‎‎) HEBREW LETTER WIDE FINAL MEM	[2329 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB26, 0x0021 };
    uint32_t const ces[9] = { 0x2329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_175)
{
    // 05DD 0021;	
    // (‎‎ם‎‎) HEBREW LETTER FINAL MEM	[2329 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DD, 0x0021 };
    uint32_t const ces[9] = { 0x2329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_176)
{
    // FB3E 0021;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3E, 0x0021 };
    uint32_t const ces[11] = { 0x2329, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_177)
{
    // 05DE 003F;	
    // (‎‎מ‎‎) HEBREW LETTER MEM	[2329 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DE, 0x003F };
    uint32_t const ces[9] = { 0x2329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_178)
{
    // FB26 003F;	
    // (‎‎ﬦ‎‎) HEBREW LETTER WIDE FINAL MEM	[2329 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB26, 0x003F };
    uint32_t const ces[9] = { 0x2329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_179)
{
    // 05DD 003F;	
    // (‎‎ם‎‎) HEBREW LETTER FINAL MEM	[2329 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DD, 0x003F };
    uint32_t const ces[9] = { 0x2329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_180)
{
    // FB3E 003F;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3E, 0x003F };
    uint32_t const ces[11] = { 0x2329, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_181)
{
    // 05DE 0061;	
    // (‎‎מ‎‎) HEBREW LETTER MEM	[2329 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DE, 0x0061 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_182)
{
    // 05DE 0041;	
    // (‎‎מ‎‎) HEBREW LETTER MEM	[2329 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05DE, 0x0041 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_183)
{
    // FB26 0061;	
    // (‎‎ﬦ‎‎) HEBREW LETTER WIDE FINAL MEM	[2329 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB26, 0x0061 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_184)
{
    // FB26 0041;	
    // (‎‎ﬦ‎‎) HEBREW LETTER WIDE FINAL MEM	[2329 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB26, 0x0041 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_185)
{
    // 05DD 0061;	
    // (‎‎ם‎‎) HEBREW LETTER FINAL MEM	[2329 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DD, 0x0061 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_186)
{
    // 05DD 0041;	
    // (‎‎ם‎‎) HEBREW LETTER FINAL MEM	[2329 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x05DD, 0x0041 };
    uint32_t const ces[9] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_187)
{
    // FB3E 0061;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3E, 0x0061 };
    uint32_t const ces[11] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_188)
{
    // FB3E 0041;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB3E, 0x0041 };
    uint32_t const ces[11] = { 0x2329, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_189)
{
    // 05DE 0062;	
    // (‎‎מ‎‎) HEBREW LETTER MEM	[2329 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05DE, 0x0062 };
    uint32_t const ces[9] = { 0x2329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_190)
{
    // FB26 0062;	
    // (‎‎ﬦ‎‎) HEBREW LETTER WIDE FINAL MEM	[2329 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB26, 0x0062 };
    uint32_t const ces[9] = { 0x2329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_191)
{
    // 05DD 0062;	
    // (‎‎ם‎‎) HEBREW LETTER FINAL MEM	[2329 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DD, 0x0062 };
    uint32_t const ces[9] = { 0x2329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_192)
{
    // FB3E 0062;	
    // (‎‎מּ‎‎) HEBREW LETTER MEM WITH DAGESH	[2329 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB3E, 0x0062 };
    uint32_t const ces[11] = { 0x2329, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_193)
{
    // 05E0 0334 05BC;	
    // (‎‎נ̴‎‎) HEBREW LETTER NUN, COMBINING TILDE OVERLAY	[232A | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E0, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232A, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_194)
{
    // 05E0 05BC 0334;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN, HEBREW POINT DAGESH OR MAPIQ	[232A | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E0, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232A, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_195)
{
    // FB40 0334;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB40, 0x0334 };
    uint32_t const ces[10] = { 0x232A, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_196)
{
    // 05E0 0021;	
    // (‎‎נ‎‎) HEBREW LETTER NUN	[232A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E0, 0x0021 };
    uint32_t const ces[9] = { 0x232A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_197)
{
    // 05DF 0021;	
    // (‎‎ן‎‎) HEBREW LETTER FINAL NUN	[232A 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DF, 0x0021 };
    uint32_t const ces[9] = { 0x232A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_198)
{
    // FB40 0021;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB40, 0x0021 };
    uint32_t const ces[11] = { 0x232A, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_199)
{
    // 05E0 003F;	
    // (‎‎נ‎‎) HEBREW LETTER NUN	[232A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E0, 0x003F };
    uint32_t const ces[9] = { 0x232A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_200)
{
    // 05DF 003F;	
    // (‎‎ן‎‎) HEBREW LETTER FINAL NUN	[232A 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DF, 0x003F };
    uint32_t const ces[9] = { 0x232A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_201)
{
    // FB40 003F;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB40, 0x003F };
    uint32_t const ces[11] = { 0x232A, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_202)
{
    // 05E0 0061;	
    // (‎‎נ‎‎) HEBREW LETTER NUN	[232A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E0, 0x0061 };
    uint32_t const ces[9] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_203)
{
    // 05E0 0041;	
    // (‎‎נ‎‎) HEBREW LETTER NUN	[232A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E0, 0x0041 };
    uint32_t const ces[9] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_204)
{
    // 05DF 0061;	
    // (‎‎ן‎‎) HEBREW LETTER FINAL NUN	[232A 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DF, 0x0061 };
    uint32_t const ces[9] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_205)
{
    // 05DF 0041;	
    // (‎‎ן‎‎) HEBREW LETTER FINAL NUN	[232A 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x05DF, 0x0041 };
    uint32_t const ces[9] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_206)
{
    // FB40 0061;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB40, 0x0061 };
    uint32_t const ces[11] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_207)
{
    // FB40 0041;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB40, 0x0041 };
    uint32_t const ces[11] = { 0x232A, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_208)
{
    // 05E0 0062;	
    // (‎‎נ‎‎) HEBREW LETTER NUN	[232A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E0, 0x0062 };
    uint32_t const ces[9] = { 0x232A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_209)
{
    // 05DF 0062;	
    // (‎‎ן‎‎) HEBREW LETTER FINAL NUN	[232A 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05DF, 0x0062 };
    uint32_t const ces[9] = { 0x232A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_210)
{
    // FB40 0062;	
    // (‎‎נּ‎‎) HEBREW LETTER NUN WITH DAGESH	[232A 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB40, 0x0062 };
    uint32_t const ces[11] = { 0x232A, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_211)
{
    // 05E1 0334 05BC;	
    // (‎‎ס̴‎‎) HEBREW LETTER SAMEKH, COMBINING TILDE OVERLAY	[232B | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E1, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232B, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_212)
{
    // 05E1 05BC 0334;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH, HEBREW POINT DAGESH OR MAPIQ	[232B | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E1, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232B, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_213)
{
    // FB41 0334;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB41, 0x0334 };
    uint32_t const ces[10] = { 0x232B, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_214)
{
    // 05E1 0021;	
    // (‎‎ס‎‎) HEBREW LETTER SAMEKH	[232B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E1, 0x0021 };
    uint32_t const ces[9] = { 0x232B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_215)
{
    // FB41 0021;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB41, 0x0021 };
    uint32_t const ces[11] = { 0x232B, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_216)
{
    // 05E1 003F;	
    // (‎‎ס‎‎) HEBREW LETTER SAMEKH	[232B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E1, 0x003F };
    uint32_t const ces[9] = { 0x232B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_217)
{
    // FB41 003F;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB41, 0x003F };
    uint32_t const ces[11] = { 0x232B, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_218)
{
    // 05E1 0061;	
    // (‎‎ס‎‎) HEBREW LETTER SAMEKH	[232B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E1, 0x0061 };
    uint32_t const ces[9] = { 0x232B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_219)
{
    // 05E1 0041;	
    // (‎‎ס‎‎) HEBREW LETTER SAMEKH	[232B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E1, 0x0041 };
    uint32_t const ces[9] = { 0x232B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_220)
{
    // FB41 0061;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB41, 0x0061 };
    uint32_t const ces[11] = { 0x232B, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_221)
{
    // FB41 0041;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB41, 0x0041 };
    uint32_t const ces[11] = { 0x232B, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_222)
{
    // 05E1 0062;	
    // (‎‎ס‎‎) HEBREW LETTER SAMEKH	[232B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E1, 0x0062 };
    uint32_t const ces[9] = { 0x232B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_223)
{
    // FB41 0062;	
    // (‎‎סּ‎‎) HEBREW LETTER SAMEKH WITH DAGESH	[232B 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB41, 0x0062 };
    uint32_t const ces[11] = { 0x232B, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_224)
{
    // 05E2 0021;	
    // (‎‎ע‎‎) HEBREW LETTER AYIN	[232C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E2, 0x0021 };
    uint32_t const ces[9] = { 0x232C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_225)
{
    // FB20 0021;	
    // (‎‎ﬠ‎‎) HEBREW LETTER ALTERNATIVE AYIN	[232C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB20, 0x0021 };
    uint32_t const ces[9] = { 0x232C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_226)
{
    // 05E2 003F;	
    // (‎‎ע‎‎) HEBREW LETTER AYIN	[232C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E2, 0x003F };
    uint32_t const ces[9] = { 0x232C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_227)
{
    // FB20 003F;	
    // (‎‎ﬠ‎‎) HEBREW LETTER ALTERNATIVE AYIN	[232C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB20, 0x003F };
    uint32_t const ces[9] = { 0x232C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_228)
{
    // 05E2 0061;	
    // (‎‎ע‎‎) HEBREW LETTER AYIN	[232C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E2, 0x0061 };
    uint32_t const ces[9] = { 0x232C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_229)
{
    // 05E2 0041;	
    // (‎‎ע‎‎) HEBREW LETTER AYIN	[232C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E2, 0x0041 };
    uint32_t const ces[9] = { 0x232C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_230)
{
    // FB20 0061;	
    // (‎‎ﬠ‎‎) HEBREW LETTER ALTERNATIVE AYIN	[232C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB20, 0x0061 };
    uint32_t const ces[9] = { 0x232C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_231)
{
    // FB20 0041;	
    // (‎‎ﬠ‎‎) HEBREW LETTER ALTERNATIVE AYIN	[232C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB20, 0x0041 };
    uint32_t const ces[9] = { 0x232C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_232)
{
    // 05E2 0062;	
    // (‎‎ע‎‎) HEBREW LETTER AYIN	[232C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E2, 0x0062 };
    uint32_t const ces[9] = { 0x232C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_233)
{
    // FB20 0062;	
    // (‎‎ﬠ‎‎) HEBREW LETTER ALTERNATIVE AYIN	[232C 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB20, 0x0062 };
    uint32_t const ces[9] = { 0x232C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_234)
{
    // 05E4 0334 05BC;	
    // (‎‎פ̴‎‎) HEBREW LETTER PE, COMBINING TILDE OVERLAY	[232D | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E4, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_235)
{
    // 05E4 05BC 0334;	
    // (‎‎פּ‎‎) HEBREW LETTER PE, HEBREW POINT DAGESH OR MAPIQ	[232D | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E4, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_236)
{
    // FB44 0334;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB44, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_237)
{
    // 05E3 0334 05BC;	
    // (‎‎ף̴‎‎) HEBREW LETTER FINAL PE, COMBINING TILDE OVERLAY	[232D | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[3] = { 0x05E3, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_238)
{
    // 05E3 05BC 0334;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE, HEBREW POINT DAGESH OR MAPIQ	[232D | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[3] = { 0x05E3, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_239)
{
    // FB43 0334;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D | 0020 004A 005F | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB43, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_240)
{
    // 05E4 0334 05BF;	
    // (‎‎פ̴‎‎) HEBREW LETTER PE, COMBINING TILDE OVERLAY	[232D | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E4, 0x0334, 0x05BF };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_241)
{
    // 05E4 05BF 0334;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE, HEBREW POINT RAFE	[232D | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E4, 0x05BF, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_242)
{
    // FB4E 0334;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D | 0020 004A 0060 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4E, 0x0334 };
    uint32_t const ces[10] = { 0x232D, 0x0000, 0x0020, 0x004A, 0x0060, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_243)
{
    // 05E4 0021;	
    // (‎‎פ‎‎) HEBREW LETTER PE	[232D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E4, 0x0021 };
    uint32_t const ces[9] = { 0x232D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_244)
{
    // 05E3 0021;	
    // (‎‎ף‎‎) HEBREW LETTER FINAL PE	[232D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E3, 0x0021 };
    uint32_t const ces[9] = { 0x232D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_245)
{
    // FB44 0021;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB44, 0x0021 };
    uint32_t const ces[11] = { 0x232D, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_246)
{
    // FB43 0021;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D 0261 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB43, 0x0021 };
    uint32_t const ces[11] = { 0x232D, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_247)
{
    // FB4E 0021;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D 0261 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4E, 0x0021 };
    uint32_t const ces[11] = { 0x232D, 0x0261, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_248)
{
    // 05E4 003F;	
    // (‎‎פ‎‎) HEBREW LETTER PE	[232D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E4, 0x003F };
    uint32_t const ces[9] = { 0x232D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_249)
{
    // 05E3 003F;	
    // (‎‎ף‎‎) HEBREW LETTER FINAL PE	[232D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E3, 0x003F };
    uint32_t const ces[9] = { 0x232D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_250)
{
    // FB44 003F;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB44, 0x003F };
    uint32_t const ces[11] = { 0x232D, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_251)
{
    // FB43 003F;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D 0267 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB43, 0x003F };
    uint32_t const ces[11] = { 0x232D, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_252)
{
    // FB4E 003F;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D 0267 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4E, 0x003F };
    uint32_t const ces[11] = { 0x232D, 0x0267, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_253)
{
    // 05E4 0061;	
    // (‎‎פ‎‎) HEBREW LETTER PE	[232D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E4, 0x0061 };
    uint32_t const ces[9] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_254)
{
    // 05E4 0041;	
    // (‎‎פ‎‎) HEBREW LETTER PE	[232D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E4, 0x0041 };
    uint32_t const ces[9] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_255)
{
    // 05E3 0061;	
    // (‎‎ף‎‎) HEBREW LETTER FINAL PE	[232D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E3, 0x0061 };
    uint32_t const ces[9] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_256)
{
    // 05E3 0041;	
    // (‎‎ף‎‎) HEBREW LETTER FINAL PE	[232D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x05E3, 0x0041 };
    uint32_t const ces[9] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_257)
{
    // FB44 0061;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB44, 0x0061 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_258)
{
    // FB44 0041;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB44, 0x0041 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_259)
{
    // FB43 0061;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D 1CAD | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB43, 0x0061 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_260)
{
    // FB43 0041;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D 1CAD | 0020 005F 0020 | 0019 0002 0008 |]

    uint32_t cps[2] = { 0xFB43, 0x0041 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_261)
{
    // FB4E 0061;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D 1CAD | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4E, 0x0061 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_262)
{
    // FB4E 0041;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D 1CAD | 0020 0060 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB4E, 0x0041 };
    uint32_t const ces[11] = { 0x232D, 0x1CAD, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_263)
{
    // 05E4 0062;	
    // (‎‎פ‎‎) HEBREW LETTER PE	[232D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E4, 0x0062 };
    uint32_t const ces[9] = { 0x232D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_264)
{
    // 05E3 0062;	
    // (‎‎ף‎‎) HEBREW LETTER FINAL PE	[232D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E3, 0x0062 };
    uint32_t const ces[9] = { 0x232D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_265)
{
    // FB44 0062;	
    // (‎‎פּ‎‎) HEBREW LETTER PE WITH DAGESH	[232D 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB44, 0x0062 };
    uint32_t const ces[11] = { 0x232D, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_266)
{
    // FB43 0062;	
    // (‎‎ףּ‎‎) HEBREW LETTER FINAL PE WITH DAGESH	[232D 1CC6 | 0020 005F 0020 | 0019 0002 0002 |]

    uint32_t cps[2] = { 0xFB43, 0x0062 };
    uint32_t const ces[11] = { 0x232D, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0019, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_267)
{
    // FB4E 0062;	
    // (‎‎פֿ‎‎) HEBREW LETTER PE WITH RAFE	[232D 1CC6 | 0020 0060 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4E, 0x0062 };
    uint32_t const ces[11] = { 0x232D, 0x1CC6, 0x0000, 0x0020, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_268)
{
    // 05E6 0334 05BC;	
    // (‎‎צ̴‎‎) HEBREW LETTER TSADI, COMBINING TILDE OVERLAY	[232E | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E6, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232E, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_269)
{
    // 05E6 05BC 0334;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI, HEBREW POINT DAGESH OR MAPIQ	[232E | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E6, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232E, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_270)
{
    // FB46 0334;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB46, 0x0334 };
    uint32_t const ces[10] = { 0x232E, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_271)
{
    // 05E6 0021;	
    // (‎‎צ‎‎) HEBREW LETTER TSADI	[232E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E6, 0x0021 };
    uint32_t const ces[9] = { 0x232E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_272)
{
    // 05E5 0021;	
    // (‎‎ץ‎‎) HEBREW LETTER FINAL TSADI	[232E 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E5, 0x0021 };
    uint32_t const ces[9] = { 0x232E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_273)
{
    // FB46 0021;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB46, 0x0021 };
    uint32_t const ces[11] = { 0x232E, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_274)
{
    // 05E6 003F;	
    // (‎‎צ‎‎) HEBREW LETTER TSADI	[232E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E6, 0x003F };
    uint32_t const ces[9] = { 0x232E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_275)
{
    // 05E5 003F;	
    // (‎‎ץ‎‎) HEBREW LETTER FINAL TSADI	[232E 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E5, 0x003F };
    uint32_t const ces[9] = { 0x232E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_276)
{
    // FB46 003F;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB46, 0x003F };
    uint32_t const ces[11] = { 0x232E, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_277)
{
    // 05E6 0061;	
    // (‎‎צ‎‎) HEBREW LETTER TSADI	[232E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E6, 0x0061 };
    uint32_t const ces[9] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_278)
{
    // 05E6 0041;	
    // (‎‎צ‎‎) HEBREW LETTER TSADI	[232E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E6, 0x0041 };
    uint32_t const ces[9] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_279)
{
    // 05E5 0061;	
    // (‎‎ץ‎‎) HEBREW LETTER FINAL TSADI	[232E 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E5, 0x0061 };
    uint32_t const ces[9] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_280)
{
    // 05E5 0041;	
    // (‎‎ץ‎‎) HEBREW LETTER FINAL TSADI	[232E 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x05E5, 0x0041 };
    uint32_t const ces[9] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_281)
{
    // FB46 0061;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB46, 0x0061 };
    uint32_t const ces[11] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_282)
{
    // FB46 0041;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB46, 0x0041 };
    uint32_t const ces[11] = { 0x232E, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_283)
{
    // 05E6 0062;	
    // (‎‎צ‎‎) HEBREW LETTER TSADI	[232E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E6, 0x0062 };
    uint32_t const ces[9] = { 0x232E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_284)
{
    // 05E5 0062;	
    // (‎‎ץ‎‎) HEBREW LETTER FINAL TSADI	[232E 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x05E5, 0x0062 };
    uint32_t const ces[9] = { 0x232E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_285)
{
    // FB46 0062;	
    // (‎‎צּ‎‎) HEBREW LETTER TSADI WITH DAGESH	[232E 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB46, 0x0062 };
    uint32_t const ces[11] = { 0x232E, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_286)
{
    // 05E7 0334 05BC;	
    // (‎‎ק̴‎‎) HEBREW LETTER QOF, COMBINING TILDE OVERLAY	[232F | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E7, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x232F, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_287)
{
    // 05E7 05BC 0334;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF, HEBREW POINT DAGESH OR MAPIQ	[232F | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E7, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x232F, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_288)
{
    // FB47 0334;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB47, 0x0334 };
    uint32_t const ces[10] = { 0x232F, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_289)
{
    // 05E7 0021;	
    // (‎‎ק‎‎) HEBREW LETTER QOF	[232F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E7, 0x0021 };
    uint32_t const ces[9] = { 0x232F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_290)
{
    // FB47 0021;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB47, 0x0021 };
    uint32_t const ces[11] = { 0x232F, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_291)
{
    // 05E7 003F;	
    // (‎‎ק‎‎) HEBREW LETTER QOF	[232F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E7, 0x003F };
    uint32_t const ces[9] = { 0x232F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_292)
{
    // FB47 003F;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB47, 0x003F };
    uint32_t const ces[11] = { 0x232F, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_293)
{
    // 05E7 0061;	
    // (‎‎ק‎‎) HEBREW LETTER QOF	[232F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E7, 0x0061 };
    uint32_t const ces[9] = { 0x232F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_294)
{
    // 05E7 0041;	
    // (‎‎ק‎‎) HEBREW LETTER QOF	[232F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E7, 0x0041 };
    uint32_t const ces[9] = { 0x232F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_295)
{
    // FB47 0061;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB47, 0x0061 };
    uint32_t const ces[11] = { 0x232F, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_296)
{
    // FB47 0041;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB47, 0x0041 };
    uint32_t const ces[11] = { 0x232F, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_297)
{
    // 05E7 0062;	
    // (‎‎ק‎‎) HEBREW LETTER QOF	[232F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E7, 0x0062 };
    uint32_t const ces[9] = { 0x232F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_298)
{
    // FB47 0062;	
    // (‎‎קּ‎‎) HEBREW LETTER QOF WITH DAGESH	[232F 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB47, 0x0062 };
    uint32_t const ces[11] = { 0x232F, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_299)
{
    // 05E8 0334 05BC;	
    // (‎‎ר̴‎‎) HEBREW LETTER RESH, COMBINING TILDE OVERLAY	[2330 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E8, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2330, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_300)
{
    // 05E8 05BC 0334;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH, HEBREW POINT DAGESH OR MAPIQ	[2330 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E8, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2330, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_301)
{
    // FB48 0334;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB48, 0x0334 };
    uint32_t const ces[10] = { 0x2330, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_302)
{
    // 05E8 0021;	
    // (‎‎ר‎‎) HEBREW LETTER RESH	[2330 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E8, 0x0021 };
    uint32_t const ces[9] = { 0x2330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_303)
{
    // FB27 0021;	
    // (‎‎ﬧ‎‎) HEBREW LETTER WIDE RESH	[2330 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB27, 0x0021 };
    uint32_t const ces[9] = { 0x2330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_304)
{
    // FB48 0021;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB48, 0x0021 };
    uint32_t const ces[11] = { 0x2330, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_305)
{
    // 05E8 003F;	
    // (‎‎ר‎‎) HEBREW LETTER RESH	[2330 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E8, 0x003F };
    uint32_t const ces[9] = { 0x2330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_306)
{
    // FB27 003F;	
    // (‎‎ﬧ‎‎) HEBREW LETTER WIDE RESH	[2330 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB27, 0x003F };
    uint32_t const ces[9] = { 0x2330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_307)
{
    // FB48 003F;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB48, 0x003F };
    uint32_t const ces[11] = { 0x2330, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_308)
{
    // 05E8 0061;	
    // (‎‎ר‎‎) HEBREW LETTER RESH	[2330 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E8, 0x0061 };
    uint32_t const ces[9] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_309)
{
    // 05E8 0041;	
    // (‎‎ר‎‎) HEBREW LETTER RESH	[2330 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E8, 0x0041 };
    uint32_t const ces[9] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_310)
{
    // FB27 0061;	
    // (‎‎ﬧ‎‎) HEBREW LETTER WIDE RESH	[2330 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB27, 0x0061 };
    uint32_t const ces[9] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_311)
{
    // FB27 0041;	
    // (‎‎ﬧ‎‎) HEBREW LETTER WIDE RESH	[2330 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB27, 0x0041 };
    uint32_t const ces[9] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_312)
{
    // FB48 0061;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB48, 0x0061 };
    uint32_t const ces[11] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_313)
{
    // FB48 0041;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB48, 0x0041 };
    uint32_t const ces[11] = { 0x2330, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_314)
{
    // 05E8 0062;	
    // (‎‎ר‎‎) HEBREW LETTER RESH	[2330 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E8, 0x0062 };
    uint32_t const ces[9] = { 0x2330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_315)
{
    // FB27 0062;	
    // (‎‎ﬧ‎‎) HEBREW LETTER WIDE RESH	[2330 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB27, 0x0062 };
    uint32_t const ces[9] = { 0x2330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_316)
{
    // FB48 0062;	
    // (‎‎רּ‎‎) HEBREW LETTER RESH WITH DAGESH	[2330 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB48, 0x0062 };
    uint32_t const ces[11] = { 0x2330, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_317)
{
    // 05E9 0334 05C2;	
    // (‎‎ש̴‎‎) HEBREW LETTER SHIN, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x0334, 0x05C2 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_318)
{
    // 05E9 05C2 0334;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN, HEBREW POINT SIN DOT	[2331 | 0020 004A 005D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x05C2, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_319)
{
    // FB2B 0334;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 | 0020 004A 005D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2B, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_320)
{
    // 05E9 0334 05C1;	
    // (‎‎ש̴‎‎) HEBREW LETTER SHIN, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x0334, 0x05C1 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_321)
{
    // 05E9 05C1 0334;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN, HEBREW POINT SHIN DOT	[2331 | 0020 004A 005E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x05C1, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_322)
{
    // FB2A 0334;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 | 0020 004A 005E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2A, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_323)
{
    // 05E9 0334 05BC;	
    // (‎‎ש̴‎‎) HEBREW LETTER SHIN, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_324)
{
    // 05E9 05BC 0334;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN, HEBREW POINT DAGESH OR MAPIQ	[2331 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05E9, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_325)
{
    // FB49 0334;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB49, 0x0334 };
    uint32_t const ces[10] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_326)
{
    // 05E9 05BC 0334 05C2;	
    // (‎‎ש̴ּ‎‎) HEBREW LETTER SHIN, HEBREW POINT DAGESH OR MAPIQ, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005F 005D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05BC, 0x0334, 0x05C2 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_327)
{
    // 05E9 05BC 05C2 0334;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN, HEBREW POINT DAGESH OR MAPIQ, HEBREW POINT SIN DOT	[2331 | 0020 004A 005F 005D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05BC, 0x05C2, 0x0334 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_328)
{
    // 05E9 05C2 0334 05BC;	
    // (‎‎ש̴ׂ‎‎) HEBREW LETTER SHIN, HEBREW POINT SIN DOT, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005F 005D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05C2, 0x0334, 0x05BC };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_329)
{
    // 05E9 05C2 05BC 0334;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN, HEBREW POINT SIN DOT, HEBREW POINT DAGESH OR MAPIQ	[2331 | 0020 004A 005F 005D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05C2, 0x05BC, 0x0334 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_330)
{
    // 05E9 05BC 0334 05C1;	
    // (‎‎ש̴ּ‎‎) HEBREW LETTER SHIN, HEBREW POINT DAGESH OR MAPIQ, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005F 005E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05BC, 0x0334, 0x05C1 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_331)
{
    // 05E9 05BC 05C1 0334;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN, HEBREW POINT DAGESH OR MAPIQ, HEBREW POINT SHIN DOT	[2331 | 0020 004A 005F 005E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05BC, 0x05C1, 0x0334 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_332)
{
    // 05E9 05C1 0334 05BC;	
    // (‎‎ש̴ׁ‎‎) HEBREW LETTER SHIN, HEBREW POINT SHIN DOT, COMBINING TILDE OVERLAY	[2331 | 0020 004A 005F 005E | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x05E9, 0x05C1, 0x0334, 0x05BC };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_333)
{
    // FB2C 0334;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 | 0020 004A 005F 005E | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2C, 0x0334 };
    uint32_t const ces[12] = { 0x2331, 0x0000, 0x0020, 0x004A, 0x005F, 0x005E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_334)
{
    // 05E9 0021;	
    // (‎‎ש‎‎) HEBREW LETTER SHIN	[2331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E9, 0x0021 };
    uint32_t const ces[9] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_335)
{
    // FB2B 0021;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 0261 | 0020 005D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2B, 0x0021 };
    uint32_t const ces[11] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_336)
{
    // FB2A 0021;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 0261 | 0020 005E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2A, 0x0021 };
    uint32_t const ces[11] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_337)
{
    // FB49 0021;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB49, 0x0021 };
    uint32_t const ces[11] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_338)
{
    // FB2D 0021;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SIN DOT	[2331 0261 | 0020 005F 005D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2D, 0x0021 };
    uint32_t const ces[13] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x005F, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_339)
{
    // FB2C 0021;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 0261 | 0020 005F 005E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2C, 0x0021 };
    uint32_t const ces[13] = { 0x2331, 0x0261, 0x0000, 0x0020, 0x005F, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_340)
{
    // 05E9 003F;	
    // (‎‎ש‎‎) HEBREW LETTER SHIN	[2331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E9, 0x003F };
    uint32_t const ces[9] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_341)
{
    // FB2B 003F;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 0267 | 0020 005D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2B, 0x003F };
    uint32_t const ces[11] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_342)
{
    // FB2A 003F;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 0267 | 0020 005E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2A, 0x003F };
    uint32_t const ces[11] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_343)
{
    // FB49 003F;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB49, 0x003F };
    uint32_t const ces[11] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_344)
{
    // FB2D 003F;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SIN DOT	[2331 0267 | 0020 005F 005D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2D, 0x003F };
    uint32_t const ces[13] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x005F, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_345)
{
    // FB2C 003F;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 0267 | 0020 005F 005E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2C, 0x003F };
    uint32_t const ces[13] = { 0x2331, 0x0267, 0x0000, 0x0020, 0x005F, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_346)
{
    // 05E9 0061;	
    // (‎‎ש‎‎) HEBREW LETTER SHIN	[2331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E9, 0x0061 };
    uint32_t const ces[9] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_347)
{
    // 05E9 0041;	
    // (‎‎ש‎‎) HEBREW LETTER SHIN	[2331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05E9, 0x0041 };
    uint32_t const ces[9] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_348)
{
    // FB2B 0061;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 1CAD | 0020 005D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2B, 0x0061 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_349)
{
    // FB2B 0041;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 1CAD | 0020 005D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB2B, 0x0041 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_350)
{
    // FB2A 0061;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 1CAD | 0020 005E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2A, 0x0061 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_351)
{
    // FB2A 0041;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 1CAD | 0020 005E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB2A, 0x0041 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_352)
{
    // FB49 0061;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB49, 0x0061 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_353)
{
    // FB49 0041;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB49, 0x0041 };
    uint32_t const ces[11] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_354)
{
    // FB2D 0061;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SIN DOT	[2331 1CAD | 0020 005F 005D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2D, 0x0061 };
    uint32_t const ces[13] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_355)
{
    // FB2D 0041;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SIN DOT	[2331 1CAD | 0020 005F 005D 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB2D, 0x0041 };
    uint32_t const ces[13] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_356)
{
    // FB2C 0061;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 1CAD | 0020 005F 005E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2C, 0x0061 };
    uint32_t const ces[13] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_357)
{
    // FB2C 0041;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 1CAD | 0020 005F 005E 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB2C, 0x0041 };
    uint32_t const ces[13] = { 0x2331, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_358)
{
    // 05E9 0062;	
    // (‎‎ש‎‎) HEBREW LETTER SHIN	[2331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05E9, 0x0062 };
    uint32_t const ces[9] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_359)
{
    // FB2B 0062;	
    // (‎‎שׂ‎‎) HEBREW LETTER SHIN WITH SIN DOT	[2331 1CC6 | 0020 005D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2B, 0x0062 };
    uint32_t const ces[11] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_360)
{
    // FB2A 0062;	
    // (‎‎שׁ‎‎) HEBREW LETTER SHIN WITH SHIN DOT	[2331 1CC6 | 0020 005E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2A, 0x0062 };
    uint32_t const ces[11] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_361)
{
    // FB49 0062;	
    // (‎‎שּ‎‎) HEBREW LETTER SHIN WITH DAGESH	[2331 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB49, 0x0062 };
    uint32_t const ces[11] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_362)
{
    // FB2D 0062;	
    // (‎‎שּׂ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SIN DOT	[2331 1CC6 | 0020 005F 005D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2D, 0x0062 };
    uint32_t const ces[13] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_363)
{
    // FB2C 0062;	
    // (‎‎שּׁ‎‎) HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT	[2331 1CC6 | 0020 005F 005E 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB2C, 0x0062 };
    uint32_t const ces[13] = { 0x2331, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_364)
{
    // 05EA 0334 05BC;	
    // (‎‎ת̴‎‎) HEBREW LETTER TAV, COMBINING TILDE OVERLAY	[2332 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05EA, 0x0334, 0x05BC };
    uint32_t const ces[10] = { 0x2332, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_365)
{
    // 05EA 05BC 0334;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV, HEBREW POINT DAGESH OR MAPIQ	[2332 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x05EA, 0x05BC, 0x0334 };
    uint32_t const ces[10] = { 0x2332, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_366)
{
    // FB4A 0334;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 | 0020 004A 005F | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4A, 0x0334 };
    uint32_t const ces[10] = { 0x2332, 0x0000, 0x0020, 0x004A, 0x005F, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_367)
{
    // 05EA 0021;	
    // (‎‎ת‎‎) HEBREW LETTER TAV	[2332 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05EA, 0x0021 };
    uint32_t const ces[9] = { 0x2332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_368)
{
    // FB28 0021;	
    // (‎‎ﬨ‎‎) HEBREW LETTER WIDE TAV	[2332 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB28, 0x0021 };
    uint32_t const ces[9] = { 0x2332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_369)
{
    // FB4A 0021;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 0261 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4A, 0x0021 };
    uint32_t const ces[11] = { 0x2332, 0x0261, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_370)
{
    // 05EA 003F;	
    // (‎‎ת‎‎) HEBREW LETTER TAV	[2332 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05EA, 0x003F };
    uint32_t const ces[9] = { 0x2332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_371)
{
    // FB28 003F;	
    // (‎‎ﬨ‎‎) HEBREW LETTER WIDE TAV	[2332 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB28, 0x003F };
    uint32_t const ces[9] = { 0x2332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_372)
{
    // FB4A 003F;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 0267 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4A, 0x003F };
    uint32_t const ces[11] = { 0x2332, 0x0267, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_373)
{
    // 05EA 0061;	
    // (‎‎ת‎‎) HEBREW LETTER TAV	[2332 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05EA, 0x0061 };
    uint32_t const ces[9] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_374)
{
    // 05EA 0041;	
    // (‎‎ת‎‎) HEBREW LETTER TAV	[2332 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05EA, 0x0041 };
    uint32_t const ces[9] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_375)
{
    // FB28 0061;	
    // (‎‎ﬨ‎‎) HEBREW LETTER WIDE TAV	[2332 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB28, 0x0061 };
    uint32_t const ces[9] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_376)
{
    // FB28 0041;	
    // (‎‎ﬨ‎‎) HEBREW LETTER WIDE TAV	[2332 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB28, 0x0041 };
    uint32_t const ces[9] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_377)
{
    // FB4A 0061;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 1CAD | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4A, 0x0061 };
    uint32_t const ces[11] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_378)
{
    // FB4A 0041;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 1CAD | 0020 005F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0xFB4A, 0x0041 };
    uint32_t const ces[11] = { 0x2332, 0x1CAD, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_379)
{
    // 05EA 0062;	
    // (‎‎ת‎‎) HEBREW LETTER TAV	[2332 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05EA, 0x0062 };
    uint32_t const ces[9] = { 0x2332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_380)
{
    // FB28 0062;	
    // (‎‎ﬨ‎‎) HEBREW LETTER WIDE TAV	[2332 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB28, 0x0062 };
    uint32_t const ces[9] = { 0x2332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_381)
{
    // FB4A 0062;	
    // (‎‎תּ‎‎) HEBREW LETTER TAV WITH DAGESH	[2332 1CC6 | 0020 005F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0xFB4A, 0x0062 };
    uint32_t const ces[11] = { 0x2332, 0x1CC6, 0x0000, 0x0020, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_382)
{
    // 10900 0021;	
    // (‎‎𐤀‎‎) PHOENICIAN LETTER ALF	[2333 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10900, 0x0021 };
    uint32_t const ces[9] = { 0x2333, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_383)
{
    // 10900 003F;	
    // (‎‎𐤀‎‎) PHOENICIAN LETTER ALF	[2333 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10900, 0x003F };
    uint32_t const ces[9] = { 0x2333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_384)
{
    // 10900 0061;	
    // (‎‎𐤀‎‎) PHOENICIAN LETTER ALF	[2333 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10900, 0x0061 };
    uint32_t const ces[9] = { 0x2333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_385)
{
    // 10900 0041;	
    // (‎‎𐤀‎‎) PHOENICIAN LETTER ALF	[2333 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10900, 0x0041 };
    uint32_t const ces[9] = { 0x2333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_386)
{
    // 10900 0062;	
    // (‎‎𐤀‎‎) PHOENICIAN LETTER ALF	[2333 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10900, 0x0062 };
    uint32_t const ces[9] = { 0x2333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_387)
{
    // 10901 0021;	
    // (‎‎𐤁‎‎) PHOENICIAN LETTER BET	[2334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10901, 0x0021 };
    uint32_t const ces[9] = { 0x2334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_388)
{
    // 10901 003F;	
    // (‎‎𐤁‎‎) PHOENICIAN LETTER BET	[2334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10901, 0x003F };
    uint32_t const ces[9] = { 0x2334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_389)
{
    // 10901 0061;	
    // (‎‎𐤁‎‎) PHOENICIAN LETTER BET	[2334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10901, 0x0061 };
    uint32_t const ces[9] = { 0x2334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_390)
{
    // 10901 0041;	
    // (‎‎𐤁‎‎) PHOENICIAN LETTER BET	[2334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10901, 0x0041 };
    uint32_t const ces[9] = { 0x2334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_391)
{
    // 10901 0062;	
    // (‎‎𐤁‎‎) PHOENICIAN LETTER BET	[2334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10901, 0x0062 };
    uint32_t const ces[9] = { 0x2334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_392)
{
    // 10902 0021;	
    // (‎‎𐤂‎‎) PHOENICIAN LETTER GAML	[2335 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10902, 0x0021 };
    uint32_t const ces[9] = { 0x2335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_393)
{
    // 10902 003F;	
    // (‎‎𐤂‎‎) PHOENICIAN LETTER GAML	[2335 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10902, 0x003F };
    uint32_t const ces[9] = { 0x2335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_394)
{
    // 10902 0061;	
    // (‎‎𐤂‎‎) PHOENICIAN LETTER GAML	[2335 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10902, 0x0061 };
    uint32_t const ces[9] = { 0x2335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_395)
{
    // 10902 0041;	
    // (‎‎𐤂‎‎) PHOENICIAN LETTER GAML	[2335 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10902, 0x0041 };
    uint32_t const ces[9] = { 0x2335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_396)
{
    // 10902 0062;	
    // (‎‎𐤂‎‎) PHOENICIAN LETTER GAML	[2335 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10902, 0x0062 };
    uint32_t const ces[9] = { 0x2335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_397)
{
    // 10903 0021;	
    // (‎‎𐤃‎‎) PHOENICIAN LETTER DELT	[2336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10903, 0x0021 };
    uint32_t const ces[9] = { 0x2336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_398)
{
    // 10903 003F;	
    // (‎‎𐤃‎‎) PHOENICIAN LETTER DELT	[2336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10903, 0x003F };
    uint32_t const ces[9] = { 0x2336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_399)
{
    // 10903 0061;	
    // (‎‎𐤃‎‎) PHOENICIAN LETTER DELT	[2336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10903, 0x0061 };
    uint32_t const ces[9] = { 0x2336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_400)
{
    // 10903 0041;	
    // (‎‎𐤃‎‎) PHOENICIAN LETTER DELT	[2336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10903, 0x0041 };
    uint32_t const ces[9] = { 0x2336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_401)
{
    // 10903 0062;	
    // (‎‎𐤃‎‎) PHOENICIAN LETTER DELT	[2336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10903, 0x0062 };
    uint32_t const ces[9] = { 0x2336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_402)
{
    // 10904 0021;	
    // (‎‎𐤄‎‎) PHOENICIAN LETTER HE	[2337 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10904, 0x0021 };
    uint32_t const ces[9] = { 0x2337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_403)
{
    // 10904 003F;	
    // (‎‎𐤄‎‎) PHOENICIAN LETTER HE	[2337 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10904, 0x003F };
    uint32_t const ces[9] = { 0x2337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_404)
{
    // 10904 0061;	
    // (‎‎𐤄‎‎) PHOENICIAN LETTER HE	[2337 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10904, 0x0061 };
    uint32_t const ces[9] = { 0x2337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_405)
{
    // 10904 0041;	
    // (‎‎𐤄‎‎) PHOENICIAN LETTER HE	[2337 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10904, 0x0041 };
    uint32_t const ces[9] = { 0x2337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_406)
{
    // 10904 0062;	
    // (‎‎𐤄‎‎) PHOENICIAN LETTER HE	[2337 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10904, 0x0062 };
    uint32_t const ces[9] = { 0x2337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_407)
{
    // 10905 0021;	
    // (‎‎𐤅‎‎) PHOENICIAN LETTER WAU	[2338 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10905, 0x0021 };
    uint32_t const ces[9] = { 0x2338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_408)
{
    // 10905 003F;	
    // (‎‎𐤅‎‎) PHOENICIAN LETTER WAU	[2338 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10905, 0x003F };
    uint32_t const ces[9] = { 0x2338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_409)
{
    // 10905 0061;	
    // (‎‎𐤅‎‎) PHOENICIAN LETTER WAU	[2338 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10905, 0x0061 };
    uint32_t const ces[9] = { 0x2338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_410)
{
    // 10905 0041;	
    // (‎‎𐤅‎‎) PHOENICIAN LETTER WAU	[2338 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10905, 0x0041 };
    uint32_t const ces[9] = { 0x2338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_411)
{
    // 10905 0062;	
    // (‎‎𐤅‎‎) PHOENICIAN LETTER WAU	[2338 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10905, 0x0062 };
    uint32_t const ces[9] = { 0x2338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_412)
{
    // 10906 0021;	
    // (‎‎𐤆‎‎) PHOENICIAN LETTER ZAI	[2339 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10906, 0x0021 };
    uint32_t const ces[9] = { 0x2339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_413)
{
    // 10906 003F;	
    // (‎‎𐤆‎‎) PHOENICIAN LETTER ZAI	[2339 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10906, 0x003F };
    uint32_t const ces[9] = { 0x2339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_414)
{
    // 10906 0061;	
    // (‎‎𐤆‎‎) PHOENICIAN LETTER ZAI	[2339 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10906, 0x0061 };
    uint32_t const ces[9] = { 0x2339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_415)
{
    // 10906 0041;	
    // (‎‎𐤆‎‎) PHOENICIAN LETTER ZAI	[2339 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10906, 0x0041 };
    uint32_t const ces[9] = { 0x2339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_416)
{
    // 10906 0062;	
    // (‎‎𐤆‎‎) PHOENICIAN LETTER ZAI	[2339 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10906, 0x0062 };
    uint32_t const ces[9] = { 0x2339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_417)
{
    // 10907 0021;	
    // (‎‎𐤇‎‎) PHOENICIAN LETTER HET	[233A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10907, 0x0021 };
    uint32_t const ces[9] = { 0x233A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_418)
{
    // 10907 003F;	
    // (‎‎𐤇‎‎) PHOENICIAN LETTER HET	[233A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10907, 0x003F };
    uint32_t const ces[9] = { 0x233A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_419)
{
    // 10907 0061;	
    // (‎‎𐤇‎‎) PHOENICIAN LETTER HET	[233A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10907, 0x0061 };
    uint32_t const ces[9] = { 0x233A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_420)
{
    // 10907 0041;	
    // (‎‎𐤇‎‎) PHOENICIAN LETTER HET	[233A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10907, 0x0041 };
    uint32_t const ces[9] = { 0x233A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_421)
{
    // 10907 0062;	
    // (‎‎𐤇‎‎) PHOENICIAN LETTER HET	[233A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10907, 0x0062 };
    uint32_t const ces[9] = { 0x233A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_422)
{
    // 10908 0021;	
    // (‎‎𐤈‎‎) PHOENICIAN LETTER TET	[233B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10908, 0x0021 };
    uint32_t const ces[9] = { 0x233B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_423)
{
    // 10908 003F;	
    // (‎‎𐤈‎‎) PHOENICIAN LETTER TET	[233B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10908, 0x003F };
    uint32_t const ces[9] = { 0x233B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_424)
{
    // 10908 0061;	
    // (‎‎𐤈‎‎) PHOENICIAN LETTER TET	[233B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10908, 0x0061 };
    uint32_t const ces[9] = { 0x233B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_425)
{
    // 10908 0041;	
    // (‎‎𐤈‎‎) PHOENICIAN LETTER TET	[233B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10908, 0x0041 };
    uint32_t const ces[9] = { 0x233B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_426)
{
    // 10908 0062;	
    // (‎‎𐤈‎‎) PHOENICIAN LETTER TET	[233B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10908, 0x0062 };
    uint32_t const ces[9] = { 0x233B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_427)
{
    // 10909 0021;	
    // (‎‎𐤉‎‎) PHOENICIAN LETTER YOD	[233C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10909, 0x0021 };
    uint32_t const ces[9] = { 0x233C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_428)
{
    // 10909 003F;	
    // (‎‎𐤉‎‎) PHOENICIAN LETTER YOD	[233C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10909, 0x003F };
    uint32_t const ces[9] = { 0x233C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_429)
{
    // 10909 0061;	
    // (‎‎𐤉‎‎) PHOENICIAN LETTER YOD	[233C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10909, 0x0061 };
    uint32_t const ces[9] = { 0x233C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_430)
{
    // 10909 0041;	
    // (‎‎𐤉‎‎) PHOENICIAN LETTER YOD	[233C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10909, 0x0041 };
    uint32_t const ces[9] = { 0x233C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_431)
{
    // 10909 0062;	
    // (‎‎𐤉‎‎) PHOENICIAN LETTER YOD	[233C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10909, 0x0062 };
    uint32_t const ces[9] = { 0x233C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_432)
{
    // 1090A 0021;	
    // (‎‎𐤊‎‎) PHOENICIAN LETTER KAF	[233D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090A, 0x0021 };
    uint32_t const ces[9] = { 0x233D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_433)
{
    // 1090A 003F;	
    // (‎‎𐤊‎‎) PHOENICIAN LETTER KAF	[233D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090A, 0x003F };
    uint32_t const ces[9] = { 0x233D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_434)
{
    // 1090A 0061;	
    // (‎‎𐤊‎‎) PHOENICIAN LETTER KAF	[233D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090A, 0x0061 };
    uint32_t const ces[9] = { 0x233D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_435)
{
    // 1090A 0041;	
    // (‎‎𐤊‎‎) PHOENICIAN LETTER KAF	[233D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090A, 0x0041 };
    uint32_t const ces[9] = { 0x233D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_436)
{
    // 1090A 0062;	
    // (‎‎𐤊‎‎) PHOENICIAN LETTER KAF	[233D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090A, 0x0062 };
    uint32_t const ces[9] = { 0x233D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_437)
{
    // 1090B 0021;	
    // (‎‎𐤋‎‎) PHOENICIAN LETTER LAMD	[233E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090B, 0x0021 };
    uint32_t const ces[9] = { 0x233E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_438)
{
    // 1090B 003F;	
    // (‎‎𐤋‎‎) PHOENICIAN LETTER LAMD	[233E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090B, 0x003F };
    uint32_t const ces[9] = { 0x233E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_439)
{
    // 1090B 0061;	
    // (‎‎𐤋‎‎) PHOENICIAN LETTER LAMD	[233E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090B, 0x0061 };
    uint32_t const ces[9] = { 0x233E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_440)
{
    // 1090B 0041;	
    // (‎‎𐤋‎‎) PHOENICIAN LETTER LAMD	[233E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090B, 0x0041 };
    uint32_t const ces[9] = { 0x233E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_441)
{
    // 1090B 0062;	
    // (‎‎𐤋‎‎) PHOENICIAN LETTER LAMD	[233E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090B, 0x0062 };
    uint32_t const ces[9] = { 0x233E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_442)
{
    // 1090C 0021;	
    // (‎‎𐤌‎‎) PHOENICIAN LETTER MEM	[233F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090C, 0x0021 };
    uint32_t const ces[9] = { 0x233F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_443)
{
    // 1090C 003F;	
    // (‎‎𐤌‎‎) PHOENICIAN LETTER MEM	[233F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090C, 0x003F };
    uint32_t const ces[9] = { 0x233F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_444)
{
    // 1090C 0061;	
    // (‎‎𐤌‎‎) PHOENICIAN LETTER MEM	[233F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090C, 0x0061 };
    uint32_t const ces[9] = { 0x233F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_445)
{
    // 1090C 0041;	
    // (‎‎𐤌‎‎) PHOENICIAN LETTER MEM	[233F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090C, 0x0041 };
    uint32_t const ces[9] = { 0x233F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_446)
{
    // 1090C 0062;	
    // (‎‎𐤌‎‎) PHOENICIAN LETTER MEM	[233F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090C, 0x0062 };
    uint32_t const ces[9] = { 0x233F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_447)
{
    // 1090D 0021;	
    // (‎‎𐤍‎‎) PHOENICIAN LETTER NUN	[2340 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090D, 0x0021 };
    uint32_t const ces[9] = { 0x2340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_448)
{
    // 1090D 003F;	
    // (‎‎𐤍‎‎) PHOENICIAN LETTER NUN	[2340 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090D, 0x003F };
    uint32_t const ces[9] = { 0x2340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_449)
{
    // 1090D 0061;	
    // (‎‎𐤍‎‎) PHOENICIAN LETTER NUN	[2340 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090D, 0x0061 };
    uint32_t const ces[9] = { 0x2340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_450)
{
    // 1090D 0041;	
    // (‎‎𐤍‎‎) PHOENICIAN LETTER NUN	[2340 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090D, 0x0041 };
    uint32_t const ces[9] = { 0x2340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_451)
{
    // 1090D 0062;	
    // (‎‎𐤍‎‎) PHOENICIAN LETTER NUN	[2340 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090D, 0x0062 };
    uint32_t const ces[9] = { 0x2340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_452)
{
    // 1090E 0021;	
    // (‎‎𐤎‎‎) PHOENICIAN LETTER SEMK	[2341 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090E, 0x0021 };
    uint32_t const ces[9] = { 0x2341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_453)
{
    // 1090E 003F;	
    // (‎‎𐤎‎‎) PHOENICIAN LETTER SEMK	[2341 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090E, 0x003F };
    uint32_t const ces[9] = { 0x2341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_454)
{
    // 1090E 0061;	
    // (‎‎𐤎‎‎) PHOENICIAN LETTER SEMK	[2341 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090E, 0x0061 };
    uint32_t const ces[9] = { 0x2341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_455)
{
    // 1090E 0041;	
    // (‎‎𐤎‎‎) PHOENICIAN LETTER SEMK	[2341 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090E, 0x0041 };
    uint32_t const ces[9] = { 0x2341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_456)
{
    // 1090E 0062;	
    // (‎‎𐤎‎‎) PHOENICIAN LETTER SEMK	[2341 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090E, 0x0062 };
    uint32_t const ces[9] = { 0x2341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_457)
{
    // 1090F 0021;	
    // (‎‎𐤏‎‎) PHOENICIAN LETTER AIN	[2342 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090F, 0x0021 };
    uint32_t const ces[9] = { 0x2342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_458)
{
    // 1090F 003F;	
    // (‎‎𐤏‎‎) PHOENICIAN LETTER AIN	[2342 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090F, 0x003F };
    uint32_t const ces[9] = { 0x2342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_459)
{
    // 1090F 0061;	
    // (‎‎𐤏‎‎) PHOENICIAN LETTER AIN	[2342 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090F, 0x0061 };
    uint32_t const ces[9] = { 0x2342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_460)
{
    // 1090F 0041;	
    // (‎‎𐤏‎‎) PHOENICIAN LETTER AIN	[2342 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1090F, 0x0041 };
    uint32_t const ces[9] = { 0x2342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_461)
{
    // 1090F 0062;	
    // (‎‎𐤏‎‎) PHOENICIAN LETTER AIN	[2342 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090F, 0x0062 };
    uint32_t const ces[9] = { 0x2342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_462)
{
    // 10910 0021;	
    // (‎‎𐤐‎‎) PHOENICIAN LETTER PE	[2343 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10910, 0x0021 };
    uint32_t const ces[9] = { 0x2343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_463)
{
    // 10910 003F;	
    // (‎‎𐤐‎‎) PHOENICIAN LETTER PE	[2343 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10910, 0x003F };
    uint32_t const ces[9] = { 0x2343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_464)
{
    // 10910 0061;	
    // (‎‎𐤐‎‎) PHOENICIAN LETTER PE	[2343 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10910, 0x0061 };
    uint32_t const ces[9] = { 0x2343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_465)
{
    // 10910 0041;	
    // (‎‎𐤐‎‎) PHOENICIAN LETTER PE	[2343 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10910, 0x0041 };
    uint32_t const ces[9] = { 0x2343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_466)
{
    // 10910 0062;	
    // (‎‎𐤐‎‎) PHOENICIAN LETTER PE	[2343 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10910, 0x0062 };
    uint32_t const ces[9] = { 0x2343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_467)
{
    // 10911 0021;	
    // (‎‎𐤑‎‎) PHOENICIAN LETTER SADE	[2344 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10911, 0x0021 };
    uint32_t const ces[9] = { 0x2344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_468)
{
    // 10911 003F;	
    // (‎‎𐤑‎‎) PHOENICIAN LETTER SADE	[2344 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10911, 0x003F };
    uint32_t const ces[9] = { 0x2344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_469)
{
    // 10911 0061;	
    // (‎‎𐤑‎‎) PHOENICIAN LETTER SADE	[2344 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10911, 0x0061 };
    uint32_t const ces[9] = { 0x2344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_470)
{
    // 10911 0041;	
    // (‎‎𐤑‎‎) PHOENICIAN LETTER SADE	[2344 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10911, 0x0041 };
    uint32_t const ces[9] = { 0x2344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_471)
{
    // 10911 0062;	
    // (‎‎𐤑‎‎) PHOENICIAN LETTER SADE	[2344 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10911, 0x0062 };
    uint32_t const ces[9] = { 0x2344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_472)
{
    // 10912 0021;	
    // (‎‎𐤒‎‎) PHOENICIAN LETTER QOF	[2345 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10912, 0x0021 };
    uint32_t const ces[9] = { 0x2345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_473)
{
    // 10912 003F;	
    // (‎‎𐤒‎‎) PHOENICIAN LETTER QOF	[2345 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10912, 0x003F };
    uint32_t const ces[9] = { 0x2345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_474)
{
    // 10912 0061;	
    // (‎‎𐤒‎‎) PHOENICIAN LETTER QOF	[2345 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10912, 0x0061 };
    uint32_t const ces[9] = { 0x2345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_475)
{
    // 10912 0041;	
    // (‎‎𐤒‎‎) PHOENICIAN LETTER QOF	[2345 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10912, 0x0041 };
    uint32_t const ces[9] = { 0x2345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_476)
{
    // 10912 0062;	
    // (‎‎𐤒‎‎) PHOENICIAN LETTER QOF	[2345 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10912, 0x0062 };
    uint32_t const ces[9] = { 0x2345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_477)
{
    // 10913 0021;	
    // (‎‎𐤓‎‎) PHOENICIAN LETTER ROSH	[2346 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10913, 0x0021 };
    uint32_t const ces[9] = { 0x2346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_478)
{
    // 10913 003F;	
    // (‎‎𐤓‎‎) PHOENICIAN LETTER ROSH	[2346 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10913, 0x003F };
    uint32_t const ces[9] = { 0x2346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_479)
{
    // 10913 0061;	
    // (‎‎𐤓‎‎) PHOENICIAN LETTER ROSH	[2346 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10913, 0x0061 };
    uint32_t const ces[9] = { 0x2346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_480)
{
    // 10913 0041;	
    // (‎‎𐤓‎‎) PHOENICIAN LETTER ROSH	[2346 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10913, 0x0041 };
    uint32_t const ces[9] = { 0x2346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_481)
{
    // 10913 0062;	
    // (‎‎𐤓‎‎) PHOENICIAN LETTER ROSH	[2346 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10913, 0x0062 };
    uint32_t const ces[9] = { 0x2346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_482)
{
    // 10914 0021;	
    // (‎‎𐤔‎‎) PHOENICIAN LETTER SHIN	[2347 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10914, 0x0021 };
    uint32_t const ces[9] = { 0x2347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_483)
{
    // 10914 003F;	
    // (‎‎𐤔‎‎) PHOENICIAN LETTER SHIN	[2347 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10914, 0x003F };
    uint32_t const ces[9] = { 0x2347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_484)
{
    // 10914 0061;	
    // (‎‎𐤔‎‎) PHOENICIAN LETTER SHIN	[2347 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10914, 0x0061 };
    uint32_t const ces[9] = { 0x2347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_485)
{
    // 10914 0041;	
    // (‎‎𐤔‎‎) PHOENICIAN LETTER SHIN	[2347 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10914, 0x0041 };
    uint32_t const ces[9] = { 0x2347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_486)
{
    // 10914 0062;	
    // (‎‎𐤔‎‎) PHOENICIAN LETTER SHIN	[2347 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10914, 0x0062 };
    uint32_t const ces[9] = { 0x2347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_487)
{
    // 10915 0021;	
    // (‎‎𐤕‎‎) PHOENICIAN LETTER TAU	[2348 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10915, 0x0021 };
    uint32_t const ces[9] = { 0x2348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_488)
{
    // 10915 003F;	
    // (‎‎𐤕‎‎) PHOENICIAN LETTER TAU	[2348 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10915, 0x003F };
    uint32_t const ces[9] = { 0x2348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_489)
{
    // 10915 0061;	
    // (‎‎𐤕‎‎) PHOENICIAN LETTER TAU	[2348 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10915, 0x0061 };
    uint32_t const ces[9] = { 0x2348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_490)
{
    // 10915 0041;	
    // (‎‎𐤕‎‎) PHOENICIAN LETTER TAU	[2348 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10915, 0x0041 };
    uint32_t const ces[9] = { 0x2348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_491)
{
    // 10915 0062;	
    // (‎‎𐤕‎‎) PHOENICIAN LETTER TAU	[2348 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10915, 0x0062 };
    uint32_t const ces[9] = { 0x2348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_492)
{
    // 0800 0021;	
    // (‎‎ࠀ‎‎) SAMARITAN LETTER ALAF	[2349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0800, 0x0021 };
    uint32_t const ces[9] = { 0x2349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_493)
{
    // 0800 003F;	
    // (‎‎ࠀ‎‎) SAMARITAN LETTER ALAF	[2349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0800, 0x003F };
    uint32_t const ces[9] = { 0x2349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_494)
{
    // 0800 0061;	
    // (‎‎ࠀ‎‎) SAMARITAN LETTER ALAF	[2349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0800, 0x0061 };
    uint32_t const ces[9] = { 0x2349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_495)
{
    // 0800 0041;	
    // (‎‎ࠀ‎‎) SAMARITAN LETTER ALAF	[2349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0800, 0x0041 };
    uint32_t const ces[9] = { 0x2349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_496)
{
    // 0800 0062;	
    // (‎‎ࠀ‎‎) SAMARITAN LETTER ALAF	[2349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0800, 0x0062 };
    uint32_t const ces[9] = { 0x2349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_497)
{
    // 0801 0021;	
    // (‎‎ࠁ‎‎) SAMARITAN LETTER BIT	[234A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0801, 0x0021 };
    uint32_t const ces[9] = { 0x234A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_498)
{
    // 0801 003F;	
    // (‎‎ࠁ‎‎) SAMARITAN LETTER BIT	[234A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0801, 0x003F };
    uint32_t const ces[9] = { 0x234A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_146_499)
{
    // 0801 0061;	
    // (‎‎ࠁ‎‎) SAMARITAN LETTER BIT	[234A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0801, 0x0061 };
    uint32_t const ces[9] = { 0x234A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

