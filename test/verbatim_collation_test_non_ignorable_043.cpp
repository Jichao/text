// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_043_000)
{
    // 2861 003F;	
    // (⡡) BRAILLE PATTERN DOTS-167	[0E15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2861, 0x003F };
    uint32_t const ces[9] = { 0x0E15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_001)
{
    // 2861 0061;	
    // (⡡) BRAILLE PATTERN DOTS-167	[0E15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2861, 0x0061 };
    uint32_t const ces[9] = { 0x0E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_002)
{
    // 2861 0041;	
    // (⡡) BRAILLE PATTERN DOTS-167	[0E15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2861, 0x0041 };
    uint32_t const ces[9] = { 0x0E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_003)
{
    // 2861 0062;	
    // (⡡) BRAILLE PATTERN DOTS-167	[0E15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2861, 0x0062 };
    uint32_t const ces[9] = { 0x0E15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_004)
{
    // 2862 0021;	
    // (⡢) BRAILLE PATTERN DOTS-267	[0E16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2862, 0x0021 };
    uint32_t const ces[9] = { 0x0E16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_005)
{
    // 2862 003F;	
    // (⡢) BRAILLE PATTERN DOTS-267	[0E16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2862, 0x003F };
    uint32_t const ces[9] = { 0x0E16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_006)
{
    // 2862 0061;	
    // (⡢) BRAILLE PATTERN DOTS-267	[0E16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2862, 0x0061 };
    uint32_t const ces[9] = { 0x0E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_007)
{
    // 2862 0041;	
    // (⡢) BRAILLE PATTERN DOTS-267	[0E16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2862, 0x0041 };
    uint32_t const ces[9] = { 0x0E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_008)
{
    // 2862 0062;	
    // (⡢) BRAILLE PATTERN DOTS-267	[0E16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2862, 0x0062 };
    uint32_t const ces[9] = { 0x0E16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_009)
{
    // 2863 0021;	
    // (⡣) BRAILLE PATTERN DOTS-1267	[0E17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2863, 0x0021 };
    uint32_t const ces[9] = { 0x0E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_010)
{
    // 2863 003F;	
    // (⡣) BRAILLE PATTERN DOTS-1267	[0E17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2863, 0x003F };
    uint32_t const ces[9] = { 0x0E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_011)
{
    // 2863 0061;	
    // (⡣) BRAILLE PATTERN DOTS-1267	[0E17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2863, 0x0061 };
    uint32_t const ces[9] = { 0x0E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_012)
{
    // 2863 0041;	
    // (⡣) BRAILLE PATTERN DOTS-1267	[0E17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2863, 0x0041 };
    uint32_t const ces[9] = { 0x0E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_013)
{
    // 2863 0062;	
    // (⡣) BRAILLE PATTERN DOTS-1267	[0E17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2863, 0x0062 };
    uint32_t const ces[9] = { 0x0E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_014)
{
    // 2864 0021;	
    // (⡤) BRAILLE PATTERN DOTS-367	[0E18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2864, 0x0021 };
    uint32_t const ces[9] = { 0x0E18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_015)
{
    // 2864 003F;	
    // (⡤) BRAILLE PATTERN DOTS-367	[0E18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2864, 0x003F };
    uint32_t const ces[9] = { 0x0E18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_016)
{
    // 2864 0061;	
    // (⡤) BRAILLE PATTERN DOTS-367	[0E18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2864, 0x0061 };
    uint32_t const ces[9] = { 0x0E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_017)
{
    // 2864 0041;	
    // (⡤) BRAILLE PATTERN DOTS-367	[0E18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2864, 0x0041 };
    uint32_t const ces[9] = { 0x0E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_018)
{
    // 2864 0062;	
    // (⡤) BRAILLE PATTERN DOTS-367	[0E18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2864, 0x0062 };
    uint32_t const ces[9] = { 0x0E18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_019)
{
    // 2865 0021;	
    // (⡥) BRAILLE PATTERN DOTS-1367	[0E19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2865, 0x0021 };
    uint32_t const ces[9] = { 0x0E19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_020)
{
    // 2865 003F;	
    // (⡥) BRAILLE PATTERN DOTS-1367	[0E19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2865, 0x003F };
    uint32_t const ces[9] = { 0x0E19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_021)
{
    // 2865 0061;	
    // (⡥) BRAILLE PATTERN DOTS-1367	[0E19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2865, 0x0061 };
    uint32_t const ces[9] = { 0x0E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_022)
{
    // 2865 0041;	
    // (⡥) BRAILLE PATTERN DOTS-1367	[0E19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2865, 0x0041 };
    uint32_t const ces[9] = { 0x0E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_023)
{
    // 2865 0062;	
    // (⡥) BRAILLE PATTERN DOTS-1367	[0E19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2865, 0x0062 };
    uint32_t const ces[9] = { 0x0E19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_024)
{
    // 2866 0021;	
    // (⡦) BRAILLE PATTERN DOTS-2367	[0E1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2866, 0x0021 };
    uint32_t const ces[9] = { 0x0E1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_025)
{
    // 2866 003F;	
    // (⡦) BRAILLE PATTERN DOTS-2367	[0E1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2866, 0x003F };
    uint32_t const ces[9] = { 0x0E1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_026)
{
    // 2866 0061;	
    // (⡦) BRAILLE PATTERN DOTS-2367	[0E1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2866, 0x0061 };
    uint32_t const ces[9] = { 0x0E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_027)
{
    // 2866 0041;	
    // (⡦) BRAILLE PATTERN DOTS-2367	[0E1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2866, 0x0041 };
    uint32_t const ces[9] = { 0x0E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_028)
{
    // 2866 0062;	
    // (⡦) BRAILLE PATTERN DOTS-2367	[0E1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2866, 0x0062 };
    uint32_t const ces[9] = { 0x0E1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_029)
{
    // 2867 0021;	
    // (⡧) BRAILLE PATTERN DOTS-12367	[0E1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2867, 0x0021 };
    uint32_t const ces[9] = { 0x0E1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_030)
{
    // 2867 003F;	
    // (⡧) BRAILLE PATTERN DOTS-12367	[0E1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2867, 0x003F };
    uint32_t const ces[9] = { 0x0E1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_031)
{
    // 2867 0061;	
    // (⡧) BRAILLE PATTERN DOTS-12367	[0E1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2867, 0x0061 };
    uint32_t const ces[9] = { 0x0E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_032)
{
    // 2867 0041;	
    // (⡧) BRAILLE PATTERN DOTS-12367	[0E1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2867, 0x0041 };
    uint32_t const ces[9] = { 0x0E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_033)
{
    // 2867 0062;	
    // (⡧) BRAILLE PATTERN DOTS-12367	[0E1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2867, 0x0062 };
    uint32_t const ces[9] = { 0x0E1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_034)
{
    // 2868 0021;	
    // (⡨) BRAILLE PATTERN DOTS-467	[0E1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2868, 0x0021 };
    uint32_t const ces[9] = { 0x0E1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_035)
{
    // 2868 003F;	
    // (⡨) BRAILLE PATTERN DOTS-467	[0E1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2868, 0x003F };
    uint32_t const ces[9] = { 0x0E1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_036)
{
    // 2868 0061;	
    // (⡨) BRAILLE PATTERN DOTS-467	[0E1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2868, 0x0061 };
    uint32_t const ces[9] = { 0x0E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_037)
{
    // 2868 0041;	
    // (⡨) BRAILLE PATTERN DOTS-467	[0E1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2868, 0x0041 };
    uint32_t const ces[9] = { 0x0E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_038)
{
    // 2868 0062;	
    // (⡨) BRAILLE PATTERN DOTS-467	[0E1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2868, 0x0062 };
    uint32_t const ces[9] = { 0x0E1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_039)
{
    // 2869 0021;	
    // (⡩) BRAILLE PATTERN DOTS-1467	[0E1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2869, 0x0021 };
    uint32_t const ces[9] = { 0x0E1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_040)
{
    // 2869 003F;	
    // (⡩) BRAILLE PATTERN DOTS-1467	[0E1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2869, 0x003F };
    uint32_t const ces[9] = { 0x0E1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_041)
{
    // 2869 0061;	
    // (⡩) BRAILLE PATTERN DOTS-1467	[0E1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2869, 0x0061 };
    uint32_t const ces[9] = { 0x0E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_042)
{
    // 2869 0041;	
    // (⡩) BRAILLE PATTERN DOTS-1467	[0E1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2869, 0x0041 };
    uint32_t const ces[9] = { 0x0E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_043)
{
    // 2869 0062;	
    // (⡩) BRAILLE PATTERN DOTS-1467	[0E1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2869, 0x0062 };
    uint32_t const ces[9] = { 0x0E1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_044)
{
    // 286A 0021;	
    // (⡪) BRAILLE PATTERN DOTS-2467	[0E1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286A, 0x0021 };
    uint32_t const ces[9] = { 0x0E1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_045)
{
    // 286A 003F;	
    // (⡪) BRAILLE PATTERN DOTS-2467	[0E1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286A, 0x003F };
    uint32_t const ces[9] = { 0x0E1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_046)
{
    // 286A 0061;	
    // (⡪) BRAILLE PATTERN DOTS-2467	[0E1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286A, 0x0061 };
    uint32_t const ces[9] = { 0x0E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_047)
{
    // 286A 0041;	
    // (⡪) BRAILLE PATTERN DOTS-2467	[0E1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286A, 0x0041 };
    uint32_t const ces[9] = { 0x0E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_048)
{
    // 286A 0062;	
    // (⡪) BRAILLE PATTERN DOTS-2467	[0E1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286A, 0x0062 };
    uint32_t const ces[9] = { 0x0E1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_049)
{
    // 286B 0021;	
    // (⡫) BRAILLE PATTERN DOTS-12467	[0E1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286B, 0x0021 };
    uint32_t const ces[9] = { 0x0E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_050)
{
    // 286B 003F;	
    // (⡫) BRAILLE PATTERN DOTS-12467	[0E1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286B, 0x003F };
    uint32_t const ces[9] = { 0x0E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_051)
{
    // 286B 0061;	
    // (⡫) BRAILLE PATTERN DOTS-12467	[0E1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286B, 0x0061 };
    uint32_t const ces[9] = { 0x0E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_052)
{
    // 286B 0041;	
    // (⡫) BRAILLE PATTERN DOTS-12467	[0E1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286B, 0x0041 };
    uint32_t const ces[9] = { 0x0E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_053)
{
    // 286B 0062;	
    // (⡫) BRAILLE PATTERN DOTS-12467	[0E1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286B, 0x0062 };
    uint32_t const ces[9] = { 0x0E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_054)
{
    // 286C 0021;	
    // (⡬) BRAILLE PATTERN DOTS-3467	[0E20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286C, 0x0021 };
    uint32_t const ces[9] = { 0x0E20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_055)
{
    // 286C 003F;	
    // (⡬) BRAILLE PATTERN DOTS-3467	[0E20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286C, 0x003F };
    uint32_t const ces[9] = { 0x0E20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_056)
{
    // 286C 0061;	
    // (⡬) BRAILLE PATTERN DOTS-3467	[0E20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286C, 0x0061 };
    uint32_t const ces[9] = { 0x0E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_057)
{
    // 286C 0041;	
    // (⡬) BRAILLE PATTERN DOTS-3467	[0E20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286C, 0x0041 };
    uint32_t const ces[9] = { 0x0E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_058)
{
    // 286C 0062;	
    // (⡬) BRAILLE PATTERN DOTS-3467	[0E20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286C, 0x0062 };
    uint32_t const ces[9] = { 0x0E20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_059)
{
    // 286D 0021;	
    // (⡭) BRAILLE PATTERN DOTS-13467	[0E21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286D, 0x0021 };
    uint32_t const ces[9] = { 0x0E21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_060)
{
    // 286D 003F;	
    // (⡭) BRAILLE PATTERN DOTS-13467	[0E21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286D, 0x003F };
    uint32_t const ces[9] = { 0x0E21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_061)
{
    // 286D 0061;	
    // (⡭) BRAILLE PATTERN DOTS-13467	[0E21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286D, 0x0061 };
    uint32_t const ces[9] = { 0x0E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_062)
{
    // 286D 0041;	
    // (⡭) BRAILLE PATTERN DOTS-13467	[0E21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286D, 0x0041 };
    uint32_t const ces[9] = { 0x0E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_063)
{
    // 286D 0062;	
    // (⡭) BRAILLE PATTERN DOTS-13467	[0E21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286D, 0x0062 };
    uint32_t const ces[9] = { 0x0E21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_064)
{
    // 286E 0021;	
    // (⡮) BRAILLE PATTERN DOTS-23467	[0E22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286E, 0x0021 };
    uint32_t const ces[9] = { 0x0E22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_065)
{
    // 286E 003F;	
    // (⡮) BRAILLE PATTERN DOTS-23467	[0E22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286E, 0x003F };
    uint32_t const ces[9] = { 0x0E22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_066)
{
    // 286E 0061;	
    // (⡮) BRAILLE PATTERN DOTS-23467	[0E22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286E, 0x0061 };
    uint32_t const ces[9] = { 0x0E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_067)
{
    // 286E 0041;	
    // (⡮) BRAILLE PATTERN DOTS-23467	[0E22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286E, 0x0041 };
    uint32_t const ces[9] = { 0x0E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_068)
{
    // 286E 0062;	
    // (⡮) BRAILLE PATTERN DOTS-23467	[0E22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286E, 0x0062 };
    uint32_t const ces[9] = { 0x0E22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_069)
{
    // 286F 0021;	
    // (⡯) BRAILLE PATTERN DOTS-123467	[0E23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286F, 0x0021 };
    uint32_t const ces[9] = { 0x0E23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_070)
{
    // 286F 003F;	
    // (⡯) BRAILLE PATTERN DOTS-123467	[0E23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286F, 0x003F };
    uint32_t const ces[9] = { 0x0E23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_071)
{
    // 286F 0061;	
    // (⡯) BRAILLE PATTERN DOTS-123467	[0E23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286F, 0x0061 };
    uint32_t const ces[9] = { 0x0E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_072)
{
    // 286F 0041;	
    // (⡯) BRAILLE PATTERN DOTS-123467	[0E23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x286F, 0x0041 };
    uint32_t const ces[9] = { 0x0E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_073)
{
    // 286F 0062;	
    // (⡯) BRAILLE PATTERN DOTS-123467	[0E23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x286F, 0x0062 };
    uint32_t const ces[9] = { 0x0E23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_074)
{
    // 2870 0021;	
    // (⡰) BRAILLE PATTERN DOTS-567	[0E24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2870, 0x0021 };
    uint32_t const ces[9] = { 0x0E24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_075)
{
    // 2870 003F;	
    // (⡰) BRAILLE PATTERN DOTS-567	[0E24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2870, 0x003F };
    uint32_t const ces[9] = { 0x0E24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_076)
{
    // 2870 0061;	
    // (⡰) BRAILLE PATTERN DOTS-567	[0E24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2870, 0x0061 };
    uint32_t const ces[9] = { 0x0E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_077)
{
    // 2870 0041;	
    // (⡰) BRAILLE PATTERN DOTS-567	[0E24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2870, 0x0041 };
    uint32_t const ces[9] = { 0x0E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_078)
{
    // 2870 0062;	
    // (⡰) BRAILLE PATTERN DOTS-567	[0E24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2870, 0x0062 };
    uint32_t const ces[9] = { 0x0E24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_079)
{
    // 2871 0021;	
    // (⡱) BRAILLE PATTERN DOTS-1567	[0E25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2871, 0x0021 };
    uint32_t const ces[9] = { 0x0E25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_080)
{
    // 2871 003F;	
    // (⡱) BRAILLE PATTERN DOTS-1567	[0E25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2871, 0x003F };
    uint32_t const ces[9] = { 0x0E25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_081)
{
    // 2871 0061;	
    // (⡱) BRAILLE PATTERN DOTS-1567	[0E25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2871, 0x0061 };
    uint32_t const ces[9] = { 0x0E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_082)
{
    // 2871 0041;	
    // (⡱) BRAILLE PATTERN DOTS-1567	[0E25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2871, 0x0041 };
    uint32_t const ces[9] = { 0x0E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_083)
{
    // 2871 0062;	
    // (⡱) BRAILLE PATTERN DOTS-1567	[0E25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2871, 0x0062 };
    uint32_t const ces[9] = { 0x0E25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_084)
{
    // 2872 0021;	
    // (⡲) BRAILLE PATTERN DOTS-2567	[0E26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2872, 0x0021 };
    uint32_t const ces[9] = { 0x0E26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_085)
{
    // 2872 003F;	
    // (⡲) BRAILLE PATTERN DOTS-2567	[0E26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2872, 0x003F };
    uint32_t const ces[9] = { 0x0E26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_086)
{
    // 2872 0061;	
    // (⡲) BRAILLE PATTERN DOTS-2567	[0E26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2872, 0x0061 };
    uint32_t const ces[9] = { 0x0E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_087)
{
    // 2872 0041;	
    // (⡲) BRAILLE PATTERN DOTS-2567	[0E26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2872, 0x0041 };
    uint32_t const ces[9] = { 0x0E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_088)
{
    // 2872 0062;	
    // (⡲) BRAILLE PATTERN DOTS-2567	[0E26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2872, 0x0062 };
    uint32_t const ces[9] = { 0x0E26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_089)
{
    // 2873 0021;	
    // (⡳) BRAILLE PATTERN DOTS-12567	[0E27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2873, 0x0021 };
    uint32_t const ces[9] = { 0x0E27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_090)
{
    // 2873 003F;	
    // (⡳) BRAILLE PATTERN DOTS-12567	[0E27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2873, 0x003F };
    uint32_t const ces[9] = { 0x0E27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_091)
{
    // 2873 0061;	
    // (⡳) BRAILLE PATTERN DOTS-12567	[0E27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2873, 0x0061 };
    uint32_t const ces[9] = { 0x0E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_092)
{
    // 2873 0041;	
    // (⡳) BRAILLE PATTERN DOTS-12567	[0E27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2873, 0x0041 };
    uint32_t const ces[9] = { 0x0E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_093)
{
    // 2873 0062;	
    // (⡳) BRAILLE PATTERN DOTS-12567	[0E27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2873, 0x0062 };
    uint32_t const ces[9] = { 0x0E27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_094)
{
    // 2874 0021;	
    // (⡴) BRAILLE PATTERN DOTS-3567	[0E28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2874, 0x0021 };
    uint32_t const ces[9] = { 0x0E28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_095)
{
    // 2874 003F;	
    // (⡴) BRAILLE PATTERN DOTS-3567	[0E28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2874, 0x003F };
    uint32_t const ces[9] = { 0x0E28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_096)
{
    // 2874 0061;	
    // (⡴) BRAILLE PATTERN DOTS-3567	[0E28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2874, 0x0061 };
    uint32_t const ces[9] = { 0x0E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_097)
{
    // 2874 0041;	
    // (⡴) BRAILLE PATTERN DOTS-3567	[0E28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2874, 0x0041 };
    uint32_t const ces[9] = { 0x0E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_098)
{
    // 2874 0062;	
    // (⡴) BRAILLE PATTERN DOTS-3567	[0E28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2874, 0x0062 };
    uint32_t const ces[9] = { 0x0E28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_099)
{
    // 2875 0021;	
    // (⡵) BRAILLE PATTERN DOTS-13567	[0E29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2875, 0x0021 };
    uint32_t const ces[9] = { 0x0E29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_100)
{
    // 2875 003F;	
    // (⡵) BRAILLE PATTERN DOTS-13567	[0E29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2875, 0x003F };
    uint32_t const ces[9] = { 0x0E29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_101)
{
    // 2875 0061;	
    // (⡵) BRAILLE PATTERN DOTS-13567	[0E29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2875, 0x0061 };
    uint32_t const ces[9] = { 0x0E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_102)
{
    // 2875 0041;	
    // (⡵) BRAILLE PATTERN DOTS-13567	[0E29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2875, 0x0041 };
    uint32_t const ces[9] = { 0x0E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_103)
{
    // 2875 0062;	
    // (⡵) BRAILLE PATTERN DOTS-13567	[0E29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2875, 0x0062 };
    uint32_t const ces[9] = { 0x0E29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_104)
{
    // 2876 0021;	
    // (⡶) BRAILLE PATTERN DOTS-23567	[0E2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2876, 0x0021 };
    uint32_t const ces[9] = { 0x0E2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_105)
{
    // 2876 003F;	
    // (⡶) BRAILLE PATTERN DOTS-23567	[0E2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2876, 0x003F };
    uint32_t const ces[9] = { 0x0E2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_106)
{
    // 2876 0061;	
    // (⡶) BRAILLE PATTERN DOTS-23567	[0E2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2876, 0x0061 };
    uint32_t const ces[9] = { 0x0E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_107)
{
    // 2876 0041;	
    // (⡶) BRAILLE PATTERN DOTS-23567	[0E2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2876, 0x0041 };
    uint32_t const ces[9] = { 0x0E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_108)
{
    // 2876 0062;	
    // (⡶) BRAILLE PATTERN DOTS-23567	[0E2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2876, 0x0062 };
    uint32_t const ces[9] = { 0x0E2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_109)
{
    // 2877 0021;	
    // (⡷) BRAILLE PATTERN DOTS-123567	[0E2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2877, 0x0021 };
    uint32_t const ces[9] = { 0x0E2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_110)
{
    // 2877 003F;	
    // (⡷) BRAILLE PATTERN DOTS-123567	[0E2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2877, 0x003F };
    uint32_t const ces[9] = { 0x0E2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_111)
{
    // 2877 0061;	
    // (⡷) BRAILLE PATTERN DOTS-123567	[0E2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2877, 0x0061 };
    uint32_t const ces[9] = { 0x0E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_112)
{
    // 2877 0041;	
    // (⡷) BRAILLE PATTERN DOTS-123567	[0E2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2877, 0x0041 };
    uint32_t const ces[9] = { 0x0E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_113)
{
    // 2877 0062;	
    // (⡷) BRAILLE PATTERN DOTS-123567	[0E2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2877, 0x0062 };
    uint32_t const ces[9] = { 0x0E2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_114)
{
    // 2878 0021;	
    // (⡸) BRAILLE PATTERN DOTS-4567	[0E2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2878, 0x0021 };
    uint32_t const ces[9] = { 0x0E2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_115)
{
    // 2878 003F;	
    // (⡸) BRAILLE PATTERN DOTS-4567	[0E2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2878, 0x003F };
    uint32_t const ces[9] = { 0x0E2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_116)
{
    // 2878 0061;	
    // (⡸) BRAILLE PATTERN DOTS-4567	[0E2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2878, 0x0061 };
    uint32_t const ces[9] = { 0x0E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_117)
{
    // 2878 0041;	
    // (⡸) BRAILLE PATTERN DOTS-4567	[0E2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2878, 0x0041 };
    uint32_t const ces[9] = { 0x0E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_118)
{
    // 2878 0062;	
    // (⡸) BRAILLE PATTERN DOTS-4567	[0E2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2878, 0x0062 };
    uint32_t const ces[9] = { 0x0E2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_119)
{
    // 2879 0021;	
    // (⡹) BRAILLE PATTERN DOTS-14567	[0E2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2879, 0x0021 };
    uint32_t const ces[9] = { 0x0E2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_120)
{
    // 2879 003F;	
    // (⡹) BRAILLE PATTERN DOTS-14567	[0E2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2879, 0x003F };
    uint32_t const ces[9] = { 0x0E2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_121)
{
    // 2879 0061;	
    // (⡹) BRAILLE PATTERN DOTS-14567	[0E2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2879, 0x0061 };
    uint32_t const ces[9] = { 0x0E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_122)
{
    // 2879 0041;	
    // (⡹) BRAILLE PATTERN DOTS-14567	[0E2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2879, 0x0041 };
    uint32_t const ces[9] = { 0x0E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_123)
{
    // 2879 0062;	
    // (⡹) BRAILLE PATTERN DOTS-14567	[0E2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2879, 0x0062 };
    uint32_t const ces[9] = { 0x0E2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_124)
{
    // 287A 0021;	
    // (⡺) BRAILLE PATTERN DOTS-24567	[0E2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287A, 0x0021 };
    uint32_t const ces[9] = { 0x0E2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_125)
{
    // 287A 003F;	
    // (⡺) BRAILLE PATTERN DOTS-24567	[0E2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287A, 0x003F };
    uint32_t const ces[9] = { 0x0E2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_126)
{
    // 287A 0061;	
    // (⡺) BRAILLE PATTERN DOTS-24567	[0E2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287A, 0x0061 };
    uint32_t const ces[9] = { 0x0E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_127)
{
    // 287A 0041;	
    // (⡺) BRAILLE PATTERN DOTS-24567	[0E2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287A, 0x0041 };
    uint32_t const ces[9] = { 0x0E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_128)
{
    // 287A 0062;	
    // (⡺) BRAILLE PATTERN DOTS-24567	[0E2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287A, 0x0062 };
    uint32_t const ces[9] = { 0x0E2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_129)
{
    // 287B 0021;	
    // (⡻) BRAILLE PATTERN DOTS-124567	[0E2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287B, 0x0021 };
    uint32_t const ces[9] = { 0x0E2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_130)
{
    // 287B 003F;	
    // (⡻) BRAILLE PATTERN DOTS-124567	[0E2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287B, 0x003F };
    uint32_t const ces[9] = { 0x0E2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_131)
{
    // 287B 0061;	
    // (⡻) BRAILLE PATTERN DOTS-124567	[0E2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287B, 0x0061 };
    uint32_t const ces[9] = { 0x0E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_132)
{
    // 287B 0041;	
    // (⡻) BRAILLE PATTERN DOTS-124567	[0E2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287B, 0x0041 };
    uint32_t const ces[9] = { 0x0E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_133)
{
    // 287B 0062;	
    // (⡻) BRAILLE PATTERN DOTS-124567	[0E2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287B, 0x0062 };
    uint32_t const ces[9] = { 0x0E2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_134)
{
    // 287C 0021;	
    // (⡼) BRAILLE PATTERN DOTS-34567	[0E30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287C, 0x0021 };
    uint32_t const ces[9] = { 0x0E30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_135)
{
    // 287C 003F;	
    // (⡼) BRAILLE PATTERN DOTS-34567	[0E30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287C, 0x003F };
    uint32_t const ces[9] = { 0x0E30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_136)
{
    // 287C 0061;	
    // (⡼) BRAILLE PATTERN DOTS-34567	[0E30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287C, 0x0061 };
    uint32_t const ces[9] = { 0x0E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_137)
{
    // 287C 0041;	
    // (⡼) BRAILLE PATTERN DOTS-34567	[0E30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287C, 0x0041 };
    uint32_t const ces[9] = { 0x0E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_138)
{
    // 287C 0062;	
    // (⡼) BRAILLE PATTERN DOTS-34567	[0E30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287C, 0x0062 };
    uint32_t const ces[9] = { 0x0E30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_139)
{
    // 287D 0021;	
    // (⡽) BRAILLE PATTERN DOTS-134567	[0E31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287D, 0x0021 };
    uint32_t const ces[9] = { 0x0E31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_140)
{
    // 287D 003F;	
    // (⡽) BRAILLE PATTERN DOTS-134567	[0E31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287D, 0x003F };
    uint32_t const ces[9] = { 0x0E31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_141)
{
    // 287D 0061;	
    // (⡽) BRAILLE PATTERN DOTS-134567	[0E31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287D, 0x0061 };
    uint32_t const ces[9] = { 0x0E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_142)
{
    // 287D 0041;	
    // (⡽) BRAILLE PATTERN DOTS-134567	[0E31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287D, 0x0041 };
    uint32_t const ces[9] = { 0x0E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_143)
{
    // 287D 0062;	
    // (⡽) BRAILLE PATTERN DOTS-134567	[0E31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287D, 0x0062 };
    uint32_t const ces[9] = { 0x0E31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_144)
{
    // 287E 0021;	
    // (⡾) BRAILLE PATTERN DOTS-234567	[0E32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287E, 0x0021 };
    uint32_t const ces[9] = { 0x0E32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_145)
{
    // 287E 003F;	
    // (⡾) BRAILLE PATTERN DOTS-234567	[0E32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287E, 0x003F };
    uint32_t const ces[9] = { 0x0E32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_146)
{
    // 287E 0061;	
    // (⡾) BRAILLE PATTERN DOTS-234567	[0E32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287E, 0x0061 };
    uint32_t const ces[9] = { 0x0E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_147)
{
    // 287E 0041;	
    // (⡾) BRAILLE PATTERN DOTS-234567	[0E32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287E, 0x0041 };
    uint32_t const ces[9] = { 0x0E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_148)
{
    // 287E 0062;	
    // (⡾) BRAILLE PATTERN DOTS-234567	[0E32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287E, 0x0062 };
    uint32_t const ces[9] = { 0x0E32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_149)
{
    // 287F 0021;	
    // (⡿) BRAILLE PATTERN DOTS-1234567	[0E33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287F, 0x0021 };
    uint32_t const ces[9] = { 0x0E33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_150)
{
    // 287F 003F;	
    // (⡿) BRAILLE PATTERN DOTS-1234567	[0E33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287F, 0x003F };
    uint32_t const ces[9] = { 0x0E33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_151)
{
    // 287F 0061;	
    // (⡿) BRAILLE PATTERN DOTS-1234567	[0E33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287F, 0x0061 };
    uint32_t const ces[9] = { 0x0E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_152)
{
    // 287F 0041;	
    // (⡿) BRAILLE PATTERN DOTS-1234567	[0E33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x287F, 0x0041 };
    uint32_t const ces[9] = { 0x0E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_153)
{
    // 287F 0062;	
    // (⡿) BRAILLE PATTERN DOTS-1234567	[0E33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x287F, 0x0062 };
    uint32_t const ces[9] = { 0x0E33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_154)
{
    // 2880 0021;	
    // (⢀) BRAILLE PATTERN DOTS-8	[0E34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2880, 0x0021 };
    uint32_t const ces[9] = { 0x0E34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_155)
{
    // 2880 003F;	
    // (⢀) BRAILLE PATTERN DOTS-8	[0E34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2880, 0x003F };
    uint32_t const ces[9] = { 0x0E34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_156)
{
    // 2880 0061;	
    // (⢀) BRAILLE PATTERN DOTS-8	[0E34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2880, 0x0061 };
    uint32_t const ces[9] = { 0x0E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_157)
{
    // 2880 0041;	
    // (⢀) BRAILLE PATTERN DOTS-8	[0E34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2880, 0x0041 };
    uint32_t const ces[9] = { 0x0E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_158)
{
    // 2880 0062;	
    // (⢀) BRAILLE PATTERN DOTS-8	[0E34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2880, 0x0062 };
    uint32_t const ces[9] = { 0x0E34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_159)
{
    // 2881 0021;	
    // (⢁) BRAILLE PATTERN DOTS-18	[0E35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2881, 0x0021 };
    uint32_t const ces[9] = { 0x0E35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_160)
{
    // 2881 003F;	
    // (⢁) BRAILLE PATTERN DOTS-18	[0E35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2881, 0x003F };
    uint32_t const ces[9] = { 0x0E35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_161)
{
    // 2881 0061;	
    // (⢁) BRAILLE PATTERN DOTS-18	[0E35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2881, 0x0061 };
    uint32_t const ces[9] = { 0x0E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_162)
{
    // 2881 0041;	
    // (⢁) BRAILLE PATTERN DOTS-18	[0E35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2881, 0x0041 };
    uint32_t const ces[9] = { 0x0E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_163)
{
    // 2881 0062;	
    // (⢁) BRAILLE PATTERN DOTS-18	[0E35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2881, 0x0062 };
    uint32_t const ces[9] = { 0x0E35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_164)
{
    // 2882 0021;	
    // (⢂) BRAILLE PATTERN DOTS-28	[0E36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2882, 0x0021 };
    uint32_t const ces[9] = { 0x0E36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_165)
{
    // 2882 003F;	
    // (⢂) BRAILLE PATTERN DOTS-28	[0E36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2882, 0x003F };
    uint32_t const ces[9] = { 0x0E36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_166)
{
    // 2882 0061;	
    // (⢂) BRAILLE PATTERN DOTS-28	[0E36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2882, 0x0061 };
    uint32_t const ces[9] = { 0x0E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_167)
{
    // 2882 0041;	
    // (⢂) BRAILLE PATTERN DOTS-28	[0E36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2882, 0x0041 };
    uint32_t const ces[9] = { 0x0E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_168)
{
    // 2882 0062;	
    // (⢂) BRAILLE PATTERN DOTS-28	[0E36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2882, 0x0062 };
    uint32_t const ces[9] = { 0x0E36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_169)
{
    // 2883 0021;	
    // (⢃) BRAILLE PATTERN DOTS-128	[0E37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2883, 0x0021 };
    uint32_t const ces[9] = { 0x0E37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_170)
{
    // 2883 003F;	
    // (⢃) BRAILLE PATTERN DOTS-128	[0E37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2883, 0x003F };
    uint32_t const ces[9] = { 0x0E37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_171)
{
    // 2883 0061;	
    // (⢃) BRAILLE PATTERN DOTS-128	[0E37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2883, 0x0061 };
    uint32_t const ces[9] = { 0x0E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_172)
{
    // 2883 0041;	
    // (⢃) BRAILLE PATTERN DOTS-128	[0E37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2883, 0x0041 };
    uint32_t const ces[9] = { 0x0E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_173)
{
    // 2883 0062;	
    // (⢃) BRAILLE PATTERN DOTS-128	[0E37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2883, 0x0062 };
    uint32_t const ces[9] = { 0x0E37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_174)
{
    // 2884 0021;	
    // (⢄) BRAILLE PATTERN DOTS-38	[0E38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2884, 0x0021 };
    uint32_t const ces[9] = { 0x0E38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_175)
{
    // 2884 003F;	
    // (⢄) BRAILLE PATTERN DOTS-38	[0E38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2884, 0x003F };
    uint32_t const ces[9] = { 0x0E38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_176)
{
    // 2884 0061;	
    // (⢄) BRAILLE PATTERN DOTS-38	[0E38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2884, 0x0061 };
    uint32_t const ces[9] = { 0x0E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_177)
{
    // 2884 0041;	
    // (⢄) BRAILLE PATTERN DOTS-38	[0E38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2884, 0x0041 };
    uint32_t const ces[9] = { 0x0E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_178)
{
    // 2884 0062;	
    // (⢄) BRAILLE PATTERN DOTS-38	[0E38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2884, 0x0062 };
    uint32_t const ces[9] = { 0x0E38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_179)
{
    // 2885 0021;	
    // (⢅) BRAILLE PATTERN DOTS-138	[0E39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2885, 0x0021 };
    uint32_t const ces[9] = { 0x0E39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_180)
{
    // 2885 003F;	
    // (⢅) BRAILLE PATTERN DOTS-138	[0E39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2885, 0x003F };
    uint32_t const ces[9] = { 0x0E39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_181)
{
    // 2885 0061;	
    // (⢅) BRAILLE PATTERN DOTS-138	[0E39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2885, 0x0061 };
    uint32_t const ces[9] = { 0x0E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_182)
{
    // 2885 0041;	
    // (⢅) BRAILLE PATTERN DOTS-138	[0E39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2885, 0x0041 };
    uint32_t const ces[9] = { 0x0E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_183)
{
    // 2885 0062;	
    // (⢅) BRAILLE PATTERN DOTS-138	[0E39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2885, 0x0062 };
    uint32_t const ces[9] = { 0x0E39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_184)
{
    // 2886 0021;	
    // (⢆) BRAILLE PATTERN DOTS-238	[0E3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2886, 0x0021 };
    uint32_t const ces[9] = { 0x0E3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_185)
{
    // 2886 003F;	
    // (⢆) BRAILLE PATTERN DOTS-238	[0E3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2886, 0x003F };
    uint32_t const ces[9] = { 0x0E3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_186)
{
    // 2886 0061;	
    // (⢆) BRAILLE PATTERN DOTS-238	[0E3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2886, 0x0061 };
    uint32_t const ces[9] = { 0x0E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_187)
{
    // 2886 0041;	
    // (⢆) BRAILLE PATTERN DOTS-238	[0E3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2886, 0x0041 };
    uint32_t const ces[9] = { 0x0E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_188)
{
    // 2886 0062;	
    // (⢆) BRAILLE PATTERN DOTS-238	[0E3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2886, 0x0062 };
    uint32_t const ces[9] = { 0x0E3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_189)
{
    // 2887 0021;	
    // (⢇) BRAILLE PATTERN DOTS-1238	[0E3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2887, 0x0021 };
    uint32_t const ces[9] = { 0x0E3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_190)
{
    // 2887 003F;	
    // (⢇) BRAILLE PATTERN DOTS-1238	[0E3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2887, 0x003F };
    uint32_t const ces[9] = { 0x0E3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_191)
{
    // 2887 0061;	
    // (⢇) BRAILLE PATTERN DOTS-1238	[0E3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2887, 0x0061 };
    uint32_t const ces[9] = { 0x0E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_192)
{
    // 2887 0041;	
    // (⢇) BRAILLE PATTERN DOTS-1238	[0E3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2887, 0x0041 };
    uint32_t const ces[9] = { 0x0E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_193)
{
    // 2887 0062;	
    // (⢇) BRAILLE PATTERN DOTS-1238	[0E3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2887, 0x0062 };
    uint32_t const ces[9] = { 0x0E3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_194)
{
    // 2888 0021;	
    // (⢈) BRAILLE PATTERN DOTS-48	[0E3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2888, 0x0021 };
    uint32_t const ces[9] = { 0x0E3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_195)
{
    // 2888 003F;	
    // (⢈) BRAILLE PATTERN DOTS-48	[0E3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2888, 0x003F };
    uint32_t const ces[9] = { 0x0E3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_196)
{
    // 2888 0061;	
    // (⢈) BRAILLE PATTERN DOTS-48	[0E3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2888, 0x0061 };
    uint32_t const ces[9] = { 0x0E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_197)
{
    // 2888 0041;	
    // (⢈) BRAILLE PATTERN DOTS-48	[0E3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2888, 0x0041 };
    uint32_t const ces[9] = { 0x0E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_198)
{
    // 2888 0062;	
    // (⢈) BRAILLE PATTERN DOTS-48	[0E3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2888, 0x0062 };
    uint32_t const ces[9] = { 0x0E3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_199)
{
    // 2889 0021;	
    // (⢉) BRAILLE PATTERN DOTS-148	[0E3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2889, 0x0021 };
    uint32_t const ces[9] = { 0x0E3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_200)
{
    // 2889 003F;	
    // (⢉) BRAILLE PATTERN DOTS-148	[0E3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2889, 0x003F };
    uint32_t const ces[9] = { 0x0E3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_201)
{
    // 2889 0061;	
    // (⢉) BRAILLE PATTERN DOTS-148	[0E3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2889, 0x0061 };
    uint32_t const ces[9] = { 0x0E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_202)
{
    // 2889 0041;	
    // (⢉) BRAILLE PATTERN DOTS-148	[0E3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2889, 0x0041 };
    uint32_t const ces[9] = { 0x0E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_203)
{
    // 2889 0062;	
    // (⢉) BRAILLE PATTERN DOTS-148	[0E3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2889, 0x0062 };
    uint32_t const ces[9] = { 0x0E3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_204)
{
    // 288A 0021;	
    // (⢊) BRAILLE PATTERN DOTS-248	[0E3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288A, 0x0021 };
    uint32_t const ces[9] = { 0x0E3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_205)
{
    // 288A 003F;	
    // (⢊) BRAILLE PATTERN DOTS-248	[0E3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288A, 0x003F };
    uint32_t const ces[9] = { 0x0E3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_206)
{
    // 288A 0061;	
    // (⢊) BRAILLE PATTERN DOTS-248	[0E3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288A, 0x0061 };
    uint32_t const ces[9] = { 0x0E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_207)
{
    // 288A 0041;	
    // (⢊) BRAILLE PATTERN DOTS-248	[0E3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288A, 0x0041 };
    uint32_t const ces[9] = { 0x0E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_208)
{
    // 288A 0062;	
    // (⢊) BRAILLE PATTERN DOTS-248	[0E3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288A, 0x0062 };
    uint32_t const ces[9] = { 0x0E3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_209)
{
    // 288B 0021;	
    // (⢋) BRAILLE PATTERN DOTS-1248	[0E3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288B, 0x0021 };
    uint32_t const ces[9] = { 0x0E3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_210)
{
    // 288B 003F;	
    // (⢋) BRAILLE PATTERN DOTS-1248	[0E3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288B, 0x003F };
    uint32_t const ces[9] = { 0x0E3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_211)
{
    // 288B 0061;	
    // (⢋) BRAILLE PATTERN DOTS-1248	[0E3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288B, 0x0061 };
    uint32_t const ces[9] = { 0x0E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_212)
{
    // 288B 0041;	
    // (⢋) BRAILLE PATTERN DOTS-1248	[0E3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288B, 0x0041 };
    uint32_t const ces[9] = { 0x0E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_213)
{
    // 288B 0062;	
    // (⢋) BRAILLE PATTERN DOTS-1248	[0E3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288B, 0x0062 };
    uint32_t const ces[9] = { 0x0E3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_214)
{
    // 288C 0021;	
    // (⢌) BRAILLE PATTERN DOTS-348	[0E40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288C, 0x0021 };
    uint32_t const ces[9] = { 0x0E40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_215)
{
    // 288C 003F;	
    // (⢌) BRAILLE PATTERN DOTS-348	[0E40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288C, 0x003F };
    uint32_t const ces[9] = { 0x0E40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_216)
{
    // 288C 0061;	
    // (⢌) BRAILLE PATTERN DOTS-348	[0E40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288C, 0x0061 };
    uint32_t const ces[9] = { 0x0E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_217)
{
    // 288C 0041;	
    // (⢌) BRAILLE PATTERN DOTS-348	[0E40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288C, 0x0041 };
    uint32_t const ces[9] = { 0x0E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_218)
{
    // 288C 0062;	
    // (⢌) BRAILLE PATTERN DOTS-348	[0E40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288C, 0x0062 };
    uint32_t const ces[9] = { 0x0E40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_219)
{
    // 288D 0021;	
    // (⢍) BRAILLE PATTERN DOTS-1348	[0E41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288D, 0x0021 };
    uint32_t const ces[9] = { 0x0E41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_220)
{
    // 288D 003F;	
    // (⢍) BRAILLE PATTERN DOTS-1348	[0E41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288D, 0x003F };
    uint32_t const ces[9] = { 0x0E41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_221)
{
    // 288D 0061;	
    // (⢍) BRAILLE PATTERN DOTS-1348	[0E41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288D, 0x0061 };
    uint32_t const ces[9] = { 0x0E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_222)
{
    // 288D 0041;	
    // (⢍) BRAILLE PATTERN DOTS-1348	[0E41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288D, 0x0041 };
    uint32_t const ces[9] = { 0x0E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_223)
{
    // 288D 0062;	
    // (⢍) BRAILLE PATTERN DOTS-1348	[0E41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288D, 0x0062 };
    uint32_t const ces[9] = { 0x0E41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_224)
{
    // 288E 0021;	
    // (⢎) BRAILLE PATTERN DOTS-2348	[0E42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288E, 0x0021 };
    uint32_t const ces[9] = { 0x0E42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_225)
{
    // 288E 003F;	
    // (⢎) BRAILLE PATTERN DOTS-2348	[0E42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288E, 0x003F };
    uint32_t const ces[9] = { 0x0E42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_226)
{
    // 288E 0061;	
    // (⢎) BRAILLE PATTERN DOTS-2348	[0E42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288E, 0x0061 };
    uint32_t const ces[9] = { 0x0E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_227)
{
    // 288E 0041;	
    // (⢎) BRAILLE PATTERN DOTS-2348	[0E42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288E, 0x0041 };
    uint32_t const ces[9] = { 0x0E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_228)
{
    // 288E 0062;	
    // (⢎) BRAILLE PATTERN DOTS-2348	[0E42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288E, 0x0062 };
    uint32_t const ces[9] = { 0x0E42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_229)
{
    // 288F 0021;	
    // (⢏) BRAILLE PATTERN DOTS-12348	[0E43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288F, 0x0021 };
    uint32_t const ces[9] = { 0x0E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_230)
{
    // 288F 003F;	
    // (⢏) BRAILLE PATTERN DOTS-12348	[0E43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288F, 0x003F };
    uint32_t const ces[9] = { 0x0E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_231)
{
    // 288F 0061;	
    // (⢏) BRAILLE PATTERN DOTS-12348	[0E43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288F, 0x0061 };
    uint32_t const ces[9] = { 0x0E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_232)
{
    // 288F 0041;	
    // (⢏) BRAILLE PATTERN DOTS-12348	[0E43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x288F, 0x0041 };
    uint32_t const ces[9] = { 0x0E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_233)
{
    // 288F 0062;	
    // (⢏) BRAILLE PATTERN DOTS-12348	[0E43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x288F, 0x0062 };
    uint32_t const ces[9] = { 0x0E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_234)
{
    // 2890 0021;	
    // (⢐) BRAILLE PATTERN DOTS-58	[0E44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2890, 0x0021 };
    uint32_t const ces[9] = { 0x0E44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_235)
{
    // 2890 003F;	
    // (⢐) BRAILLE PATTERN DOTS-58	[0E44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2890, 0x003F };
    uint32_t const ces[9] = { 0x0E44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_236)
{
    // 2890 0061;	
    // (⢐) BRAILLE PATTERN DOTS-58	[0E44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2890, 0x0061 };
    uint32_t const ces[9] = { 0x0E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_237)
{
    // 2890 0041;	
    // (⢐) BRAILLE PATTERN DOTS-58	[0E44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2890, 0x0041 };
    uint32_t const ces[9] = { 0x0E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_238)
{
    // 2890 0062;	
    // (⢐) BRAILLE PATTERN DOTS-58	[0E44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2890, 0x0062 };
    uint32_t const ces[9] = { 0x0E44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_239)
{
    // 2891 0021;	
    // (⢑) BRAILLE PATTERN DOTS-158	[0E45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2891, 0x0021 };
    uint32_t const ces[9] = { 0x0E45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_240)
{
    // 2891 003F;	
    // (⢑) BRAILLE PATTERN DOTS-158	[0E45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2891, 0x003F };
    uint32_t const ces[9] = { 0x0E45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_241)
{
    // 2891 0061;	
    // (⢑) BRAILLE PATTERN DOTS-158	[0E45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2891, 0x0061 };
    uint32_t const ces[9] = { 0x0E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_242)
{
    // 2891 0041;	
    // (⢑) BRAILLE PATTERN DOTS-158	[0E45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2891, 0x0041 };
    uint32_t const ces[9] = { 0x0E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_243)
{
    // 2891 0062;	
    // (⢑) BRAILLE PATTERN DOTS-158	[0E45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2891, 0x0062 };
    uint32_t const ces[9] = { 0x0E45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_244)
{
    // 2892 0021;	
    // (⢒) BRAILLE PATTERN DOTS-258	[0E46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2892, 0x0021 };
    uint32_t const ces[9] = { 0x0E46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_245)
{
    // 2892 003F;	
    // (⢒) BRAILLE PATTERN DOTS-258	[0E46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2892, 0x003F };
    uint32_t const ces[9] = { 0x0E46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_246)
{
    // 2892 0061;	
    // (⢒) BRAILLE PATTERN DOTS-258	[0E46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2892, 0x0061 };
    uint32_t const ces[9] = { 0x0E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_247)
{
    // 2892 0041;	
    // (⢒) BRAILLE PATTERN DOTS-258	[0E46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2892, 0x0041 };
    uint32_t const ces[9] = { 0x0E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_248)
{
    // 2892 0062;	
    // (⢒) BRAILLE PATTERN DOTS-258	[0E46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2892, 0x0062 };
    uint32_t const ces[9] = { 0x0E46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_249)
{
    // 2893 0021;	
    // (⢓) BRAILLE PATTERN DOTS-1258	[0E47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2893, 0x0021 };
    uint32_t const ces[9] = { 0x0E47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_250)
{
    // 2893 003F;	
    // (⢓) BRAILLE PATTERN DOTS-1258	[0E47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2893, 0x003F };
    uint32_t const ces[9] = { 0x0E47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_251)
{
    // 2893 0061;	
    // (⢓) BRAILLE PATTERN DOTS-1258	[0E47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2893, 0x0061 };
    uint32_t const ces[9] = { 0x0E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_252)
{
    // 2893 0041;	
    // (⢓) BRAILLE PATTERN DOTS-1258	[0E47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2893, 0x0041 };
    uint32_t const ces[9] = { 0x0E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_253)
{
    // 2893 0062;	
    // (⢓) BRAILLE PATTERN DOTS-1258	[0E47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2893, 0x0062 };
    uint32_t const ces[9] = { 0x0E47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_254)
{
    // 2894 0021;	
    // (⢔) BRAILLE PATTERN DOTS-358	[0E48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2894, 0x0021 };
    uint32_t const ces[9] = { 0x0E48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_255)
{
    // 2894 003F;	
    // (⢔) BRAILLE PATTERN DOTS-358	[0E48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2894, 0x003F };
    uint32_t const ces[9] = { 0x0E48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_256)
{
    // 2894 0061;	
    // (⢔) BRAILLE PATTERN DOTS-358	[0E48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2894, 0x0061 };
    uint32_t const ces[9] = { 0x0E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_257)
{
    // 2894 0041;	
    // (⢔) BRAILLE PATTERN DOTS-358	[0E48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2894, 0x0041 };
    uint32_t const ces[9] = { 0x0E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_258)
{
    // 2894 0062;	
    // (⢔) BRAILLE PATTERN DOTS-358	[0E48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2894, 0x0062 };
    uint32_t const ces[9] = { 0x0E48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_259)
{
    // 2895 0021;	
    // (⢕) BRAILLE PATTERN DOTS-1358	[0E49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2895, 0x0021 };
    uint32_t const ces[9] = { 0x0E49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_260)
{
    // 2895 003F;	
    // (⢕) BRAILLE PATTERN DOTS-1358	[0E49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2895, 0x003F };
    uint32_t const ces[9] = { 0x0E49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_261)
{
    // 2895 0061;	
    // (⢕) BRAILLE PATTERN DOTS-1358	[0E49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2895, 0x0061 };
    uint32_t const ces[9] = { 0x0E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_262)
{
    // 2895 0041;	
    // (⢕) BRAILLE PATTERN DOTS-1358	[0E49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2895, 0x0041 };
    uint32_t const ces[9] = { 0x0E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_263)
{
    // 2895 0062;	
    // (⢕) BRAILLE PATTERN DOTS-1358	[0E49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2895, 0x0062 };
    uint32_t const ces[9] = { 0x0E49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_264)
{
    // 2896 0021;	
    // (⢖) BRAILLE PATTERN DOTS-2358	[0E4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2896, 0x0021 };
    uint32_t const ces[9] = { 0x0E4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_265)
{
    // 2896 003F;	
    // (⢖) BRAILLE PATTERN DOTS-2358	[0E4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2896, 0x003F };
    uint32_t const ces[9] = { 0x0E4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_266)
{
    // 2896 0061;	
    // (⢖) BRAILLE PATTERN DOTS-2358	[0E4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2896, 0x0061 };
    uint32_t const ces[9] = { 0x0E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_267)
{
    // 2896 0041;	
    // (⢖) BRAILLE PATTERN DOTS-2358	[0E4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2896, 0x0041 };
    uint32_t const ces[9] = { 0x0E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_268)
{
    // 2896 0062;	
    // (⢖) BRAILLE PATTERN DOTS-2358	[0E4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2896, 0x0062 };
    uint32_t const ces[9] = { 0x0E4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_269)
{
    // 2897 0021;	
    // (⢗) BRAILLE PATTERN DOTS-12358	[0E4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2897, 0x0021 };
    uint32_t const ces[9] = { 0x0E4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_270)
{
    // 2897 003F;	
    // (⢗) BRAILLE PATTERN DOTS-12358	[0E4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2897, 0x003F };
    uint32_t const ces[9] = { 0x0E4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_271)
{
    // 2897 0061;	
    // (⢗) BRAILLE PATTERN DOTS-12358	[0E4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2897, 0x0061 };
    uint32_t const ces[9] = { 0x0E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_272)
{
    // 2897 0041;	
    // (⢗) BRAILLE PATTERN DOTS-12358	[0E4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2897, 0x0041 };
    uint32_t const ces[9] = { 0x0E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_273)
{
    // 2897 0062;	
    // (⢗) BRAILLE PATTERN DOTS-12358	[0E4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2897, 0x0062 };
    uint32_t const ces[9] = { 0x0E4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_274)
{
    // 2898 0021;	
    // (⢘) BRAILLE PATTERN DOTS-458	[0E4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2898, 0x0021 };
    uint32_t const ces[9] = { 0x0E4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_275)
{
    // 2898 003F;	
    // (⢘) BRAILLE PATTERN DOTS-458	[0E4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2898, 0x003F };
    uint32_t const ces[9] = { 0x0E4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_276)
{
    // 2898 0061;	
    // (⢘) BRAILLE PATTERN DOTS-458	[0E4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2898, 0x0061 };
    uint32_t const ces[9] = { 0x0E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_277)
{
    // 2898 0041;	
    // (⢘) BRAILLE PATTERN DOTS-458	[0E4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2898, 0x0041 };
    uint32_t const ces[9] = { 0x0E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_278)
{
    // 2898 0062;	
    // (⢘) BRAILLE PATTERN DOTS-458	[0E4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2898, 0x0062 };
    uint32_t const ces[9] = { 0x0E4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_279)
{
    // 2899 0021;	
    // (⢙) BRAILLE PATTERN DOTS-1458	[0E4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2899, 0x0021 };
    uint32_t const ces[9] = { 0x0E4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_280)
{
    // 2899 003F;	
    // (⢙) BRAILLE PATTERN DOTS-1458	[0E4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2899, 0x003F };
    uint32_t const ces[9] = { 0x0E4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_281)
{
    // 2899 0061;	
    // (⢙) BRAILLE PATTERN DOTS-1458	[0E4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2899, 0x0061 };
    uint32_t const ces[9] = { 0x0E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_282)
{
    // 2899 0041;	
    // (⢙) BRAILLE PATTERN DOTS-1458	[0E4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2899, 0x0041 };
    uint32_t const ces[9] = { 0x0E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_283)
{
    // 2899 0062;	
    // (⢙) BRAILLE PATTERN DOTS-1458	[0E4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2899, 0x0062 };
    uint32_t const ces[9] = { 0x0E4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_284)
{
    // 289A 0021;	
    // (⢚) BRAILLE PATTERN DOTS-2458	[0E4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289A, 0x0021 };
    uint32_t const ces[9] = { 0x0E4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_285)
{
    // 289A 003F;	
    // (⢚) BRAILLE PATTERN DOTS-2458	[0E4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289A, 0x003F };
    uint32_t const ces[9] = { 0x0E4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_286)
{
    // 289A 0061;	
    // (⢚) BRAILLE PATTERN DOTS-2458	[0E4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289A, 0x0061 };
    uint32_t const ces[9] = { 0x0E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_287)
{
    // 289A 0041;	
    // (⢚) BRAILLE PATTERN DOTS-2458	[0E4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289A, 0x0041 };
    uint32_t const ces[9] = { 0x0E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_288)
{
    // 289A 0062;	
    // (⢚) BRAILLE PATTERN DOTS-2458	[0E4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289A, 0x0062 };
    uint32_t const ces[9] = { 0x0E4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_289)
{
    // 289B 0021;	
    // (⢛) BRAILLE PATTERN DOTS-12458	[0E4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289B, 0x0021 };
    uint32_t const ces[9] = { 0x0E4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_290)
{
    // 289B 003F;	
    // (⢛) BRAILLE PATTERN DOTS-12458	[0E4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289B, 0x003F };
    uint32_t const ces[9] = { 0x0E4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_291)
{
    // 289B 0061;	
    // (⢛) BRAILLE PATTERN DOTS-12458	[0E4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289B, 0x0061 };
    uint32_t const ces[9] = { 0x0E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_292)
{
    // 289B 0041;	
    // (⢛) BRAILLE PATTERN DOTS-12458	[0E4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289B, 0x0041 };
    uint32_t const ces[9] = { 0x0E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_293)
{
    // 289B 0062;	
    // (⢛) BRAILLE PATTERN DOTS-12458	[0E4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289B, 0x0062 };
    uint32_t const ces[9] = { 0x0E4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_294)
{
    // 289C 0021;	
    // (⢜) BRAILLE PATTERN DOTS-3458	[0E50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289C, 0x0021 };
    uint32_t const ces[9] = { 0x0E50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_295)
{
    // 289C 003F;	
    // (⢜) BRAILLE PATTERN DOTS-3458	[0E50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289C, 0x003F };
    uint32_t const ces[9] = { 0x0E50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_296)
{
    // 289C 0061;	
    // (⢜) BRAILLE PATTERN DOTS-3458	[0E50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289C, 0x0061 };
    uint32_t const ces[9] = { 0x0E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_297)
{
    // 289C 0041;	
    // (⢜) BRAILLE PATTERN DOTS-3458	[0E50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289C, 0x0041 };
    uint32_t const ces[9] = { 0x0E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_298)
{
    // 289C 0062;	
    // (⢜) BRAILLE PATTERN DOTS-3458	[0E50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289C, 0x0062 };
    uint32_t const ces[9] = { 0x0E50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_299)
{
    // 289D 0021;	
    // (⢝) BRAILLE PATTERN DOTS-13458	[0E51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289D, 0x0021 };
    uint32_t const ces[9] = { 0x0E51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_300)
{
    // 289D 003F;	
    // (⢝) BRAILLE PATTERN DOTS-13458	[0E51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289D, 0x003F };
    uint32_t const ces[9] = { 0x0E51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_301)
{
    // 289D 0061;	
    // (⢝) BRAILLE PATTERN DOTS-13458	[0E51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289D, 0x0061 };
    uint32_t const ces[9] = { 0x0E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_302)
{
    // 289D 0041;	
    // (⢝) BRAILLE PATTERN DOTS-13458	[0E51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289D, 0x0041 };
    uint32_t const ces[9] = { 0x0E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_303)
{
    // 289D 0062;	
    // (⢝) BRAILLE PATTERN DOTS-13458	[0E51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289D, 0x0062 };
    uint32_t const ces[9] = { 0x0E51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_304)
{
    // 289E 0021;	
    // (⢞) BRAILLE PATTERN DOTS-23458	[0E52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289E, 0x0021 };
    uint32_t const ces[9] = { 0x0E52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_305)
{
    // 289E 003F;	
    // (⢞) BRAILLE PATTERN DOTS-23458	[0E52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289E, 0x003F };
    uint32_t const ces[9] = { 0x0E52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_306)
{
    // 289E 0061;	
    // (⢞) BRAILLE PATTERN DOTS-23458	[0E52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289E, 0x0061 };
    uint32_t const ces[9] = { 0x0E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_307)
{
    // 289E 0041;	
    // (⢞) BRAILLE PATTERN DOTS-23458	[0E52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289E, 0x0041 };
    uint32_t const ces[9] = { 0x0E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_308)
{
    // 289E 0062;	
    // (⢞) BRAILLE PATTERN DOTS-23458	[0E52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289E, 0x0062 };
    uint32_t const ces[9] = { 0x0E52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_309)
{
    // 289F 0021;	
    // (⢟) BRAILLE PATTERN DOTS-123458	[0E53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289F, 0x0021 };
    uint32_t const ces[9] = { 0x0E53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_310)
{
    // 289F 003F;	
    // (⢟) BRAILLE PATTERN DOTS-123458	[0E53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289F, 0x003F };
    uint32_t const ces[9] = { 0x0E53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_311)
{
    // 289F 0061;	
    // (⢟) BRAILLE PATTERN DOTS-123458	[0E53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289F, 0x0061 };
    uint32_t const ces[9] = { 0x0E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_312)
{
    // 289F 0041;	
    // (⢟) BRAILLE PATTERN DOTS-123458	[0E53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x289F, 0x0041 };
    uint32_t const ces[9] = { 0x0E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_313)
{
    // 289F 0062;	
    // (⢟) BRAILLE PATTERN DOTS-123458	[0E53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x289F, 0x0062 };
    uint32_t const ces[9] = { 0x0E53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_314)
{
    // 28A0 0021;	
    // (⢠) BRAILLE PATTERN DOTS-68	[0E54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A0, 0x0021 };
    uint32_t const ces[9] = { 0x0E54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_315)
{
    // 28A0 003F;	
    // (⢠) BRAILLE PATTERN DOTS-68	[0E54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A0, 0x003F };
    uint32_t const ces[9] = { 0x0E54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_316)
{
    // 28A0 0061;	
    // (⢠) BRAILLE PATTERN DOTS-68	[0E54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A0, 0x0061 };
    uint32_t const ces[9] = { 0x0E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_317)
{
    // 28A0 0041;	
    // (⢠) BRAILLE PATTERN DOTS-68	[0E54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A0, 0x0041 };
    uint32_t const ces[9] = { 0x0E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_318)
{
    // 28A0 0062;	
    // (⢠) BRAILLE PATTERN DOTS-68	[0E54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A0, 0x0062 };
    uint32_t const ces[9] = { 0x0E54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_319)
{
    // 28A1 0021;	
    // (⢡) BRAILLE PATTERN DOTS-168	[0E55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A1, 0x0021 };
    uint32_t const ces[9] = { 0x0E55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_320)
{
    // 28A1 003F;	
    // (⢡) BRAILLE PATTERN DOTS-168	[0E55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A1, 0x003F };
    uint32_t const ces[9] = { 0x0E55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_321)
{
    // 28A1 0061;	
    // (⢡) BRAILLE PATTERN DOTS-168	[0E55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A1, 0x0061 };
    uint32_t const ces[9] = { 0x0E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_322)
{
    // 28A1 0041;	
    // (⢡) BRAILLE PATTERN DOTS-168	[0E55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A1, 0x0041 };
    uint32_t const ces[9] = { 0x0E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_323)
{
    // 28A1 0062;	
    // (⢡) BRAILLE PATTERN DOTS-168	[0E55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A1, 0x0062 };
    uint32_t const ces[9] = { 0x0E55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_324)
{
    // 28A2 0021;	
    // (⢢) BRAILLE PATTERN DOTS-268	[0E56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A2, 0x0021 };
    uint32_t const ces[9] = { 0x0E56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_325)
{
    // 28A2 003F;	
    // (⢢) BRAILLE PATTERN DOTS-268	[0E56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A2, 0x003F };
    uint32_t const ces[9] = { 0x0E56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_326)
{
    // 28A2 0061;	
    // (⢢) BRAILLE PATTERN DOTS-268	[0E56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A2, 0x0061 };
    uint32_t const ces[9] = { 0x0E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_327)
{
    // 28A2 0041;	
    // (⢢) BRAILLE PATTERN DOTS-268	[0E56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A2, 0x0041 };
    uint32_t const ces[9] = { 0x0E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_328)
{
    // 28A2 0062;	
    // (⢢) BRAILLE PATTERN DOTS-268	[0E56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A2, 0x0062 };
    uint32_t const ces[9] = { 0x0E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_329)
{
    // 28A3 0021;	
    // (⢣) BRAILLE PATTERN DOTS-1268	[0E57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A3, 0x0021 };
    uint32_t const ces[9] = { 0x0E57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_330)
{
    // 28A3 003F;	
    // (⢣) BRAILLE PATTERN DOTS-1268	[0E57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A3, 0x003F };
    uint32_t const ces[9] = { 0x0E57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_331)
{
    // 28A3 0061;	
    // (⢣) BRAILLE PATTERN DOTS-1268	[0E57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A3, 0x0061 };
    uint32_t const ces[9] = { 0x0E57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_332)
{
    // 28A3 0041;	
    // (⢣) BRAILLE PATTERN DOTS-1268	[0E57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A3, 0x0041 };
    uint32_t const ces[9] = { 0x0E57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_333)
{
    // 28A3 0062;	
    // (⢣) BRAILLE PATTERN DOTS-1268	[0E57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A3, 0x0062 };
    uint32_t const ces[9] = { 0x0E57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_334)
{
    // 28A4 0021;	
    // (⢤) BRAILLE PATTERN DOTS-368	[0E58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A4, 0x0021 };
    uint32_t const ces[9] = { 0x0E58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_335)
{
    // 28A4 003F;	
    // (⢤) BRAILLE PATTERN DOTS-368	[0E58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A4, 0x003F };
    uint32_t const ces[9] = { 0x0E58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_336)
{
    // 28A4 0061;	
    // (⢤) BRAILLE PATTERN DOTS-368	[0E58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A4, 0x0061 };
    uint32_t const ces[9] = { 0x0E58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_337)
{
    // 28A4 0041;	
    // (⢤) BRAILLE PATTERN DOTS-368	[0E58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A4, 0x0041 };
    uint32_t const ces[9] = { 0x0E58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_338)
{
    // 28A4 0062;	
    // (⢤) BRAILLE PATTERN DOTS-368	[0E58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A4, 0x0062 };
    uint32_t const ces[9] = { 0x0E58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_339)
{
    // 28A5 0021;	
    // (⢥) BRAILLE PATTERN DOTS-1368	[0E59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A5, 0x0021 };
    uint32_t const ces[9] = { 0x0E59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_340)
{
    // 28A5 003F;	
    // (⢥) BRAILLE PATTERN DOTS-1368	[0E59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A5, 0x003F };
    uint32_t const ces[9] = { 0x0E59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_341)
{
    // 28A5 0061;	
    // (⢥) BRAILLE PATTERN DOTS-1368	[0E59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A5, 0x0061 };
    uint32_t const ces[9] = { 0x0E59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_342)
{
    // 28A5 0041;	
    // (⢥) BRAILLE PATTERN DOTS-1368	[0E59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A5, 0x0041 };
    uint32_t const ces[9] = { 0x0E59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_343)
{
    // 28A5 0062;	
    // (⢥) BRAILLE PATTERN DOTS-1368	[0E59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A5, 0x0062 };
    uint32_t const ces[9] = { 0x0E59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_344)
{
    // 28A6 0021;	
    // (⢦) BRAILLE PATTERN DOTS-2368	[0E5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A6, 0x0021 };
    uint32_t const ces[9] = { 0x0E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_345)
{
    // 28A6 003F;	
    // (⢦) BRAILLE PATTERN DOTS-2368	[0E5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A6, 0x003F };
    uint32_t const ces[9] = { 0x0E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_346)
{
    // 28A6 0061;	
    // (⢦) BRAILLE PATTERN DOTS-2368	[0E5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A6, 0x0061 };
    uint32_t const ces[9] = { 0x0E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_347)
{
    // 28A6 0041;	
    // (⢦) BRAILLE PATTERN DOTS-2368	[0E5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A6, 0x0041 };
    uint32_t const ces[9] = { 0x0E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_348)
{
    // 28A6 0062;	
    // (⢦) BRAILLE PATTERN DOTS-2368	[0E5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A6, 0x0062 };
    uint32_t const ces[9] = { 0x0E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_349)
{
    // 28A7 0021;	
    // (⢧) BRAILLE PATTERN DOTS-12368	[0E5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A7, 0x0021 };
    uint32_t const ces[9] = { 0x0E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_350)
{
    // 28A7 003F;	
    // (⢧) BRAILLE PATTERN DOTS-12368	[0E5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A7, 0x003F };
    uint32_t const ces[9] = { 0x0E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_351)
{
    // 28A7 0061;	
    // (⢧) BRAILLE PATTERN DOTS-12368	[0E5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A7, 0x0061 };
    uint32_t const ces[9] = { 0x0E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_352)
{
    // 28A7 0041;	
    // (⢧) BRAILLE PATTERN DOTS-12368	[0E5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A7, 0x0041 };
    uint32_t const ces[9] = { 0x0E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_353)
{
    // 28A7 0062;	
    // (⢧) BRAILLE PATTERN DOTS-12368	[0E5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A7, 0x0062 };
    uint32_t const ces[9] = { 0x0E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_354)
{
    // 28A8 0021;	
    // (⢨) BRAILLE PATTERN DOTS-468	[0E5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A8, 0x0021 };
    uint32_t const ces[9] = { 0x0E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_355)
{
    // 28A8 003F;	
    // (⢨) BRAILLE PATTERN DOTS-468	[0E5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A8, 0x003F };
    uint32_t const ces[9] = { 0x0E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_356)
{
    // 28A8 0061;	
    // (⢨) BRAILLE PATTERN DOTS-468	[0E5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A8, 0x0061 };
    uint32_t const ces[9] = { 0x0E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_357)
{
    // 28A8 0041;	
    // (⢨) BRAILLE PATTERN DOTS-468	[0E5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A8, 0x0041 };
    uint32_t const ces[9] = { 0x0E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_358)
{
    // 28A8 0062;	
    // (⢨) BRAILLE PATTERN DOTS-468	[0E5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A8, 0x0062 };
    uint32_t const ces[9] = { 0x0E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_359)
{
    // 28A9 0021;	
    // (⢩) BRAILLE PATTERN DOTS-1468	[0E5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A9, 0x0021 };
    uint32_t const ces[9] = { 0x0E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_360)
{
    // 28A9 003F;	
    // (⢩) BRAILLE PATTERN DOTS-1468	[0E5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A9, 0x003F };
    uint32_t const ces[9] = { 0x0E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_361)
{
    // 28A9 0061;	
    // (⢩) BRAILLE PATTERN DOTS-1468	[0E5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A9, 0x0061 };
    uint32_t const ces[9] = { 0x0E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_362)
{
    // 28A9 0041;	
    // (⢩) BRAILLE PATTERN DOTS-1468	[0E5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28A9, 0x0041 };
    uint32_t const ces[9] = { 0x0E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_363)
{
    // 28A9 0062;	
    // (⢩) BRAILLE PATTERN DOTS-1468	[0E5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28A9, 0x0062 };
    uint32_t const ces[9] = { 0x0E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_364)
{
    // 28AA 0021;	
    // (⢪) BRAILLE PATTERN DOTS-2468	[0E5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AA, 0x0021 };
    uint32_t const ces[9] = { 0x0E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_365)
{
    // 28AA 003F;	
    // (⢪) BRAILLE PATTERN DOTS-2468	[0E5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AA, 0x003F };
    uint32_t const ces[9] = { 0x0E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_366)
{
    // 28AA 0061;	
    // (⢪) BRAILLE PATTERN DOTS-2468	[0E5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AA, 0x0061 };
    uint32_t const ces[9] = { 0x0E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_367)
{
    // 28AA 0041;	
    // (⢪) BRAILLE PATTERN DOTS-2468	[0E5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AA, 0x0041 };
    uint32_t const ces[9] = { 0x0E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_368)
{
    // 28AA 0062;	
    // (⢪) BRAILLE PATTERN DOTS-2468	[0E5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AA, 0x0062 };
    uint32_t const ces[9] = { 0x0E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_369)
{
    // 28AB 0021;	
    // (⢫) BRAILLE PATTERN DOTS-12468	[0E5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AB, 0x0021 };
    uint32_t const ces[9] = { 0x0E5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_370)
{
    // 28AB 003F;	
    // (⢫) BRAILLE PATTERN DOTS-12468	[0E5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AB, 0x003F };
    uint32_t const ces[9] = { 0x0E5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_371)
{
    // 28AB 0061;	
    // (⢫) BRAILLE PATTERN DOTS-12468	[0E5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AB, 0x0061 };
    uint32_t const ces[9] = { 0x0E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_372)
{
    // 28AB 0041;	
    // (⢫) BRAILLE PATTERN DOTS-12468	[0E5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AB, 0x0041 };
    uint32_t const ces[9] = { 0x0E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_373)
{
    // 28AB 0062;	
    // (⢫) BRAILLE PATTERN DOTS-12468	[0E5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AB, 0x0062 };
    uint32_t const ces[9] = { 0x0E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_374)
{
    // 28AC 0021;	
    // (⢬) BRAILLE PATTERN DOTS-3468	[0E60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AC, 0x0021 };
    uint32_t const ces[9] = { 0x0E60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_375)
{
    // 28AC 003F;	
    // (⢬) BRAILLE PATTERN DOTS-3468	[0E60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AC, 0x003F };
    uint32_t const ces[9] = { 0x0E60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_376)
{
    // 28AC 0061;	
    // (⢬) BRAILLE PATTERN DOTS-3468	[0E60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AC, 0x0061 };
    uint32_t const ces[9] = { 0x0E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_377)
{
    // 28AC 0041;	
    // (⢬) BRAILLE PATTERN DOTS-3468	[0E60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AC, 0x0041 };
    uint32_t const ces[9] = { 0x0E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_378)
{
    // 28AC 0062;	
    // (⢬) BRAILLE PATTERN DOTS-3468	[0E60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AC, 0x0062 };
    uint32_t const ces[9] = { 0x0E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_379)
{
    // 28AD 0021;	
    // (⢭) BRAILLE PATTERN DOTS-13468	[0E61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AD, 0x0021 };
    uint32_t const ces[9] = { 0x0E61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_380)
{
    // 28AD 003F;	
    // (⢭) BRAILLE PATTERN DOTS-13468	[0E61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AD, 0x003F };
    uint32_t const ces[9] = { 0x0E61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_381)
{
    // 28AD 0061;	
    // (⢭) BRAILLE PATTERN DOTS-13468	[0E61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AD, 0x0061 };
    uint32_t const ces[9] = { 0x0E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_382)
{
    // 28AD 0041;	
    // (⢭) BRAILLE PATTERN DOTS-13468	[0E61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AD, 0x0041 };
    uint32_t const ces[9] = { 0x0E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_383)
{
    // 28AD 0062;	
    // (⢭) BRAILLE PATTERN DOTS-13468	[0E61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AD, 0x0062 };
    uint32_t const ces[9] = { 0x0E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_384)
{
    // 28AE 0021;	
    // (⢮) BRAILLE PATTERN DOTS-23468	[0E62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AE, 0x0021 };
    uint32_t const ces[9] = { 0x0E62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_385)
{
    // 28AE 003F;	
    // (⢮) BRAILLE PATTERN DOTS-23468	[0E62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AE, 0x003F };
    uint32_t const ces[9] = { 0x0E62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_386)
{
    // 28AE 0061;	
    // (⢮) BRAILLE PATTERN DOTS-23468	[0E62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AE, 0x0061 };
    uint32_t const ces[9] = { 0x0E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_387)
{
    // 28AE 0041;	
    // (⢮) BRAILLE PATTERN DOTS-23468	[0E62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AE, 0x0041 };
    uint32_t const ces[9] = { 0x0E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_388)
{
    // 28AE 0062;	
    // (⢮) BRAILLE PATTERN DOTS-23468	[0E62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AE, 0x0062 };
    uint32_t const ces[9] = { 0x0E62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_389)
{
    // 28AF 0021;	
    // (⢯) BRAILLE PATTERN DOTS-123468	[0E63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AF, 0x0021 };
    uint32_t const ces[9] = { 0x0E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_390)
{
    // 28AF 003F;	
    // (⢯) BRAILLE PATTERN DOTS-123468	[0E63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AF, 0x003F };
    uint32_t const ces[9] = { 0x0E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_391)
{
    // 28AF 0061;	
    // (⢯) BRAILLE PATTERN DOTS-123468	[0E63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AF, 0x0061 };
    uint32_t const ces[9] = { 0x0E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_392)
{
    // 28AF 0041;	
    // (⢯) BRAILLE PATTERN DOTS-123468	[0E63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28AF, 0x0041 };
    uint32_t const ces[9] = { 0x0E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_393)
{
    // 28AF 0062;	
    // (⢯) BRAILLE PATTERN DOTS-123468	[0E63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28AF, 0x0062 };
    uint32_t const ces[9] = { 0x0E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_394)
{
    // 28B0 0021;	
    // (⢰) BRAILLE PATTERN DOTS-568	[0E64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B0, 0x0021 };
    uint32_t const ces[9] = { 0x0E64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_395)
{
    // 28B0 003F;	
    // (⢰) BRAILLE PATTERN DOTS-568	[0E64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B0, 0x003F };
    uint32_t const ces[9] = { 0x0E64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_396)
{
    // 28B0 0061;	
    // (⢰) BRAILLE PATTERN DOTS-568	[0E64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B0, 0x0061 };
    uint32_t const ces[9] = { 0x0E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_397)
{
    // 28B0 0041;	
    // (⢰) BRAILLE PATTERN DOTS-568	[0E64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B0, 0x0041 };
    uint32_t const ces[9] = { 0x0E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_398)
{
    // 28B0 0062;	
    // (⢰) BRAILLE PATTERN DOTS-568	[0E64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B0, 0x0062 };
    uint32_t const ces[9] = { 0x0E64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_399)
{
    // 28B1 0021;	
    // (⢱) BRAILLE PATTERN DOTS-1568	[0E65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B1, 0x0021 };
    uint32_t const ces[9] = { 0x0E65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_400)
{
    // 28B1 003F;	
    // (⢱) BRAILLE PATTERN DOTS-1568	[0E65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B1, 0x003F };
    uint32_t const ces[9] = { 0x0E65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_401)
{
    // 28B1 0061;	
    // (⢱) BRAILLE PATTERN DOTS-1568	[0E65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B1, 0x0061 };
    uint32_t const ces[9] = { 0x0E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_402)
{
    // 28B1 0041;	
    // (⢱) BRAILLE PATTERN DOTS-1568	[0E65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B1, 0x0041 };
    uint32_t const ces[9] = { 0x0E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_403)
{
    // 28B1 0062;	
    // (⢱) BRAILLE PATTERN DOTS-1568	[0E65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B1, 0x0062 };
    uint32_t const ces[9] = { 0x0E65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_404)
{
    // 28B2 0021;	
    // (⢲) BRAILLE PATTERN DOTS-2568	[0E66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B2, 0x0021 };
    uint32_t const ces[9] = { 0x0E66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_405)
{
    // 28B2 003F;	
    // (⢲) BRAILLE PATTERN DOTS-2568	[0E66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B2, 0x003F };
    uint32_t const ces[9] = { 0x0E66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_406)
{
    // 28B2 0061;	
    // (⢲) BRAILLE PATTERN DOTS-2568	[0E66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B2, 0x0061 };
    uint32_t const ces[9] = { 0x0E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_407)
{
    // 28B2 0041;	
    // (⢲) BRAILLE PATTERN DOTS-2568	[0E66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B2, 0x0041 };
    uint32_t const ces[9] = { 0x0E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_408)
{
    // 28B2 0062;	
    // (⢲) BRAILLE PATTERN DOTS-2568	[0E66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B2, 0x0062 };
    uint32_t const ces[9] = { 0x0E66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_409)
{
    // 28B3 0021;	
    // (⢳) BRAILLE PATTERN DOTS-12568	[0E67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B3, 0x0021 };
    uint32_t const ces[9] = { 0x0E67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_410)
{
    // 28B3 003F;	
    // (⢳) BRAILLE PATTERN DOTS-12568	[0E67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B3, 0x003F };
    uint32_t const ces[9] = { 0x0E67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_411)
{
    // 28B3 0061;	
    // (⢳) BRAILLE PATTERN DOTS-12568	[0E67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B3, 0x0061 };
    uint32_t const ces[9] = { 0x0E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_412)
{
    // 28B3 0041;	
    // (⢳) BRAILLE PATTERN DOTS-12568	[0E67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B3, 0x0041 };
    uint32_t const ces[9] = { 0x0E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_413)
{
    // 28B3 0062;	
    // (⢳) BRAILLE PATTERN DOTS-12568	[0E67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B3, 0x0062 };
    uint32_t const ces[9] = { 0x0E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_414)
{
    // 28B4 0021;	
    // (⢴) BRAILLE PATTERN DOTS-3568	[0E68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B4, 0x0021 };
    uint32_t const ces[9] = { 0x0E68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_415)
{
    // 28B4 003F;	
    // (⢴) BRAILLE PATTERN DOTS-3568	[0E68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B4, 0x003F };
    uint32_t const ces[9] = { 0x0E68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_416)
{
    // 28B4 0061;	
    // (⢴) BRAILLE PATTERN DOTS-3568	[0E68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B4, 0x0061 };
    uint32_t const ces[9] = { 0x0E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_417)
{
    // 28B4 0041;	
    // (⢴) BRAILLE PATTERN DOTS-3568	[0E68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B4, 0x0041 };
    uint32_t const ces[9] = { 0x0E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_418)
{
    // 28B4 0062;	
    // (⢴) BRAILLE PATTERN DOTS-3568	[0E68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B4, 0x0062 };
    uint32_t const ces[9] = { 0x0E68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_419)
{
    // 28B5 0021;	
    // (⢵) BRAILLE PATTERN DOTS-13568	[0E69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B5, 0x0021 };
    uint32_t const ces[9] = { 0x0E69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_420)
{
    // 28B5 003F;	
    // (⢵) BRAILLE PATTERN DOTS-13568	[0E69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B5, 0x003F };
    uint32_t const ces[9] = { 0x0E69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_421)
{
    // 28B5 0061;	
    // (⢵) BRAILLE PATTERN DOTS-13568	[0E69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B5, 0x0061 };
    uint32_t const ces[9] = { 0x0E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_422)
{
    // 28B5 0041;	
    // (⢵) BRAILLE PATTERN DOTS-13568	[0E69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B5, 0x0041 };
    uint32_t const ces[9] = { 0x0E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_423)
{
    // 28B5 0062;	
    // (⢵) BRAILLE PATTERN DOTS-13568	[0E69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B5, 0x0062 };
    uint32_t const ces[9] = { 0x0E69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_424)
{
    // 28B6 0021;	
    // (⢶) BRAILLE PATTERN DOTS-23568	[0E6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B6, 0x0021 };
    uint32_t const ces[9] = { 0x0E6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_425)
{
    // 28B6 003F;	
    // (⢶) BRAILLE PATTERN DOTS-23568	[0E6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B6, 0x003F };
    uint32_t const ces[9] = { 0x0E6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_426)
{
    // 28B6 0061;	
    // (⢶) BRAILLE PATTERN DOTS-23568	[0E6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B6, 0x0061 };
    uint32_t const ces[9] = { 0x0E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_427)
{
    // 28B6 0041;	
    // (⢶) BRAILLE PATTERN DOTS-23568	[0E6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B6, 0x0041 };
    uint32_t const ces[9] = { 0x0E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_428)
{
    // 28B6 0062;	
    // (⢶) BRAILLE PATTERN DOTS-23568	[0E6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B6, 0x0062 };
    uint32_t const ces[9] = { 0x0E6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_429)
{
    // 28B7 0021;	
    // (⢷) BRAILLE PATTERN DOTS-123568	[0E6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B7, 0x0021 };
    uint32_t const ces[9] = { 0x0E6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_430)
{
    // 28B7 003F;	
    // (⢷) BRAILLE PATTERN DOTS-123568	[0E6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B7, 0x003F };
    uint32_t const ces[9] = { 0x0E6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_431)
{
    // 28B7 0061;	
    // (⢷) BRAILLE PATTERN DOTS-123568	[0E6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B7, 0x0061 };
    uint32_t const ces[9] = { 0x0E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_432)
{
    // 28B7 0041;	
    // (⢷) BRAILLE PATTERN DOTS-123568	[0E6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B7, 0x0041 };
    uint32_t const ces[9] = { 0x0E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_433)
{
    // 28B7 0062;	
    // (⢷) BRAILLE PATTERN DOTS-123568	[0E6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B7, 0x0062 };
    uint32_t const ces[9] = { 0x0E6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_434)
{
    // 28B8 0021;	
    // (⢸) BRAILLE PATTERN DOTS-4568	[0E6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B8, 0x0021 };
    uint32_t const ces[9] = { 0x0E6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_435)
{
    // 28B8 003F;	
    // (⢸) BRAILLE PATTERN DOTS-4568	[0E6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B8, 0x003F };
    uint32_t const ces[9] = { 0x0E6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_436)
{
    // 28B8 0061;	
    // (⢸) BRAILLE PATTERN DOTS-4568	[0E6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B8, 0x0061 };
    uint32_t const ces[9] = { 0x0E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_437)
{
    // 28B8 0041;	
    // (⢸) BRAILLE PATTERN DOTS-4568	[0E6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B8, 0x0041 };
    uint32_t const ces[9] = { 0x0E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_438)
{
    // 28B8 0062;	
    // (⢸) BRAILLE PATTERN DOTS-4568	[0E6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B8, 0x0062 };
    uint32_t const ces[9] = { 0x0E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_439)
{
    // 28B9 0021;	
    // (⢹) BRAILLE PATTERN DOTS-14568	[0E6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B9, 0x0021 };
    uint32_t const ces[9] = { 0x0E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_440)
{
    // 28B9 003F;	
    // (⢹) BRAILLE PATTERN DOTS-14568	[0E6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B9, 0x003F };
    uint32_t const ces[9] = { 0x0E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_441)
{
    // 28B9 0061;	
    // (⢹) BRAILLE PATTERN DOTS-14568	[0E6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B9, 0x0061 };
    uint32_t const ces[9] = { 0x0E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_442)
{
    // 28B9 0041;	
    // (⢹) BRAILLE PATTERN DOTS-14568	[0E6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28B9, 0x0041 };
    uint32_t const ces[9] = { 0x0E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_443)
{
    // 28B9 0062;	
    // (⢹) BRAILLE PATTERN DOTS-14568	[0E6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28B9, 0x0062 };
    uint32_t const ces[9] = { 0x0E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_444)
{
    // 28BA 0021;	
    // (⢺) BRAILLE PATTERN DOTS-24568	[0E6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BA, 0x0021 };
    uint32_t const ces[9] = { 0x0E6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_445)
{
    // 28BA 003F;	
    // (⢺) BRAILLE PATTERN DOTS-24568	[0E6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BA, 0x003F };
    uint32_t const ces[9] = { 0x0E6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_446)
{
    // 28BA 0061;	
    // (⢺) BRAILLE PATTERN DOTS-24568	[0E6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BA, 0x0061 };
    uint32_t const ces[9] = { 0x0E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_447)
{
    // 28BA 0041;	
    // (⢺) BRAILLE PATTERN DOTS-24568	[0E6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BA, 0x0041 };
    uint32_t const ces[9] = { 0x0E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_448)
{
    // 28BA 0062;	
    // (⢺) BRAILLE PATTERN DOTS-24568	[0E6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BA, 0x0062 };
    uint32_t const ces[9] = { 0x0E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_449)
{
    // 28BB 0021;	
    // (⢻) BRAILLE PATTERN DOTS-124568	[0E6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BB, 0x0021 };
    uint32_t const ces[9] = { 0x0E6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_450)
{
    // 28BB 003F;	
    // (⢻) BRAILLE PATTERN DOTS-124568	[0E6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BB, 0x003F };
    uint32_t const ces[9] = { 0x0E6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_451)
{
    // 28BB 0061;	
    // (⢻) BRAILLE PATTERN DOTS-124568	[0E6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BB, 0x0061 };
    uint32_t const ces[9] = { 0x0E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_452)
{
    // 28BB 0041;	
    // (⢻) BRAILLE PATTERN DOTS-124568	[0E6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BB, 0x0041 };
    uint32_t const ces[9] = { 0x0E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_453)
{
    // 28BB 0062;	
    // (⢻) BRAILLE PATTERN DOTS-124568	[0E6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BB, 0x0062 };
    uint32_t const ces[9] = { 0x0E6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_454)
{
    // 28BC 0021;	
    // (⢼) BRAILLE PATTERN DOTS-34568	[0E70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BC, 0x0021 };
    uint32_t const ces[9] = { 0x0E70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_455)
{
    // 28BC 003F;	
    // (⢼) BRAILLE PATTERN DOTS-34568	[0E70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BC, 0x003F };
    uint32_t const ces[9] = { 0x0E70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_456)
{
    // 28BC 0061;	
    // (⢼) BRAILLE PATTERN DOTS-34568	[0E70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BC, 0x0061 };
    uint32_t const ces[9] = { 0x0E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_457)
{
    // 28BC 0041;	
    // (⢼) BRAILLE PATTERN DOTS-34568	[0E70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BC, 0x0041 };
    uint32_t const ces[9] = { 0x0E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_458)
{
    // 28BC 0062;	
    // (⢼) BRAILLE PATTERN DOTS-34568	[0E70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BC, 0x0062 };
    uint32_t const ces[9] = { 0x0E70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_459)
{
    // 28BD 0021;	
    // (⢽) BRAILLE PATTERN DOTS-134568	[0E71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BD, 0x0021 };
    uint32_t const ces[9] = { 0x0E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_460)
{
    // 28BD 003F;	
    // (⢽) BRAILLE PATTERN DOTS-134568	[0E71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BD, 0x003F };
    uint32_t const ces[9] = { 0x0E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_461)
{
    // 28BD 0061;	
    // (⢽) BRAILLE PATTERN DOTS-134568	[0E71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BD, 0x0061 };
    uint32_t const ces[9] = { 0x0E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_462)
{
    // 28BD 0041;	
    // (⢽) BRAILLE PATTERN DOTS-134568	[0E71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BD, 0x0041 };
    uint32_t const ces[9] = { 0x0E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_463)
{
    // 28BD 0062;	
    // (⢽) BRAILLE PATTERN DOTS-134568	[0E71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BD, 0x0062 };
    uint32_t const ces[9] = { 0x0E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_464)
{
    // 28BE 0021;	
    // (⢾) BRAILLE PATTERN DOTS-234568	[0E72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BE, 0x0021 };
    uint32_t const ces[9] = { 0x0E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_465)
{
    // 28BE 003F;	
    // (⢾) BRAILLE PATTERN DOTS-234568	[0E72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BE, 0x003F };
    uint32_t const ces[9] = { 0x0E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_466)
{
    // 28BE 0061;	
    // (⢾) BRAILLE PATTERN DOTS-234568	[0E72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BE, 0x0061 };
    uint32_t const ces[9] = { 0x0E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_467)
{
    // 28BE 0041;	
    // (⢾) BRAILLE PATTERN DOTS-234568	[0E72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BE, 0x0041 };
    uint32_t const ces[9] = { 0x0E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_468)
{
    // 28BE 0062;	
    // (⢾) BRAILLE PATTERN DOTS-234568	[0E72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BE, 0x0062 };
    uint32_t const ces[9] = { 0x0E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_469)
{
    // 28BF 0021;	
    // (⢿) BRAILLE PATTERN DOTS-1234568	[0E73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BF, 0x0021 };
    uint32_t const ces[9] = { 0x0E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_470)
{
    // 28BF 003F;	
    // (⢿) BRAILLE PATTERN DOTS-1234568	[0E73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BF, 0x003F };
    uint32_t const ces[9] = { 0x0E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_471)
{
    // 28BF 0061;	
    // (⢿) BRAILLE PATTERN DOTS-1234568	[0E73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BF, 0x0061 };
    uint32_t const ces[9] = { 0x0E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_472)
{
    // 28BF 0041;	
    // (⢿) BRAILLE PATTERN DOTS-1234568	[0E73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28BF, 0x0041 };
    uint32_t const ces[9] = { 0x0E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_473)
{
    // 28BF 0062;	
    // (⢿) BRAILLE PATTERN DOTS-1234568	[0E73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28BF, 0x0062 };
    uint32_t const ces[9] = { 0x0E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_474)
{
    // 28C0 0021;	
    // (⣀) BRAILLE PATTERN DOTS-78	[0E74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C0, 0x0021 };
    uint32_t const ces[9] = { 0x0E74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_475)
{
    // 28C0 003F;	
    // (⣀) BRAILLE PATTERN DOTS-78	[0E74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C0, 0x003F };
    uint32_t const ces[9] = { 0x0E74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_476)
{
    // 28C0 0061;	
    // (⣀) BRAILLE PATTERN DOTS-78	[0E74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C0, 0x0061 };
    uint32_t const ces[9] = { 0x0E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_477)
{
    // 28C0 0041;	
    // (⣀) BRAILLE PATTERN DOTS-78	[0E74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C0, 0x0041 };
    uint32_t const ces[9] = { 0x0E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_478)
{
    // 28C0 0062;	
    // (⣀) BRAILLE PATTERN DOTS-78	[0E74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C0, 0x0062 };
    uint32_t const ces[9] = { 0x0E74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_479)
{
    // 28C1 0021;	
    // (⣁) BRAILLE PATTERN DOTS-178	[0E75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C1, 0x0021 };
    uint32_t const ces[9] = { 0x0E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_480)
{
    // 28C1 003F;	
    // (⣁) BRAILLE PATTERN DOTS-178	[0E75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C1, 0x003F };
    uint32_t const ces[9] = { 0x0E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_481)
{
    // 28C1 0061;	
    // (⣁) BRAILLE PATTERN DOTS-178	[0E75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C1, 0x0061 };
    uint32_t const ces[9] = { 0x0E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_482)
{
    // 28C1 0041;	
    // (⣁) BRAILLE PATTERN DOTS-178	[0E75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C1, 0x0041 };
    uint32_t const ces[9] = { 0x0E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_483)
{
    // 28C1 0062;	
    // (⣁) BRAILLE PATTERN DOTS-178	[0E75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C1, 0x0062 };
    uint32_t const ces[9] = { 0x0E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_484)
{
    // 28C2 0021;	
    // (⣂) BRAILLE PATTERN DOTS-278	[0E76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C2, 0x0021 };
    uint32_t const ces[9] = { 0x0E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_485)
{
    // 28C2 003F;	
    // (⣂) BRAILLE PATTERN DOTS-278	[0E76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C2, 0x003F };
    uint32_t const ces[9] = { 0x0E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_486)
{
    // 28C2 0061;	
    // (⣂) BRAILLE PATTERN DOTS-278	[0E76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C2, 0x0061 };
    uint32_t const ces[9] = { 0x0E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_487)
{
    // 28C2 0041;	
    // (⣂) BRAILLE PATTERN DOTS-278	[0E76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C2, 0x0041 };
    uint32_t const ces[9] = { 0x0E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_488)
{
    // 28C2 0062;	
    // (⣂) BRAILLE PATTERN DOTS-278	[0E76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C2, 0x0062 };
    uint32_t const ces[9] = { 0x0E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_489)
{
    // 28C3 0021;	
    // (⣃) BRAILLE PATTERN DOTS-1278	[0E77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C3, 0x0021 };
    uint32_t const ces[9] = { 0x0E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_490)
{
    // 28C3 003F;	
    // (⣃) BRAILLE PATTERN DOTS-1278	[0E77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C3, 0x003F };
    uint32_t const ces[9] = { 0x0E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_491)
{
    // 28C3 0061;	
    // (⣃) BRAILLE PATTERN DOTS-1278	[0E77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C3, 0x0061 };
    uint32_t const ces[9] = { 0x0E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_492)
{
    // 28C3 0041;	
    // (⣃) BRAILLE PATTERN DOTS-1278	[0E77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C3, 0x0041 };
    uint32_t const ces[9] = { 0x0E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_493)
{
    // 28C3 0062;	
    // (⣃) BRAILLE PATTERN DOTS-1278	[0E77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C3, 0x0062 };
    uint32_t const ces[9] = { 0x0E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_494)
{
    // 28C4 0021;	
    // (⣄) BRAILLE PATTERN DOTS-378	[0E78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C4, 0x0021 };
    uint32_t const ces[9] = { 0x0E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_495)
{
    // 28C4 003F;	
    // (⣄) BRAILLE PATTERN DOTS-378	[0E78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C4, 0x003F };
    uint32_t const ces[9] = { 0x0E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_496)
{
    // 28C4 0061;	
    // (⣄) BRAILLE PATTERN DOTS-378	[0E78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C4, 0x0061 };
    uint32_t const ces[9] = { 0x0E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_497)
{
    // 28C4 0041;	
    // (⣄) BRAILLE PATTERN DOTS-378	[0E78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x28C4, 0x0041 };
    uint32_t const ces[9] = { 0x0E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_498)
{
    // 28C4 0062;	
    // (⣄) BRAILLE PATTERN DOTS-378	[0E78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C4, 0x0062 };
    uint32_t const ces[9] = { 0x0E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_043_499)
{
    // 28C5 0021;	
    // (⣅) BRAILLE PATTERN DOTS-1378	[0E79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x28C5, 0x0021 };
    uint32_t const ces[9] = { 0x0E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

