// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_196_000)
{
    // 1F4DA ; [*14A1.0020.0002] 
    // BOOKS

    uint32_t const cps[1] = { 0x1f4da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_001)
{
    // 1F4DB ; [*14A2.0020.0002] 
    // NAME BADGE

    uint32_t const cps[1] = { 0x1f4db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_002)
{
    // 1F4DC ; [*14A3.0020.0002] 
    // SCROLL

    uint32_t const cps[1] = { 0x1f4dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_003)
{
    // 1F4DD ; [*14A4.0020.0002] 
    // MEMO

    uint32_t const cps[1] = { 0x1f4dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_004)
{
    // 1F4DE ; [*14A5.0020.0002] 
    // TELEPHONE RECEIVER

    uint32_t const cps[1] = { 0x1f4de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_005)
{
    // 1F4DF ; [*14A6.0020.0002] 
    // PAGER

    uint32_t const cps[1] = { 0x1f4df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_006)
{
    // 1F4E0 ; [*14A7.0020.0002] 
    // FAX MACHINE

    uint32_t const cps[1] = { 0x1f4e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_007)
{
    // 1F4E1 ; [*14A8.0020.0002] 
    // SATELLITE ANTENNA

    uint32_t const cps[1] = { 0x1f4e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_008)
{
    // 1F4E2 ; [*14A9.0020.0002] 
    // PUBLIC ADDRESS LOUDSPEAKER

    uint32_t const cps[1] = { 0x1f4e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_009)
{
    // 1F4E3 ; [*14AA.0020.0002] 
    // CHEERING MEGAPHONE

    uint32_t const cps[1] = { 0x1f4e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_010)
{
    // 1F4E4 ; [*14AB.0020.0002] 
    // OUTBOX TRAY

    uint32_t const cps[1] = { 0x1f4e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_011)
{
    // 1F4E5 ; [*14AC.0020.0002] 
    // INBOX TRAY

    uint32_t const cps[1] = { 0x1f4e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_012)
{
    // 1F4E6 ; [*14AD.0020.0002] 
    // PACKAGE

    uint32_t const cps[1] = { 0x1f4e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_013)
{
    // 1F4E7 ; [*14AE.0020.0002] 
    // E-MAIL SYMBOL

    uint32_t const cps[1] = { 0x1f4e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_014)
{
    // 1F4E8 ; [*14AF.0020.0002] 
    // INCOMING ENVELOPE

    uint32_t const cps[1] = { 0x1f4e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_015)
{
    // 1F4E9 ; [*14B0.0020.0002] 
    // ENVELOPE WITH DOWNWARDS ARROW ABOVE

    uint32_t const cps[1] = { 0x1f4e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_016)
{
    // 1F4EA ; [*14B1.0020.0002] 
    // CLOSED MAILBOX WITH LOWERED FLAG

    uint32_t const cps[1] = { 0x1f4ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_017)
{
    // 1F4EB ; [*14B2.0020.0002] 
    // CLOSED MAILBOX WITH RAISED FLAG

    uint32_t const cps[1] = { 0x1f4eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_018)
{
    // 1F4EC ; [*14B3.0020.0002] 
    // OPEN MAILBOX WITH RAISED FLAG

    uint32_t const cps[1] = { 0x1f4ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_019)
{
    // 1F4ED ; [*14B4.0020.0002] 
    // OPEN MAILBOX WITH LOWERED FLAG

    uint32_t const cps[1] = { 0x1f4ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_020)
{
    // 1F4EE ; [*14B5.0020.0002] 
    // POSTBOX

    uint32_t const cps[1] = { 0x1f4ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_021)
{
    // 1F4EF ; [*14B6.0020.0002] 
    // POSTAL HORN

    uint32_t const cps[1] = { 0x1f4ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_022)
{
    // 1F4F0 ; [*14B7.0020.0002] 
    // NEWSPAPER

    uint32_t const cps[1] = { 0x1f4f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_023)
{
    // 1F4F1 ; [*14B8.0020.0002] 
    // MOBILE PHONE

    uint32_t const cps[1] = { 0x1f4f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_024)
{
    // 1F4F2 ; [*14B9.0020.0002] 
    // MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT

    uint32_t const cps[1] = { 0x1f4f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_025)
{
    // 1F4F3 ; [*14BA.0020.0002] 
    // VIBRATION MODE

    uint32_t const cps[1] = { 0x1f4f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_026)
{
    // 1F4F4 ; [*14BB.0020.0002] 
    // MOBILE PHONE OFF

    uint32_t const cps[1] = { 0x1f4f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_027)
{
    // 1F4F5 ; [*14BC.0020.0002] 
    // NO MOBILE PHONES

    uint32_t const cps[1] = { 0x1f4f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_028)
{
    // 1F4F6 ; [*14BD.0020.0002] 
    // ANTENNA WITH BARS

    uint32_t const cps[1] = { 0x1f4f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_029)
{
    // 1F4F7 ; [*14BE.0020.0002] 
    // CAMERA

    uint32_t const cps[1] = { 0x1f4f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_030)
{
    // 1F4F8 ; [*14BF.0020.0002] 
    // CAMERA WITH FLASH

    uint32_t const cps[1] = { 0x1f4f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_031)
{
    // 1F4F9 ; [*14C0.0020.0002] 
    // VIDEO CAMERA

    uint32_t const cps[1] = { 0x1f4f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_032)
{
    // 1F4FA ; [*14C1.0020.0002] 
    // TELEVISION

    uint32_t const cps[1] = { 0x1f4fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_033)
{
    // 1F4FB ; [*14C2.0020.0002] 
    // RADIO

    uint32_t const cps[1] = { 0x1f4fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_034)
{
    // 1F4FC ; [*14C3.0020.0002] 
    // VIDEOCASSETTE

    uint32_t const cps[1] = { 0x1f4fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_035)
{
    // 1F4FD ; [*14C4.0020.0002] 
    // FILM PROJECTOR

    uint32_t const cps[1] = { 0x1f4fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_036)
{
    // 1F4FE ; [*14C5.0020.0002] 
    // PORTABLE STEREO

    uint32_t const cps[1] = { 0x1f4fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_037)
{
    // 1F4FF ; [*14C6.0020.0002] 
    // PRAYER BEADS

    uint32_t const cps[1] = { 0x1f4ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_038)
{
    // 1F500 ; [*14C7.0020.0002] 
    // TWISTED RIGHTWARDS ARROWS

    uint32_t const cps[1] = { 0x1f500 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_039)
{
    // 1F501 ; [*14C8.0020.0002] 
    // CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS

    uint32_t const cps[1] = { 0x1f501 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_040)
{
    // 1F502 ; [*14C9.0020.0002] 
    // CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY

    uint32_t const cps[1] = { 0x1f502 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_041)
{
    // 1F503 ; [*14CA.0020.0002] 
    // CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS

    uint32_t const cps[1] = { 0x1f503 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_042)
{
    // 1F504 ; [*14CB.0020.0002] 
    // ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS

    uint32_t const cps[1] = { 0x1f504 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_043)
{
    // 1F505 ; [*14CC.0020.0002] 
    // LOW BRIGHTNESS SYMBOL

    uint32_t const cps[1] = { 0x1f505 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_044)
{
    // 1F506 ; [*14CD.0020.0002] 
    // HIGH BRIGHTNESS SYMBOL

    uint32_t const cps[1] = { 0x1f506 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_045)
{
    // 1F507 ; [*14CE.0020.0002] 
    // SPEAKER WITH CANCELLATION STROKE

    uint32_t const cps[1] = { 0x1f507 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_046)
{
    // 1F508 ; [*14CF.0020.0002] 
    // SPEAKER

    uint32_t const cps[1] = { 0x1f508 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_047)
{
    // 1F509 ; [*14D0.0020.0002] 
    // SPEAKER WITH ONE SOUND WAVE

    uint32_t const cps[1] = { 0x1f509 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_048)
{
    // 1F50A ; [*14D1.0020.0002] 
    // SPEAKER WITH THREE SOUND WAVES

    uint32_t const cps[1] = { 0x1f50a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_049)
{
    // 1F50B ; [*14D2.0020.0002] 
    // BATTERY

    uint32_t const cps[1] = { 0x1f50b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_050)
{
    // 1F50C ; [*14D3.0020.0002] 
    // ELECTRIC PLUG

    uint32_t const cps[1] = { 0x1f50c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_051)
{
    // 1F50D ; [*14D4.0020.0002] 
    // LEFT-POINTING MAGNIFYING GLASS

    uint32_t const cps[1] = { 0x1f50d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_052)
{
    // 1F50E ; [*14D5.0020.0002] 
    // RIGHT-POINTING MAGNIFYING GLASS

    uint32_t const cps[1] = { 0x1f50e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_053)
{
    // 1F50F ; [*14D6.0020.0002] 
    // LOCK WITH INK PEN

    uint32_t const cps[1] = { 0x1f50f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_054)
{
    // 1F510 ; [*14D7.0020.0002] 
    // CLOSED LOCK WITH KEY

    uint32_t const cps[1] = { 0x1f510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_055)
{
    // 1F511 ; [*14D8.0020.0002] 
    // KEY

    uint32_t const cps[1] = { 0x1f511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_056)
{
    // 1F512 ; [*14D9.0020.0002] 
    // LOCK

    uint32_t const cps[1] = { 0x1f512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_057)
{
    // 1F513 ; [*14DA.0020.0002] 
    // OPEN LOCK

    uint32_t const cps[1] = { 0x1f513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_058)
{
    // 1F514 ; [*14DB.0020.0002] 
    // BELL

    uint32_t const cps[1] = { 0x1f514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_059)
{
    // 1F515 ; [*14DC.0020.0002] 
    // BELL WITH CANCELLATION STROKE

    uint32_t const cps[1] = { 0x1f515 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_060)
{
    // 1F516 ; [*14DD.0020.0002] 
    // BOOKMARK

    uint32_t const cps[1] = { 0x1f516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_061)
{
    // 1F517 ; [*14DE.0020.0002] 
    // LINK SYMBOL

    uint32_t const cps[1] = { 0x1f517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_062)
{
    // 1F518 ; [*14DF.0020.0002] 
    // RADIO BUTTON

    uint32_t const cps[1] = { 0x1f518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_063)
{
    // 1F519 ; [*14E0.0020.0002] 
    // BACK WITH LEFTWARDS ARROW ABOVE

    uint32_t const cps[1] = { 0x1f519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_064)
{
    // 1F51A ; [*14E1.0020.0002] 
    // END WITH LEFTWARDS ARROW ABOVE

    uint32_t const cps[1] = { 0x1f51a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_065)
{
    // 1F51B ; [*14E2.0020.0002] 
    // ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE

    uint32_t const cps[1] = { 0x1f51b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_066)
{
    // 1F51C ; [*14E3.0020.0002] 
    // SOON WITH RIGHTWARDS ARROW ABOVE

    uint32_t const cps[1] = { 0x1f51c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_067)
{
    // 1F51D ; [*14E4.0020.0002] 
    // TOP WITH UPWARDS ARROW ABOVE

    uint32_t const cps[1] = { 0x1f51d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_068)
{
    // 1F51E ; [*14E5.0020.0002] 
    // NO ONE UNDER EIGHTEEN SYMBOL

    uint32_t const cps[1] = { 0x1f51e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_069)
{
    // 1F51F ; [*14E6.0020.0002] 
    // KEYCAP TEN

    uint32_t const cps[1] = { 0x1f51f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_070)
{
    // 1F520 ; [*14E7.0020.0002] 
    // INPUT SYMBOL FOR LATIN CAPITAL LETTERS

    uint32_t const cps[1] = { 0x1f520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_071)
{
    // 1F521 ; [*14E8.0020.0002] 
    // INPUT SYMBOL FOR LATIN SMALL LETTERS

    uint32_t const cps[1] = { 0x1f521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_072)
{
    // 1F522 ; [*14E9.0020.0002] 
    // INPUT SYMBOL FOR NUMBERS

    uint32_t const cps[1] = { 0x1f522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_073)
{
    // 1F523 ; [*14EA.0020.0002] 
    // INPUT SYMBOL FOR SYMBOLS

    uint32_t const cps[1] = { 0x1f523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_074)
{
    // 1F524 ; [*14EB.0020.0002] 
    // INPUT SYMBOL FOR LATIN LETTERS

    uint32_t const cps[1] = { 0x1f524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_075)
{
    // 1F525 ; [*14EC.0020.0002] 
    // FIRE

    uint32_t const cps[1] = { 0x1f525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_076)
{
    // 1F526 ; [*14ED.0020.0002] 
    // ELECTRIC TORCH

    uint32_t const cps[1] = { 0x1f526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_077)
{
    // 1F527 ; [*14EE.0020.0002] 
    // WRENCH

    uint32_t const cps[1] = { 0x1f527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_078)
{
    // 1F528 ; [*14EF.0020.0002] 
    // HAMMER

    uint32_t const cps[1] = { 0x1f528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_079)
{
    // 1F529 ; [*14F0.0020.0002] 
    // NUT AND BOLT

    uint32_t const cps[1] = { 0x1f529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_080)
{
    // 1F52A ; [*14F1.0020.0002] 
    // HOCHO

    uint32_t const cps[1] = { 0x1f52a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_081)
{
    // 1F52B ; [*14F2.0020.0002] 
    // PISTOL

    uint32_t const cps[1] = { 0x1f52b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_082)
{
    // 1F52C ; [*14F3.0020.0002] 
    // MICROSCOPE

    uint32_t const cps[1] = { 0x1f52c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_083)
{
    // 1F52D ; [*14F4.0020.0002] 
    // TELESCOPE

    uint32_t const cps[1] = { 0x1f52d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_084)
{
    // 1F52E ; [*14F5.0020.0002] 
    // CRYSTAL BALL

    uint32_t const cps[1] = { 0x1f52e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_085)
{
    // 1F52F ; [*14F6.0020.0002] 
    // SIX POINTED STAR WITH MIDDLE DOT

    uint32_t const cps[1] = { 0x1f52f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_086)
{
    // 1F530 ; [*14F7.0020.0002] 
    // JAPANESE SYMBOL FOR BEGINNER

    uint32_t const cps[1] = { 0x1f530 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_087)
{
    // 1F531 ; [*14F8.0020.0002] 
    // TRIDENT EMBLEM

    uint32_t const cps[1] = { 0x1f531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_088)
{
    // 1F532 ; [*14F9.0020.0002] 
    // BLACK SQUARE BUTTON

    uint32_t const cps[1] = { 0x1f532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_089)
{
    // 1F533 ; [*14FA.0020.0002] 
    // WHITE SQUARE BUTTON

    uint32_t const cps[1] = { 0x1f533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_090)
{
    // 1F534 ; [*14FB.0020.0002] 
    // LARGE RED CIRCLE

    uint32_t const cps[1] = { 0x1f534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_091)
{
    // 1F535 ; [*14FC.0020.0002] 
    // LARGE BLUE CIRCLE

    uint32_t const cps[1] = { 0x1f535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_092)
{
    // 1F536 ; [*14FD.0020.0002] 
    // LARGE ORANGE DIAMOND

    uint32_t const cps[1] = { 0x1f536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_093)
{
    // 1F537 ; [*14FE.0020.0002] 
    // LARGE BLUE DIAMOND

    uint32_t const cps[1] = { 0x1f537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_094)
{
    // 1F538 ; [*14FF.0020.0002] 
    // SMALL ORANGE DIAMOND

    uint32_t const cps[1] = { 0x1f538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x14ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_095)
{
    // 1F539 ; [*1500.0020.0002] 
    // SMALL BLUE DIAMOND

    uint32_t const cps[1] = { 0x1f539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1500), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_096)
{
    // 1F53A ; [*1501.0020.0002] 
    // UP-POINTING RED TRIANGLE

    uint32_t const cps[1] = { 0x1f53a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1501), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_097)
{
    // 1F53B ; [*1502.0020.0002] 
    // DOWN-POINTING RED TRIANGLE

    uint32_t const cps[1] = { 0x1f53b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1502), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_098)
{
    // 1F53C ; [*1503.0020.0002] 
    // UP-POINTING SMALL RED TRIANGLE

    uint32_t const cps[1] = { 0x1f53c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1503), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_099)
{
    // 1F53D ; [*1504.0020.0002] 
    // DOWN-POINTING SMALL RED TRIANGLE

    uint32_t const cps[1] = { 0x1f53d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1504), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_100)
{
    // 1F53E ; [*1505.0020.0002] 
    // LOWER RIGHT SHADOWED WHITE CIRCLE

    uint32_t const cps[1] = { 0x1f53e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1505), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_101)
{
    // 1F53F ; [*1506.0020.0002] 
    // UPPER RIGHT SHADOWED WHITE CIRCLE

    uint32_t const cps[1] = { 0x1f53f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1506), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_102)
{
    // 1F540 ; [*1507.0020.0002] 
    // CIRCLED CROSS POMMEE

    uint32_t const cps[1] = { 0x1f540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1507), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_103)
{
    // 1F541 ; [*1508.0020.0002] 
    // CROSS POMMEE WITH HALF-CIRCLE BELOW

    uint32_t const cps[1] = { 0x1f541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1508), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_104)
{
    // 1F542 ; [*1509.0020.0002] 
    // CROSS POMMEE

    uint32_t const cps[1] = { 0x1f542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1509), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_105)
{
    // 1F543 ; [*150A.0020.0002] 
    // NOTCHED LEFT SEMICIRCLE WITH THREE DOTS

    uint32_t const cps[1] = { 0x1f543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_106)
{
    // 1F544 ; [*150B.0020.0002] 
    // NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS

    uint32_t const cps[1] = { 0x1f544 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_107)
{
    // 1F545 ; [*150C.0020.0002] 
    // SYMBOL FOR MARKS CHAPTER

    uint32_t const cps[1] = { 0x1f545 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_108)
{
    // 1F546 ; [*150D.0020.0002] 
    // WHITE LATIN CROSS

    uint32_t const cps[1] = { 0x1f546 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_109)
{
    // 1F547 ; [*150E.0020.0002] 
    // HEAVY LATIN CROSS

    uint32_t const cps[1] = { 0x1f547 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_110)
{
    // 1F548 ; [*150F.0020.0002] 
    // CELTIC CROSS

    uint32_t const cps[1] = { 0x1f548 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x150f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_111)
{
    // 1F549 ; [*1510.0020.0002] 
    // OM SYMBOL

    uint32_t const cps[1] = { 0x1f549 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1510), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_112)
{
    // 1F54A ; [*1511.0020.0002] 
    // DOVE OF PEACE

    uint32_t const cps[1] = { 0x1f54a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1511), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_113)
{
    // 1F54B ; [*1512.0020.0002] 
    // KAABA

    uint32_t const cps[1] = { 0x1f54b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1512), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_114)
{
    // 1F54C ; [*1513.0020.0002] 
    // MOSQUE

    uint32_t const cps[1] = { 0x1f54c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1513), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_115)
{
    // 1F54D ; [*1514.0020.0002] 
    // SYNAGOGUE

    uint32_t const cps[1] = { 0x1f54d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1514), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_116)
{
    // 1F54E ; [*1515.0020.0002] 
    // MENORAH WITH NINE BRANCHES

    uint32_t const cps[1] = { 0x1f54e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1515), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_117)
{
    // 1F54F ; [*1516.0020.0002] 
    // BOWL OF HYGIEIA

    uint32_t const cps[1] = { 0x1f54f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1516), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_118)
{
    // 1F550 ; [*1517.0020.0002] 
    // CLOCK FACE ONE OCLOCK

    uint32_t const cps[1] = { 0x1f550 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1517), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_119)
{
    // 1F551 ; [*1518.0020.0002] 
    // CLOCK FACE TWO OCLOCK

    uint32_t const cps[1] = { 0x1f551 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1518), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_120)
{
    // 1F552 ; [*1519.0020.0002] 
    // CLOCK FACE THREE OCLOCK

    uint32_t const cps[1] = { 0x1f552 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1519), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_121)
{
    // 1F553 ; [*151A.0020.0002] 
    // CLOCK FACE FOUR OCLOCK

    uint32_t const cps[1] = { 0x1f553 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_122)
{
    // 1F554 ; [*151B.0020.0002] 
    // CLOCK FACE FIVE OCLOCK

    uint32_t const cps[1] = { 0x1f554 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_123)
{
    // 1F555 ; [*151C.0020.0002] 
    // CLOCK FACE SIX OCLOCK

    uint32_t const cps[1] = { 0x1f555 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_124)
{
    // 1F556 ; [*151D.0020.0002] 
    // CLOCK FACE SEVEN OCLOCK

    uint32_t const cps[1] = { 0x1f556 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_125)
{
    // 1F557 ; [*151E.0020.0002] 
    // CLOCK FACE EIGHT OCLOCK

    uint32_t const cps[1] = { 0x1f557 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_126)
{
    // 1F558 ; [*151F.0020.0002] 
    // CLOCK FACE NINE OCLOCK

    uint32_t const cps[1] = { 0x1f558 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x151f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_127)
{
    // 1F559 ; [*1520.0020.0002] 
    // CLOCK FACE TEN OCLOCK

    uint32_t const cps[1] = { 0x1f559 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1520), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_128)
{
    // 1F55A ; [*1521.0020.0002] 
    // CLOCK FACE ELEVEN OCLOCK

    uint32_t const cps[1] = { 0x1f55a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1521), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_129)
{
    // 1F55B ; [*1522.0020.0002] 
    // CLOCK FACE TWELVE OCLOCK

    uint32_t const cps[1] = { 0x1f55b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1522), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_130)
{
    // 1F55C ; [*1523.0020.0002] 
    // CLOCK FACE ONE-THIRTY

    uint32_t const cps[1] = { 0x1f55c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1523), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_131)
{
    // 1F55D ; [*1524.0020.0002] 
    // CLOCK FACE TWO-THIRTY

    uint32_t const cps[1] = { 0x1f55d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1524), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_132)
{
    // 1F55E ; [*1525.0020.0002] 
    // CLOCK FACE THREE-THIRTY

    uint32_t const cps[1] = { 0x1f55e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1525), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_133)
{
    // 1F55F ; [*1526.0020.0002] 
    // CLOCK FACE FOUR-THIRTY

    uint32_t const cps[1] = { 0x1f55f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1526), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_134)
{
    // 1F560 ; [*1527.0020.0002] 
    // CLOCK FACE FIVE-THIRTY

    uint32_t const cps[1] = { 0x1f560 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1527), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_135)
{
    // 1F561 ; [*1528.0020.0002] 
    // CLOCK FACE SIX-THIRTY

    uint32_t const cps[1] = { 0x1f561 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1528), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_136)
{
    // 1F562 ; [*1529.0020.0002] 
    // CLOCK FACE SEVEN-THIRTY

    uint32_t const cps[1] = { 0x1f562 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1529), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_137)
{
    // 1F563 ; [*152A.0020.0002] 
    // CLOCK FACE EIGHT-THIRTY

    uint32_t const cps[1] = { 0x1f563 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_138)
{
    // 1F564 ; [*152B.0020.0002] 
    // CLOCK FACE NINE-THIRTY

    uint32_t const cps[1] = { 0x1f564 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_139)
{
    // 1F565 ; [*152C.0020.0002] 
    // CLOCK FACE TEN-THIRTY

    uint32_t const cps[1] = { 0x1f565 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_140)
{
    // 1F566 ; [*152D.0020.0002] 
    // CLOCK FACE ELEVEN-THIRTY

    uint32_t const cps[1] = { 0x1f566 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_141)
{
    // 1F567 ; [*152E.0020.0002] 
    // CLOCK FACE TWELVE-THIRTY

    uint32_t const cps[1] = { 0x1f567 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_142)
{
    // 1F568 ; [*152F.0020.0002] 
    // RIGHT SPEAKER

    uint32_t const cps[1] = { 0x1f568 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x152f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_143)
{
    // 1F569 ; [*1530.0020.0002] 
    // RIGHT SPEAKER WITH ONE SOUND WAVE

    uint32_t const cps[1] = { 0x1f569 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1530), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_144)
{
    // 1F56A ; [*1531.0020.0002] 
    // RIGHT SPEAKER WITH THREE SOUND WAVES

    uint32_t const cps[1] = { 0x1f56a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1531), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_145)
{
    // 1F56B ; [*1532.0020.0002] 
    // BULLHORN

    uint32_t const cps[1] = { 0x1f56b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1532), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_146)
{
    // 1F56C ; [*1533.0020.0002] 
    // BULLHORN WITH SOUND WAVES

    uint32_t const cps[1] = { 0x1f56c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1533), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_147)
{
    // 1F56D ; [*1534.0020.0002] 
    // RINGING BELL

    uint32_t const cps[1] = { 0x1f56d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1534), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_148)
{
    // 1F56E ; [*1535.0020.0002] 
    // BOOK

    uint32_t const cps[1] = { 0x1f56e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1535), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_196_149)
{
    // 1F56F ; [*1536.0020.0002] 
    // CANDLE

    uint32_t const cps[1] = { 0x1f56f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1536), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

