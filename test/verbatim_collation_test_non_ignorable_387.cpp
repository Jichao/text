// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_387_000)
{
    // 4B4A 003F;	
    // (䭊) CJK UNIFIED IDEOGRAPH-4B4A	[FB80 CB4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_001)
{
    // 4B4A 0061;	
    // (䭊) CJK UNIFIED IDEOGRAPH-4B4A	[FB80 CB4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_002)
{
    // 4B4A 0041;	
    // (䭊) CJK UNIFIED IDEOGRAPH-4B4A	[FB80 CB4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_003)
{
    // 4B4A 0062;	
    // (䭊) CJK UNIFIED IDEOGRAPH-4B4A	[FB80 CB4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_004)
{
    // 4B4B 0021;	
    // (䭋) CJK UNIFIED IDEOGRAPH-4B4B	[FB80 CB4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_005)
{
    // 4B4B 003F;	
    // (䭋) CJK UNIFIED IDEOGRAPH-4B4B	[FB80 CB4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_006)
{
    // 4B4B 0061;	
    // (䭋) CJK UNIFIED IDEOGRAPH-4B4B	[FB80 CB4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_007)
{
    // 4B4B 0041;	
    // (䭋) CJK UNIFIED IDEOGRAPH-4B4B	[FB80 CB4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_008)
{
    // 4B4B 0062;	
    // (䭋) CJK UNIFIED IDEOGRAPH-4B4B	[FB80 CB4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_009)
{
    // 4B4C 0021;	
    // (䭌) CJK UNIFIED IDEOGRAPH-4B4C	[FB80 CB4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_010)
{
    // 4B4C 003F;	
    // (䭌) CJK UNIFIED IDEOGRAPH-4B4C	[FB80 CB4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_011)
{
    // 4B4C 0061;	
    // (䭌) CJK UNIFIED IDEOGRAPH-4B4C	[FB80 CB4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_012)
{
    // 4B4C 0041;	
    // (䭌) CJK UNIFIED IDEOGRAPH-4B4C	[FB80 CB4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_013)
{
    // 4B4C 0062;	
    // (䭌) CJK UNIFIED IDEOGRAPH-4B4C	[FB80 CB4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_014)
{
    // 4B4D 0021;	
    // (䭍) CJK UNIFIED IDEOGRAPH-4B4D	[FB80 CB4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_015)
{
    // 4B4D 003F;	
    // (䭍) CJK UNIFIED IDEOGRAPH-4B4D	[FB80 CB4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_016)
{
    // 4B4D 0061;	
    // (䭍) CJK UNIFIED IDEOGRAPH-4B4D	[FB80 CB4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_017)
{
    // 4B4D 0041;	
    // (䭍) CJK UNIFIED IDEOGRAPH-4B4D	[FB80 CB4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_018)
{
    // 4B4D 0062;	
    // (䭍) CJK UNIFIED IDEOGRAPH-4B4D	[FB80 CB4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_019)
{
    // 4B4E 0021;	
    // (䭎) CJK UNIFIED IDEOGRAPH-4B4E	[FB80 CB4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_020)
{
    // 4B4E 003F;	
    // (䭎) CJK UNIFIED IDEOGRAPH-4B4E	[FB80 CB4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_021)
{
    // 4B4E 0061;	
    // (䭎) CJK UNIFIED IDEOGRAPH-4B4E	[FB80 CB4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_022)
{
    // 4B4E 0041;	
    // (䭎) CJK UNIFIED IDEOGRAPH-4B4E	[FB80 CB4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_023)
{
    // 4B4E 0062;	
    // (䭎) CJK UNIFIED IDEOGRAPH-4B4E	[FB80 CB4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_024)
{
    // 4B4F 0021;	
    // (䭏) CJK UNIFIED IDEOGRAPH-4B4F	[FB80 CB4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_025)
{
    // 4B4F 003F;	
    // (䭏) CJK UNIFIED IDEOGRAPH-4B4F	[FB80 CB4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_026)
{
    // 4B4F 0061;	
    // (䭏) CJK UNIFIED IDEOGRAPH-4B4F	[FB80 CB4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_027)
{
    // 4B4F 0041;	
    // (䭏) CJK UNIFIED IDEOGRAPH-4B4F	[FB80 CB4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_028)
{
    // 4B4F 0062;	
    // (䭏) CJK UNIFIED IDEOGRAPH-4B4F	[FB80 CB4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_029)
{
    // 4B50 0021;	
    // (䭐) CJK UNIFIED IDEOGRAPH-4B50	[FB80 CB50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_030)
{
    // 4B50 003F;	
    // (䭐) CJK UNIFIED IDEOGRAPH-4B50	[FB80 CB50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_031)
{
    // 4B50 0061;	
    // (䭐) CJK UNIFIED IDEOGRAPH-4B50	[FB80 CB50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_032)
{
    // 4B50 0041;	
    // (䭐) CJK UNIFIED IDEOGRAPH-4B50	[FB80 CB50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_033)
{
    // 4B50 0062;	
    // (䭐) CJK UNIFIED IDEOGRAPH-4B50	[FB80 CB50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_034)
{
    // 4B51 0021;	
    // (䭑) CJK UNIFIED IDEOGRAPH-4B51	[FB80 CB51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_035)
{
    // 4B51 003F;	
    // (䭑) CJK UNIFIED IDEOGRAPH-4B51	[FB80 CB51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_036)
{
    // 4B51 0061;	
    // (䭑) CJK UNIFIED IDEOGRAPH-4B51	[FB80 CB51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_037)
{
    // 4B51 0041;	
    // (䭑) CJK UNIFIED IDEOGRAPH-4B51	[FB80 CB51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_038)
{
    // 4B51 0062;	
    // (䭑) CJK UNIFIED IDEOGRAPH-4B51	[FB80 CB51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_039)
{
    // 4B52 0021;	
    // (䭒) CJK UNIFIED IDEOGRAPH-4B52	[FB80 CB52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_040)
{
    // 4B52 003F;	
    // (䭒) CJK UNIFIED IDEOGRAPH-4B52	[FB80 CB52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_041)
{
    // 4B52 0061;	
    // (䭒) CJK UNIFIED IDEOGRAPH-4B52	[FB80 CB52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_042)
{
    // 4B52 0041;	
    // (䭒) CJK UNIFIED IDEOGRAPH-4B52	[FB80 CB52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_043)
{
    // 4B52 0062;	
    // (䭒) CJK UNIFIED IDEOGRAPH-4B52	[FB80 CB52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_044)
{
    // 4B53 0021;	
    // (䭓) CJK UNIFIED IDEOGRAPH-4B53	[FB80 CB53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_045)
{
    // 4B53 003F;	
    // (䭓) CJK UNIFIED IDEOGRAPH-4B53	[FB80 CB53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_046)
{
    // 4B53 0061;	
    // (䭓) CJK UNIFIED IDEOGRAPH-4B53	[FB80 CB53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_047)
{
    // 4B53 0041;	
    // (䭓) CJK UNIFIED IDEOGRAPH-4B53	[FB80 CB53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_048)
{
    // 4B53 0062;	
    // (䭓) CJK UNIFIED IDEOGRAPH-4B53	[FB80 CB53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_049)
{
    // 4B54 0021;	
    // (䭔) CJK UNIFIED IDEOGRAPH-4B54	[FB80 CB54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_050)
{
    // 4B54 003F;	
    // (䭔) CJK UNIFIED IDEOGRAPH-4B54	[FB80 CB54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_051)
{
    // 4B54 0061;	
    // (䭔) CJK UNIFIED IDEOGRAPH-4B54	[FB80 CB54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_052)
{
    // 4B54 0041;	
    // (䭔) CJK UNIFIED IDEOGRAPH-4B54	[FB80 CB54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_053)
{
    // 4B54 0062;	
    // (䭔) CJK UNIFIED IDEOGRAPH-4B54	[FB80 CB54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_054)
{
    // 4B55 0021;	
    // (䭕) CJK UNIFIED IDEOGRAPH-4B55	[FB80 CB55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_055)
{
    // 4B55 003F;	
    // (䭕) CJK UNIFIED IDEOGRAPH-4B55	[FB80 CB55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_056)
{
    // 4B55 0061;	
    // (䭕) CJK UNIFIED IDEOGRAPH-4B55	[FB80 CB55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_057)
{
    // 4B55 0041;	
    // (䭕) CJK UNIFIED IDEOGRAPH-4B55	[FB80 CB55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_058)
{
    // 4B55 0062;	
    // (䭕) CJK UNIFIED IDEOGRAPH-4B55	[FB80 CB55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_059)
{
    // 4B56 0021;	
    // (䭖) CJK UNIFIED IDEOGRAPH-4B56	[FB80 CB56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_060)
{
    // 4B56 003F;	
    // (䭖) CJK UNIFIED IDEOGRAPH-4B56	[FB80 CB56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_061)
{
    // 4B56 0061;	
    // (䭖) CJK UNIFIED IDEOGRAPH-4B56	[FB80 CB56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_062)
{
    // 4B56 0041;	
    // (䭖) CJK UNIFIED IDEOGRAPH-4B56	[FB80 CB56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_063)
{
    // 4B56 0062;	
    // (䭖) CJK UNIFIED IDEOGRAPH-4B56	[FB80 CB56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_064)
{
    // 4B57 0021;	
    // (䭗) CJK UNIFIED IDEOGRAPH-4B57	[FB80 CB57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_065)
{
    // 4B57 003F;	
    // (䭗) CJK UNIFIED IDEOGRAPH-4B57	[FB80 CB57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_066)
{
    // 4B57 0061;	
    // (䭗) CJK UNIFIED IDEOGRAPH-4B57	[FB80 CB57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_067)
{
    // 4B57 0041;	
    // (䭗) CJK UNIFIED IDEOGRAPH-4B57	[FB80 CB57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_068)
{
    // 4B57 0062;	
    // (䭗) CJK UNIFIED IDEOGRAPH-4B57	[FB80 CB57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_069)
{
    // 4B58 0021;	
    // (䭘) CJK UNIFIED IDEOGRAPH-4B58	[FB80 CB58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_070)
{
    // 4B58 003F;	
    // (䭘) CJK UNIFIED IDEOGRAPH-4B58	[FB80 CB58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_071)
{
    // 4B58 0061;	
    // (䭘) CJK UNIFIED IDEOGRAPH-4B58	[FB80 CB58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_072)
{
    // 4B58 0041;	
    // (䭘) CJK UNIFIED IDEOGRAPH-4B58	[FB80 CB58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_073)
{
    // 4B58 0062;	
    // (䭘) CJK UNIFIED IDEOGRAPH-4B58	[FB80 CB58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_074)
{
    // 4B59 0021;	
    // (䭙) CJK UNIFIED IDEOGRAPH-4B59	[FB80 CB59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_075)
{
    // 4B59 003F;	
    // (䭙) CJK UNIFIED IDEOGRAPH-4B59	[FB80 CB59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_076)
{
    // 4B59 0061;	
    // (䭙) CJK UNIFIED IDEOGRAPH-4B59	[FB80 CB59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_077)
{
    // 4B59 0041;	
    // (䭙) CJK UNIFIED IDEOGRAPH-4B59	[FB80 CB59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_078)
{
    // 4B59 0062;	
    // (䭙) CJK UNIFIED IDEOGRAPH-4B59	[FB80 CB59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_079)
{
    // 4B5A 0021;	
    // (䭚) CJK UNIFIED IDEOGRAPH-4B5A	[FB80 CB5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_080)
{
    // 4B5A 003F;	
    // (䭚) CJK UNIFIED IDEOGRAPH-4B5A	[FB80 CB5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_081)
{
    // 4B5A 0061;	
    // (䭚) CJK UNIFIED IDEOGRAPH-4B5A	[FB80 CB5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_082)
{
    // 4B5A 0041;	
    // (䭚) CJK UNIFIED IDEOGRAPH-4B5A	[FB80 CB5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_083)
{
    // 4B5A 0062;	
    // (䭚) CJK UNIFIED IDEOGRAPH-4B5A	[FB80 CB5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_084)
{
    // 4B5B 0021;	
    // (䭛) CJK UNIFIED IDEOGRAPH-4B5B	[FB80 CB5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_085)
{
    // 4B5B 003F;	
    // (䭛) CJK UNIFIED IDEOGRAPH-4B5B	[FB80 CB5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_086)
{
    // 4B5B 0061;	
    // (䭛) CJK UNIFIED IDEOGRAPH-4B5B	[FB80 CB5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_087)
{
    // 4B5B 0041;	
    // (䭛) CJK UNIFIED IDEOGRAPH-4B5B	[FB80 CB5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_088)
{
    // 4B5B 0062;	
    // (䭛) CJK UNIFIED IDEOGRAPH-4B5B	[FB80 CB5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_089)
{
    // 4B5C 0021;	
    // (䭜) CJK UNIFIED IDEOGRAPH-4B5C	[FB80 CB5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_090)
{
    // 4B5C 003F;	
    // (䭜) CJK UNIFIED IDEOGRAPH-4B5C	[FB80 CB5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_091)
{
    // 4B5C 0061;	
    // (䭜) CJK UNIFIED IDEOGRAPH-4B5C	[FB80 CB5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_092)
{
    // 4B5C 0041;	
    // (䭜) CJK UNIFIED IDEOGRAPH-4B5C	[FB80 CB5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_093)
{
    // 4B5C 0062;	
    // (䭜) CJK UNIFIED IDEOGRAPH-4B5C	[FB80 CB5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_094)
{
    // 4B5D 0021;	
    // (䭝) CJK UNIFIED IDEOGRAPH-4B5D	[FB80 CB5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_095)
{
    // 4B5D 003F;	
    // (䭝) CJK UNIFIED IDEOGRAPH-4B5D	[FB80 CB5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_096)
{
    // 4B5D 0061;	
    // (䭝) CJK UNIFIED IDEOGRAPH-4B5D	[FB80 CB5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_097)
{
    // 4B5D 0041;	
    // (䭝) CJK UNIFIED IDEOGRAPH-4B5D	[FB80 CB5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_098)
{
    // 4B5D 0062;	
    // (䭝) CJK UNIFIED IDEOGRAPH-4B5D	[FB80 CB5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_099)
{
    // 4B5E 0021;	
    // (䭞) CJK UNIFIED IDEOGRAPH-4B5E	[FB80 CB5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_100)
{
    // 4B5E 003F;	
    // (䭞) CJK UNIFIED IDEOGRAPH-4B5E	[FB80 CB5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_101)
{
    // 4B5E 0061;	
    // (䭞) CJK UNIFIED IDEOGRAPH-4B5E	[FB80 CB5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_102)
{
    // 4B5E 0041;	
    // (䭞) CJK UNIFIED IDEOGRAPH-4B5E	[FB80 CB5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_103)
{
    // 4B5E 0062;	
    // (䭞) CJK UNIFIED IDEOGRAPH-4B5E	[FB80 CB5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_104)
{
    // 4B5F 0021;	
    // (䭟) CJK UNIFIED IDEOGRAPH-4B5F	[FB80 CB5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_105)
{
    // 4B5F 003F;	
    // (䭟) CJK UNIFIED IDEOGRAPH-4B5F	[FB80 CB5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_106)
{
    // 4B5F 0061;	
    // (䭟) CJK UNIFIED IDEOGRAPH-4B5F	[FB80 CB5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_107)
{
    // 4B5F 0041;	
    // (䭟) CJK UNIFIED IDEOGRAPH-4B5F	[FB80 CB5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_108)
{
    // 4B5F 0062;	
    // (䭟) CJK UNIFIED IDEOGRAPH-4B5F	[FB80 CB5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_109)
{
    // 4B60 0021;	
    // (䭠) CJK UNIFIED IDEOGRAPH-4B60	[FB80 CB60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_110)
{
    // 4B60 003F;	
    // (䭠) CJK UNIFIED IDEOGRAPH-4B60	[FB80 CB60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_111)
{
    // 4B60 0061;	
    // (䭠) CJK UNIFIED IDEOGRAPH-4B60	[FB80 CB60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_112)
{
    // 4B60 0041;	
    // (䭠) CJK UNIFIED IDEOGRAPH-4B60	[FB80 CB60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_113)
{
    // 4B60 0062;	
    // (䭠) CJK UNIFIED IDEOGRAPH-4B60	[FB80 CB60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_114)
{
    // 4B61 0021;	
    // (䭡) CJK UNIFIED IDEOGRAPH-4B61	[FB80 CB61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_115)
{
    // 4B61 003F;	
    // (䭡) CJK UNIFIED IDEOGRAPH-4B61	[FB80 CB61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_116)
{
    // 4B61 0061;	
    // (䭡) CJK UNIFIED IDEOGRAPH-4B61	[FB80 CB61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_117)
{
    // 4B61 0041;	
    // (䭡) CJK UNIFIED IDEOGRAPH-4B61	[FB80 CB61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_118)
{
    // 4B61 0062;	
    // (䭡) CJK UNIFIED IDEOGRAPH-4B61	[FB80 CB61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_119)
{
    // 4B62 0021;	
    // (䭢) CJK UNIFIED IDEOGRAPH-4B62	[FB80 CB62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_120)
{
    // 4B62 003F;	
    // (䭢) CJK UNIFIED IDEOGRAPH-4B62	[FB80 CB62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_121)
{
    // 4B62 0061;	
    // (䭢) CJK UNIFIED IDEOGRAPH-4B62	[FB80 CB62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_122)
{
    // 4B62 0041;	
    // (䭢) CJK UNIFIED IDEOGRAPH-4B62	[FB80 CB62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_123)
{
    // 4B62 0062;	
    // (䭢) CJK UNIFIED IDEOGRAPH-4B62	[FB80 CB62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_124)
{
    // 4B63 0021;	
    // (䭣) CJK UNIFIED IDEOGRAPH-4B63	[FB80 CB63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_125)
{
    // 4B63 003F;	
    // (䭣) CJK UNIFIED IDEOGRAPH-4B63	[FB80 CB63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_126)
{
    // 4B63 0061;	
    // (䭣) CJK UNIFIED IDEOGRAPH-4B63	[FB80 CB63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_127)
{
    // 4B63 0041;	
    // (䭣) CJK UNIFIED IDEOGRAPH-4B63	[FB80 CB63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_128)
{
    // 4B63 0062;	
    // (䭣) CJK UNIFIED IDEOGRAPH-4B63	[FB80 CB63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_129)
{
    // 4B64 0021;	
    // (䭤) CJK UNIFIED IDEOGRAPH-4B64	[FB80 CB64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_130)
{
    // 4B64 003F;	
    // (䭤) CJK UNIFIED IDEOGRAPH-4B64	[FB80 CB64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_131)
{
    // 4B64 0061;	
    // (䭤) CJK UNIFIED IDEOGRAPH-4B64	[FB80 CB64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_132)
{
    // 4B64 0041;	
    // (䭤) CJK UNIFIED IDEOGRAPH-4B64	[FB80 CB64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_133)
{
    // 4B64 0062;	
    // (䭤) CJK UNIFIED IDEOGRAPH-4B64	[FB80 CB64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_134)
{
    // 4B65 0021;	
    // (䭥) CJK UNIFIED IDEOGRAPH-4B65	[FB80 CB65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_135)
{
    // 4B65 003F;	
    // (䭥) CJK UNIFIED IDEOGRAPH-4B65	[FB80 CB65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_136)
{
    // 4B65 0061;	
    // (䭥) CJK UNIFIED IDEOGRAPH-4B65	[FB80 CB65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_137)
{
    // 4B65 0041;	
    // (䭥) CJK UNIFIED IDEOGRAPH-4B65	[FB80 CB65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_138)
{
    // 4B65 0062;	
    // (䭥) CJK UNIFIED IDEOGRAPH-4B65	[FB80 CB65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_139)
{
    // 4B66 0021;	
    // (䭦) CJK UNIFIED IDEOGRAPH-4B66	[FB80 CB66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_140)
{
    // 4B66 003F;	
    // (䭦) CJK UNIFIED IDEOGRAPH-4B66	[FB80 CB66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_141)
{
    // 4B66 0061;	
    // (䭦) CJK UNIFIED IDEOGRAPH-4B66	[FB80 CB66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_142)
{
    // 4B66 0041;	
    // (䭦) CJK UNIFIED IDEOGRAPH-4B66	[FB80 CB66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_143)
{
    // 4B66 0062;	
    // (䭦) CJK UNIFIED IDEOGRAPH-4B66	[FB80 CB66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_144)
{
    // 4B67 0021;	
    // (䭧) CJK UNIFIED IDEOGRAPH-4B67	[FB80 CB67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_145)
{
    // 4B67 003F;	
    // (䭧) CJK UNIFIED IDEOGRAPH-4B67	[FB80 CB67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_146)
{
    // 4B67 0061;	
    // (䭧) CJK UNIFIED IDEOGRAPH-4B67	[FB80 CB67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_147)
{
    // 4B67 0041;	
    // (䭧) CJK UNIFIED IDEOGRAPH-4B67	[FB80 CB67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_148)
{
    // 4B67 0062;	
    // (䭧) CJK UNIFIED IDEOGRAPH-4B67	[FB80 CB67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_149)
{
    // 4B68 0021;	
    // (䭨) CJK UNIFIED IDEOGRAPH-4B68	[FB80 CB68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_150)
{
    // 4B68 003F;	
    // (䭨) CJK UNIFIED IDEOGRAPH-4B68	[FB80 CB68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_151)
{
    // 4B68 0061;	
    // (䭨) CJK UNIFIED IDEOGRAPH-4B68	[FB80 CB68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_152)
{
    // 4B68 0041;	
    // (䭨) CJK UNIFIED IDEOGRAPH-4B68	[FB80 CB68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_153)
{
    // 4B68 0062;	
    // (䭨) CJK UNIFIED IDEOGRAPH-4B68	[FB80 CB68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_154)
{
    // 4B69 0021;	
    // (䭩) CJK UNIFIED IDEOGRAPH-4B69	[FB80 CB69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_155)
{
    // 4B69 003F;	
    // (䭩) CJK UNIFIED IDEOGRAPH-4B69	[FB80 CB69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_156)
{
    // 4B69 0061;	
    // (䭩) CJK UNIFIED IDEOGRAPH-4B69	[FB80 CB69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_157)
{
    // 4B69 0041;	
    // (䭩) CJK UNIFIED IDEOGRAPH-4B69	[FB80 CB69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_158)
{
    // 4B69 0062;	
    // (䭩) CJK UNIFIED IDEOGRAPH-4B69	[FB80 CB69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_159)
{
    // 4B6A 0021;	
    // (䭪) CJK UNIFIED IDEOGRAPH-4B6A	[FB80 CB6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_160)
{
    // 4B6A 003F;	
    // (䭪) CJK UNIFIED IDEOGRAPH-4B6A	[FB80 CB6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_161)
{
    // 4B6A 0061;	
    // (䭪) CJK UNIFIED IDEOGRAPH-4B6A	[FB80 CB6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_162)
{
    // 4B6A 0041;	
    // (䭪) CJK UNIFIED IDEOGRAPH-4B6A	[FB80 CB6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_163)
{
    // 4B6A 0062;	
    // (䭪) CJK UNIFIED IDEOGRAPH-4B6A	[FB80 CB6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_164)
{
    // 4B6B 0021;	
    // (䭫) CJK UNIFIED IDEOGRAPH-4B6B	[FB80 CB6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_165)
{
    // 4B6B 003F;	
    // (䭫) CJK UNIFIED IDEOGRAPH-4B6B	[FB80 CB6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_166)
{
    // 4B6B 0061;	
    // (䭫) CJK UNIFIED IDEOGRAPH-4B6B	[FB80 CB6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_167)
{
    // 4B6B 0041;	
    // (䭫) CJK UNIFIED IDEOGRAPH-4B6B	[FB80 CB6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_168)
{
    // 4B6B 0062;	
    // (䭫) CJK UNIFIED IDEOGRAPH-4B6B	[FB80 CB6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_169)
{
    // 4B6C 0021;	
    // (䭬) CJK UNIFIED IDEOGRAPH-4B6C	[FB80 CB6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_170)
{
    // 4B6C 003F;	
    // (䭬) CJK UNIFIED IDEOGRAPH-4B6C	[FB80 CB6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_171)
{
    // 4B6C 0061;	
    // (䭬) CJK UNIFIED IDEOGRAPH-4B6C	[FB80 CB6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_172)
{
    // 4B6C 0041;	
    // (䭬) CJK UNIFIED IDEOGRAPH-4B6C	[FB80 CB6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_173)
{
    // 4B6C 0062;	
    // (䭬) CJK UNIFIED IDEOGRAPH-4B6C	[FB80 CB6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_174)
{
    // 4B6D 0021;	
    // (䭭) CJK UNIFIED IDEOGRAPH-4B6D	[FB80 CB6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_175)
{
    // 4B6D 003F;	
    // (䭭) CJK UNIFIED IDEOGRAPH-4B6D	[FB80 CB6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_176)
{
    // 4B6D 0061;	
    // (䭭) CJK UNIFIED IDEOGRAPH-4B6D	[FB80 CB6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_177)
{
    // 4B6D 0041;	
    // (䭭) CJK UNIFIED IDEOGRAPH-4B6D	[FB80 CB6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_178)
{
    // 4B6D 0062;	
    // (䭭) CJK UNIFIED IDEOGRAPH-4B6D	[FB80 CB6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_179)
{
    // 4B6E 0021;	
    // (䭮) CJK UNIFIED IDEOGRAPH-4B6E	[FB80 CB6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_180)
{
    // 4B6E 003F;	
    // (䭮) CJK UNIFIED IDEOGRAPH-4B6E	[FB80 CB6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_181)
{
    // 4B6E 0061;	
    // (䭮) CJK UNIFIED IDEOGRAPH-4B6E	[FB80 CB6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_182)
{
    // 4B6E 0041;	
    // (䭮) CJK UNIFIED IDEOGRAPH-4B6E	[FB80 CB6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_183)
{
    // 4B6E 0062;	
    // (䭮) CJK UNIFIED IDEOGRAPH-4B6E	[FB80 CB6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_184)
{
    // 4B6F 0021;	
    // (䭯) CJK UNIFIED IDEOGRAPH-4B6F	[FB80 CB6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_185)
{
    // 4B6F 003F;	
    // (䭯) CJK UNIFIED IDEOGRAPH-4B6F	[FB80 CB6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_186)
{
    // 4B6F 0061;	
    // (䭯) CJK UNIFIED IDEOGRAPH-4B6F	[FB80 CB6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_187)
{
    // 4B6F 0041;	
    // (䭯) CJK UNIFIED IDEOGRAPH-4B6F	[FB80 CB6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_188)
{
    // 4B6F 0062;	
    // (䭯) CJK UNIFIED IDEOGRAPH-4B6F	[FB80 CB6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_189)
{
    // 4B70 0021;	
    // (䭰) CJK UNIFIED IDEOGRAPH-4B70	[FB80 CB70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_190)
{
    // 4B70 003F;	
    // (䭰) CJK UNIFIED IDEOGRAPH-4B70	[FB80 CB70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_191)
{
    // 4B70 0061;	
    // (䭰) CJK UNIFIED IDEOGRAPH-4B70	[FB80 CB70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_192)
{
    // 4B70 0041;	
    // (䭰) CJK UNIFIED IDEOGRAPH-4B70	[FB80 CB70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_193)
{
    // 4B70 0062;	
    // (䭰) CJK UNIFIED IDEOGRAPH-4B70	[FB80 CB70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_194)
{
    // 4B71 0021;	
    // (䭱) CJK UNIFIED IDEOGRAPH-4B71	[FB80 CB71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_195)
{
    // 4B71 003F;	
    // (䭱) CJK UNIFIED IDEOGRAPH-4B71	[FB80 CB71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_196)
{
    // 4B71 0061;	
    // (䭱) CJK UNIFIED IDEOGRAPH-4B71	[FB80 CB71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_197)
{
    // 4B71 0041;	
    // (䭱) CJK UNIFIED IDEOGRAPH-4B71	[FB80 CB71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_198)
{
    // 4B71 0062;	
    // (䭱) CJK UNIFIED IDEOGRAPH-4B71	[FB80 CB71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_199)
{
    // 4B72 0021;	
    // (䭲) CJK UNIFIED IDEOGRAPH-4B72	[FB80 CB72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_200)
{
    // 4B72 003F;	
    // (䭲) CJK UNIFIED IDEOGRAPH-4B72	[FB80 CB72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_201)
{
    // 4B72 0061;	
    // (䭲) CJK UNIFIED IDEOGRAPH-4B72	[FB80 CB72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_202)
{
    // 4B72 0041;	
    // (䭲) CJK UNIFIED IDEOGRAPH-4B72	[FB80 CB72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_203)
{
    // 4B72 0062;	
    // (䭲) CJK UNIFIED IDEOGRAPH-4B72	[FB80 CB72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_204)
{
    // 4B73 0021;	
    // (䭳) CJK UNIFIED IDEOGRAPH-4B73	[FB80 CB73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_205)
{
    // 4B73 003F;	
    // (䭳) CJK UNIFIED IDEOGRAPH-4B73	[FB80 CB73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_206)
{
    // 4B73 0061;	
    // (䭳) CJK UNIFIED IDEOGRAPH-4B73	[FB80 CB73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_207)
{
    // 4B73 0041;	
    // (䭳) CJK UNIFIED IDEOGRAPH-4B73	[FB80 CB73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_208)
{
    // 4B73 0062;	
    // (䭳) CJK UNIFIED IDEOGRAPH-4B73	[FB80 CB73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_209)
{
    // 4B74 0021;	
    // (䭴) CJK UNIFIED IDEOGRAPH-4B74	[FB80 CB74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_210)
{
    // 4B74 003F;	
    // (䭴) CJK UNIFIED IDEOGRAPH-4B74	[FB80 CB74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_211)
{
    // 4B74 0061;	
    // (䭴) CJK UNIFIED IDEOGRAPH-4B74	[FB80 CB74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_212)
{
    // 4B74 0041;	
    // (䭴) CJK UNIFIED IDEOGRAPH-4B74	[FB80 CB74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_213)
{
    // 4B74 0062;	
    // (䭴) CJK UNIFIED IDEOGRAPH-4B74	[FB80 CB74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_214)
{
    // 4B75 0021;	
    // (䭵) CJK UNIFIED IDEOGRAPH-4B75	[FB80 CB75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_215)
{
    // 4B75 003F;	
    // (䭵) CJK UNIFIED IDEOGRAPH-4B75	[FB80 CB75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_216)
{
    // 4B75 0061;	
    // (䭵) CJK UNIFIED IDEOGRAPH-4B75	[FB80 CB75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_217)
{
    // 4B75 0041;	
    // (䭵) CJK UNIFIED IDEOGRAPH-4B75	[FB80 CB75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_218)
{
    // 4B75 0062;	
    // (䭵) CJK UNIFIED IDEOGRAPH-4B75	[FB80 CB75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_219)
{
    // 4B76 0021;	
    // (䭶) CJK UNIFIED IDEOGRAPH-4B76	[FB80 CB76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_220)
{
    // 4B76 003F;	
    // (䭶) CJK UNIFIED IDEOGRAPH-4B76	[FB80 CB76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_221)
{
    // 4B76 0061;	
    // (䭶) CJK UNIFIED IDEOGRAPH-4B76	[FB80 CB76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_222)
{
    // 4B76 0041;	
    // (䭶) CJK UNIFIED IDEOGRAPH-4B76	[FB80 CB76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_223)
{
    // 4B76 0062;	
    // (䭶) CJK UNIFIED IDEOGRAPH-4B76	[FB80 CB76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_224)
{
    // 4B77 0021;	
    // (䭷) CJK UNIFIED IDEOGRAPH-4B77	[FB80 CB77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_225)
{
    // 4B77 003F;	
    // (䭷) CJK UNIFIED IDEOGRAPH-4B77	[FB80 CB77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_226)
{
    // 4B77 0061;	
    // (䭷) CJK UNIFIED IDEOGRAPH-4B77	[FB80 CB77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_227)
{
    // 4B77 0041;	
    // (䭷) CJK UNIFIED IDEOGRAPH-4B77	[FB80 CB77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_228)
{
    // 4B77 0062;	
    // (䭷) CJK UNIFIED IDEOGRAPH-4B77	[FB80 CB77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_229)
{
    // 4B78 0021;	
    // (䭸) CJK UNIFIED IDEOGRAPH-4B78	[FB80 CB78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_230)
{
    // 4B78 003F;	
    // (䭸) CJK UNIFIED IDEOGRAPH-4B78	[FB80 CB78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_231)
{
    // 4B78 0061;	
    // (䭸) CJK UNIFIED IDEOGRAPH-4B78	[FB80 CB78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_232)
{
    // 4B78 0041;	
    // (䭸) CJK UNIFIED IDEOGRAPH-4B78	[FB80 CB78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_233)
{
    // 4B78 0062;	
    // (䭸) CJK UNIFIED IDEOGRAPH-4B78	[FB80 CB78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_234)
{
    // 4B79 0021;	
    // (䭹) CJK UNIFIED IDEOGRAPH-4B79	[FB80 CB79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_235)
{
    // 4B79 003F;	
    // (䭹) CJK UNIFIED IDEOGRAPH-4B79	[FB80 CB79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_236)
{
    // 4B79 0061;	
    // (䭹) CJK UNIFIED IDEOGRAPH-4B79	[FB80 CB79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_237)
{
    // 4B79 0041;	
    // (䭹) CJK UNIFIED IDEOGRAPH-4B79	[FB80 CB79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_238)
{
    // 4B79 0062;	
    // (䭹) CJK UNIFIED IDEOGRAPH-4B79	[FB80 CB79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_239)
{
    // 4B7A 0021;	
    // (䭺) CJK UNIFIED IDEOGRAPH-4B7A	[FB80 CB7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_240)
{
    // 4B7A 003F;	
    // (䭺) CJK UNIFIED IDEOGRAPH-4B7A	[FB80 CB7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_241)
{
    // 4B7A 0061;	
    // (䭺) CJK UNIFIED IDEOGRAPH-4B7A	[FB80 CB7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_242)
{
    // 4B7A 0041;	
    // (䭺) CJK UNIFIED IDEOGRAPH-4B7A	[FB80 CB7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_243)
{
    // 4B7A 0062;	
    // (䭺) CJK UNIFIED IDEOGRAPH-4B7A	[FB80 CB7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_244)
{
    // 4B7B 0021;	
    // (䭻) CJK UNIFIED IDEOGRAPH-4B7B	[FB80 CB7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_245)
{
    // 4B7B 003F;	
    // (䭻) CJK UNIFIED IDEOGRAPH-4B7B	[FB80 CB7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_246)
{
    // 4B7B 0061;	
    // (䭻) CJK UNIFIED IDEOGRAPH-4B7B	[FB80 CB7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_247)
{
    // 4B7B 0041;	
    // (䭻) CJK UNIFIED IDEOGRAPH-4B7B	[FB80 CB7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_248)
{
    // 4B7B 0062;	
    // (䭻) CJK UNIFIED IDEOGRAPH-4B7B	[FB80 CB7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_249)
{
    // 4B7C 0021;	
    // (䭼) CJK UNIFIED IDEOGRAPH-4B7C	[FB80 CB7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_250)
{
    // 4B7C 003F;	
    // (䭼) CJK UNIFIED IDEOGRAPH-4B7C	[FB80 CB7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_251)
{
    // 4B7C 0061;	
    // (䭼) CJK UNIFIED IDEOGRAPH-4B7C	[FB80 CB7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_252)
{
    // 4B7C 0041;	
    // (䭼) CJK UNIFIED IDEOGRAPH-4B7C	[FB80 CB7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_253)
{
    // 4B7C 0062;	
    // (䭼) CJK UNIFIED IDEOGRAPH-4B7C	[FB80 CB7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_254)
{
    // 4B7D 0021;	
    // (䭽) CJK UNIFIED IDEOGRAPH-4B7D	[FB80 CB7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_255)
{
    // 4B7D 003F;	
    // (䭽) CJK UNIFIED IDEOGRAPH-4B7D	[FB80 CB7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_256)
{
    // 4B7D 0061;	
    // (䭽) CJK UNIFIED IDEOGRAPH-4B7D	[FB80 CB7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_257)
{
    // 4B7D 0041;	
    // (䭽) CJK UNIFIED IDEOGRAPH-4B7D	[FB80 CB7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_258)
{
    // 4B7D 0062;	
    // (䭽) CJK UNIFIED IDEOGRAPH-4B7D	[FB80 CB7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_259)
{
    // 4B7E 0021;	
    // (䭾) CJK UNIFIED IDEOGRAPH-4B7E	[FB80 CB7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_260)
{
    // 4B7E 003F;	
    // (䭾) CJK UNIFIED IDEOGRAPH-4B7E	[FB80 CB7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_261)
{
    // 4B7E 0061;	
    // (䭾) CJK UNIFIED IDEOGRAPH-4B7E	[FB80 CB7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_262)
{
    // 4B7E 0041;	
    // (䭾) CJK UNIFIED IDEOGRAPH-4B7E	[FB80 CB7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_263)
{
    // 4B7E 0062;	
    // (䭾) CJK UNIFIED IDEOGRAPH-4B7E	[FB80 CB7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_264)
{
    // 4B7F 0021;	
    // (䭿) CJK UNIFIED IDEOGRAPH-4B7F	[FB80 CB7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_265)
{
    // 4B7F 003F;	
    // (䭿) CJK UNIFIED IDEOGRAPH-4B7F	[FB80 CB7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_266)
{
    // 4B7F 0061;	
    // (䭿) CJK UNIFIED IDEOGRAPH-4B7F	[FB80 CB7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_267)
{
    // 4B7F 0041;	
    // (䭿) CJK UNIFIED IDEOGRAPH-4B7F	[FB80 CB7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_268)
{
    // 4B7F 0062;	
    // (䭿) CJK UNIFIED IDEOGRAPH-4B7F	[FB80 CB7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_269)
{
    // 4B80 0021;	
    // (䮀) CJK UNIFIED IDEOGRAPH-4B80	[FB80 CB80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_270)
{
    // 4B80 003F;	
    // (䮀) CJK UNIFIED IDEOGRAPH-4B80	[FB80 CB80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_271)
{
    // 4B80 0061;	
    // (䮀) CJK UNIFIED IDEOGRAPH-4B80	[FB80 CB80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_272)
{
    // 4B80 0041;	
    // (䮀) CJK UNIFIED IDEOGRAPH-4B80	[FB80 CB80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_273)
{
    // 4B80 0062;	
    // (䮀) CJK UNIFIED IDEOGRAPH-4B80	[FB80 CB80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_274)
{
    // 4B81 0021;	
    // (䮁) CJK UNIFIED IDEOGRAPH-4B81	[FB80 CB81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_275)
{
    // 4B81 003F;	
    // (䮁) CJK UNIFIED IDEOGRAPH-4B81	[FB80 CB81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_276)
{
    // 4B81 0061;	
    // (䮁) CJK UNIFIED IDEOGRAPH-4B81	[FB80 CB81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_277)
{
    // 4B81 0041;	
    // (䮁) CJK UNIFIED IDEOGRAPH-4B81	[FB80 CB81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_278)
{
    // 4B81 0062;	
    // (䮁) CJK UNIFIED IDEOGRAPH-4B81	[FB80 CB81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_279)
{
    // 4B82 0021;	
    // (䮂) CJK UNIFIED IDEOGRAPH-4B82	[FB80 CB82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_280)
{
    // 4B82 003F;	
    // (䮂) CJK UNIFIED IDEOGRAPH-4B82	[FB80 CB82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_281)
{
    // 4B82 0061;	
    // (䮂) CJK UNIFIED IDEOGRAPH-4B82	[FB80 CB82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_282)
{
    // 4B82 0041;	
    // (䮂) CJK UNIFIED IDEOGRAPH-4B82	[FB80 CB82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_283)
{
    // 4B82 0062;	
    // (䮂) CJK UNIFIED IDEOGRAPH-4B82	[FB80 CB82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_284)
{
    // 4B83 0021;	
    // (䮃) CJK UNIFIED IDEOGRAPH-4B83	[FB80 CB83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_285)
{
    // 4B83 003F;	
    // (䮃) CJK UNIFIED IDEOGRAPH-4B83	[FB80 CB83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_286)
{
    // 4B83 0061;	
    // (䮃) CJK UNIFIED IDEOGRAPH-4B83	[FB80 CB83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_287)
{
    // 4B83 0041;	
    // (䮃) CJK UNIFIED IDEOGRAPH-4B83	[FB80 CB83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_288)
{
    // 4B83 0062;	
    // (䮃) CJK UNIFIED IDEOGRAPH-4B83	[FB80 CB83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_289)
{
    // 4B84 0021;	
    // (䮄) CJK UNIFIED IDEOGRAPH-4B84	[FB80 CB84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_290)
{
    // 4B84 003F;	
    // (䮄) CJK UNIFIED IDEOGRAPH-4B84	[FB80 CB84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_291)
{
    // 4B84 0061;	
    // (䮄) CJK UNIFIED IDEOGRAPH-4B84	[FB80 CB84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_292)
{
    // 4B84 0041;	
    // (䮄) CJK UNIFIED IDEOGRAPH-4B84	[FB80 CB84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_293)
{
    // 4B84 0062;	
    // (䮄) CJK UNIFIED IDEOGRAPH-4B84	[FB80 CB84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_294)
{
    // 4B85 0021;	
    // (䮅) CJK UNIFIED IDEOGRAPH-4B85	[FB80 CB85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_295)
{
    // 4B85 003F;	
    // (䮅) CJK UNIFIED IDEOGRAPH-4B85	[FB80 CB85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_296)
{
    // 4B85 0061;	
    // (䮅) CJK UNIFIED IDEOGRAPH-4B85	[FB80 CB85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_297)
{
    // 4B85 0041;	
    // (䮅) CJK UNIFIED IDEOGRAPH-4B85	[FB80 CB85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_298)
{
    // 4B85 0062;	
    // (䮅) CJK UNIFIED IDEOGRAPH-4B85	[FB80 CB85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_299)
{
    // 4B86 0021;	
    // (䮆) CJK UNIFIED IDEOGRAPH-4B86	[FB80 CB86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_300)
{
    // 4B86 003F;	
    // (䮆) CJK UNIFIED IDEOGRAPH-4B86	[FB80 CB86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_301)
{
    // 4B86 0061;	
    // (䮆) CJK UNIFIED IDEOGRAPH-4B86	[FB80 CB86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_302)
{
    // 4B86 0041;	
    // (䮆) CJK UNIFIED IDEOGRAPH-4B86	[FB80 CB86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_303)
{
    // 4B86 0062;	
    // (䮆) CJK UNIFIED IDEOGRAPH-4B86	[FB80 CB86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_304)
{
    // 4B87 0021;	
    // (䮇) CJK UNIFIED IDEOGRAPH-4B87	[FB80 CB87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_305)
{
    // 4B87 003F;	
    // (䮇) CJK UNIFIED IDEOGRAPH-4B87	[FB80 CB87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_306)
{
    // 4B87 0061;	
    // (䮇) CJK UNIFIED IDEOGRAPH-4B87	[FB80 CB87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_307)
{
    // 4B87 0041;	
    // (䮇) CJK UNIFIED IDEOGRAPH-4B87	[FB80 CB87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_308)
{
    // 4B87 0062;	
    // (䮇) CJK UNIFIED IDEOGRAPH-4B87	[FB80 CB87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_309)
{
    // 4B88 0021;	
    // (䮈) CJK UNIFIED IDEOGRAPH-4B88	[FB80 CB88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_310)
{
    // 4B88 003F;	
    // (䮈) CJK UNIFIED IDEOGRAPH-4B88	[FB80 CB88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_311)
{
    // 4B88 0061;	
    // (䮈) CJK UNIFIED IDEOGRAPH-4B88	[FB80 CB88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_312)
{
    // 4B88 0041;	
    // (䮈) CJK UNIFIED IDEOGRAPH-4B88	[FB80 CB88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_313)
{
    // 4B88 0062;	
    // (䮈) CJK UNIFIED IDEOGRAPH-4B88	[FB80 CB88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_314)
{
    // 4B89 0021;	
    // (䮉) CJK UNIFIED IDEOGRAPH-4B89	[FB80 CB89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_315)
{
    // 4B89 003F;	
    // (䮉) CJK UNIFIED IDEOGRAPH-4B89	[FB80 CB89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_316)
{
    // 4B89 0061;	
    // (䮉) CJK UNIFIED IDEOGRAPH-4B89	[FB80 CB89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_317)
{
    // 4B89 0041;	
    // (䮉) CJK UNIFIED IDEOGRAPH-4B89	[FB80 CB89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_318)
{
    // 4B89 0062;	
    // (䮉) CJK UNIFIED IDEOGRAPH-4B89	[FB80 CB89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_319)
{
    // 4B8A 0021;	
    // (䮊) CJK UNIFIED IDEOGRAPH-4B8A	[FB80 CB8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_320)
{
    // 4B8A 003F;	
    // (䮊) CJK UNIFIED IDEOGRAPH-4B8A	[FB80 CB8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_321)
{
    // 4B8A 0061;	
    // (䮊) CJK UNIFIED IDEOGRAPH-4B8A	[FB80 CB8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_322)
{
    // 4B8A 0041;	
    // (䮊) CJK UNIFIED IDEOGRAPH-4B8A	[FB80 CB8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_323)
{
    // 4B8A 0062;	
    // (䮊) CJK UNIFIED IDEOGRAPH-4B8A	[FB80 CB8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_324)
{
    // 4B8B 0021;	
    // (䮋) CJK UNIFIED IDEOGRAPH-4B8B	[FB80 CB8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_325)
{
    // 4B8B 003F;	
    // (䮋) CJK UNIFIED IDEOGRAPH-4B8B	[FB80 CB8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_326)
{
    // 4B8B 0061;	
    // (䮋) CJK UNIFIED IDEOGRAPH-4B8B	[FB80 CB8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_327)
{
    // 4B8B 0041;	
    // (䮋) CJK UNIFIED IDEOGRAPH-4B8B	[FB80 CB8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_328)
{
    // 4B8B 0062;	
    // (䮋) CJK UNIFIED IDEOGRAPH-4B8B	[FB80 CB8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_329)
{
    // 4B8C 0021;	
    // (䮌) CJK UNIFIED IDEOGRAPH-4B8C	[FB80 CB8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_330)
{
    // 4B8C 003F;	
    // (䮌) CJK UNIFIED IDEOGRAPH-4B8C	[FB80 CB8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_331)
{
    // 4B8C 0061;	
    // (䮌) CJK UNIFIED IDEOGRAPH-4B8C	[FB80 CB8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_332)
{
    // 4B8C 0041;	
    // (䮌) CJK UNIFIED IDEOGRAPH-4B8C	[FB80 CB8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_333)
{
    // 4B8C 0062;	
    // (䮌) CJK UNIFIED IDEOGRAPH-4B8C	[FB80 CB8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_334)
{
    // 4B8D 0021;	
    // (䮍) CJK UNIFIED IDEOGRAPH-4B8D	[FB80 CB8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_335)
{
    // 4B8D 003F;	
    // (䮍) CJK UNIFIED IDEOGRAPH-4B8D	[FB80 CB8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_336)
{
    // 4B8D 0061;	
    // (䮍) CJK UNIFIED IDEOGRAPH-4B8D	[FB80 CB8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_337)
{
    // 4B8D 0041;	
    // (䮍) CJK UNIFIED IDEOGRAPH-4B8D	[FB80 CB8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_338)
{
    // 4B8D 0062;	
    // (䮍) CJK UNIFIED IDEOGRAPH-4B8D	[FB80 CB8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_339)
{
    // 4B8E 0021;	
    // (䮎) CJK UNIFIED IDEOGRAPH-4B8E	[FB80 CB8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_340)
{
    // 4B8E 003F;	
    // (䮎) CJK UNIFIED IDEOGRAPH-4B8E	[FB80 CB8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_341)
{
    // 4B8E 0061;	
    // (䮎) CJK UNIFIED IDEOGRAPH-4B8E	[FB80 CB8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_342)
{
    // 4B8E 0041;	
    // (䮎) CJK UNIFIED IDEOGRAPH-4B8E	[FB80 CB8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_343)
{
    // 4B8E 0062;	
    // (䮎) CJK UNIFIED IDEOGRAPH-4B8E	[FB80 CB8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_344)
{
    // 4B8F 0021;	
    // (䮏) CJK UNIFIED IDEOGRAPH-4B8F	[FB80 CB8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_345)
{
    // 4B8F 003F;	
    // (䮏) CJK UNIFIED IDEOGRAPH-4B8F	[FB80 CB8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_346)
{
    // 4B8F 0061;	
    // (䮏) CJK UNIFIED IDEOGRAPH-4B8F	[FB80 CB8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_347)
{
    // 4B8F 0041;	
    // (䮏) CJK UNIFIED IDEOGRAPH-4B8F	[FB80 CB8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_348)
{
    // 4B8F 0062;	
    // (䮏) CJK UNIFIED IDEOGRAPH-4B8F	[FB80 CB8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_349)
{
    // 4B90 0021;	
    // (䮐) CJK UNIFIED IDEOGRAPH-4B90	[FB80 CB90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_350)
{
    // 4B90 003F;	
    // (䮐) CJK UNIFIED IDEOGRAPH-4B90	[FB80 CB90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_351)
{
    // 4B90 0061;	
    // (䮐) CJK UNIFIED IDEOGRAPH-4B90	[FB80 CB90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_352)
{
    // 4B90 0041;	
    // (䮐) CJK UNIFIED IDEOGRAPH-4B90	[FB80 CB90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_353)
{
    // 4B90 0062;	
    // (䮐) CJK UNIFIED IDEOGRAPH-4B90	[FB80 CB90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_354)
{
    // 4B91 0021;	
    // (䮑) CJK UNIFIED IDEOGRAPH-4B91	[FB80 CB91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_355)
{
    // 4B91 003F;	
    // (䮑) CJK UNIFIED IDEOGRAPH-4B91	[FB80 CB91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_356)
{
    // 4B91 0061;	
    // (䮑) CJK UNIFIED IDEOGRAPH-4B91	[FB80 CB91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_357)
{
    // 4B91 0041;	
    // (䮑) CJK UNIFIED IDEOGRAPH-4B91	[FB80 CB91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_358)
{
    // 4B91 0062;	
    // (䮑) CJK UNIFIED IDEOGRAPH-4B91	[FB80 CB91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_359)
{
    // 4B92 0021;	
    // (䮒) CJK UNIFIED IDEOGRAPH-4B92	[FB80 CB92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_360)
{
    // 4B92 003F;	
    // (䮒) CJK UNIFIED IDEOGRAPH-4B92	[FB80 CB92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_361)
{
    // 4B92 0061;	
    // (䮒) CJK UNIFIED IDEOGRAPH-4B92	[FB80 CB92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_362)
{
    // 4B92 0041;	
    // (䮒) CJK UNIFIED IDEOGRAPH-4B92	[FB80 CB92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_363)
{
    // 4B92 0062;	
    // (䮒) CJK UNIFIED IDEOGRAPH-4B92	[FB80 CB92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_364)
{
    // 4B93 0021;	
    // (䮓) CJK UNIFIED IDEOGRAPH-4B93	[FB80 CB93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_365)
{
    // 4B93 003F;	
    // (䮓) CJK UNIFIED IDEOGRAPH-4B93	[FB80 CB93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_366)
{
    // 4B93 0061;	
    // (䮓) CJK UNIFIED IDEOGRAPH-4B93	[FB80 CB93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_367)
{
    // 4B93 0041;	
    // (䮓) CJK UNIFIED IDEOGRAPH-4B93	[FB80 CB93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_368)
{
    // 4B93 0062;	
    // (䮓) CJK UNIFIED IDEOGRAPH-4B93	[FB80 CB93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_369)
{
    // 4B94 0021;	
    // (䮔) CJK UNIFIED IDEOGRAPH-4B94	[FB80 CB94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_370)
{
    // 4B94 003F;	
    // (䮔) CJK UNIFIED IDEOGRAPH-4B94	[FB80 CB94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_371)
{
    // 4B94 0061;	
    // (䮔) CJK UNIFIED IDEOGRAPH-4B94	[FB80 CB94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_372)
{
    // 4B94 0041;	
    // (䮔) CJK UNIFIED IDEOGRAPH-4B94	[FB80 CB94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_373)
{
    // 4B94 0062;	
    // (䮔) CJK UNIFIED IDEOGRAPH-4B94	[FB80 CB94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_374)
{
    // 4B95 0021;	
    // (䮕) CJK UNIFIED IDEOGRAPH-4B95	[FB80 CB95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_375)
{
    // 4B95 003F;	
    // (䮕) CJK UNIFIED IDEOGRAPH-4B95	[FB80 CB95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_376)
{
    // 4B95 0061;	
    // (䮕) CJK UNIFIED IDEOGRAPH-4B95	[FB80 CB95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_377)
{
    // 4B95 0041;	
    // (䮕) CJK UNIFIED IDEOGRAPH-4B95	[FB80 CB95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_378)
{
    // 4B95 0062;	
    // (䮕) CJK UNIFIED IDEOGRAPH-4B95	[FB80 CB95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_379)
{
    // 4B96 0021;	
    // (䮖) CJK UNIFIED IDEOGRAPH-4B96	[FB80 CB96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_380)
{
    // 4B96 003F;	
    // (䮖) CJK UNIFIED IDEOGRAPH-4B96	[FB80 CB96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_381)
{
    // 4B96 0061;	
    // (䮖) CJK UNIFIED IDEOGRAPH-4B96	[FB80 CB96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_382)
{
    // 4B96 0041;	
    // (䮖) CJK UNIFIED IDEOGRAPH-4B96	[FB80 CB96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_383)
{
    // 4B96 0062;	
    // (䮖) CJK UNIFIED IDEOGRAPH-4B96	[FB80 CB96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_384)
{
    // 4B97 0021;	
    // (䮗) CJK UNIFIED IDEOGRAPH-4B97	[FB80 CB97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_385)
{
    // 4B97 003F;	
    // (䮗) CJK UNIFIED IDEOGRAPH-4B97	[FB80 CB97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_386)
{
    // 4B97 0061;	
    // (䮗) CJK UNIFIED IDEOGRAPH-4B97	[FB80 CB97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_387)
{
    // 4B97 0041;	
    // (䮗) CJK UNIFIED IDEOGRAPH-4B97	[FB80 CB97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_388)
{
    // 4B97 0062;	
    // (䮗) CJK UNIFIED IDEOGRAPH-4B97	[FB80 CB97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_389)
{
    // 4B98 0021;	
    // (䮘) CJK UNIFIED IDEOGRAPH-4B98	[FB80 CB98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_390)
{
    // 4B98 003F;	
    // (䮘) CJK UNIFIED IDEOGRAPH-4B98	[FB80 CB98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_391)
{
    // 4B98 0061;	
    // (䮘) CJK UNIFIED IDEOGRAPH-4B98	[FB80 CB98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_392)
{
    // 4B98 0041;	
    // (䮘) CJK UNIFIED IDEOGRAPH-4B98	[FB80 CB98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_393)
{
    // 4B98 0062;	
    // (䮘) CJK UNIFIED IDEOGRAPH-4B98	[FB80 CB98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_394)
{
    // 4B99 0021;	
    // (䮙) CJK UNIFIED IDEOGRAPH-4B99	[FB80 CB99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_395)
{
    // 4B99 003F;	
    // (䮙) CJK UNIFIED IDEOGRAPH-4B99	[FB80 CB99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_396)
{
    // 4B99 0061;	
    // (䮙) CJK UNIFIED IDEOGRAPH-4B99	[FB80 CB99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_397)
{
    // 4B99 0041;	
    // (䮙) CJK UNIFIED IDEOGRAPH-4B99	[FB80 CB99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_398)
{
    // 4B99 0062;	
    // (䮙) CJK UNIFIED IDEOGRAPH-4B99	[FB80 CB99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_399)
{
    // 4B9A 0021;	
    // (䮚) CJK UNIFIED IDEOGRAPH-4B9A	[FB80 CB9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_400)
{
    // 4B9A 003F;	
    // (䮚) CJK UNIFIED IDEOGRAPH-4B9A	[FB80 CB9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_401)
{
    // 4B9A 0061;	
    // (䮚) CJK UNIFIED IDEOGRAPH-4B9A	[FB80 CB9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_402)
{
    // 4B9A 0041;	
    // (䮚) CJK UNIFIED IDEOGRAPH-4B9A	[FB80 CB9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_403)
{
    // 4B9A 0062;	
    // (䮚) CJK UNIFIED IDEOGRAPH-4B9A	[FB80 CB9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_404)
{
    // 4B9B 0021;	
    // (䮛) CJK UNIFIED IDEOGRAPH-4B9B	[FB80 CB9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_405)
{
    // 4B9B 003F;	
    // (䮛) CJK UNIFIED IDEOGRAPH-4B9B	[FB80 CB9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_406)
{
    // 4B9B 0061;	
    // (䮛) CJK UNIFIED IDEOGRAPH-4B9B	[FB80 CB9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_407)
{
    // 4B9B 0041;	
    // (䮛) CJK UNIFIED IDEOGRAPH-4B9B	[FB80 CB9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_408)
{
    // 4B9B 0062;	
    // (䮛) CJK UNIFIED IDEOGRAPH-4B9B	[FB80 CB9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_409)
{
    // 4B9C 0021;	
    // (䮜) CJK UNIFIED IDEOGRAPH-4B9C	[FB80 CB9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_410)
{
    // 4B9C 003F;	
    // (䮜) CJK UNIFIED IDEOGRAPH-4B9C	[FB80 CB9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_411)
{
    // 4B9C 0061;	
    // (䮜) CJK UNIFIED IDEOGRAPH-4B9C	[FB80 CB9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_412)
{
    // 4B9C 0041;	
    // (䮜) CJK UNIFIED IDEOGRAPH-4B9C	[FB80 CB9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_413)
{
    // 4B9C 0062;	
    // (䮜) CJK UNIFIED IDEOGRAPH-4B9C	[FB80 CB9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_414)
{
    // 4B9D 0021;	
    // (䮝) CJK UNIFIED IDEOGRAPH-4B9D	[FB80 CB9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_415)
{
    // 4B9D 003F;	
    // (䮝) CJK UNIFIED IDEOGRAPH-4B9D	[FB80 CB9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_416)
{
    // 4B9D 0061;	
    // (䮝) CJK UNIFIED IDEOGRAPH-4B9D	[FB80 CB9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_417)
{
    // 4B9D 0041;	
    // (䮝) CJK UNIFIED IDEOGRAPH-4B9D	[FB80 CB9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_418)
{
    // 4B9D 0062;	
    // (䮝) CJK UNIFIED IDEOGRAPH-4B9D	[FB80 CB9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_419)
{
    // 4B9E 0021;	
    // (䮞) CJK UNIFIED IDEOGRAPH-4B9E	[FB80 CB9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_420)
{
    // 4B9E 003F;	
    // (䮞) CJK UNIFIED IDEOGRAPH-4B9E	[FB80 CB9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_421)
{
    // 4B9E 0061;	
    // (䮞) CJK UNIFIED IDEOGRAPH-4B9E	[FB80 CB9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_422)
{
    // 4B9E 0041;	
    // (䮞) CJK UNIFIED IDEOGRAPH-4B9E	[FB80 CB9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_423)
{
    // 4B9E 0062;	
    // (䮞) CJK UNIFIED IDEOGRAPH-4B9E	[FB80 CB9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_424)
{
    // 4B9F 0021;	
    // (䮟) CJK UNIFIED IDEOGRAPH-4B9F	[FB80 CB9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_425)
{
    // 4B9F 003F;	
    // (䮟) CJK UNIFIED IDEOGRAPH-4B9F	[FB80 CB9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_426)
{
    // 4B9F 0061;	
    // (䮟) CJK UNIFIED IDEOGRAPH-4B9F	[FB80 CB9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_427)
{
    // 4B9F 0041;	
    // (䮟) CJK UNIFIED IDEOGRAPH-4B9F	[FB80 CB9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_428)
{
    // 4B9F 0062;	
    // (䮟) CJK UNIFIED IDEOGRAPH-4B9F	[FB80 CB9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_429)
{
    // 4BA0 0021;	
    // (䮠) CJK UNIFIED IDEOGRAPH-4BA0	[FB80 CBA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_430)
{
    // 4BA0 003F;	
    // (䮠) CJK UNIFIED IDEOGRAPH-4BA0	[FB80 CBA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_431)
{
    // 4BA0 0061;	
    // (䮠) CJK UNIFIED IDEOGRAPH-4BA0	[FB80 CBA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_432)
{
    // 4BA0 0041;	
    // (䮠) CJK UNIFIED IDEOGRAPH-4BA0	[FB80 CBA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_433)
{
    // 4BA0 0062;	
    // (䮠) CJK UNIFIED IDEOGRAPH-4BA0	[FB80 CBA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_434)
{
    // 4BA1 0021;	
    // (䮡) CJK UNIFIED IDEOGRAPH-4BA1	[FB80 CBA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_435)
{
    // 4BA1 003F;	
    // (䮡) CJK UNIFIED IDEOGRAPH-4BA1	[FB80 CBA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_436)
{
    // 4BA1 0061;	
    // (䮡) CJK UNIFIED IDEOGRAPH-4BA1	[FB80 CBA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_437)
{
    // 4BA1 0041;	
    // (䮡) CJK UNIFIED IDEOGRAPH-4BA1	[FB80 CBA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_438)
{
    // 4BA1 0062;	
    // (䮡) CJK UNIFIED IDEOGRAPH-4BA1	[FB80 CBA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_439)
{
    // 4BA2 0021;	
    // (䮢) CJK UNIFIED IDEOGRAPH-4BA2	[FB80 CBA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_440)
{
    // 4BA2 003F;	
    // (䮢) CJK UNIFIED IDEOGRAPH-4BA2	[FB80 CBA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_441)
{
    // 4BA2 0061;	
    // (䮢) CJK UNIFIED IDEOGRAPH-4BA2	[FB80 CBA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_442)
{
    // 4BA2 0041;	
    // (䮢) CJK UNIFIED IDEOGRAPH-4BA2	[FB80 CBA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_443)
{
    // 4BA2 0062;	
    // (䮢) CJK UNIFIED IDEOGRAPH-4BA2	[FB80 CBA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_444)
{
    // 4BA3 0021;	
    // (䮣) CJK UNIFIED IDEOGRAPH-4BA3	[FB80 CBA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_445)
{
    // 4BA3 003F;	
    // (䮣) CJK UNIFIED IDEOGRAPH-4BA3	[FB80 CBA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_446)
{
    // 4BA3 0061;	
    // (䮣) CJK UNIFIED IDEOGRAPH-4BA3	[FB80 CBA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_447)
{
    // 4BA3 0041;	
    // (䮣) CJK UNIFIED IDEOGRAPH-4BA3	[FB80 CBA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_448)
{
    // 4BA3 0062;	
    // (䮣) CJK UNIFIED IDEOGRAPH-4BA3	[FB80 CBA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_449)
{
    // 4BA4 0021;	
    // (䮤) CJK UNIFIED IDEOGRAPH-4BA4	[FB80 CBA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_450)
{
    // 4BA4 003F;	
    // (䮤) CJK UNIFIED IDEOGRAPH-4BA4	[FB80 CBA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_451)
{
    // 4BA4 0061;	
    // (䮤) CJK UNIFIED IDEOGRAPH-4BA4	[FB80 CBA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_452)
{
    // 4BA4 0041;	
    // (䮤) CJK UNIFIED IDEOGRAPH-4BA4	[FB80 CBA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_453)
{
    // 4BA4 0062;	
    // (䮤) CJK UNIFIED IDEOGRAPH-4BA4	[FB80 CBA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_454)
{
    // 4BA5 0021;	
    // (䮥) CJK UNIFIED IDEOGRAPH-4BA5	[FB80 CBA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_455)
{
    // 4BA5 003F;	
    // (䮥) CJK UNIFIED IDEOGRAPH-4BA5	[FB80 CBA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_456)
{
    // 4BA5 0061;	
    // (䮥) CJK UNIFIED IDEOGRAPH-4BA5	[FB80 CBA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_457)
{
    // 4BA5 0041;	
    // (䮥) CJK UNIFIED IDEOGRAPH-4BA5	[FB80 CBA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_458)
{
    // 4BA5 0062;	
    // (䮥) CJK UNIFIED IDEOGRAPH-4BA5	[FB80 CBA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_459)
{
    // 4BA6 0021;	
    // (䮦) CJK UNIFIED IDEOGRAPH-4BA6	[FB80 CBA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_460)
{
    // 4BA6 003F;	
    // (䮦) CJK UNIFIED IDEOGRAPH-4BA6	[FB80 CBA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_461)
{
    // 4BA6 0061;	
    // (䮦) CJK UNIFIED IDEOGRAPH-4BA6	[FB80 CBA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_462)
{
    // 4BA6 0041;	
    // (䮦) CJK UNIFIED IDEOGRAPH-4BA6	[FB80 CBA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_463)
{
    // 4BA6 0062;	
    // (䮦) CJK UNIFIED IDEOGRAPH-4BA6	[FB80 CBA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_464)
{
    // 4BA7 0021;	
    // (䮧) CJK UNIFIED IDEOGRAPH-4BA7	[FB80 CBA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_465)
{
    // 4BA7 003F;	
    // (䮧) CJK UNIFIED IDEOGRAPH-4BA7	[FB80 CBA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_466)
{
    // 4BA7 0061;	
    // (䮧) CJK UNIFIED IDEOGRAPH-4BA7	[FB80 CBA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_467)
{
    // 4BA7 0041;	
    // (䮧) CJK UNIFIED IDEOGRAPH-4BA7	[FB80 CBA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_468)
{
    // 4BA7 0062;	
    // (䮧) CJK UNIFIED IDEOGRAPH-4BA7	[FB80 CBA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_469)
{
    // 4BA8 0021;	
    // (䮨) CJK UNIFIED IDEOGRAPH-4BA8	[FB80 CBA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_470)
{
    // 4BA8 003F;	
    // (䮨) CJK UNIFIED IDEOGRAPH-4BA8	[FB80 CBA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_471)
{
    // 4BA8 0061;	
    // (䮨) CJK UNIFIED IDEOGRAPH-4BA8	[FB80 CBA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_472)
{
    // 4BA8 0041;	
    // (䮨) CJK UNIFIED IDEOGRAPH-4BA8	[FB80 CBA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_473)
{
    // 4BA8 0062;	
    // (䮨) CJK UNIFIED IDEOGRAPH-4BA8	[FB80 CBA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_474)
{
    // 4BA9 0021;	
    // (䮩) CJK UNIFIED IDEOGRAPH-4BA9	[FB80 CBA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_475)
{
    // 4BA9 003F;	
    // (䮩) CJK UNIFIED IDEOGRAPH-4BA9	[FB80 CBA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_476)
{
    // 4BA9 0061;	
    // (䮩) CJK UNIFIED IDEOGRAPH-4BA9	[FB80 CBA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_477)
{
    // 4BA9 0041;	
    // (䮩) CJK UNIFIED IDEOGRAPH-4BA9	[FB80 CBA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_478)
{
    // 4BA9 0062;	
    // (䮩) CJK UNIFIED IDEOGRAPH-4BA9	[FB80 CBA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_479)
{
    // 4BAA 0021;	
    // (䮪) CJK UNIFIED IDEOGRAPH-4BAA	[FB80 CBAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_480)
{
    // 4BAA 003F;	
    // (䮪) CJK UNIFIED IDEOGRAPH-4BAA	[FB80 CBAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_481)
{
    // 4BAA 0061;	
    // (䮪) CJK UNIFIED IDEOGRAPH-4BAA	[FB80 CBAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_482)
{
    // 4BAA 0041;	
    // (䮪) CJK UNIFIED IDEOGRAPH-4BAA	[FB80 CBAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_483)
{
    // 4BAA 0062;	
    // (䮪) CJK UNIFIED IDEOGRAPH-4BAA	[FB80 CBAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_484)
{
    // 4BAB 0021;	
    // (䮫) CJK UNIFIED IDEOGRAPH-4BAB	[FB80 CBAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_485)
{
    // 4BAB 003F;	
    // (䮫) CJK UNIFIED IDEOGRAPH-4BAB	[FB80 CBAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_486)
{
    // 4BAB 0061;	
    // (䮫) CJK UNIFIED IDEOGRAPH-4BAB	[FB80 CBAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_487)
{
    // 4BAB 0041;	
    // (䮫) CJK UNIFIED IDEOGRAPH-4BAB	[FB80 CBAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_488)
{
    // 4BAB 0062;	
    // (䮫) CJK UNIFIED IDEOGRAPH-4BAB	[FB80 CBAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_489)
{
    // 4BAC 0021;	
    // (䮬) CJK UNIFIED IDEOGRAPH-4BAC	[FB80 CBAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_490)
{
    // 4BAC 003F;	
    // (䮬) CJK UNIFIED IDEOGRAPH-4BAC	[FB80 CBAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_491)
{
    // 4BAC 0061;	
    // (䮬) CJK UNIFIED IDEOGRAPH-4BAC	[FB80 CBAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_492)
{
    // 4BAC 0041;	
    // (䮬) CJK UNIFIED IDEOGRAPH-4BAC	[FB80 CBAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_493)
{
    // 4BAC 0062;	
    // (䮬) CJK UNIFIED IDEOGRAPH-4BAC	[FB80 CBAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_494)
{
    // 4BAD 0021;	
    // (䮭) CJK UNIFIED IDEOGRAPH-4BAD	[FB80 CBAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_495)
{
    // 4BAD 003F;	
    // (䮭) CJK UNIFIED IDEOGRAPH-4BAD	[FB80 CBAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_496)
{
    // 4BAD 0061;	
    // (䮭) CJK UNIFIED IDEOGRAPH-4BAD	[FB80 CBAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_497)
{
    // 4BAD 0041;	
    // (䮭) CJK UNIFIED IDEOGRAPH-4BAD	[FB80 CBAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_498)
{
    // 4BAD 0062;	
    // (䮭) CJK UNIFIED IDEOGRAPH-4BAD	[FB80 CBAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_387_499)
{
    // 4BAE 0021;	
    // (䮮) CJK UNIFIED IDEOGRAPH-4BAE	[FB80 CBAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

