// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_289_000)
{
    // 1216B 003F;	
    // (𒅫) CUNEIFORM SIGN KA TIMES GU	[4D57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216B, 0x003F };
    uint32_t const ces[9] = { 0x4D57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_001)
{
    // 1216B 0061;	
    // (𒅫) CUNEIFORM SIGN KA TIMES GU	[4D57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216B, 0x0061 };
    uint32_t const ces[9] = { 0x4D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_002)
{
    // 1216B 0041;	
    // (𒅫) CUNEIFORM SIGN KA TIMES GU	[4D57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216B, 0x0041 };
    uint32_t const ces[9] = { 0x4D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_003)
{
    // 1216B 0062;	
    // (𒅫) CUNEIFORM SIGN KA TIMES GU	[4D57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216B, 0x0062 };
    uint32_t const ces[9] = { 0x4D57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_004)
{
    // 1216C 0021;	
    // (𒅬) CUNEIFORM SIGN KA TIMES GUR7	[4D58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216C, 0x0021 };
    uint32_t const ces[9] = { 0x4D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_005)
{
    // 1216C 003F;	
    // (𒅬) CUNEIFORM SIGN KA TIMES GUR7	[4D58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216C, 0x003F };
    uint32_t const ces[9] = { 0x4D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_006)
{
    // 1216C 0061;	
    // (𒅬) CUNEIFORM SIGN KA TIMES GUR7	[4D58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216C, 0x0061 };
    uint32_t const ces[9] = { 0x4D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_007)
{
    // 1216C 0041;	
    // (𒅬) CUNEIFORM SIGN KA TIMES GUR7	[4D58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216C, 0x0041 };
    uint32_t const ces[9] = { 0x4D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_008)
{
    // 1216C 0062;	
    // (𒅬) CUNEIFORM SIGN KA TIMES GUR7	[4D58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216C, 0x0062 };
    uint32_t const ces[9] = { 0x4D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_009)
{
    // 1216D 0021;	
    // (𒅭) CUNEIFORM SIGN KA TIMES IGI	[4D59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216D, 0x0021 };
    uint32_t const ces[9] = { 0x4D59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_010)
{
    // 1216D 003F;	
    // (𒅭) CUNEIFORM SIGN KA TIMES IGI	[4D59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216D, 0x003F };
    uint32_t const ces[9] = { 0x4D59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_011)
{
    // 1216D 0061;	
    // (𒅭) CUNEIFORM SIGN KA TIMES IGI	[4D59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216D, 0x0061 };
    uint32_t const ces[9] = { 0x4D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_012)
{
    // 1216D 0041;	
    // (𒅭) CUNEIFORM SIGN KA TIMES IGI	[4D59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216D, 0x0041 };
    uint32_t const ces[9] = { 0x4D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_013)
{
    // 1216D 0062;	
    // (𒅭) CUNEIFORM SIGN KA TIMES IGI	[4D59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216D, 0x0062 };
    uint32_t const ces[9] = { 0x4D59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_014)
{
    // 1216E 0021;	
    // (𒅮) CUNEIFORM SIGN KA TIMES IM	[4D5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216E, 0x0021 };
    uint32_t const ces[9] = { 0x4D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_015)
{
    // 1216E 003F;	
    // (𒅮) CUNEIFORM SIGN KA TIMES IM	[4D5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216E, 0x003F };
    uint32_t const ces[9] = { 0x4D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_016)
{
    // 1216E 0061;	
    // (𒅮) CUNEIFORM SIGN KA TIMES IM	[4D5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216E, 0x0061 };
    uint32_t const ces[9] = { 0x4D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_017)
{
    // 1216E 0041;	
    // (𒅮) CUNEIFORM SIGN KA TIMES IM	[4D5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216E, 0x0041 };
    uint32_t const ces[9] = { 0x4D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_018)
{
    // 1216E 0062;	
    // (𒅮) CUNEIFORM SIGN KA TIMES IM	[4D5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216E, 0x0062 };
    uint32_t const ces[9] = { 0x4D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_019)
{
    // 1216F 0021;	
    // (𒅯) CUNEIFORM SIGN KA TIMES KAK	[4D5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216F, 0x0021 };
    uint32_t const ces[9] = { 0x4D5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_020)
{
    // 1216F 003F;	
    // (𒅯) CUNEIFORM SIGN KA TIMES KAK	[4D5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216F, 0x003F };
    uint32_t const ces[9] = { 0x4D5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_021)
{
    // 1216F 0061;	
    // (𒅯) CUNEIFORM SIGN KA TIMES KAK	[4D5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216F, 0x0061 };
    uint32_t const ces[9] = { 0x4D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_022)
{
    // 1216F 0041;	
    // (𒅯) CUNEIFORM SIGN KA TIMES KAK	[4D5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1216F, 0x0041 };
    uint32_t const ces[9] = { 0x4D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_023)
{
    // 1216F 0062;	
    // (𒅯) CUNEIFORM SIGN KA TIMES KAK	[4D5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1216F, 0x0062 };
    uint32_t const ces[9] = { 0x4D5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_024)
{
    // 12170 0021;	
    // (𒅰) CUNEIFORM SIGN KA TIMES KI	[4D5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12170, 0x0021 };
    uint32_t const ces[9] = { 0x4D5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_025)
{
    // 12170 003F;	
    // (𒅰) CUNEIFORM SIGN KA TIMES KI	[4D5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12170, 0x003F };
    uint32_t const ces[9] = { 0x4D5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_026)
{
    // 12170 0061;	
    // (𒅰) CUNEIFORM SIGN KA TIMES KI	[4D5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12170, 0x0061 };
    uint32_t const ces[9] = { 0x4D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_027)
{
    // 12170 0041;	
    // (𒅰) CUNEIFORM SIGN KA TIMES KI	[4D5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12170, 0x0041 };
    uint32_t const ces[9] = { 0x4D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_028)
{
    // 12170 0062;	
    // (𒅰) CUNEIFORM SIGN KA TIMES KI	[4D5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12170, 0x0062 };
    uint32_t const ces[9] = { 0x4D5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_029)
{
    // 12171 0021;	
    // (𒅱) CUNEIFORM SIGN KA TIMES KID	[4D5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12171, 0x0021 };
    uint32_t const ces[9] = { 0x4D5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_030)
{
    // 12171 003F;	
    // (𒅱) CUNEIFORM SIGN KA TIMES KID	[4D5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12171, 0x003F };
    uint32_t const ces[9] = { 0x4D5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_031)
{
    // 12171 0061;	
    // (𒅱) CUNEIFORM SIGN KA TIMES KID	[4D5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12171, 0x0061 };
    uint32_t const ces[9] = { 0x4D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_032)
{
    // 12171 0041;	
    // (𒅱) CUNEIFORM SIGN KA TIMES KID	[4D5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12171, 0x0041 };
    uint32_t const ces[9] = { 0x4D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_033)
{
    // 12171 0062;	
    // (𒅱) CUNEIFORM SIGN KA TIMES KID	[4D5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12171, 0x0062 };
    uint32_t const ces[9] = { 0x4D5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_034)
{
    // 12172 0021;	
    // (𒅲) CUNEIFORM SIGN KA TIMES LI	[4D5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12172, 0x0021 };
    uint32_t const ces[9] = { 0x4D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_035)
{
    // 12172 003F;	
    // (𒅲) CUNEIFORM SIGN KA TIMES LI	[4D5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12172, 0x003F };
    uint32_t const ces[9] = { 0x4D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_036)
{
    // 12172 0061;	
    // (𒅲) CUNEIFORM SIGN KA TIMES LI	[4D5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12172, 0x0061 };
    uint32_t const ces[9] = { 0x4D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_037)
{
    // 12172 0041;	
    // (𒅲) CUNEIFORM SIGN KA TIMES LI	[4D5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12172, 0x0041 };
    uint32_t const ces[9] = { 0x4D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_038)
{
    // 12172 0062;	
    // (𒅲) CUNEIFORM SIGN KA TIMES LI	[4D5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12172, 0x0062 };
    uint32_t const ces[9] = { 0x4D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_039)
{
    // 12173 0021;	
    // (𒅳) CUNEIFORM SIGN KA TIMES LU	[4D5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12173, 0x0021 };
    uint32_t const ces[9] = { 0x4D5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_040)
{
    // 12173 003F;	
    // (𒅳) CUNEIFORM SIGN KA TIMES LU	[4D5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12173, 0x003F };
    uint32_t const ces[9] = { 0x4D5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_041)
{
    // 12173 0061;	
    // (𒅳) CUNEIFORM SIGN KA TIMES LU	[4D5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12173, 0x0061 };
    uint32_t const ces[9] = { 0x4D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_042)
{
    // 12173 0041;	
    // (𒅳) CUNEIFORM SIGN KA TIMES LU	[4D5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12173, 0x0041 };
    uint32_t const ces[9] = { 0x4D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_043)
{
    // 12173 0062;	
    // (𒅳) CUNEIFORM SIGN KA TIMES LU	[4D5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12173, 0x0062 };
    uint32_t const ces[9] = { 0x4D5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_044)
{
    // 12174 0021;	
    // (𒅴) CUNEIFORM SIGN KA TIMES ME	[4D60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12174, 0x0021 };
    uint32_t const ces[9] = { 0x4D60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_045)
{
    // 12174 003F;	
    // (𒅴) CUNEIFORM SIGN KA TIMES ME	[4D60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12174, 0x003F };
    uint32_t const ces[9] = { 0x4D60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_046)
{
    // 12174 0061;	
    // (𒅴) CUNEIFORM SIGN KA TIMES ME	[4D60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12174, 0x0061 };
    uint32_t const ces[9] = { 0x4D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_047)
{
    // 12174 0041;	
    // (𒅴) CUNEIFORM SIGN KA TIMES ME	[4D60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12174, 0x0041 };
    uint32_t const ces[9] = { 0x4D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_048)
{
    // 12174 0062;	
    // (𒅴) CUNEIFORM SIGN KA TIMES ME	[4D60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12174, 0x0062 };
    uint32_t const ces[9] = { 0x4D60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_049)
{
    // 12175 0021;	
    // (𒅵) CUNEIFORM SIGN KA TIMES ME PLUS DU	[4D61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12175, 0x0021 };
    uint32_t const ces[9] = { 0x4D61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_050)
{
    // 12175 003F;	
    // (𒅵) CUNEIFORM SIGN KA TIMES ME PLUS DU	[4D61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12175, 0x003F };
    uint32_t const ces[9] = { 0x4D61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_051)
{
    // 12175 0061;	
    // (𒅵) CUNEIFORM SIGN KA TIMES ME PLUS DU	[4D61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12175, 0x0061 };
    uint32_t const ces[9] = { 0x4D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_052)
{
    // 12175 0041;	
    // (𒅵) CUNEIFORM SIGN KA TIMES ME PLUS DU	[4D61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12175, 0x0041 };
    uint32_t const ces[9] = { 0x4D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_053)
{
    // 12175 0062;	
    // (𒅵) CUNEIFORM SIGN KA TIMES ME PLUS DU	[4D61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12175, 0x0062 };
    uint32_t const ces[9] = { 0x4D61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_054)
{
    // 12176 0021;	
    // (𒅶) CUNEIFORM SIGN KA TIMES ME PLUS GI	[4D62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12176, 0x0021 };
    uint32_t const ces[9] = { 0x4D62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_055)
{
    // 12176 003F;	
    // (𒅶) CUNEIFORM SIGN KA TIMES ME PLUS GI	[4D62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12176, 0x003F };
    uint32_t const ces[9] = { 0x4D62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_056)
{
    // 12176 0061;	
    // (𒅶) CUNEIFORM SIGN KA TIMES ME PLUS GI	[4D62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12176, 0x0061 };
    uint32_t const ces[9] = { 0x4D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_057)
{
    // 12176 0041;	
    // (𒅶) CUNEIFORM SIGN KA TIMES ME PLUS GI	[4D62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12176, 0x0041 };
    uint32_t const ces[9] = { 0x4D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_058)
{
    // 12176 0062;	
    // (𒅶) CUNEIFORM SIGN KA TIMES ME PLUS GI	[4D62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12176, 0x0062 };
    uint32_t const ces[9] = { 0x4D62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_059)
{
    // 12177 0021;	
    // (𒅷) CUNEIFORM SIGN KA TIMES ME PLUS TE	[4D63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12177, 0x0021 };
    uint32_t const ces[9] = { 0x4D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_060)
{
    // 12177 003F;	
    // (𒅷) CUNEIFORM SIGN KA TIMES ME PLUS TE	[4D63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12177, 0x003F };
    uint32_t const ces[9] = { 0x4D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_061)
{
    // 12177 0061;	
    // (𒅷) CUNEIFORM SIGN KA TIMES ME PLUS TE	[4D63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12177, 0x0061 };
    uint32_t const ces[9] = { 0x4D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_062)
{
    // 12177 0041;	
    // (𒅷) CUNEIFORM SIGN KA TIMES ME PLUS TE	[4D63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12177, 0x0041 };
    uint32_t const ces[9] = { 0x4D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_063)
{
    // 12177 0062;	
    // (𒅷) CUNEIFORM SIGN KA TIMES ME PLUS TE	[4D63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12177, 0x0062 };
    uint32_t const ces[9] = { 0x4D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_064)
{
    // 12178 0021;	
    // (𒅸) CUNEIFORM SIGN KA TIMES MI	[4D64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12178, 0x0021 };
    uint32_t const ces[9] = { 0x4D64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_065)
{
    // 12178 003F;	
    // (𒅸) CUNEIFORM SIGN KA TIMES MI	[4D64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12178, 0x003F };
    uint32_t const ces[9] = { 0x4D64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_066)
{
    // 12178 0061;	
    // (𒅸) CUNEIFORM SIGN KA TIMES MI	[4D64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12178, 0x0061 };
    uint32_t const ces[9] = { 0x4D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_067)
{
    // 12178 0041;	
    // (𒅸) CUNEIFORM SIGN KA TIMES MI	[4D64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12178, 0x0041 };
    uint32_t const ces[9] = { 0x4D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_068)
{
    // 12178 0062;	
    // (𒅸) CUNEIFORM SIGN KA TIMES MI	[4D64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12178, 0x0062 };
    uint32_t const ces[9] = { 0x4D64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_069)
{
    // 12179 0021;	
    // (𒅹) CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ	[4D65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12179, 0x0021 };
    uint32_t const ces[9] = { 0x4D65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_070)
{
    // 12179 003F;	
    // (𒅹) CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ	[4D65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12179, 0x003F };
    uint32_t const ces[9] = { 0x4D65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_071)
{
    // 12179 0061;	
    // (𒅹) CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ	[4D65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12179, 0x0061 };
    uint32_t const ces[9] = { 0x4D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_072)
{
    // 12179 0041;	
    // (𒅹) CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ	[4D65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12179, 0x0041 };
    uint32_t const ces[9] = { 0x4D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_073)
{
    // 12179 0062;	
    // (𒅹) CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ	[4D65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12179, 0x0062 };
    uint32_t const ces[9] = { 0x4D65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_074)
{
    // 1217A 0021;	
    // (𒅺) CUNEIFORM SIGN KA TIMES NE	[4D66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217A, 0x0021 };
    uint32_t const ces[9] = { 0x4D66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_075)
{
    // 1217A 003F;	
    // (𒅺) CUNEIFORM SIGN KA TIMES NE	[4D66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217A, 0x003F };
    uint32_t const ces[9] = { 0x4D66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_076)
{
    // 1217A 0061;	
    // (𒅺) CUNEIFORM SIGN KA TIMES NE	[4D66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217A, 0x0061 };
    uint32_t const ces[9] = { 0x4D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_077)
{
    // 1217A 0041;	
    // (𒅺) CUNEIFORM SIGN KA TIMES NE	[4D66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217A, 0x0041 };
    uint32_t const ces[9] = { 0x4D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_078)
{
    // 1217A 0062;	
    // (𒅺) CUNEIFORM SIGN KA TIMES NE	[4D66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217A, 0x0062 };
    uint32_t const ces[9] = { 0x4D66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_079)
{
    // 1217B 0021;	
    // (𒅻) CUNEIFORM SIGN KA TIMES NUN	[4D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217B, 0x0021 };
    uint32_t const ces[9] = { 0x4D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_080)
{
    // 1217B 003F;	
    // (𒅻) CUNEIFORM SIGN KA TIMES NUN	[4D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217B, 0x003F };
    uint32_t const ces[9] = { 0x4D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_081)
{
    // 1217B 0061;	
    // (𒅻) CUNEIFORM SIGN KA TIMES NUN	[4D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217B, 0x0061 };
    uint32_t const ces[9] = { 0x4D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_082)
{
    // 1217B 0041;	
    // (𒅻) CUNEIFORM SIGN KA TIMES NUN	[4D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217B, 0x0041 };
    uint32_t const ces[9] = { 0x4D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_083)
{
    // 1217B 0062;	
    // (𒅻) CUNEIFORM SIGN KA TIMES NUN	[4D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217B, 0x0062 };
    uint32_t const ces[9] = { 0x4D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_084)
{
    // 1217C 0021;	
    // (𒅼) CUNEIFORM SIGN KA TIMES PI	[4D68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217C, 0x0021 };
    uint32_t const ces[9] = { 0x4D68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_085)
{
    // 1217C 003F;	
    // (𒅼) CUNEIFORM SIGN KA TIMES PI	[4D68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217C, 0x003F };
    uint32_t const ces[9] = { 0x4D68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_086)
{
    // 1217C 0061;	
    // (𒅼) CUNEIFORM SIGN KA TIMES PI	[4D68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217C, 0x0061 };
    uint32_t const ces[9] = { 0x4D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_087)
{
    // 1217C 0041;	
    // (𒅼) CUNEIFORM SIGN KA TIMES PI	[4D68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217C, 0x0041 };
    uint32_t const ces[9] = { 0x4D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_088)
{
    // 1217C 0062;	
    // (𒅼) CUNEIFORM SIGN KA TIMES PI	[4D68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217C, 0x0062 };
    uint32_t const ces[9] = { 0x4D68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_089)
{
    // 1217D 0021;	
    // (𒅽) CUNEIFORM SIGN KA TIMES RU	[4D69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217D, 0x0021 };
    uint32_t const ces[9] = { 0x4D69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_090)
{
    // 1217D 003F;	
    // (𒅽) CUNEIFORM SIGN KA TIMES RU	[4D69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217D, 0x003F };
    uint32_t const ces[9] = { 0x4D69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_091)
{
    // 1217D 0061;	
    // (𒅽) CUNEIFORM SIGN KA TIMES RU	[4D69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217D, 0x0061 };
    uint32_t const ces[9] = { 0x4D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_092)
{
    // 1217D 0041;	
    // (𒅽) CUNEIFORM SIGN KA TIMES RU	[4D69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217D, 0x0041 };
    uint32_t const ces[9] = { 0x4D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_093)
{
    // 1217D 0062;	
    // (𒅽) CUNEIFORM SIGN KA TIMES RU	[4D69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217D, 0x0062 };
    uint32_t const ces[9] = { 0x4D69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_094)
{
    // 1217E 0021;	
    // (𒅾) CUNEIFORM SIGN KA TIMES SA	[4D6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217E, 0x0021 };
    uint32_t const ces[9] = { 0x4D6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_095)
{
    // 1217E 003F;	
    // (𒅾) CUNEIFORM SIGN KA TIMES SA	[4D6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217E, 0x003F };
    uint32_t const ces[9] = { 0x4D6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_096)
{
    // 1217E 0061;	
    // (𒅾) CUNEIFORM SIGN KA TIMES SA	[4D6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217E, 0x0061 };
    uint32_t const ces[9] = { 0x4D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_097)
{
    // 1217E 0041;	
    // (𒅾) CUNEIFORM SIGN KA TIMES SA	[4D6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217E, 0x0041 };
    uint32_t const ces[9] = { 0x4D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_098)
{
    // 1217E 0062;	
    // (𒅾) CUNEIFORM SIGN KA TIMES SA	[4D6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217E, 0x0062 };
    uint32_t const ces[9] = { 0x4D6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_099)
{
    // 1217F 0021;	
    // (𒅿) CUNEIFORM SIGN KA TIMES SAR	[4D6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217F, 0x0021 };
    uint32_t const ces[9] = { 0x4D6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_100)
{
    // 1217F 003F;	
    // (𒅿) CUNEIFORM SIGN KA TIMES SAR	[4D6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217F, 0x003F };
    uint32_t const ces[9] = { 0x4D6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_101)
{
    // 1217F 0061;	
    // (𒅿) CUNEIFORM SIGN KA TIMES SAR	[4D6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217F, 0x0061 };
    uint32_t const ces[9] = { 0x4D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_102)
{
    // 1217F 0041;	
    // (𒅿) CUNEIFORM SIGN KA TIMES SAR	[4D6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1217F, 0x0041 };
    uint32_t const ces[9] = { 0x4D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_103)
{
    // 1217F 0062;	
    // (𒅿) CUNEIFORM SIGN KA TIMES SAR	[4D6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1217F, 0x0062 };
    uint32_t const ces[9] = { 0x4D6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_104)
{
    // 12180 0021;	
    // (𒆀) CUNEIFORM SIGN KA TIMES SHA	[4D6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12180, 0x0021 };
    uint32_t const ces[9] = { 0x4D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_105)
{
    // 12180 003F;	
    // (𒆀) CUNEIFORM SIGN KA TIMES SHA	[4D6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12180, 0x003F };
    uint32_t const ces[9] = { 0x4D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_106)
{
    // 12180 0061;	
    // (𒆀) CUNEIFORM SIGN KA TIMES SHA	[4D6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12180, 0x0061 };
    uint32_t const ces[9] = { 0x4D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_107)
{
    // 12180 0041;	
    // (𒆀) CUNEIFORM SIGN KA TIMES SHA	[4D6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12180, 0x0041 };
    uint32_t const ces[9] = { 0x4D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_108)
{
    // 12180 0062;	
    // (𒆀) CUNEIFORM SIGN KA TIMES SHA	[4D6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12180, 0x0062 };
    uint32_t const ces[9] = { 0x4D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_109)
{
    // 12181 0021;	
    // (𒆁) CUNEIFORM SIGN KA TIMES SHE	[4D6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12181, 0x0021 };
    uint32_t const ces[9] = { 0x4D6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_110)
{
    // 12181 003F;	
    // (𒆁) CUNEIFORM SIGN KA TIMES SHE	[4D6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12181, 0x003F };
    uint32_t const ces[9] = { 0x4D6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_111)
{
    // 12181 0061;	
    // (𒆁) CUNEIFORM SIGN KA TIMES SHE	[4D6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12181, 0x0061 };
    uint32_t const ces[9] = { 0x4D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_112)
{
    // 12181 0041;	
    // (𒆁) CUNEIFORM SIGN KA TIMES SHE	[4D6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12181, 0x0041 };
    uint32_t const ces[9] = { 0x4D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_113)
{
    // 12181 0062;	
    // (𒆁) CUNEIFORM SIGN KA TIMES SHE	[4D6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12181, 0x0062 };
    uint32_t const ces[9] = { 0x4D6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_114)
{
    // 12182 0021;	
    // (𒆂) CUNEIFORM SIGN KA TIMES SHID	[4D6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12182, 0x0021 };
    uint32_t const ces[9] = { 0x4D6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_115)
{
    // 12182 003F;	
    // (𒆂) CUNEIFORM SIGN KA TIMES SHID	[4D6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12182, 0x003F };
    uint32_t const ces[9] = { 0x4D6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_116)
{
    // 12182 0061;	
    // (𒆂) CUNEIFORM SIGN KA TIMES SHID	[4D6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12182, 0x0061 };
    uint32_t const ces[9] = { 0x4D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_117)
{
    // 12182 0041;	
    // (𒆂) CUNEIFORM SIGN KA TIMES SHID	[4D6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12182, 0x0041 };
    uint32_t const ces[9] = { 0x4D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_118)
{
    // 12182 0062;	
    // (𒆂) CUNEIFORM SIGN KA TIMES SHID	[4D6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12182, 0x0062 };
    uint32_t const ces[9] = { 0x4D6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_119)
{
    // 12183 0021;	
    // (𒆃) CUNEIFORM SIGN KA TIMES SHU	[4D6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12183, 0x0021 };
    uint32_t const ces[9] = { 0x4D6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_120)
{
    // 12183 003F;	
    // (𒆃) CUNEIFORM SIGN KA TIMES SHU	[4D6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12183, 0x003F };
    uint32_t const ces[9] = { 0x4D6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_121)
{
    // 12183 0061;	
    // (𒆃) CUNEIFORM SIGN KA TIMES SHU	[4D6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12183, 0x0061 };
    uint32_t const ces[9] = { 0x4D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_122)
{
    // 12183 0041;	
    // (𒆃) CUNEIFORM SIGN KA TIMES SHU	[4D6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12183, 0x0041 };
    uint32_t const ces[9] = { 0x4D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_123)
{
    // 12183 0062;	
    // (𒆃) CUNEIFORM SIGN KA TIMES SHU	[4D6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12183, 0x0062 };
    uint32_t const ces[9] = { 0x4D6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_124)
{
    // 12184 0021;	
    // (𒆄) CUNEIFORM SIGN KA TIMES SIG	[4D70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12184, 0x0021 };
    uint32_t const ces[9] = { 0x4D70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_125)
{
    // 12184 003F;	
    // (𒆄) CUNEIFORM SIGN KA TIMES SIG	[4D70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12184, 0x003F };
    uint32_t const ces[9] = { 0x4D70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_126)
{
    // 12184 0061;	
    // (𒆄) CUNEIFORM SIGN KA TIMES SIG	[4D70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12184, 0x0061 };
    uint32_t const ces[9] = { 0x4D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_127)
{
    // 12184 0041;	
    // (𒆄) CUNEIFORM SIGN KA TIMES SIG	[4D70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12184, 0x0041 };
    uint32_t const ces[9] = { 0x4D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_128)
{
    // 12184 0062;	
    // (𒆄) CUNEIFORM SIGN KA TIMES SIG	[4D70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12184, 0x0062 };
    uint32_t const ces[9] = { 0x4D70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_129)
{
    // 12185 0021;	
    // (𒆅) CUNEIFORM SIGN KA TIMES SUHUR	[4D71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12185, 0x0021 };
    uint32_t const ces[9] = { 0x4D71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_130)
{
    // 12185 003F;	
    // (𒆅) CUNEIFORM SIGN KA TIMES SUHUR	[4D71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12185, 0x003F };
    uint32_t const ces[9] = { 0x4D71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_131)
{
    // 12185 0061;	
    // (𒆅) CUNEIFORM SIGN KA TIMES SUHUR	[4D71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12185, 0x0061 };
    uint32_t const ces[9] = { 0x4D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_132)
{
    // 12185 0041;	
    // (𒆅) CUNEIFORM SIGN KA TIMES SUHUR	[4D71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12185, 0x0041 };
    uint32_t const ces[9] = { 0x4D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_133)
{
    // 12185 0062;	
    // (𒆅) CUNEIFORM SIGN KA TIMES SUHUR	[4D71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12185, 0x0062 };
    uint32_t const ces[9] = { 0x4D71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_134)
{
    // 12186 0021;	
    // (𒆆) CUNEIFORM SIGN KA TIMES TAR	[4D72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12186, 0x0021 };
    uint32_t const ces[9] = { 0x4D72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_135)
{
    // 12186 003F;	
    // (𒆆) CUNEIFORM SIGN KA TIMES TAR	[4D72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12186, 0x003F };
    uint32_t const ces[9] = { 0x4D72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_136)
{
    // 12186 0061;	
    // (𒆆) CUNEIFORM SIGN KA TIMES TAR	[4D72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12186, 0x0061 };
    uint32_t const ces[9] = { 0x4D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_137)
{
    // 12186 0041;	
    // (𒆆) CUNEIFORM SIGN KA TIMES TAR	[4D72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12186, 0x0041 };
    uint32_t const ces[9] = { 0x4D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_138)
{
    // 12186 0062;	
    // (𒆆) CUNEIFORM SIGN KA TIMES TAR	[4D72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12186, 0x0062 };
    uint32_t const ces[9] = { 0x4D72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_139)
{
    // 12187 0021;	
    // (𒆇) CUNEIFORM SIGN KA TIMES U	[4D73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12187, 0x0021 };
    uint32_t const ces[9] = { 0x4D73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_140)
{
    // 12187 003F;	
    // (𒆇) CUNEIFORM SIGN KA TIMES U	[4D73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12187, 0x003F };
    uint32_t const ces[9] = { 0x4D73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_141)
{
    // 12187 0061;	
    // (𒆇) CUNEIFORM SIGN KA TIMES U	[4D73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12187, 0x0061 };
    uint32_t const ces[9] = { 0x4D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_142)
{
    // 12187 0041;	
    // (𒆇) CUNEIFORM SIGN KA TIMES U	[4D73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12187, 0x0041 };
    uint32_t const ces[9] = { 0x4D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_143)
{
    // 12187 0062;	
    // (𒆇) CUNEIFORM SIGN KA TIMES U	[4D73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12187, 0x0062 };
    uint32_t const ces[9] = { 0x4D73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_144)
{
    // 12188 0021;	
    // (𒆈) CUNEIFORM SIGN KA TIMES U2	[4D74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12188, 0x0021 };
    uint32_t const ces[9] = { 0x4D74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_145)
{
    // 12188 003F;	
    // (𒆈) CUNEIFORM SIGN KA TIMES U2	[4D74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12188, 0x003F };
    uint32_t const ces[9] = { 0x4D74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_146)
{
    // 12188 0061;	
    // (𒆈) CUNEIFORM SIGN KA TIMES U2	[4D74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12188, 0x0061 };
    uint32_t const ces[9] = { 0x4D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_147)
{
    // 12188 0041;	
    // (𒆈) CUNEIFORM SIGN KA TIMES U2	[4D74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12188, 0x0041 };
    uint32_t const ces[9] = { 0x4D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_148)
{
    // 12188 0062;	
    // (𒆈) CUNEIFORM SIGN KA TIMES U2	[4D74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12188, 0x0062 };
    uint32_t const ces[9] = { 0x4D74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_149)
{
    // 12189 0021;	
    // (𒆉) CUNEIFORM SIGN KA TIMES UD	[4D75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12189, 0x0021 };
    uint32_t const ces[9] = { 0x4D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_150)
{
    // 12189 003F;	
    // (𒆉) CUNEIFORM SIGN KA TIMES UD	[4D75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12189, 0x003F };
    uint32_t const ces[9] = { 0x4D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_151)
{
    // 12189 0061;	
    // (𒆉) CUNEIFORM SIGN KA TIMES UD	[4D75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12189, 0x0061 };
    uint32_t const ces[9] = { 0x4D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_152)
{
    // 12189 0041;	
    // (𒆉) CUNEIFORM SIGN KA TIMES UD	[4D75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12189, 0x0041 };
    uint32_t const ces[9] = { 0x4D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_153)
{
    // 12189 0062;	
    // (𒆉) CUNEIFORM SIGN KA TIMES UD	[4D75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12189, 0x0062 };
    uint32_t const ces[9] = { 0x4D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_154)
{
    // 1218A 0021;	
    // (𒆊) CUNEIFORM SIGN KA TIMES UMUM TIMES PA	[4D76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218A, 0x0021 };
    uint32_t const ces[9] = { 0x4D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_155)
{
    // 1218A 003F;	
    // (𒆊) CUNEIFORM SIGN KA TIMES UMUM TIMES PA	[4D76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218A, 0x003F };
    uint32_t const ces[9] = { 0x4D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_156)
{
    // 1218A 0061;	
    // (𒆊) CUNEIFORM SIGN KA TIMES UMUM TIMES PA	[4D76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218A, 0x0061 };
    uint32_t const ces[9] = { 0x4D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_157)
{
    // 1218A 0041;	
    // (𒆊) CUNEIFORM SIGN KA TIMES UMUM TIMES PA	[4D76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218A, 0x0041 };
    uint32_t const ces[9] = { 0x4D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_158)
{
    // 1218A 0062;	
    // (𒆊) CUNEIFORM SIGN KA TIMES UMUM TIMES PA	[4D76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218A, 0x0062 };
    uint32_t const ces[9] = { 0x4D76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_159)
{
    // 1218B 0021;	
    // (𒆋) CUNEIFORM SIGN KA TIMES USH	[4D77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218B, 0x0021 };
    uint32_t const ces[9] = { 0x4D77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_160)
{
    // 1218B 003F;	
    // (𒆋) CUNEIFORM SIGN KA TIMES USH	[4D77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218B, 0x003F };
    uint32_t const ces[9] = { 0x4D77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_161)
{
    // 1218B 0061;	
    // (𒆋) CUNEIFORM SIGN KA TIMES USH	[4D77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218B, 0x0061 };
    uint32_t const ces[9] = { 0x4D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_162)
{
    // 1218B 0041;	
    // (𒆋) CUNEIFORM SIGN KA TIMES USH	[4D77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218B, 0x0041 };
    uint32_t const ces[9] = { 0x4D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_163)
{
    // 1218B 0062;	
    // (𒆋) CUNEIFORM SIGN KA TIMES USH	[4D77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218B, 0x0062 };
    uint32_t const ces[9] = { 0x4D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_164)
{
    // 1218C 0021;	
    // (𒆌) CUNEIFORM SIGN KA TIMES ZI	[4D78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218C, 0x0021 };
    uint32_t const ces[9] = { 0x4D78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_165)
{
    // 1218C 003F;	
    // (𒆌) CUNEIFORM SIGN KA TIMES ZI	[4D78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218C, 0x003F };
    uint32_t const ces[9] = { 0x4D78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_166)
{
    // 1218C 0061;	
    // (𒆌) CUNEIFORM SIGN KA TIMES ZI	[4D78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218C, 0x0061 };
    uint32_t const ces[9] = { 0x4D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_167)
{
    // 1218C 0041;	
    // (𒆌) CUNEIFORM SIGN KA TIMES ZI	[4D78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218C, 0x0041 };
    uint32_t const ces[9] = { 0x4D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_168)
{
    // 1218C 0062;	
    // (𒆌) CUNEIFORM SIGN KA TIMES ZI	[4D78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218C, 0x0062 };
    uint32_t const ces[9] = { 0x4D78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_169)
{
    // 1218D 0021;	
    // (𒆍) CUNEIFORM SIGN KA2	[4D79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218D, 0x0021 };
    uint32_t const ces[9] = { 0x4D79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_170)
{
    // 1218D 003F;	
    // (𒆍) CUNEIFORM SIGN KA2	[4D79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218D, 0x003F };
    uint32_t const ces[9] = { 0x4D79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_171)
{
    // 1218D 0061;	
    // (𒆍) CUNEIFORM SIGN KA2	[4D79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218D, 0x0061 };
    uint32_t const ces[9] = { 0x4D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_172)
{
    // 1218D 0041;	
    // (𒆍) CUNEIFORM SIGN KA2	[4D79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218D, 0x0041 };
    uint32_t const ces[9] = { 0x4D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_173)
{
    // 1218D 0062;	
    // (𒆍) CUNEIFORM SIGN KA2	[4D79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218D, 0x0062 };
    uint32_t const ces[9] = { 0x4D79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_174)
{
    // 1218E 0021;	
    // (𒆎) CUNEIFORM SIGN KA2 CROSSING KA2	[4D7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218E, 0x0021 };
    uint32_t const ces[9] = { 0x4D7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_175)
{
    // 1218E 003F;	
    // (𒆎) CUNEIFORM SIGN KA2 CROSSING KA2	[4D7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218E, 0x003F };
    uint32_t const ces[9] = { 0x4D7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_176)
{
    // 1218E 0061;	
    // (𒆎) CUNEIFORM SIGN KA2 CROSSING KA2	[4D7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218E, 0x0061 };
    uint32_t const ces[9] = { 0x4D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_177)
{
    // 1218E 0041;	
    // (𒆎) CUNEIFORM SIGN KA2 CROSSING KA2	[4D7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218E, 0x0041 };
    uint32_t const ces[9] = { 0x4D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_178)
{
    // 1218E 0062;	
    // (𒆎) CUNEIFORM SIGN KA2 CROSSING KA2	[4D7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218E, 0x0062 };
    uint32_t const ces[9] = { 0x4D7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_179)
{
    // 1218F 0021;	
    // (𒆏) CUNEIFORM SIGN KAB	[4D7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218F, 0x0021 };
    uint32_t const ces[9] = { 0x4D7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_180)
{
    // 1218F 003F;	
    // (𒆏) CUNEIFORM SIGN KAB	[4D7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218F, 0x003F };
    uint32_t const ces[9] = { 0x4D7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_181)
{
    // 1218F 0061;	
    // (𒆏) CUNEIFORM SIGN KAB	[4D7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218F, 0x0061 };
    uint32_t const ces[9] = { 0x4D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_182)
{
    // 1218F 0041;	
    // (𒆏) CUNEIFORM SIGN KAB	[4D7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1218F, 0x0041 };
    uint32_t const ces[9] = { 0x4D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_183)
{
    // 1218F 0062;	
    // (𒆏) CUNEIFORM SIGN KAB	[4D7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1218F, 0x0062 };
    uint32_t const ces[9] = { 0x4D7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_184)
{
    // 12190 0021;	
    // (𒆐) CUNEIFORM SIGN KAD2	[4D7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12190, 0x0021 };
    uint32_t const ces[9] = { 0x4D7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_185)
{
    // 12190 003F;	
    // (𒆐) CUNEIFORM SIGN KAD2	[4D7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12190, 0x003F };
    uint32_t const ces[9] = { 0x4D7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_186)
{
    // 12190 0061;	
    // (𒆐) CUNEIFORM SIGN KAD2	[4D7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12190, 0x0061 };
    uint32_t const ces[9] = { 0x4D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_187)
{
    // 12190 0041;	
    // (𒆐) CUNEIFORM SIGN KAD2	[4D7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12190, 0x0041 };
    uint32_t const ces[9] = { 0x4D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_188)
{
    // 12190 0062;	
    // (𒆐) CUNEIFORM SIGN KAD2	[4D7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12190, 0x0062 };
    uint32_t const ces[9] = { 0x4D7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_189)
{
    // 12191 0021;	
    // (𒆑) CUNEIFORM SIGN KAD3	[4D7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12191, 0x0021 };
    uint32_t const ces[9] = { 0x4D7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_190)
{
    // 12191 003F;	
    // (𒆑) CUNEIFORM SIGN KAD3	[4D7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12191, 0x003F };
    uint32_t const ces[9] = { 0x4D7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_191)
{
    // 12191 0061;	
    // (𒆑) CUNEIFORM SIGN KAD3	[4D7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12191, 0x0061 };
    uint32_t const ces[9] = { 0x4D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_192)
{
    // 12191 0041;	
    // (𒆑) CUNEIFORM SIGN KAD3	[4D7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12191, 0x0041 };
    uint32_t const ces[9] = { 0x4D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_193)
{
    // 12191 0062;	
    // (𒆑) CUNEIFORM SIGN KAD3	[4D7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12191, 0x0062 };
    uint32_t const ces[9] = { 0x4D7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_194)
{
    // 12192 0021;	
    // (𒆒) CUNEIFORM SIGN KAD4	[4D7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12192, 0x0021 };
    uint32_t const ces[9] = { 0x4D7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_195)
{
    // 12192 003F;	
    // (𒆒) CUNEIFORM SIGN KAD4	[4D7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12192, 0x003F };
    uint32_t const ces[9] = { 0x4D7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_196)
{
    // 12192 0061;	
    // (𒆒) CUNEIFORM SIGN KAD4	[4D7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12192, 0x0061 };
    uint32_t const ces[9] = { 0x4D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_197)
{
    // 12192 0041;	
    // (𒆒) CUNEIFORM SIGN KAD4	[4D7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12192, 0x0041 };
    uint32_t const ces[9] = { 0x4D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_198)
{
    // 12192 0062;	
    // (𒆒) CUNEIFORM SIGN KAD4	[4D7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12192, 0x0062 };
    uint32_t const ces[9] = { 0x4D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_199)
{
    // 12193 0021;	
    // (𒆓) CUNEIFORM SIGN KAD5	[4D7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12193, 0x0021 };
    uint32_t const ces[9] = { 0x4D7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_200)
{
    // 12193 003F;	
    // (𒆓) CUNEIFORM SIGN KAD5	[4D7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12193, 0x003F };
    uint32_t const ces[9] = { 0x4D7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_201)
{
    // 12193 0061;	
    // (𒆓) CUNEIFORM SIGN KAD5	[4D7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12193, 0x0061 };
    uint32_t const ces[9] = { 0x4D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_202)
{
    // 12193 0041;	
    // (𒆓) CUNEIFORM SIGN KAD5	[4D7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12193, 0x0041 };
    uint32_t const ces[9] = { 0x4D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_203)
{
    // 12193 0062;	
    // (𒆓) CUNEIFORM SIGN KAD5	[4D7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12193, 0x0062 };
    uint32_t const ces[9] = { 0x4D7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_204)
{
    // 12194 0021;	
    // (𒆔) CUNEIFORM SIGN KAD5 OVER KAD5	[4D80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12194, 0x0021 };
    uint32_t const ces[9] = { 0x4D80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_205)
{
    // 12194 003F;	
    // (𒆔) CUNEIFORM SIGN KAD5 OVER KAD5	[4D80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12194, 0x003F };
    uint32_t const ces[9] = { 0x4D80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_206)
{
    // 12194 0061;	
    // (𒆔) CUNEIFORM SIGN KAD5 OVER KAD5	[4D80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12194, 0x0061 };
    uint32_t const ces[9] = { 0x4D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_207)
{
    // 12194 0041;	
    // (𒆔) CUNEIFORM SIGN KAD5 OVER KAD5	[4D80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12194, 0x0041 };
    uint32_t const ces[9] = { 0x4D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_208)
{
    // 12194 0062;	
    // (𒆔) CUNEIFORM SIGN KAD5 OVER KAD5	[4D80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12194, 0x0062 };
    uint32_t const ces[9] = { 0x4D80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_209)
{
    // 12195 0021;	
    // (𒆕) CUNEIFORM SIGN KAK	[4D81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12195, 0x0021 };
    uint32_t const ces[9] = { 0x4D81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_210)
{
    // 12195 003F;	
    // (𒆕) CUNEIFORM SIGN KAK	[4D81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12195, 0x003F };
    uint32_t const ces[9] = { 0x4D81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_211)
{
    // 12195 0061;	
    // (𒆕) CUNEIFORM SIGN KAK	[4D81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12195, 0x0061 };
    uint32_t const ces[9] = { 0x4D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_212)
{
    // 12195 0041;	
    // (𒆕) CUNEIFORM SIGN KAK	[4D81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12195, 0x0041 };
    uint32_t const ces[9] = { 0x4D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_213)
{
    // 12195 0062;	
    // (𒆕) CUNEIFORM SIGN KAK	[4D81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12195, 0x0062 };
    uint32_t const ces[9] = { 0x4D81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_214)
{
    // 12196 0021;	
    // (𒆖) CUNEIFORM SIGN KAK TIMES IGI GUNU	[4D82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12196, 0x0021 };
    uint32_t const ces[9] = { 0x4D82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_215)
{
    // 12196 003F;	
    // (𒆖) CUNEIFORM SIGN KAK TIMES IGI GUNU	[4D82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12196, 0x003F };
    uint32_t const ces[9] = { 0x4D82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_216)
{
    // 12196 0061;	
    // (𒆖) CUNEIFORM SIGN KAK TIMES IGI GUNU	[4D82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12196, 0x0061 };
    uint32_t const ces[9] = { 0x4D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_217)
{
    // 12196 0041;	
    // (𒆖) CUNEIFORM SIGN KAK TIMES IGI GUNU	[4D82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12196, 0x0041 };
    uint32_t const ces[9] = { 0x4D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_218)
{
    // 12196 0062;	
    // (𒆖) CUNEIFORM SIGN KAK TIMES IGI GUNU	[4D82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12196, 0x0062 };
    uint32_t const ces[9] = { 0x4D82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_219)
{
    // 12197 0021;	
    // (𒆗) CUNEIFORM SIGN KAL	[4D83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12197, 0x0021 };
    uint32_t const ces[9] = { 0x4D83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_220)
{
    // 12197 003F;	
    // (𒆗) CUNEIFORM SIGN KAL	[4D83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12197, 0x003F };
    uint32_t const ces[9] = { 0x4D83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_221)
{
    // 12197 0061;	
    // (𒆗) CUNEIFORM SIGN KAL	[4D83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12197, 0x0061 };
    uint32_t const ces[9] = { 0x4D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_222)
{
    // 12197 0041;	
    // (𒆗) CUNEIFORM SIGN KAL	[4D83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12197, 0x0041 };
    uint32_t const ces[9] = { 0x4D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_223)
{
    // 12197 0062;	
    // (𒆗) CUNEIFORM SIGN KAL	[4D83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12197, 0x0062 };
    uint32_t const ces[9] = { 0x4D83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_224)
{
    // 12198 0021;	
    // (𒆘) CUNEIFORM SIGN KAL TIMES BAD	[4D84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12198, 0x0021 };
    uint32_t const ces[9] = { 0x4D84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_225)
{
    // 12198 003F;	
    // (𒆘) CUNEIFORM SIGN KAL TIMES BAD	[4D84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12198, 0x003F };
    uint32_t const ces[9] = { 0x4D84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_226)
{
    // 12198 0061;	
    // (𒆘) CUNEIFORM SIGN KAL TIMES BAD	[4D84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12198, 0x0061 };
    uint32_t const ces[9] = { 0x4D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_227)
{
    // 12198 0041;	
    // (𒆘) CUNEIFORM SIGN KAL TIMES BAD	[4D84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12198, 0x0041 };
    uint32_t const ces[9] = { 0x4D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_228)
{
    // 12198 0062;	
    // (𒆘) CUNEIFORM SIGN KAL TIMES BAD	[4D84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12198, 0x0062 };
    uint32_t const ces[9] = { 0x4D84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_229)
{
    // 12199 0021;	
    // (𒆙) CUNEIFORM SIGN KAL CROSSING KAL	[4D85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12199, 0x0021 };
    uint32_t const ces[9] = { 0x4D85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_230)
{
    // 12199 003F;	
    // (𒆙) CUNEIFORM SIGN KAL CROSSING KAL	[4D85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12199, 0x003F };
    uint32_t const ces[9] = { 0x4D85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_231)
{
    // 12199 0061;	
    // (𒆙) CUNEIFORM SIGN KAL CROSSING KAL	[4D85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12199, 0x0061 };
    uint32_t const ces[9] = { 0x4D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_232)
{
    // 12199 0041;	
    // (𒆙) CUNEIFORM SIGN KAL CROSSING KAL	[4D85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12199, 0x0041 };
    uint32_t const ces[9] = { 0x4D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_233)
{
    // 12199 0062;	
    // (𒆙) CUNEIFORM SIGN KAL CROSSING KAL	[4D85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12199, 0x0062 };
    uint32_t const ces[9] = { 0x4D85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_234)
{
    // 1219A 0021;	
    // (𒆚) CUNEIFORM SIGN KAM2	[4D86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219A, 0x0021 };
    uint32_t const ces[9] = { 0x4D86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_235)
{
    // 1219A 003F;	
    // (𒆚) CUNEIFORM SIGN KAM2	[4D86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219A, 0x003F };
    uint32_t const ces[9] = { 0x4D86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_236)
{
    // 1219A 0061;	
    // (𒆚) CUNEIFORM SIGN KAM2	[4D86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219A, 0x0061 };
    uint32_t const ces[9] = { 0x4D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_237)
{
    // 1219A 0041;	
    // (𒆚) CUNEIFORM SIGN KAM2	[4D86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219A, 0x0041 };
    uint32_t const ces[9] = { 0x4D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_238)
{
    // 1219A 0062;	
    // (𒆚) CUNEIFORM SIGN KAM2	[4D86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219A, 0x0062 };
    uint32_t const ces[9] = { 0x4D86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_239)
{
    // 1219B 0021;	
    // (𒆛) CUNEIFORM SIGN KAM4	[4D87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219B, 0x0021 };
    uint32_t const ces[9] = { 0x4D87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_240)
{
    // 1219B 003F;	
    // (𒆛) CUNEIFORM SIGN KAM4	[4D87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219B, 0x003F };
    uint32_t const ces[9] = { 0x4D87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_241)
{
    // 1219B 0061;	
    // (𒆛) CUNEIFORM SIGN KAM4	[4D87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219B, 0x0061 };
    uint32_t const ces[9] = { 0x4D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_242)
{
    // 1219B 0041;	
    // (𒆛) CUNEIFORM SIGN KAM4	[4D87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219B, 0x0041 };
    uint32_t const ces[9] = { 0x4D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_243)
{
    // 1219B 0062;	
    // (𒆛) CUNEIFORM SIGN KAM4	[4D87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219B, 0x0062 };
    uint32_t const ces[9] = { 0x4D87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_244)
{
    // 1219C 0021;	
    // (𒆜) CUNEIFORM SIGN KASKAL	[4D88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219C, 0x0021 };
    uint32_t const ces[9] = { 0x4D88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_245)
{
    // 1219C 003F;	
    // (𒆜) CUNEIFORM SIGN KASKAL	[4D88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219C, 0x003F };
    uint32_t const ces[9] = { 0x4D88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_246)
{
    // 1219C 0061;	
    // (𒆜) CUNEIFORM SIGN KASKAL	[4D88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219C, 0x0061 };
    uint32_t const ces[9] = { 0x4D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_247)
{
    // 1219C 0041;	
    // (𒆜) CUNEIFORM SIGN KASKAL	[4D88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219C, 0x0041 };
    uint32_t const ces[9] = { 0x4D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_248)
{
    // 1219C 0062;	
    // (𒆜) CUNEIFORM SIGN KASKAL	[4D88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219C, 0x0062 };
    uint32_t const ces[9] = { 0x4D88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_249)
{
    // 1219D 0021;	
    // (𒆝) CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219D, 0x0021 };
    uint32_t const ces[9] = { 0x4D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_250)
{
    // 1219D 003F;	
    // (𒆝) CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219D, 0x003F };
    uint32_t const ces[9] = { 0x4D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_251)
{
    // 1219D 0061;	
    // (𒆝) CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219D, 0x0061 };
    uint32_t const ces[9] = { 0x4D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_252)
{
    // 1219D 0041;	
    // (𒆝) CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219D, 0x0041 };
    uint32_t const ces[9] = { 0x4D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_253)
{
    // 1219D 0062;	
    // (𒆝) CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219D, 0x0062 };
    uint32_t const ces[9] = { 0x4D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_254)
{
    // 1219E 0021;	
    // (𒆞) CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219E, 0x0021 };
    uint32_t const ces[9] = { 0x4D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_255)
{
    // 1219E 003F;	
    // (𒆞) CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219E, 0x003F };
    uint32_t const ces[9] = { 0x4D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_256)
{
    // 1219E 0061;	
    // (𒆞) CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219E, 0x0061 };
    uint32_t const ces[9] = { 0x4D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_257)
{
    // 1219E 0041;	
    // (𒆞) CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219E, 0x0041 };
    uint32_t const ces[9] = { 0x4D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_258)
{
    // 1219E 0062;	
    // (𒆞) CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U	[4D8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219E, 0x0062 };
    uint32_t const ces[9] = { 0x4D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_259)
{
    // 1219F 0021;	
    // (𒆟) CUNEIFORM SIGN KESH2	[4D8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219F, 0x0021 };
    uint32_t const ces[9] = { 0x4D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_260)
{
    // 1219F 003F;	
    // (𒆟) CUNEIFORM SIGN KESH2	[4D8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219F, 0x003F };
    uint32_t const ces[9] = { 0x4D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_261)
{
    // 1219F 0061;	
    // (𒆟) CUNEIFORM SIGN KESH2	[4D8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219F, 0x0061 };
    uint32_t const ces[9] = { 0x4D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_262)
{
    // 1219F 0041;	
    // (𒆟) CUNEIFORM SIGN KESH2	[4D8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1219F, 0x0041 };
    uint32_t const ces[9] = { 0x4D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_263)
{
    // 1219F 0062;	
    // (𒆟) CUNEIFORM SIGN KESH2	[4D8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1219F, 0x0062 };
    uint32_t const ces[9] = { 0x4D8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_264)
{
    // 121A0 0021;	
    // (𒆠) CUNEIFORM SIGN KI	[4D8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A0, 0x0021 };
    uint32_t const ces[9] = { 0x4D8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_265)
{
    // 121A0 003F;	
    // (𒆠) CUNEIFORM SIGN KI	[4D8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A0, 0x003F };
    uint32_t const ces[9] = { 0x4D8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_266)
{
    // 121A0 0061;	
    // (𒆠) CUNEIFORM SIGN KI	[4D8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A0, 0x0061 };
    uint32_t const ces[9] = { 0x4D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_267)
{
    // 121A0 0041;	
    // (𒆠) CUNEIFORM SIGN KI	[4D8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A0, 0x0041 };
    uint32_t const ces[9] = { 0x4D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_268)
{
    // 121A0 0062;	
    // (𒆠) CUNEIFORM SIGN KI	[4D8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A0, 0x0062 };
    uint32_t const ces[9] = { 0x4D8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_269)
{
    // 121A1 0021;	
    // (𒆡) CUNEIFORM SIGN KI TIMES BAD	[4D8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A1, 0x0021 };
    uint32_t const ces[9] = { 0x4D8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_270)
{
    // 121A1 003F;	
    // (𒆡) CUNEIFORM SIGN KI TIMES BAD	[4D8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A1, 0x003F };
    uint32_t const ces[9] = { 0x4D8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_271)
{
    // 121A1 0061;	
    // (𒆡) CUNEIFORM SIGN KI TIMES BAD	[4D8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A1, 0x0061 };
    uint32_t const ces[9] = { 0x4D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_272)
{
    // 121A1 0041;	
    // (𒆡) CUNEIFORM SIGN KI TIMES BAD	[4D8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A1, 0x0041 };
    uint32_t const ces[9] = { 0x4D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_273)
{
    // 121A1 0062;	
    // (𒆡) CUNEIFORM SIGN KI TIMES BAD	[4D8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A1, 0x0062 };
    uint32_t const ces[9] = { 0x4D8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_274)
{
    // 121A2 0021;	
    // (𒆢) CUNEIFORM SIGN KI TIMES U	[4D8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A2, 0x0021 };
    uint32_t const ces[9] = { 0x4D8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_275)
{
    // 121A2 003F;	
    // (𒆢) CUNEIFORM SIGN KI TIMES U	[4D8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A2, 0x003F };
    uint32_t const ces[9] = { 0x4D8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_276)
{
    // 121A2 0061;	
    // (𒆢) CUNEIFORM SIGN KI TIMES U	[4D8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A2, 0x0061 };
    uint32_t const ces[9] = { 0x4D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_277)
{
    // 121A2 0041;	
    // (𒆢) CUNEIFORM SIGN KI TIMES U	[4D8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A2, 0x0041 };
    uint32_t const ces[9] = { 0x4D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_278)
{
    // 121A2 0062;	
    // (𒆢) CUNEIFORM SIGN KI TIMES U	[4D8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A2, 0x0062 };
    uint32_t const ces[9] = { 0x4D8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_279)
{
    // 121A3 0021;	
    // (𒆣) CUNEIFORM SIGN KI TIMES UD	[4D8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A3, 0x0021 };
    uint32_t const ces[9] = { 0x4D8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_280)
{
    // 121A3 003F;	
    // (𒆣) CUNEIFORM SIGN KI TIMES UD	[4D8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A3, 0x003F };
    uint32_t const ces[9] = { 0x4D8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_281)
{
    // 121A3 0061;	
    // (𒆣) CUNEIFORM SIGN KI TIMES UD	[4D8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A3, 0x0061 };
    uint32_t const ces[9] = { 0x4D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_282)
{
    // 121A3 0041;	
    // (𒆣) CUNEIFORM SIGN KI TIMES UD	[4D8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A3, 0x0041 };
    uint32_t const ces[9] = { 0x4D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_283)
{
    // 121A3 0062;	
    // (𒆣) CUNEIFORM SIGN KI TIMES UD	[4D8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A3, 0x0062 };
    uint32_t const ces[9] = { 0x4D8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_284)
{
    // 121A4 0021;	
    // (𒆤) CUNEIFORM SIGN KID	[4D90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A4, 0x0021 };
    uint32_t const ces[9] = { 0x4D90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_285)
{
    // 121A4 003F;	
    // (𒆤) CUNEIFORM SIGN KID	[4D90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A4, 0x003F };
    uint32_t const ces[9] = { 0x4D90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_286)
{
    // 121A4 0061;	
    // (𒆤) CUNEIFORM SIGN KID	[4D90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A4, 0x0061 };
    uint32_t const ces[9] = { 0x4D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_287)
{
    // 121A4 0041;	
    // (𒆤) CUNEIFORM SIGN KID	[4D90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A4, 0x0041 };
    uint32_t const ces[9] = { 0x4D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_288)
{
    // 121A4 0062;	
    // (𒆤) CUNEIFORM SIGN KID	[4D90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A4, 0x0062 };
    uint32_t const ces[9] = { 0x4D90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_289)
{
    // 121A5 0021;	
    // (𒆥) CUNEIFORM SIGN KIN	[4D91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A5, 0x0021 };
    uint32_t const ces[9] = { 0x4D91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_290)
{
    // 121A5 003F;	
    // (𒆥) CUNEIFORM SIGN KIN	[4D91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A5, 0x003F };
    uint32_t const ces[9] = { 0x4D91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_291)
{
    // 121A5 0061;	
    // (𒆥) CUNEIFORM SIGN KIN	[4D91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A5, 0x0061 };
    uint32_t const ces[9] = { 0x4D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_292)
{
    // 121A5 0041;	
    // (𒆥) CUNEIFORM SIGN KIN	[4D91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A5, 0x0041 };
    uint32_t const ces[9] = { 0x4D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_293)
{
    // 121A5 0062;	
    // (𒆥) CUNEIFORM SIGN KIN	[4D91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A5, 0x0062 };
    uint32_t const ces[9] = { 0x4D91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_294)
{
    // 121A6 0021;	
    // (𒆦) CUNEIFORM SIGN KISAL	[4D92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A6, 0x0021 };
    uint32_t const ces[9] = { 0x4D92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_295)
{
    // 121A6 003F;	
    // (𒆦) CUNEIFORM SIGN KISAL	[4D92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A6, 0x003F };
    uint32_t const ces[9] = { 0x4D92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_296)
{
    // 121A6 0061;	
    // (𒆦) CUNEIFORM SIGN KISAL	[4D92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A6, 0x0061 };
    uint32_t const ces[9] = { 0x4D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_297)
{
    // 121A6 0041;	
    // (𒆦) CUNEIFORM SIGN KISAL	[4D92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A6, 0x0041 };
    uint32_t const ces[9] = { 0x4D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_298)
{
    // 121A6 0062;	
    // (𒆦) CUNEIFORM SIGN KISAL	[4D92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A6, 0x0062 };
    uint32_t const ces[9] = { 0x4D92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_299)
{
    // 121A7 0021;	
    // (𒆧) CUNEIFORM SIGN KISH	[4D93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A7, 0x0021 };
    uint32_t const ces[9] = { 0x4D93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_300)
{
    // 121A7 003F;	
    // (𒆧) CUNEIFORM SIGN KISH	[4D93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A7, 0x003F };
    uint32_t const ces[9] = { 0x4D93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_301)
{
    // 121A7 0061;	
    // (𒆧) CUNEIFORM SIGN KISH	[4D93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A7, 0x0061 };
    uint32_t const ces[9] = { 0x4D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_302)
{
    // 121A7 0041;	
    // (𒆧) CUNEIFORM SIGN KISH	[4D93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A7, 0x0041 };
    uint32_t const ces[9] = { 0x4D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_303)
{
    // 121A7 0062;	
    // (𒆧) CUNEIFORM SIGN KISH	[4D93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A7, 0x0062 };
    uint32_t const ces[9] = { 0x4D93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_304)
{
    // 121A8 0021;	
    // (𒆨) CUNEIFORM SIGN KISIM5	[4D94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A8, 0x0021 };
    uint32_t const ces[9] = { 0x4D94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_305)
{
    // 121A8 003F;	
    // (𒆨) CUNEIFORM SIGN KISIM5	[4D94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A8, 0x003F };
    uint32_t const ces[9] = { 0x4D94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_306)
{
    // 121A8 0061;	
    // (𒆨) CUNEIFORM SIGN KISIM5	[4D94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A8, 0x0061 };
    uint32_t const ces[9] = { 0x4D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_307)
{
    // 121A8 0041;	
    // (𒆨) CUNEIFORM SIGN KISIM5	[4D94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A8, 0x0041 };
    uint32_t const ces[9] = { 0x4D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_308)
{
    // 121A8 0062;	
    // (𒆨) CUNEIFORM SIGN KISIM5	[4D94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A8, 0x0062 };
    uint32_t const ces[9] = { 0x4D94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_309)
{
    // 121A9 0021;	
    // (𒆩) CUNEIFORM SIGN KISIM5 OVER KISIM5	[4D95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A9, 0x0021 };
    uint32_t const ces[9] = { 0x4D95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_310)
{
    // 121A9 003F;	
    // (𒆩) CUNEIFORM SIGN KISIM5 OVER KISIM5	[4D95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A9, 0x003F };
    uint32_t const ces[9] = { 0x4D95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_311)
{
    // 121A9 0061;	
    // (𒆩) CUNEIFORM SIGN KISIM5 OVER KISIM5	[4D95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A9, 0x0061 };
    uint32_t const ces[9] = { 0x4D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_312)
{
    // 121A9 0041;	
    // (𒆩) CUNEIFORM SIGN KISIM5 OVER KISIM5	[4D95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121A9, 0x0041 };
    uint32_t const ces[9] = { 0x4D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_313)
{
    // 121A9 0062;	
    // (𒆩) CUNEIFORM SIGN KISIM5 OVER KISIM5	[4D95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121A9, 0x0062 };
    uint32_t const ces[9] = { 0x4D95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_314)
{
    // 121AA 0021;	
    // (𒆪) CUNEIFORM SIGN KU	[4D96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AA, 0x0021 };
    uint32_t const ces[9] = { 0x4D96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_315)
{
    // 121AA 003F;	
    // (𒆪) CUNEIFORM SIGN KU	[4D96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AA, 0x003F };
    uint32_t const ces[9] = { 0x4D96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_316)
{
    // 121AA 0061;	
    // (𒆪) CUNEIFORM SIGN KU	[4D96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AA, 0x0061 };
    uint32_t const ces[9] = { 0x4D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_317)
{
    // 121AA 0041;	
    // (𒆪) CUNEIFORM SIGN KU	[4D96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AA, 0x0041 };
    uint32_t const ces[9] = { 0x4D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_318)
{
    // 121AA 0062;	
    // (𒆪) CUNEIFORM SIGN KU	[4D96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AA, 0x0062 };
    uint32_t const ces[9] = { 0x4D96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_319)
{
    // 121AB 0021;	
    // (𒆫) CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2	[4D97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AB, 0x0021 };
    uint32_t const ces[9] = { 0x4D97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_320)
{
    // 121AB 003F;	
    // (𒆫) CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2	[4D97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AB, 0x003F };
    uint32_t const ces[9] = { 0x4D97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_321)
{
    // 121AB 0061;	
    // (𒆫) CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2	[4D97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AB, 0x0061 };
    uint32_t const ces[9] = { 0x4D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_322)
{
    // 121AB 0041;	
    // (𒆫) CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2	[4D97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AB, 0x0041 };
    uint32_t const ces[9] = { 0x4D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_323)
{
    // 121AB 0062;	
    // (𒆫) CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2	[4D97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AB, 0x0062 };
    uint32_t const ces[9] = { 0x4D97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_324)
{
    // 121AC 0021;	
    // (𒆬) CUNEIFORM SIGN KU3	[4D98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AC, 0x0021 };
    uint32_t const ces[9] = { 0x4D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_325)
{
    // 121AC 003F;	
    // (𒆬) CUNEIFORM SIGN KU3	[4D98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AC, 0x003F };
    uint32_t const ces[9] = { 0x4D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_326)
{
    // 121AC 0061;	
    // (𒆬) CUNEIFORM SIGN KU3	[4D98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AC, 0x0061 };
    uint32_t const ces[9] = { 0x4D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_327)
{
    // 121AC 0041;	
    // (𒆬) CUNEIFORM SIGN KU3	[4D98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AC, 0x0041 };
    uint32_t const ces[9] = { 0x4D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_328)
{
    // 121AC 0062;	
    // (𒆬) CUNEIFORM SIGN KU3	[4D98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AC, 0x0062 };
    uint32_t const ces[9] = { 0x4D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_329)
{
    // 121AD 0021;	
    // (𒆭) CUNEIFORM SIGN KU4	[4D99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AD, 0x0021 };
    uint32_t const ces[9] = { 0x4D99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_330)
{
    // 121AD 003F;	
    // (𒆭) CUNEIFORM SIGN KU4	[4D99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AD, 0x003F };
    uint32_t const ces[9] = { 0x4D99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_331)
{
    // 121AD 0061;	
    // (𒆭) CUNEIFORM SIGN KU4	[4D99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AD, 0x0061 };
    uint32_t const ces[9] = { 0x4D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_332)
{
    // 121AD 0041;	
    // (𒆭) CUNEIFORM SIGN KU4	[4D99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AD, 0x0041 };
    uint32_t const ces[9] = { 0x4D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_333)
{
    // 121AD 0062;	
    // (𒆭) CUNEIFORM SIGN KU4	[4D99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AD, 0x0062 };
    uint32_t const ces[9] = { 0x4D99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_334)
{
    // 121AE 0021;	
    // (𒆮) CUNEIFORM SIGN KU4 VARIANT FORM	[4D9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AE, 0x0021 };
    uint32_t const ces[9] = { 0x4D9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_335)
{
    // 121AE 003F;	
    // (𒆮) CUNEIFORM SIGN KU4 VARIANT FORM	[4D9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AE, 0x003F };
    uint32_t const ces[9] = { 0x4D9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_336)
{
    // 121AE 0061;	
    // (𒆮) CUNEIFORM SIGN KU4 VARIANT FORM	[4D9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AE, 0x0061 };
    uint32_t const ces[9] = { 0x4D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_337)
{
    // 121AE 0041;	
    // (𒆮) CUNEIFORM SIGN KU4 VARIANT FORM	[4D9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AE, 0x0041 };
    uint32_t const ces[9] = { 0x4D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_338)
{
    // 121AE 0062;	
    // (𒆮) CUNEIFORM SIGN KU4 VARIANT FORM	[4D9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AE, 0x0062 };
    uint32_t const ces[9] = { 0x4D9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_339)
{
    // 121AF 0021;	
    // (𒆯) CUNEIFORM SIGN KU7	[4D9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AF, 0x0021 };
    uint32_t const ces[9] = { 0x4D9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_340)
{
    // 121AF 003F;	
    // (𒆯) CUNEIFORM SIGN KU7	[4D9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AF, 0x003F };
    uint32_t const ces[9] = { 0x4D9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_341)
{
    // 121AF 0061;	
    // (𒆯) CUNEIFORM SIGN KU7	[4D9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AF, 0x0061 };
    uint32_t const ces[9] = { 0x4D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_342)
{
    // 121AF 0041;	
    // (𒆯) CUNEIFORM SIGN KU7	[4D9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121AF, 0x0041 };
    uint32_t const ces[9] = { 0x4D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_343)
{
    // 121AF 0062;	
    // (𒆯) CUNEIFORM SIGN KU7	[4D9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121AF, 0x0062 };
    uint32_t const ces[9] = { 0x4D9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_344)
{
    // 121B0 0021;	
    // (𒆰) CUNEIFORM SIGN KUL	[4D9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B0, 0x0021 };
    uint32_t const ces[9] = { 0x4D9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_345)
{
    // 121B0 003F;	
    // (𒆰) CUNEIFORM SIGN KUL	[4D9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B0, 0x003F };
    uint32_t const ces[9] = { 0x4D9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_346)
{
    // 121B0 0061;	
    // (𒆰) CUNEIFORM SIGN KUL	[4D9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B0, 0x0061 };
    uint32_t const ces[9] = { 0x4D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_347)
{
    // 121B0 0041;	
    // (𒆰) CUNEIFORM SIGN KUL	[4D9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B0, 0x0041 };
    uint32_t const ces[9] = { 0x4D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_348)
{
    // 121B0 0062;	
    // (𒆰) CUNEIFORM SIGN KUL	[4D9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B0, 0x0062 };
    uint32_t const ces[9] = { 0x4D9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_349)
{
    // 121B1 0021;	
    // (𒆱) CUNEIFORM SIGN KUL GUNU	[4D9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B1, 0x0021 };
    uint32_t const ces[9] = { 0x4D9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_350)
{
    // 121B1 003F;	
    // (𒆱) CUNEIFORM SIGN KUL GUNU	[4D9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B1, 0x003F };
    uint32_t const ces[9] = { 0x4D9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_351)
{
    // 121B1 0061;	
    // (𒆱) CUNEIFORM SIGN KUL GUNU	[4D9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B1, 0x0061 };
    uint32_t const ces[9] = { 0x4D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_352)
{
    // 121B1 0041;	
    // (𒆱) CUNEIFORM SIGN KUL GUNU	[4D9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B1, 0x0041 };
    uint32_t const ces[9] = { 0x4D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_353)
{
    // 121B1 0062;	
    // (𒆱) CUNEIFORM SIGN KUL GUNU	[4D9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B1, 0x0062 };
    uint32_t const ces[9] = { 0x4D9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_354)
{
    // 121B2 0021;	
    // (𒆲) CUNEIFORM SIGN KUN	[4D9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B2, 0x0021 };
    uint32_t const ces[9] = { 0x4D9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_355)
{
    // 121B2 003F;	
    // (𒆲) CUNEIFORM SIGN KUN	[4D9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B2, 0x003F };
    uint32_t const ces[9] = { 0x4D9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_356)
{
    // 121B2 0061;	
    // (𒆲) CUNEIFORM SIGN KUN	[4D9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B2, 0x0061 };
    uint32_t const ces[9] = { 0x4D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_357)
{
    // 121B2 0041;	
    // (𒆲) CUNEIFORM SIGN KUN	[4D9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B2, 0x0041 };
    uint32_t const ces[9] = { 0x4D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_358)
{
    // 121B2 0062;	
    // (𒆲) CUNEIFORM SIGN KUN	[4D9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B2, 0x0062 };
    uint32_t const ces[9] = { 0x4D9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_359)
{
    // 121B3 0021;	
    // (𒆳) CUNEIFORM SIGN KUR	[4D9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B3, 0x0021 };
    uint32_t const ces[9] = { 0x4D9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_360)
{
    // 121B3 003F;	
    // (𒆳) CUNEIFORM SIGN KUR	[4D9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B3, 0x003F };
    uint32_t const ces[9] = { 0x4D9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_361)
{
    // 121B3 0061;	
    // (𒆳) CUNEIFORM SIGN KUR	[4D9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B3, 0x0061 };
    uint32_t const ces[9] = { 0x4D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_362)
{
    // 121B3 0041;	
    // (𒆳) CUNEIFORM SIGN KUR	[4D9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B3, 0x0041 };
    uint32_t const ces[9] = { 0x4D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_363)
{
    // 121B3 0062;	
    // (𒆳) CUNEIFORM SIGN KUR	[4D9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B3, 0x0062 };
    uint32_t const ces[9] = { 0x4D9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_364)
{
    // 121B4 0021;	
    // (𒆴) CUNEIFORM SIGN KUR OPPOSING KUR	[4DA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B4, 0x0021 };
    uint32_t const ces[9] = { 0x4DA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_365)
{
    // 121B4 003F;	
    // (𒆴) CUNEIFORM SIGN KUR OPPOSING KUR	[4DA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B4, 0x003F };
    uint32_t const ces[9] = { 0x4DA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_366)
{
    // 121B4 0061;	
    // (𒆴) CUNEIFORM SIGN KUR OPPOSING KUR	[4DA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B4, 0x0061 };
    uint32_t const ces[9] = { 0x4DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_367)
{
    // 121B4 0041;	
    // (𒆴) CUNEIFORM SIGN KUR OPPOSING KUR	[4DA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B4, 0x0041 };
    uint32_t const ces[9] = { 0x4DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_368)
{
    // 121B4 0062;	
    // (𒆴) CUNEIFORM SIGN KUR OPPOSING KUR	[4DA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B4, 0x0062 };
    uint32_t const ces[9] = { 0x4DA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_369)
{
    // 121B5 0021;	
    // (𒆵) CUNEIFORM SIGN KUSHU2	[4DA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B5, 0x0021 };
    uint32_t const ces[9] = { 0x4DA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_370)
{
    // 121B5 003F;	
    // (𒆵) CUNEIFORM SIGN KUSHU2	[4DA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B5, 0x003F };
    uint32_t const ces[9] = { 0x4DA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_371)
{
    // 121B5 0061;	
    // (𒆵) CUNEIFORM SIGN KUSHU2	[4DA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B5, 0x0061 };
    uint32_t const ces[9] = { 0x4DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_372)
{
    // 121B5 0041;	
    // (𒆵) CUNEIFORM SIGN KUSHU2	[4DA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B5, 0x0041 };
    uint32_t const ces[9] = { 0x4DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_373)
{
    // 121B5 0062;	
    // (𒆵) CUNEIFORM SIGN KUSHU2	[4DA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B5, 0x0062 };
    uint32_t const ces[9] = { 0x4DA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_374)
{
    // 121B6 0021;	
    // (𒆶) CUNEIFORM SIGN KWU318	[4DA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B6, 0x0021 };
    uint32_t const ces[9] = { 0x4DA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_375)
{
    // 121B6 003F;	
    // (𒆶) CUNEIFORM SIGN KWU318	[4DA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B6, 0x003F };
    uint32_t const ces[9] = { 0x4DA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_376)
{
    // 121B6 0061;	
    // (𒆶) CUNEIFORM SIGN KWU318	[4DA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B6, 0x0061 };
    uint32_t const ces[9] = { 0x4DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_377)
{
    // 121B6 0041;	
    // (𒆶) CUNEIFORM SIGN KWU318	[4DA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B6, 0x0041 };
    uint32_t const ces[9] = { 0x4DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_378)
{
    // 121B6 0062;	
    // (𒆶) CUNEIFORM SIGN KWU318	[4DA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B6, 0x0062 };
    uint32_t const ces[9] = { 0x4DA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_379)
{
    // 121B7 0021;	
    // (𒆷) CUNEIFORM SIGN LA	[4DA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B7, 0x0021 };
    uint32_t const ces[9] = { 0x4DA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_380)
{
    // 121B7 003F;	
    // (𒆷) CUNEIFORM SIGN LA	[4DA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B7, 0x003F };
    uint32_t const ces[9] = { 0x4DA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_381)
{
    // 121B7 0061;	
    // (𒆷) CUNEIFORM SIGN LA	[4DA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B7, 0x0061 };
    uint32_t const ces[9] = { 0x4DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_382)
{
    // 121B7 0041;	
    // (𒆷) CUNEIFORM SIGN LA	[4DA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B7, 0x0041 };
    uint32_t const ces[9] = { 0x4DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_383)
{
    // 121B7 0062;	
    // (𒆷) CUNEIFORM SIGN LA	[4DA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B7, 0x0062 };
    uint32_t const ces[9] = { 0x4DA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_384)
{
    // 121B8 0021;	
    // (𒆸) CUNEIFORM SIGN LAGAB	[4DA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B8, 0x0021 };
    uint32_t const ces[9] = { 0x4DA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_385)
{
    // 121B8 003F;	
    // (𒆸) CUNEIFORM SIGN LAGAB	[4DA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B8, 0x003F };
    uint32_t const ces[9] = { 0x4DA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_386)
{
    // 121B8 0061;	
    // (𒆸) CUNEIFORM SIGN LAGAB	[4DA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B8, 0x0061 };
    uint32_t const ces[9] = { 0x4DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_387)
{
    // 121B8 0041;	
    // (𒆸) CUNEIFORM SIGN LAGAB	[4DA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B8, 0x0041 };
    uint32_t const ces[9] = { 0x4DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_388)
{
    // 121B8 0062;	
    // (𒆸) CUNEIFORM SIGN LAGAB	[4DA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B8, 0x0062 };
    uint32_t const ces[9] = { 0x4DA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_389)
{
    // 121B9 0021;	
    // (𒆹) CUNEIFORM SIGN LAGAB TIMES A	[4DA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B9, 0x0021 };
    uint32_t const ces[9] = { 0x4DA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_390)
{
    // 121B9 003F;	
    // (𒆹) CUNEIFORM SIGN LAGAB TIMES A	[4DA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B9, 0x003F };
    uint32_t const ces[9] = { 0x4DA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_391)
{
    // 121B9 0061;	
    // (𒆹) CUNEIFORM SIGN LAGAB TIMES A	[4DA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B9, 0x0061 };
    uint32_t const ces[9] = { 0x4DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_392)
{
    // 121B9 0041;	
    // (𒆹) CUNEIFORM SIGN LAGAB TIMES A	[4DA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121B9, 0x0041 };
    uint32_t const ces[9] = { 0x4DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_393)
{
    // 121B9 0062;	
    // (𒆹) CUNEIFORM SIGN LAGAB TIMES A	[4DA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121B9, 0x0062 };
    uint32_t const ces[9] = { 0x4DA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_394)
{
    // 121BA 0021;	
    // (𒆺) CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA	[4DA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BA, 0x0021 };
    uint32_t const ces[9] = { 0x4DA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_395)
{
    // 121BA 003F;	
    // (𒆺) CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA	[4DA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BA, 0x003F };
    uint32_t const ces[9] = { 0x4DA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_396)
{
    // 121BA 0061;	
    // (𒆺) CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA	[4DA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BA, 0x0061 };
    uint32_t const ces[9] = { 0x4DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_397)
{
    // 121BA 0041;	
    // (𒆺) CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA	[4DA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BA, 0x0041 };
    uint32_t const ces[9] = { 0x4DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_398)
{
    // 121BA 0062;	
    // (𒆺) CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA	[4DA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BA, 0x0062 };
    uint32_t const ces[9] = { 0x4DA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_399)
{
    // 121BB 0021;	
    // (𒆻) CUNEIFORM SIGN LAGAB TIMES A PLUS GAR	[4DA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BB, 0x0021 };
    uint32_t const ces[9] = { 0x4DA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_400)
{
    // 121BB 003F;	
    // (𒆻) CUNEIFORM SIGN LAGAB TIMES A PLUS GAR	[4DA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BB, 0x003F };
    uint32_t const ces[9] = { 0x4DA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_401)
{
    // 121BB 0061;	
    // (𒆻) CUNEIFORM SIGN LAGAB TIMES A PLUS GAR	[4DA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BB, 0x0061 };
    uint32_t const ces[9] = { 0x4DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_402)
{
    // 121BB 0041;	
    // (𒆻) CUNEIFORM SIGN LAGAB TIMES A PLUS GAR	[4DA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BB, 0x0041 };
    uint32_t const ces[9] = { 0x4DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_403)
{
    // 121BB 0062;	
    // (𒆻) CUNEIFORM SIGN LAGAB TIMES A PLUS GAR	[4DA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BB, 0x0062 };
    uint32_t const ces[9] = { 0x4DA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_404)
{
    // 121BC 0021;	
    // (𒆼) CUNEIFORM SIGN LAGAB TIMES A PLUS LAL	[4DA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BC, 0x0021 };
    uint32_t const ces[9] = { 0x4DA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_405)
{
    // 121BC 003F;	
    // (𒆼) CUNEIFORM SIGN LAGAB TIMES A PLUS LAL	[4DA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BC, 0x003F };
    uint32_t const ces[9] = { 0x4DA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_406)
{
    // 121BC 0061;	
    // (𒆼) CUNEIFORM SIGN LAGAB TIMES A PLUS LAL	[4DA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BC, 0x0061 };
    uint32_t const ces[9] = { 0x4DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_407)
{
    // 121BC 0041;	
    // (𒆼) CUNEIFORM SIGN LAGAB TIMES A PLUS LAL	[4DA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BC, 0x0041 };
    uint32_t const ces[9] = { 0x4DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_408)
{
    // 121BC 0062;	
    // (𒆼) CUNEIFORM SIGN LAGAB TIMES A PLUS LAL	[4DA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BC, 0x0062 };
    uint32_t const ces[9] = { 0x4DA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_409)
{
    // 121BD 0021;	
    // (𒆽) CUNEIFORM SIGN LAGAB TIMES AL	[4DA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BD, 0x0021 };
    uint32_t const ces[9] = { 0x4DA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_410)
{
    // 121BD 003F;	
    // (𒆽) CUNEIFORM SIGN LAGAB TIMES AL	[4DA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BD, 0x003F };
    uint32_t const ces[9] = { 0x4DA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_411)
{
    // 121BD 0061;	
    // (𒆽) CUNEIFORM SIGN LAGAB TIMES AL	[4DA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BD, 0x0061 };
    uint32_t const ces[9] = { 0x4DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_412)
{
    // 121BD 0041;	
    // (𒆽) CUNEIFORM SIGN LAGAB TIMES AL	[4DA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BD, 0x0041 };
    uint32_t const ces[9] = { 0x4DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_413)
{
    // 121BD 0062;	
    // (𒆽) CUNEIFORM SIGN LAGAB TIMES AL	[4DA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BD, 0x0062 };
    uint32_t const ces[9] = { 0x4DA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_414)
{
    // 121BE 0021;	
    // (𒆾) CUNEIFORM SIGN LAGAB TIMES AN	[4DAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BE, 0x0021 };
    uint32_t const ces[9] = { 0x4DAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_415)
{
    // 121BE 003F;	
    // (𒆾) CUNEIFORM SIGN LAGAB TIMES AN	[4DAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BE, 0x003F };
    uint32_t const ces[9] = { 0x4DAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_416)
{
    // 121BE 0061;	
    // (𒆾) CUNEIFORM SIGN LAGAB TIMES AN	[4DAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BE, 0x0061 };
    uint32_t const ces[9] = { 0x4DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_417)
{
    // 121BE 0041;	
    // (𒆾) CUNEIFORM SIGN LAGAB TIMES AN	[4DAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BE, 0x0041 };
    uint32_t const ces[9] = { 0x4DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_418)
{
    // 121BE 0062;	
    // (𒆾) CUNEIFORM SIGN LAGAB TIMES AN	[4DAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BE, 0x0062 };
    uint32_t const ces[9] = { 0x4DAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_419)
{
    // 121BF 0021;	
    // (𒆿) CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU	[4DAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BF, 0x0021 };
    uint32_t const ces[9] = { 0x4DAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_420)
{
    // 121BF 003F;	
    // (𒆿) CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU	[4DAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BF, 0x003F };
    uint32_t const ces[9] = { 0x4DAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_421)
{
    // 121BF 0061;	
    // (𒆿) CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU	[4DAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BF, 0x0061 };
    uint32_t const ces[9] = { 0x4DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_422)
{
    // 121BF 0041;	
    // (𒆿) CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU	[4DAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121BF, 0x0041 };
    uint32_t const ces[9] = { 0x4DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_423)
{
    // 121BF 0062;	
    // (𒆿) CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU	[4DAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121BF, 0x0062 };
    uint32_t const ces[9] = { 0x4DAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_424)
{
    // 121C0 0021;	
    // (𒇀) CUNEIFORM SIGN LAGAB TIMES BAD	[4DAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C0, 0x0021 };
    uint32_t const ces[9] = { 0x4DAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_425)
{
    // 121C0 003F;	
    // (𒇀) CUNEIFORM SIGN LAGAB TIMES BAD	[4DAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C0, 0x003F };
    uint32_t const ces[9] = { 0x4DAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_426)
{
    // 121C0 0061;	
    // (𒇀) CUNEIFORM SIGN LAGAB TIMES BAD	[4DAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C0, 0x0061 };
    uint32_t const ces[9] = { 0x4DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_427)
{
    // 121C0 0041;	
    // (𒇀) CUNEIFORM SIGN LAGAB TIMES BAD	[4DAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C0, 0x0041 };
    uint32_t const ces[9] = { 0x4DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_428)
{
    // 121C0 0062;	
    // (𒇀) CUNEIFORM SIGN LAGAB TIMES BAD	[4DAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C0, 0x0062 };
    uint32_t const ces[9] = { 0x4DAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_429)
{
    // 121C1 0021;	
    // (𒇁) CUNEIFORM SIGN LAGAB TIMES BI	[4DAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C1, 0x0021 };
    uint32_t const ces[9] = { 0x4DAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_430)
{
    // 121C1 003F;	
    // (𒇁) CUNEIFORM SIGN LAGAB TIMES BI	[4DAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C1, 0x003F };
    uint32_t const ces[9] = { 0x4DAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_431)
{
    // 121C1 0061;	
    // (𒇁) CUNEIFORM SIGN LAGAB TIMES BI	[4DAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C1, 0x0061 };
    uint32_t const ces[9] = { 0x4DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_432)
{
    // 121C1 0041;	
    // (𒇁) CUNEIFORM SIGN LAGAB TIMES BI	[4DAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C1, 0x0041 };
    uint32_t const ces[9] = { 0x4DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_433)
{
    // 121C1 0062;	
    // (𒇁) CUNEIFORM SIGN LAGAB TIMES BI	[4DAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C1, 0x0062 };
    uint32_t const ces[9] = { 0x4DAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_434)
{
    // 121C2 0021;	
    // (𒇂) CUNEIFORM SIGN LAGAB TIMES DAR	[4DAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C2, 0x0021 };
    uint32_t const ces[9] = { 0x4DAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_435)
{
    // 121C2 003F;	
    // (𒇂) CUNEIFORM SIGN LAGAB TIMES DAR	[4DAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C2, 0x003F };
    uint32_t const ces[9] = { 0x4DAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_436)
{
    // 121C2 0061;	
    // (𒇂) CUNEIFORM SIGN LAGAB TIMES DAR	[4DAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C2, 0x0061 };
    uint32_t const ces[9] = { 0x4DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_437)
{
    // 121C2 0041;	
    // (𒇂) CUNEIFORM SIGN LAGAB TIMES DAR	[4DAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C2, 0x0041 };
    uint32_t const ces[9] = { 0x4DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_438)
{
    // 121C2 0062;	
    // (𒇂) CUNEIFORM SIGN LAGAB TIMES DAR	[4DAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C2, 0x0062 };
    uint32_t const ces[9] = { 0x4DAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_439)
{
    // 121C3 0021;	
    // (𒇃) CUNEIFORM SIGN LAGAB TIMES EN	[4DAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C3, 0x0021 };
    uint32_t const ces[9] = { 0x4DAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_440)
{
    // 121C3 003F;	
    // (𒇃) CUNEIFORM SIGN LAGAB TIMES EN	[4DAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C3, 0x003F };
    uint32_t const ces[9] = { 0x4DAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_441)
{
    // 121C3 0061;	
    // (𒇃) CUNEIFORM SIGN LAGAB TIMES EN	[4DAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C3, 0x0061 };
    uint32_t const ces[9] = { 0x4DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_442)
{
    // 121C3 0041;	
    // (𒇃) CUNEIFORM SIGN LAGAB TIMES EN	[4DAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C3, 0x0041 };
    uint32_t const ces[9] = { 0x4DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_443)
{
    // 121C3 0062;	
    // (𒇃) CUNEIFORM SIGN LAGAB TIMES EN	[4DAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C3, 0x0062 };
    uint32_t const ces[9] = { 0x4DAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_444)
{
    // 121C4 0021;	
    // (𒇄) CUNEIFORM SIGN LAGAB TIMES GA	[4DB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C4, 0x0021 };
    uint32_t const ces[9] = { 0x4DB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_445)
{
    // 121C4 003F;	
    // (𒇄) CUNEIFORM SIGN LAGAB TIMES GA	[4DB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C4, 0x003F };
    uint32_t const ces[9] = { 0x4DB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_446)
{
    // 121C4 0061;	
    // (𒇄) CUNEIFORM SIGN LAGAB TIMES GA	[4DB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C4, 0x0061 };
    uint32_t const ces[9] = { 0x4DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_447)
{
    // 121C4 0041;	
    // (𒇄) CUNEIFORM SIGN LAGAB TIMES GA	[4DB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C4, 0x0041 };
    uint32_t const ces[9] = { 0x4DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_448)
{
    // 121C4 0062;	
    // (𒇄) CUNEIFORM SIGN LAGAB TIMES GA	[4DB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C4, 0x0062 };
    uint32_t const ces[9] = { 0x4DB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_449)
{
    // 121C5 0021;	
    // (𒇅) CUNEIFORM SIGN LAGAB TIMES GAR	[4DB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C5, 0x0021 };
    uint32_t const ces[9] = { 0x4DB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_450)
{
    // 121C5 003F;	
    // (𒇅) CUNEIFORM SIGN LAGAB TIMES GAR	[4DB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C5, 0x003F };
    uint32_t const ces[9] = { 0x4DB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_451)
{
    // 121C5 0061;	
    // (𒇅) CUNEIFORM SIGN LAGAB TIMES GAR	[4DB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C5, 0x0061 };
    uint32_t const ces[9] = { 0x4DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_452)
{
    // 121C5 0041;	
    // (𒇅) CUNEIFORM SIGN LAGAB TIMES GAR	[4DB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C5, 0x0041 };
    uint32_t const ces[9] = { 0x4DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_453)
{
    // 121C5 0062;	
    // (𒇅) CUNEIFORM SIGN LAGAB TIMES GAR	[4DB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C5, 0x0062 };
    uint32_t const ces[9] = { 0x4DB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_454)
{
    // 121C6 0021;	
    // (𒇆) CUNEIFORM SIGN LAGAB TIMES GUD	[4DB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C6, 0x0021 };
    uint32_t const ces[9] = { 0x4DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_455)
{
    // 121C6 003F;	
    // (𒇆) CUNEIFORM SIGN LAGAB TIMES GUD	[4DB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C6, 0x003F };
    uint32_t const ces[9] = { 0x4DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_456)
{
    // 121C6 0061;	
    // (𒇆) CUNEIFORM SIGN LAGAB TIMES GUD	[4DB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C6, 0x0061 };
    uint32_t const ces[9] = { 0x4DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_457)
{
    // 121C6 0041;	
    // (𒇆) CUNEIFORM SIGN LAGAB TIMES GUD	[4DB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C6, 0x0041 };
    uint32_t const ces[9] = { 0x4DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_458)
{
    // 121C6 0062;	
    // (𒇆) CUNEIFORM SIGN LAGAB TIMES GUD	[4DB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C6, 0x0062 };
    uint32_t const ces[9] = { 0x4DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_459)
{
    // 121C7 0021;	
    // (𒇇) CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD	[4DB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C7, 0x0021 };
    uint32_t const ces[9] = { 0x4DB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_460)
{
    // 121C7 003F;	
    // (𒇇) CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD	[4DB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C7, 0x003F };
    uint32_t const ces[9] = { 0x4DB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_461)
{
    // 121C7 0061;	
    // (𒇇) CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD	[4DB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C7, 0x0061 };
    uint32_t const ces[9] = { 0x4DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_462)
{
    // 121C7 0041;	
    // (𒇇) CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD	[4DB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C7, 0x0041 };
    uint32_t const ces[9] = { 0x4DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_463)
{
    // 121C7 0062;	
    // (𒇇) CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD	[4DB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C7, 0x0062 };
    uint32_t const ces[9] = { 0x4DB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_464)
{
    // 121C8 0021;	
    // (𒇈) CUNEIFORM SIGN LAGAB TIMES HA	[4DB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C8, 0x0021 };
    uint32_t const ces[9] = { 0x4DB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_465)
{
    // 121C8 003F;	
    // (𒇈) CUNEIFORM SIGN LAGAB TIMES HA	[4DB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C8, 0x003F };
    uint32_t const ces[9] = { 0x4DB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_466)
{
    // 121C8 0061;	
    // (𒇈) CUNEIFORM SIGN LAGAB TIMES HA	[4DB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C8, 0x0061 };
    uint32_t const ces[9] = { 0x4DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_467)
{
    // 121C8 0041;	
    // (𒇈) CUNEIFORM SIGN LAGAB TIMES HA	[4DB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C8, 0x0041 };
    uint32_t const ces[9] = { 0x4DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_468)
{
    // 121C8 0062;	
    // (𒇈) CUNEIFORM SIGN LAGAB TIMES HA	[4DB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C8, 0x0062 };
    uint32_t const ces[9] = { 0x4DB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_469)
{
    // 121C9 0021;	
    // (𒇉) CUNEIFORM SIGN LAGAB TIMES HAL	[4DB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C9, 0x0021 };
    uint32_t const ces[9] = { 0x4DB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_470)
{
    // 121C9 003F;	
    // (𒇉) CUNEIFORM SIGN LAGAB TIMES HAL	[4DB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C9, 0x003F };
    uint32_t const ces[9] = { 0x4DB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_471)
{
    // 121C9 0061;	
    // (𒇉) CUNEIFORM SIGN LAGAB TIMES HAL	[4DB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C9, 0x0061 };
    uint32_t const ces[9] = { 0x4DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_472)
{
    // 121C9 0041;	
    // (𒇉) CUNEIFORM SIGN LAGAB TIMES HAL	[4DB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121C9, 0x0041 };
    uint32_t const ces[9] = { 0x4DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_473)
{
    // 121C9 0062;	
    // (𒇉) CUNEIFORM SIGN LAGAB TIMES HAL	[4DB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121C9, 0x0062 };
    uint32_t const ces[9] = { 0x4DB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_474)
{
    // 121CA 0021;	
    // (𒇊) CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN	[4DB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CA, 0x0021 };
    uint32_t const ces[9] = { 0x4DB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_475)
{
    // 121CA 003F;	
    // (𒇊) CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN	[4DB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CA, 0x003F };
    uint32_t const ces[9] = { 0x4DB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_476)
{
    // 121CA 0061;	
    // (𒇊) CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN	[4DB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CA, 0x0061 };
    uint32_t const ces[9] = { 0x4DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_477)
{
    // 121CA 0041;	
    // (𒇊) CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN	[4DB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121CA, 0x0041 };
    uint32_t const ces[9] = { 0x4DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_478)
{
    // 121CA 0062;	
    // (𒇊) CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN	[4DB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CA, 0x0062 };
    uint32_t const ces[9] = { 0x4DB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_479)
{
    // 121CB 0021;	
    // (𒇋) CUNEIFORM SIGN LAGAB TIMES IGI GUNU	[4DB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CB, 0x0021 };
    uint32_t const ces[9] = { 0x4DB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_480)
{
    // 121CB 003F;	
    // (𒇋) CUNEIFORM SIGN LAGAB TIMES IGI GUNU	[4DB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CB, 0x003F };
    uint32_t const ces[9] = { 0x4DB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_481)
{
    // 121CB 0061;	
    // (𒇋) CUNEIFORM SIGN LAGAB TIMES IGI GUNU	[4DB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CB, 0x0061 };
    uint32_t const ces[9] = { 0x4DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_482)
{
    // 121CB 0041;	
    // (𒇋) CUNEIFORM SIGN LAGAB TIMES IGI GUNU	[4DB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121CB, 0x0041 };
    uint32_t const ces[9] = { 0x4DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_483)
{
    // 121CB 0062;	
    // (𒇋) CUNEIFORM SIGN LAGAB TIMES IGI GUNU	[4DB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CB, 0x0062 };
    uint32_t const ces[9] = { 0x4DB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_484)
{
    // 121CC 0021;	
    // (𒇌) CUNEIFORM SIGN LAGAB TIMES IM	[4DB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CC, 0x0021 };
    uint32_t const ces[9] = { 0x4DB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_485)
{
    // 121CC 003F;	
    // (𒇌) CUNEIFORM SIGN LAGAB TIMES IM	[4DB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CC, 0x003F };
    uint32_t const ces[9] = { 0x4DB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_486)
{
    // 121CC 0061;	
    // (𒇌) CUNEIFORM SIGN LAGAB TIMES IM	[4DB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CC, 0x0061 };
    uint32_t const ces[9] = { 0x4DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_487)
{
    // 121CC 0041;	
    // (𒇌) CUNEIFORM SIGN LAGAB TIMES IM	[4DB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121CC, 0x0041 };
    uint32_t const ces[9] = { 0x4DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_488)
{
    // 121CC 0062;	
    // (𒇌) CUNEIFORM SIGN LAGAB TIMES IM	[4DB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CC, 0x0062 };
    uint32_t const ces[9] = { 0x4DB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_489)
{
    // 121CD 0021;	
    // (𒇍) CUNEIFORM SIGN LAGAB TIMES IM PLUS HA	[4DB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CD, 0x0021 };
    uint32_t const ces[9] = { 0x4DB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_490)
{
    // 121CD 003F;	
    // (𒇍) CUNEIFORM SIGN LAGAB TIMES IM PLUS HA	[4DB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CD, 0x003F };
    uint32_t const ces[9] = { 0x4DB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_491)
{
    // 121CD 0061;	
    // (𒇍) CUNEIFORM SIGN LAGAB TIMES IM PLUS HA	[4DB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CD, 0x0061 };
    uint32_t const ces[9] = { 0x4DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_492)
{
    // 121CD 0041;	
    // (𒇍) CUNEIFORM SIGN LAGAB TIMES IM PLUS HA	[4DB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121CD, 0x0041 };
    uint32_t const ces[9] = { 0x4DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_493)
{
    // 121CD 0062;	
    // (𒇍) CUNEIFORM SIGN LAGAB TIMES IM PLUS HA	[4DB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CD, 0x0062 };
    uint32_t const ces[9] = { 0x4DB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_494)
{
    // 121CE 0021;	
    // (𒇎) CUNEIFORM SIGN LAGAB TIMES IM PLUS LU	[4DBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CE, 0x0021 };
    uint32_t const ces[9] = { 0x4DBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_495)
{
    // 121CE 003F;	
    // (𒇎) CUNEIFORM SIGN LAGAB TIMES IM PLUS LU	[4DBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CE, 0x003F };
    uint32_t const ces[9] = { 0x4DBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_496)
{
    // 121CE 0061;	
    // (𒇎) CUNEIFORM SIGN LAGAB TIMES IM PLUS LU	[4DBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CE, 0x0061 };
    uint32_t const ces[9] = { 0x4DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_497)
{
    // 121CE 0041;	
    // (𒇎) CUNEIFORM SIGN LAGAB TIMES IM PLUS LU	[4DBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x121CE, 0x0041 };
    uint32_t const ces[9] = { 0x4DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_498)
{
    // 121CE 0062;	
    // (𒇎) CUNEIFORM SIGN LAGAB TIMES IM PLUS LU	[4DBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CE, 0x0062 };
    uint32_t const ces[9] = { 0x4DBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_289_499)
{
    // 121CF 0021;	
    // (𒇏) CUNEIFORM SIGN LAGAB TIMES KI	[4DBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x121CF, 0x0021 };
    uint32_t const ces[9] = { 0x4DBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

