// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_347_000)
{
    // 3BD4 003F;	
    // (㯔) CJK UNIFIED IDEOGRAPH-3BD4	[FB80 BBD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_001)
{
    // 3BD4 0061;	
    // (㯔) CJK UNIFIED IDEOGRAPH-3BD4	[FB80 BBD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_002)
{
    // 3BD4 0041;	
    // (㯔) CJK UNIFIED IDEOGRAPH-3BD4	[FB80 BBD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_003)
{
    // 3BD4 0062;	
    // (㯔) CJK UNIFIED IDEOGRAPH-3BD4	[FB80 BBD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_004)
{
    // 3BD5 0021;	
    // (㯕) CJK UNIFIED IDEOGRAPH-3BD5	[FB80 BBD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_005)
{
    // 3BD5 003F;	
    // (㯕) CJK UNIFIED IDEOGRAPH-3BD5	[FB80 BBD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_006)
{
    // 3BD5 0061;	
    // (㯕) CJK UNIFIED IDEOGRAPH-3BD5	[FB80 BBD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_007)
{
    // 3BD5 0041;	
    // (㯕) CJK UNIFIED IDEOGRAPH-3BD5	[FB80 BBD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_008)
{
    // 3BD5 0062;	
    // (㯕) CJK UNIFIED IDEOGRAPH-3BD5	[FB80 BBD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_009)
{
    // 3BD6 0021;	
    // (㯖) CJK UNIFIED IDEOGRAPH-3BD6	[FB80 BBD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_010)
{
    // 3BD6 003F;	
    // (㯖) CJK UNIFIED IDEOGRAPH-3BD6	[FB80 BBD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_011)
{
    // 3BD6 0061;	
    // (㯖) CJK UNIFIED IDEOGRAPH-3BD6	[FB80 BBD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_012)
{
    // 3BD6 0041;	
    // (㯖) CJK UNIFIED IDEOGRAPH-3BD6	[FB80 BBD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_013)
{
    // 3BD6 0062;	
    // (㯖) CJK UNIFIED IDEOGRAPH-3BD6	[FB80 BBD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_014)
{
    // 3BD7 0021;	
    // (㯗) CJK UNIFIED IDEOGRAPH-3BD7	[FB80 BBD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_015)
{
    // 3BD7 003F;	
    // (㯗) CJK UNIFIED IDEOGRAPH-3BD7	[FB80 BBD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_016)
{
    // 3BD7 0061;	
    // (㯗) CJK UNIFIED IDEOGRAPH-3BD7	[FB80 BBD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_017)
{
    // 3BD7 0041;	
    // (㯗) CJK UNIFIED IDEOGRAPH-3BD7	[FB80 BBD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_018)
{
    // 3BD7 0062;	
    // (㯗) CJK UNIFIED IDEOGRAPH-3BD7	[FB80 BBD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_019)
{
    // 3BD8 0021;	
    // (㯘) CJK UNIFIED IDEOGRAPH-3BD8	[FB80 BBD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_020)
{
    // 3BD8 003F;	
    // (㯘) CJK UNIFIED IDEOGRAPH-3BD8	[FB80 BBD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_021)
{
    // 3BD8 0061;	
    // (㯘) CJK UNIFIED IDEOGRAPH-3BD8	[FB80 BBD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_022)
{
    // 3BD8 0041;	
    // (㯘) CJK UNIFIED IDEOGRAPH-3BD8	[FB80 BBD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_023)
{
    // 3BD8 0062;	
    // (㯘) CJK UNIFIED IDEOGRAPH-3BD8	[FB80 BBD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_024)
{
    // 3BD9 0021;	
    // (㯙) CJK UNIFIED IDEOGRAPH-3BD9	[FB80 BBD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_025)
{
    // 3BD9 003F;	
    // (㯙) CJK UNIFIED IDEOGRAPH-3BD9	[FB80 BBD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_026)
{
    // 3BD9 0061;	
    // (㯙) CJK UNIFIED IDEOGRAPH-3BD9	[FB80 BBD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_027)
{
    // 3BD9 0041;	
    // (㯙) CJK UNIFIED IDEOGRAPH-3BD9	[FB80 BBD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_028)
{
    // 3BD9 0062;	
    // (㯙) CJK UNIFIED IDEOGRAPH-3BD9	[FB80 BBD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_029)
{
    // 3BDA 0021;	
    // (㯚) CJK UNIFIED IDEOGRAPH-3BDA	[FB80 BBDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_030)
{
    // 3BDA 003F;	
    // (㯚) CJK UNIFIED IDEOGRAPH-3BDA	[FB80 BBDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_031)
{
    // 3BDA 0061;	
    // (㯚) CJK UNIFIED IDEOGRAPH-3BDA	[FB80 BBDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_032)
{
    // 3BDA 0041;	
    // (㯚) CJK UNIFIED IDEOGRAPH-3BDA	[FB80 BBDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_033)
{
    // 3BDA 0062;	
    // (㯚) CJK UNIFIED IDEOGRAPH-3BDA	[FB80 BBDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_034)
{
    // 3BDB 0021;	
    // (㯛) CJK UNIFIED IDEOGRAPH-3BDB	[FB80 BBDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_035)
{
    // 3BDB 003F;	
    // (㯛) CJK UNIFIED IDEOGRAPH-3BDB	[FB80 BBDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_036)
{
    // 3BDB 0061;	
    // (㯛) CJK UNIFIED IDEOGRAPH-3BDB	[FB80 BBDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_037)
{
    // 3BDB 0041;	
    // (㯛) CJK UNIFIED IDEOGRAPH-3BDB	[FB80 BBDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_038)
{
    // 3BDB 0062;	
    // (㯛) CJK UNIFIED IDEOGRAPH-3BDB	[FB80 BBDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_039)
{
    // 3BDC 0021;	
    // (㯜) CJK UNIFIED IDEOGRAPH-3BDC	[FB80 BBDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_040)
{
    // 3BDC 003F;	
    // (㯜) CJK UNIFIED IDEOGRAPH-3BDC	[FB80 BBDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_041)
{
    // 3BDC 0061;	
    // (㯜) CJK UNIFIED IDEOGRAPH-3BDC	[FB80 BBDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_042)
{
    // 3BDC 0041;	
    // (㯜) CJK UNIFIED IDEOGRAPH-3BDC	[FB80 BBDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_043)
{
    // 3BDC 0062;	
    // (㯜) CJK UNIFIED IDEOGRAPH-3BDC	[FB80 BBDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_044)
{
    // 3BDD 0021;	
    // (㯝) CJK UNIFIED IDEOGRAPH-3BDD	[FB80 BBDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_045)
{
    // 3BDD 003F;	
    // (㯝) CJK UNIFIED IDEOGRAPH-3BDD	[FB80 BBDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_046)
{
    // 3BDD 0061;	
    // (㯝) CJK UNIFIED IDEOGRAPH-3BDD	[FB80 BBDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_047)
{
    // 3BDD 0041;	
    // (㯝) CJK UNIFIED IDEOGRAPH-3BDD	[FB80 BBDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_048)
{
    // 3BDD 0062;	
    // (㯝) CJK UNIFIED IDEOGRAPH-3BDD	[FB80 BBDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_049)
{
    // 3BDE 0021;	
    // (㯞) CJK UNIFIED IDEOGRAPH-3BDE	[FB80 BBDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_050)
{
    // 3BDE 003F;	
    // (㯞) CJK UNIFIED IDEOGRAPH-3BDE	[FB80 BBDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_051)
{
    // 3BDE 0061;	
    // (㯞) CJK UNIFIED IDEOGRAPH-3BDE	[FB80 BBDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_052)
{
    // 3BDE 0041;	
    // (㯞) CJK UNIFIED IDEOGRAPH-3BDE	[FB80 BBDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_053)
{
    // 3BDE 0062;	
    // (㯞) CJK UNIFIED IDEOGRAPH-3BDE	[FB80 BBDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_054)
{
    // 3BDF 0021;	
    // (㯟) CJK UNIFIED IDEOGRAPH-3BDF	[FB80 BBDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_055)
{
    // 3BDF 003F;	
    // (㯟) CJK UNIFIED IDEOGRAPH-3BDF	[FB80 BBDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_056)
{
    // 3BDF 0061;	
    // (㯟) CJK UNIFIED IDEOGRAPH-3BDF	[FB80 BBDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_057)
{
    // 3BDF 0041;	
    // (㯟) CJK UNIFIED IDEOGRAPH-3BDF	[FB80 BBDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_058)
{
    // 3BDF 0062;	
    // (㯟) CJK UNIFIED IDEOGRAPH-3BDF	[FB80 BBDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_059)
{
    // 3BE0 0021;	
    // (㯠) CJK UNIFIED IDEOGRAPH-3BE0	[FB80 BBE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_060)
{
    // 3BE0 003F;	
    // (㯠) CJK UNIFIED IDEOGRAPH-3BE0	[FB80 BBE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_061)
{
    // 3BE0 0061;	
    // (㯠) CJK UNIFIED IDEOGRAPH-3BE0	[FB80 BBE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_062)
{
    // 3BE0 0041;	
    // (㯠) CJK UNIFIED IDEOGRAPH-3BE0	[FB80 BBE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_063)
{
    // 3BE0 0062;	
    // (㯠) CJK UNIFIED IDEOGRAPH-3BE0	[FB80 BBE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_064)
{
    // 3BE1 0021;	
    // (㯡) CJK UNIFIED IDEOGRAPH-3BE1	[FB80 BBE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_065)
{
    // 3BE1 003F;	
    // (㯡) CJK UNIFIED IDEOGRAPH-3BE1	[FB80 BBE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_066)
{
    // 3BE1 0061;	
    // (㯡) CJK UNIFIED IDEOGRAPH-3BE1	[FB80 BBE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_067)
{
    // 3BE1 0041;	
    // (㯡) CJK UNIFIED IDEOGRAPH-3BE1	[FB80 BBE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_068)
{
    // 3BE1 0062;	
    // (㯡) CJK UNIFIED IDEOGRAPH-3BE1	[FB80 BBE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_069)
{
    // 3BE2 0021;	
    // (㯢) CJK UNIFIED IDEOGRAPH-3BE2	[FB80 BBE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_070)
{
    // 3BE2 003F;	
    // (㯢) CJK UNIFIED IDEOGRAPH-3BE2	[FB80 BBE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_071)
{
    // 3BE2 0061;	
    // (㯢) CJK UNIFIED IDEOGRAPH-3BE2	[FB80 BBE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_072)
{
    // 3BE2 0041;	
    // (㯢) CJK UNIFIED IDEOGRAPH-3BE2	[FB80 BBE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_073)
{
    // 3BE2 0062;	
    // (㯢) CJK UNIFIED IDEOGRAPH-3BE2	[FB80 BBE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_074)
{
    // 3BE3 0021;	
    // (㯣) CJK UNIFIED IDEOGRAPH-3BE3	[FB80 BBE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_075)
{
    // 3BE3 003F;	
    // (㯣) CJK UNIFIED IDEOGRAPH-3BE3	[FB80 BBE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_076)
{
    // 3BE3 0061;	
    // (㯣) CJK UNIFIED IDEOGRAPH-3BE3	[FB80 BBE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_077)
{
    // 3BE3 0041;	
    // (㯣) CJK UNIFIED IDEOGRAPH-3BE3	[FB80 BBE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_078)
{
    // 3BE3 0062;	
    // (㯣) CJK UNIFIED IDEOGRAPH-3BE3	[FB80 BBE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_079)
{
    // 3BE4 0021;	
    // (㯤) CJK UNIFIED IDEOGRAPH-3BE4	[FB80 BBE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_080)
{
    // 3BE4 003F;	
    // (㯤) CJK UNIFIED IDEOGRAPH-3BE4	[FB80 BBE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_081)
{
    // 3BE4 0061;	
    // (㯤) CJK UNIFIED IDEOGRAPH-3BE4	[FB80 BBE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_082)
{
    // 3BE4 0041;	
    // (㯤) CJK UNIFIED IDEOGRAPH-3BE4	[FB80 BBE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_083)
{
    // 3BE4 0062;	
    // (㯤) CJK UNIFIED IDEOGRAPH-3BE4	[FB80 BBE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_084)
{
    // 3BE5 0021;	
    // (㯥) CJK UNIFIED IDEOGRAPH-3BE5	[FB80 BBE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_085)
{
    // 3BE5 003F;	
    // (㯥) CJK UNIFIED IDEOGRAPH-3BE5	[FB80 BBE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_086)
{
    // 3BE5 0061;	
    // (㯥) CJK UNIFIED IDEOGRAPH-3BE5	[FB80 BBE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_087)
{
    // 3BE5 0041;	
    // (㯥) CJK UNIFIED IDEOGRAPH-3BE5	[FB80 BBE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_088)
{
    // 3BE5 0062;	
    // (㯥) CJK UNIFIED IDEOGRAPH-3BE5	[FB80 BBE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_089)
{
    // 3BE6 0021;	
    // (㯦) CJK UNIFIED IDEOGRAPH-3BE6	[FB80 BBE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_090)
{
    // 3BE6 003F;	
    // (㯦) CJK UNIFIED IDEOGRAPH-3BE6	[FB80 BBE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_091)
{
    // 3BE6 0061;	
    // (㯦) CJK UNIFIED IDEOGRAPH-3BE6	[FB80 BBE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_092)
{
    // 3BE6 0041;	
    // (㯦) CJK UNIFIED IDEOGRAPH-3BE6	[FB80 BBE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_093)
{
    // 3BE6 0062;	
    // (㯦) CJK UNIFIED IDEOGRAPH-3BE6	[FB80 BBE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_094)
{
    // 3BE7 0021;	
    // (㯧) CJK UNIFIED IDEOGRAPH-3BE7	[FB80 BBE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_095)
{
    // 3BE7 003F;	
    // (㯧) CJK UNIFIED IDEOGRAPH-3BE7	[FB80 BBE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_096)
{
    // 3BE7 0061;	
    // (㯧) CJK UNIFIED IDEOGRAPH-3BE7	[FB80 BBE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_097)
{
    // 3BE7 0041;	
    // (㯧) CJK UNIFIED IDEOGRAPH-3BE7	[FB80 BBE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_098)
{
    // 3BE7 0062;	
    // (㯧) CJK UNIFIED IDEOGRAPH-3BE7	[FB80 BBE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_099)
{
    // 3BE8 0021;	
    // (㯨) CJK UNIFIED IDEOGRAPH-3BE8	[FB80 BBE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_100)
{
    // 3BE8 003F;	
    // (㯨) CJK UNIFIED IDEOGRAPH-3BE8	[FB80 BBE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_101)
{
    // 3BE8 0061;	
    // (㯨) CJK UNIFIED IDEOGRAPH-3BE8	[FB80 BBE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_102)
{
    // 3BE8 0041;	
    // (㯨) CJK UNIFIED IDEOGRAPH-3BE8	[FB80 BBE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_103)
{
    // 3BE8 0062;	
    // (㯨) CJK UNIFIED IDEOGRAPH-3BE8	[FB80 BBE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_104)
{
    // 3BE9 0021;	
    // (㯩) CJK UNIFIED IDEOGRAPH-3BE9	[FB80 BBE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_105)
{
    // 3BE9 003F;	
    // (㯩) CJK UNIFIED IDEOGRAPH-3BE9	[FB80 BBE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_106)
{
    // 3BE9 0061;	
    // (㯩) CJK UNIFIED IDEOGRAPH-3BE9	[FB80 BBE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_107)
{
    // 3BE9 0041;	
    // (㯩) CJK UNIFIED IDEOGRAPH-3BE9	[FB80 BBE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_108)
{
    // 3BE9 0062;	
    // (㯩) CJK UNIFIED IDEOGRAPH-3BE9	[FB80 BBE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_109)
{
    // 3BEA 0021;	
    // (㯪) CJK UNIFIED IDEOGRAPH-3BEA	[FB80 BBEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_110)
{
    // 3BEA 003F;	
    // (㯪) CJK UNIFIED IDEOGRAPH-3BEA	[FB80 BBEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_111)
{
    // 3BEA 0061;	
    // (㯪) CJK UNIFIED IDEOGRAPH-3BEA	[FB80 BBEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_112)
{
    // 3BEA 0041;	
    // (㯪) CJK UNIFIED IDEOGRAPH-3BEA	[FB80 BBEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_113)
{
    // 3BEA 0062;	
    // (㯪) CJK UNIFIED IDEOGRAPH-3BEA	[FB80 BBEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_114)
{
    // 3BEB 0021;	
    // (㯫) CJK UNIFIED IDEOGRAPH-3BEB	[FB80 BBEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_115)
{
    // 3BEB 003F;	
    // (㯫) CJK UNIFIED IDEOGRAPH-3BEB	[FB80 BBEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_116)
{
    // 3BEB 0061;	
    // (㯫) CJK UNIFIED IDEOGRAPH-3BEB	[FB80 BBEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_117)
{
    // 3BEB 0041;	
    // (㯫) CJK UNIFIED IDEOGRAPH-3BEB	[FB80 BBEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_118)
{
    // 3BEB 0062;	
    // (㯫) CJK UNIFIED IDEOGRAPH-3BEB	[FB80 BBEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_119)
{
    // 3BEC 0021;	
    // (㯬) CJK UNIFIED IDEOGRAPH-3BEC	[FB80 BBEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_120)
{
    // 3BEC 003F;	
    // (㯬) CJK UNIFIED IDEOGRAPH-3BEC	[FB80 BBEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_121)
{
    // 3BEC 0061;	
    // (㯬) CJK UNIFIED IDEOGRAPH-3BEC	[FB80 BBEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_122)
{
    // 3BEC 0041;	
    // (㯬) CJK UNIFIED IDEOGRAPH-3BEC	[FB80 BBEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_123)
{
    // 3BEC 0062;	
    // (㯬) CJK UNIFIED IDEOGRAPH-3BEC	[FB80 BBEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_124)
{
    // 3BED 0021;	
    // (㯭) CJK UNIFIED IDEOGRAPH-3BED	[FB80 BBED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_125)
{
    // 3BED 003F;	
    // (㯭) CJK UNIFIED IDEOGRAPH-3BED	[FB80 BBED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_126)
{
    // 3BED 0061;	
    // (㯭) CJK UNIFIED IDEOGRAPH-3BED	[FB80 BBED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_127)
{
    // 3BED 0041;	
    // (㯭) CJK UNIFIED IDEOGRAPH-3BED	[FB80 BBED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_128)
{
    // 3BED 0062;	
    // (㯭) CJK UNIFIED IDEOGRAPH-3BED	[FB80 BBED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_129)
{
    // 3BEE 0021;	
    // (㯮) CJK UNIFIED IDEOGRAPH-3BEE	[FB80 BBEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_130)
{
    // 3BEE 003F;	
    // (㯮) CJK UNIFIED IDEOGRAPH-3BEE	[FB80 BBEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_131)
{
    // 3BEE 0061;	
    // (㯮) CJK UNIFIED IDEOGRAPH-3BEE	[FB80 BBEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_132)
{
    // 3BEE 0041;	
    // (㯮) CJK UNIFIED IDEOGRAPH-3BEE	[FB80 BBEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_133)
{
    // 3BEE 0062;	
    // (㯮) CJK UNIFIED IDEOGRAPH-3BEE	[FB80 BBEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_134)
{
    // 3BEF 0021;	
    // (㯯) CJK UNIFIED IDEOGRAPH-3BEF	[FB80 BBEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_135)
{
    // 3BEF 003F;	
    // (㯯) CJK UNIFIED IDEOGRAPH-3BEF	[FB80 BBEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_136)
{
    // 3BEF 0061;	
    // (㯯) CJK UNIFIED IDEOGRAPH-3BEF	[FB80 BBEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_137)
{
    // 3BEF 0041;	
    // (㯯) CJK UNIFIED IDEOGRAPH-3BEF	[FB80 BBEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_138)
{
    // 3BEF 0062;	
    // (㯯) CJK UNIFIED IDEOGRAPH-3BEF	[FB80 BBEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_139)
{
    // 3BF0 0021;	
    // (㯰) CJK UNIFIED IDEOGRAPH-3BF0	[FB80 BBF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_140)
{
    // 3BF0 003F;	
    // (㯰) CJK UNIFIED IDEOGRAPH-3BF0	[FB80 BBF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_141)
{
    // 3BF0 0061;	
    // (㯰) CJK UNIFIED IDEOGRAPH-3BF0	[FB80 BBF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_142)
{
    // 3BF0 0041;	
    // (㯰) CJK UNIFIED IDEOGRAPH-3BF0	[FB80 BBF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_143)
{
    // 3BF0 0062;	
    // (㯰) CJK UNIFIED IDEOGRAPH-3BF0	[FB80 BBF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_144)
{
    // 3BF1 0021;	
    // (㯱) CJK UNIFIED IDEOGRAPH-3BF1	[FB80 BBF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_145)
{
    // 3BF1 003F;	
    // (㯱) CJK UNIFIED IDEOGRAPH-3BF1	[FB80 BBF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_146)
{
    // 3BF1 0061;	
    // (㯱) CJK UNIFIED IDEOGRAPH-3BF1	[FB80 BBF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_147)
{
    // 3BF1 0041;	
    // (㯱) CJK UNIFIED IDEOGRAPH-3BF1	[FB80 BBF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_148)
{
    // 3BF1 0062;	
    // (㯱) CJK UNIFIED IDEOGRAPH-3BF1	[FB80 BBF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_149)
{
    // 3BF2 0021;	
    // (㯲) CJK UNIFIED IDEOGRAPH-3BF2	[FB80 BBF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_150)
{
    // 3BF2 003F;	
    // (㯲) CJK UNIFIED IDEOGRAPH-3BF2	[FB80 BBF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_151)
{
    // 3BF2 0061;	
    // (㯲) CJK UNIFIED IDEOGRAPH-3BF2	[FB80 BBF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_152)
{
    // 3BF2 0041;	
    // (㯲) CJK UNIFIED IDEOGRAPH-3BF2	[FB80 BBF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_153)
{
    // 3BF2 0062;	
    // (㯲) CJK UNIFIED IDEOGRAPH-3BF2	[FB80 BBF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_154)
{
    // 3BF3 0021;	
    // (㯳) CJK UNIFIED IDEOGRAPH-3BF3	[FB80 BBF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_155)
{
    // 3BF3 003F;	
    // (㯳) CJK UNIFIED IDEOGRAPH-3BF3	[FB80 BBF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_156)
{
    // 3BF3 0061;	
    // (㯳) CJK UNIFIED IDEOGRAPH-3BF3	[FB80 BBF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_157)
{
    // 3BF3 0041;	
    // (㯳) CJK UNIFIED IDEOGRAPH-3BF3	[FB80 BBF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_158)
{
    // 3BF3 0062;	
    // (㯳) CJK UNIFIED IDEOGRAPH-3BF3	[FB80 BBF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_159)
{
    // 3BF4 0021;	
    // (㯴) CJK UNIFIED IDEOGRAPH-3BF4	[FB80 BBF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_160)
{
    // 3BF4 003F;	
    // (㯴) CJK UNIFIED IDEOGRAPH-3BF4	[FB80 BBF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_161)
{
    // 3BF4 0061;	
    // (㯴) CJK UNIFIED IDEOGRAPH-3BF4	[FB80 BBF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_162)
{
    // 3BF4 0041;	
    // (㯴) CJK UNIFIED IDEOGRAPH-3BF4	[FB80 BBF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_163)
{
    // 3BF4 0062;	
    // (㯴) CJK UNIFIED IDEOGRAPH-3BF4	[FB80 BBF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_164)
{
    // 3BF5 0021;	
    // (㯵) CJK UNIFIED IDEOGRAPH-3BF5	[FB80 BBF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_165)
{
    // 3BF5 003F;	
    // (㯵) CJK UNIFIED IDEOGRAPH-3BF5	[FB80 BBF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_166)
{
    // 3BF5 0061;	
    // (㯵) CJK UNIFIED IDEOGRAPH-3BF5	[FB80 BBF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_167)
{
    // 3BF5 0041;	
    // (㯵) CJK UNIFIED IDEOGRAPH-3BF5	[FB80 BBF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_168)
{
    // 3BF5 0062;	
    // (㯵) CJK UNIFIED IDEOGRAPH-3BF5	[FB80 BBF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_169)
{
    // 3BF6 0021;	
    // (㯶) CJK UNIFIED IDEOGRAPH-3BF6	[FB80 BBF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_170)
{
    // 3BF6 003F;	
    // (㯶) CJK UNIFIED IDEOGRAPH-3BF6	[FB80 BBF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_171)
{
    // 3BF6 0061;	
    // (㯶) CJK UNIFIED IDEOGRAPH-3BF6	[FB80 BBF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_172)
{
    // 3BF6 0041;	
    // (㯶) CJK UNIFIED IDEOGRAPH-3BF6	[FB80 BBF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_173)
{
    // 3BF6 0062;	
    // (㯶) CJK UNIFIED IDEOGRAPH-3BF6	[FB80 BBF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_174)
{
    // 3BF7 0021;	
    // (㯷) CJK UNIFIED IDEOGRAPH-3BF7	[FB80 BBF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_175)
{
    // 3BF7 003F;	
    // (㯷) CJK UNIFIED IDEOGRAPH-3BF7	[FB80 BBF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_176)
{
    // 3BF7 0061;	
    // (㯷) CJK UNIFIED IDEOGRAPH-3BF7	[FB80 BBF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_177)
{
    // 3BF7 0041;	
    // (㯷) CJK UNIFIED IDEOGRAPH-3BF7	[FB80 BBF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_178)
{
    // 3BF7 0062;	
    // (㯷) CJK UNIFIED IDEOGRAPH-3BF7	[FB80 BBF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_179)
{
    // 3BF8 0021;	
    // (㯸) CJK UNIFIED IDEOGRAPH-3BF8	[FB80 BBF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_180)
{
    // 3BF8 003F;	
    // (㯸) CJK UNIFIED IDEOGRAPH-3BF8	[FB80 BBF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_181)
{
    // 3BF8 0061;	
    // (㯸) CJK UNIFIED IDEOGRAPH-3BF8	[FB80 BBF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_182)
{
    // 3BF8 0041;	
    // (㯸) CJK UNIFIED IDEOGRAPH-3BF8	[FB80 BBF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_183)
{
    // 3BF8 0062;	
    // (㯸) CJK UNIFIED IDEOGRAPH-3BF8	[FB80 BBF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_184)
{
    // 3BF9 0021;	
    // (㯹) CJK UNIFIED IDEOGRAPH-3BF9	[FB80 BBF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_185)
{
    // 3BF9 003F;	
    // (㯹) CJK UNIFIED IDEOGRAPH-3BF9	[FB80 BBF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_186)
{
    // 3BF9 0061;	
    // (㯹) CJK UNIFIED IDEOGRAPH-3BF9	[FB80 BBF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_187)
{
    // 3BF9 0041;	
    // (㯹) CJK UNIFIED IDEOGRAPH-3BF9	[FB80 BBF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_188)
{
    // 3BF9 0062;	
    // (㯹) CJK UNIFIED IDEOGRAPH-3BF9	[FB80 BBF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_189)
{
    // 3BFA 0021;	
    // (㯺) CJK UNIFIED IDEOGRAPH-3BFA	[FB80 BBFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_190)
{
    // 3BFA 003F;	
    // (㯺) CJK UNIFIED IDEOGRAPH-3BFA	[FB80 BBFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_191)
{
    // 3BFA 0061;	
    // (㯺) CJK UNIFIED IDEOGRAPH-3BFA	[FB80 BBFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_192)
{
    // 3BFA 0041;	
    // (㯺) CJK UNIFIED IDEOGRAPH-3BFA	[FB80 BBFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_193)
{
    // 3BFA 0062;	
    // (㯺) CJK UNIFIED IDEOGRAPH-3BFA	[FB80 BBFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_194)
{
    // 3BFB 0021;	
    // (㯻) CJK UNIFIED IDEOGRAPH-3BFB	[FB80 BBFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_195)
{
    // 3BFB 003F;	
    // (㯻) CJK UNIFIED IDEOGRAPH-3BFB	[FB80 BBFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_196)
{
    // 3BFB 0061;	
    // (㯻) CJK UNIFIED IDEOGRAPH-3BFB	[FB80 BBFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_197)
{
    // 3BFB 0041;	
    // (㯻) CJK UNIFIED IDEOGRAPH-3BFB	[FB80 BBFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_198)
{
    // 3BFB 0062;	
    // (㯻) CJK UNIFIED IDEOGRAPH-3BFB	[FB80 BBFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_199)
{
    // 3BFC 0021;	
    // (㯼) CJK UNIFIED IDEOGRAPH-3BFC	[FB80 BBFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_200)
{
    // 3BFC 003F;	
    // (㯼) CJK UNIFIED IDEOGRAPH-3BFC	[FB80 BBFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_201)
{
    // 3BFC 0061;	
    // (㯼) CJK UNIFIED IDEOGRAPH-3BFC	[FB80 BBFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_202)
{
    // 3BFC 0041;	
    // (㯼) CJK UNIFIED IDEOGRAPH-3BFC	[FB80 BBFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_203)
{
    // 3BFC 0062;	
    // (㯼) CJK UNIFIED IDEOGRAPH-3BFC	[FB80 BBFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_204)
{
    // 3BFD 0021;	
    // (㯽) CJK UNIFIED IDEOGRAPH-3BFD	[FB80 BBFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_205)
{
    // 3BFD 003F;	
    // (㯽) CJK UNIFIED IDEOGRAPH-3BFD	[FB80 BBFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_206)
{
    // 3BFD 0061;	
    // (㯽) CJK UNIFIED IDEOGRAPH-3BFD	[FB80 BBFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_207)
{
    // 3BFD 0041;	
    // (㯽) CJK UNIFIED IDEOGRAPH-3BFD	[FB80 BBFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_208)
{
    // 3BFD 0062;	
    // (㯽) CJK UNIFIED IDEOGRAPH-3BFD	[FB80 BBFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_209)
{
    // 3BFE 0021;	
    // (㯾) CJK UNIFIED IDEOGRAPH-3BFE	[FB80 BBFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_210)
{
    // 3BFE 003F;	
    // (㯾) CJK UNIFIED IDEOGRAPH-3BFE	[FB80 BBFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_211)
{
    // 3BFE 0061;	
    // (㯾) CJK UNIFIED IDEOGRAPH-3BFE	[FB80 BBFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_212)
{
    // 3BFE 0041;	
    // (㯾) CJK UNIFIED IDEOGRAPH-3BFE	[FB80 BBFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_213)
{
    // 3BFE 0062;	
    // (㯾) CJK UNIFIED IDEOGRAPH-3BFE	[FB80 BBFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_214)
{
    // 3BFF 0021;	
    // (㯿) CJK UNIFIED IDEOGRAPH-3BFF	[FB80 BBFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_215)
{
    // 3BFF 003F;	
    // (㯿) CJK UNIFIED IDEOGRAPH-3BFF	[FB80 BBFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBBFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_216)
{
    // 3BFF 0061;	
    // (㯿) CJK UNIFIED IDEOGRAPH-3BFF	[FB80 BBFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_217)
{
    // 3BFF 0041;	
    // (㯿) CJK UNIFIED IDEOGRAPH-3BFF	[FB80 BBFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3BFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_218)
{
    // 3BFF 0062;	
    // (㯿) CJK UNIFIED IDEOGRAPH-3BFF	[FB80 BBFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3BFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBBFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_219)
{
    // 3C00 0021;	
    // (㰀) CJK UNIFIED IDEOGRAPH-3C00	[FB80 BC00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_220)
{
    // 3C00 003F;	
    // (㰀) CJK UNIFIED IDEOGRAPH-3C00	[FB80 BC00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_221)
{
    // 3C00 0061;	
    // (㰀) CJK UNIFIED IDEOGRAPH-3C00	[FB80 BC00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_222)
{
    // 3C00 0041;	
    // (㰀) CJK UNIFIED IDEOGRAPH-3C00	[FB80 BC00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_223)
{
    // 3C00 0062;	
    // (㰀) CJK UNIFIED IDEOGRAPH-3C00	[FB80 BC00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_224)
{
    // 3C01 0021;	
    // (㰁) CJK UNIFIED IDEOGRAPH-3C01	[FB80 BC01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_225)
{
    // 3C01 003F;	
    // (㰁) CJK UNIFIED IDEOGRAPH-3C01	[FB80 BC01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_226)
{
    // 3C01 0061;	
    // (㰁) CJK UNIFIED IDEOGRAPH-3C01	[FB80 BC01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_227)
{
    // 3C01 0041;	
    // (㰁) CJK UNIFIED IDEOGRAPH-3C01	[FB80 BC01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_228)
{
    // 3C01 0062;	
    // (㰁) CJK UNIFIED IDEOGRAPH-3C01	[FB80 BC01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_229)
{
    // 3C02 0021;	
    // (㰂) CJK UNIFIED IDEOGRAPH-3C02	[FB80 BC02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_230)
{
    // 3C02 003F;	
    // (㰂) CJK UNIFIED IDEOGRAPH-3C02	[FB80 BC02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_231)
{
    // 3C02 0061;	
    // (㰂) CJK UNIFIED IDEOGRAPH-3C02	[FB80 BC02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_232)
{
    // 3C02 0041;	
    // (㰂) CJK UNIFIED IDEOGRAPH-3C02	[FB80 BC02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_233)
{
    // 3C02 0062;	
    // (㰂) CJK UNIFIED IDEOGRAPH-3C02	[FB80 BC02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_234)
{
    // 3C03 0021;	
    // (㰃) CJK UNIFIED IDEOGRAPH-3C03	[FB80 BC03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_235)
{
    // 3C03 003F;	
    // (㰃) CJK UNIFIED IDEOGRAPH-3C03	[FB80 BC03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_236)
{
    // 3C03 0061;	
    // (㰃) CJK UNIFIED IDEOGRAPH-3C03	[FB80 BC03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_237)
{
    // 3C03 0041;	
    // (㰃) CJK UNIFIED IDEOGRAPH-3C03	[FB80 BC03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_238)
{
    // 3C03 0062;	
    // (㰃) CJK UNIFIED IDEOGRAPH-3C03	[FB80 BC03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_239)
{
    // 3C04 0021;	
    // (㰄) CJK UNIFIED IDEOGRAPH-3C04	[FB80 BC04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_240)
{
    // 3C04 003F;	
    // (㰄) CJK UNIFIED IDEOGRAPH-3C04	[FB80 BC04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_241)
{
    // 3C04 0061;	
    // (㰄) CJK UNIFIED IDEOGRAPH-3C04	[FB80 BC04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_242)
{
    // 3C04 0041;	
    // (㰄) CJK UNIFIED IDEOGRAPH-3C04	[FB80 BC04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_243)
{
    // 3C04 0062;	
    // (㰄) CJK UNIFIED IDEOGRAPH-3C04	[FB80 BC04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_244)
{
    // 3C05 0021;	
    // (㰅) CJK UNIFIED IDEOGRAPH-3C05	[FB80 BC05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_245)
{
    // 3C05 003F;	
    // (㰅) CJK UNIFIED IDEOGRAPH-3C05	[FB80 BC05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_246)
{
    // 3C05 0061;	
    // (㰅) CJK UNIFIED IDEOGRAPH-3C05	[FB80 BC05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_247)
{
    // 3C05 0041;	
    // (㰅) CJK UNIFIED IDEOGRAPH-3C05	[FB80 BC05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_248)
{
    // 3C05 0062;	
    // (㰅) CJK UNIFIED IDEOGRAPH-3C05	[FB80 BC05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_249)
{
    // 3C06 0021;	
    // (㰆) CJK UNIFIED IDEOGRAPH-3C06	[FB80 BC06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_250)
{
    // 3C06 003F;	
    // (㰆) CJK UNIFIED IDEOGRAPH-3C06	[FB80 BC06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_251)
{
    // 3C06 0061;	
    // (㰆) CJK UNIFIED IDEOGRAPH-3C06	[FB80 BC06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_252)
{
    // 3C06 0041;	
    // (㰆) CJK UNIFIED IDEOGRAPH-3C06	[FB80 BC06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_253)
{
    // 3C06 0062;	
    // (㰆) CJK UNIFIED IDEOGRAPH-3C06	[FB80 BC06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_254)
{
    // 3C07 0021;	
    // (㰇) CJK UNIFIED IDEOGRAPH-3C07	[FB80 BC07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_255)
{
    // 3C07 003F;	
    // (㰇) CJK UNIFIED IDEOGRAPH-3C07	[FB80 BC07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_256)
{
    // 3C07 0061;	
    // (㰇) CJK UNIFIED IDEOGRAPH-3C07	[FB80 BC07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_257)
{
    // 3C07 0041;	
    // (㰇) CJK UNIFIED IDEOGRAPH-3C07	[FB80 BC07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_258)
{
    // 3C07 0062;	
    // (㰇) CJK UNIFIED IDEOGRAPH-3C07	[FB80 BC07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_259)
{
    // 3C08 0021;	
    // (㰈) CJK UNIFIED IDEOGRAPH-3C08	[FB80 BC08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_260)
{
    // 3C08 003F;	
    // (㰈) CJK UNIFIED IDEOGRAPH-3C08	[FB80 BC08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_261)
{
    // 3C08 0061;	
    // (㰈) CJK UNIFIED IDEOGRAPH-3C08	[FB80 BC08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_262)
{
    // 3C08 0041;	
    // (㰈) CJK UNIFIED IDEOGRAPH-3C08	[FB80 BC08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_263)
{
    // 3C08 0062;	
    // (㰈) CJK UNIFIED IDEOGRAPH-3C08	[FB80 BC08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_264)
{
    // 3C09 0021;	
    // (㰉) CJK UNIFIED IDEOGRAPH-3C09	[FB80 BC09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_265)
{
    // 3C09 003F;	
    // (㰉) CJK UNIFIED IDEOGRAPH-3C09	[FB80 BC09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_266)
{
    // 3C09 0061;	
    // (㰉) CJK UNIFIED IDEOGRAPH-3C09	[FB80 BC09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_267)
{
    // 3C09 0041;	
    // (㰉) CJK UNIFIED IDEOGRAPH-3C09	[FB80 BC09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_268)
{
    // 3C09 0062;	
    // (㰉) CJK UNIFIED IDEOGRAPH-3C09	[FB80 BC09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_269)
{
    // 3C0A 0021;	
    // (㰊) CJK UNIFIED IDEOGRAPH-3C0A	[FB80 BC0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_270)
{
    // 3C0A 003F;	
    // (㰊) CJK UNIFIED IDEOGRAPH-3C0A	[FB80 BC0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_271)
{
    // 3C0A 0061;	
    // (㰊) CJK UNIFIED IDEOGRAPH-3C0A	[FB80 BC0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_272)
{
    // 3C0A 0041;	
    // (㰊) CJK UNIFIED IDEOGRAPH-3C0A	[FB80 BC0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_273)
{
    // 3C0A 0062;	
    // (㰊) CJK UNIFIED IDEOGRAPH-3C0A	[FB80 BC0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_274)
{
    // 3C0B 0021;	
    // (㰋) CJK UNIFIED IDEOGRAPH-3C0B	[FB80 BC0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_275)
{
    // 3C0B 003F;	
    // (㰋) CJK UNIFIED IDEOGRAPH-3C0B	[FB80 BC0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_276)
{
    // 3C0B 0061;	
    // (㰋) CJK UNIFIED IDEOGRAPH-3C0B	[FB80 BC0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_277)
{
    // 3C0B 0041;	
    // (㰋) CJK UNIFIED IDEOGRAPH-3C0B	[FB80 BC0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_278)
{
    // 3C0B 0062;	
    // (㰋) CJK UNIFIED IDEOGRAPH-3C0B	[FB80 BC0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_279)
{
    // 3C0C 0021;	
    // (㰌) CJK UNIFIED IDEOGRAPH-3C0C	[FB80 BC0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_280)
{
    // 3C0C 003F;	
    // (㰌) CJK UNIFIED IDEOGRAPH-3C0C	[FB80 BC0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_281)
{
    // 3C0C 0061;	
    // (㰌) CJK UNIFIED IDEOGRAPH-3C0C	[FB80 BC0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_282)
{
    // 3C0C 0041;	
    // (㰌) CJK UNIFIED IDEOGRAPH-3C0C	[FB80 BC0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_283)
{
    // 3C0C 0062;	
    // (㰌) CJK UNIFIED IDEOGRAPH-3C0C	[FB80 BC0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_284)
{
    // 3C0D 0021;	
    // (㰍) CJK UNIFIED IDEOGRAPH-3C0D	[FB80 BC0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_285)
{
    // 3C0D 003F;	
    // (㰍) CJK UNIFIED IDEOGRAPH-3C0D	[FB80 BC0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_286)
{
    // 3C0D 0061;	
    // (㰍) CJK UNIFIED IDEOGRAPH-3C0D	[FB80 BC0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_287)
{
    // 3C0D 0041;	
    // (㰍) CJK UNIFIED IDEOGRAPH-3C0D	[FB80 BC0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_288)
{
    // 3C0D 0062;	
    // (㰍) CJK UNIFIED IDEOGRAPH-3C0D	[FB80 BC0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_289)
{
    // 3C0E 0021;	
    // (㰎) CJK UNIFIED IDEOGRAPH-3C0E	[FB80 BC0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_290)
{
    // 3C0E 003F;	
    // (㰎) CJK UNIFIED IDEOGRAPH-3C0E	[FB80 BC0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_291)
{
    // 3C0E 0061;	
    // (㰎) CJK UNIFIED IDEOGRAPH-3C0E	[FB80 BC0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_292)
{
    // 3C0E 0041;	
    // (㰎) CJK UNIFIED IDEOGRAPH-3C0E	[FB80 BC0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_293)
{
    // 3C0E 0062;	
    // (㰎) CJK UNIFIED IDEOGRAPH-3C0E	[FB80 BC0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_294)
{
    // 3C0F 0021;	
    // (㰏) CJK UNIFIED IDEOGRAPH-3C0F	[FB80 BC0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_295)
{
    // 3C0F 003F;	
    // (㰏) CJK UNIFIED IDEOGRAPH-3C0F	[FB80 BC0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_296)
{
    // 3C0F 0061;	
    // (㰏) CJK UNIFIED IDEOGRAPH-3C0F	[FB80 BC0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_297)
{
    // 3C0F 0041;	
    // (㰏) CJK UNIFIED IDEOGRAPH-3C0F	[FB80 BC0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_298)
{
    // 3C0F 0062;	
    // (㰏) CJK UNIFIED IDEOGRAPH-3C0F	[FB80 BC0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_299)
{
    // 3C10 0021;	
    // (㰐) CJK UNIFIED IDEOGRAPH-3C10	[FB80 BC10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_300)
{
    // 3C10 003F;	
    // (㰐) CJK UNIFIED IDEOGRAPH-3C10	[FB80 BC10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_301)
{
    // 3C10 0061;	
    // (㰐) CJK UNIFIED IDEOGRAPH-3C10	[FB80 BC10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_302)
{
    // 3C10 0041;	
    // (㰐) CJK UNIFIED IDEOGRAPH-3C10	[FB80 BC10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_303)
{
    // 3C10 0062;	
    // (㰐) CJK UNIFIED IDEOGRAPH-3C10	[FB80 BC10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_304)
{
    // 3C11 0021;	
    // (㰑) CJK UNIFIED IDEOGRAPH-3C11	[FB80 BC11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_305)
{
    // 3C11 003F;	
    // (㰑) CJK UNIFIED IDEOGRAPH-3C11	[FB80 BC11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_306)
{
    // 3C11 0061;	
    // (㰑) CJK UNIFIED IDEOGRAPH-3C11	[FB80 BC11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_307)
{
    // 3C11 0041;	
    // (㰑) CJK UNIFIED IDEOGRAPH-3C11	[FB80 BC11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_308)
{
    // 3C11 0062;	
    // (㰑) CJK UNIFIED IDEOGRAPH-3C11	[FB80 BC11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_309)
{
    // 3C12 0021;	
    // (㰒) CJK UNIFIED IDEOGRAPH-3C12	[FB80 BC12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_310)
{
    // 3C12 003F;	
    // (㰒) CJK UNIFIED IDEOGRAPH-3C12	[FB80 BC12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_311)
{
    // 3C12 0061;	
    // (㰒) CJK UNIFIED IDEOGRAPH-3C12	[FB80 BC12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_312)
{
    // 3C12 0041;	
    // (㰒) CJK UNIFIED IDEOGRAPH-3C12	[FB80 BC12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_313)
{
    // 3C12 0062;	
    // (㰒) CJK UNIFIED IDEOGRAPH-3C12	[FB80 BC12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_314)
{
    // 3C13 0021;	
    // (㰓) CJK UNIFIED IDEOGRAPH-3C13	[FB80 BC13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_315)
{
    // 3C13 003F;	
    // (㰓) CJK UNIFIED IDEOGRAPH-3C13	[FB80 BC13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_316)
{
    // 3C13 0061;	
    // (㰓) CJK UNIFIED IDEOGRAPH-3C13	[FB80 BC13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_317)
{
    // 3C13 0041;	
    // (㰓) CJK UNIFIED IDEOGRAPH-3C13	[FB80 BC13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_318)
{
    // 3C13 0062;	
    // (㰓) CJK UNIFIED IDEOGRAPH-3C13	[FB80 BC13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_319)
{
    // 3C14 0021;	
    // (㰔) CJK UNIFIED IDEOGRAPH-3C14	[FB80 BC14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_320)
{
    // 3C14 003F;	
    // (㰔) CJK UNIFIED IDEOGRAPH-3C14	[FB80 BC14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_321)
{
    // 3C14 0061;	
    // (㰔) CJK UNIFIED IDEOGRAPH-3C14	[FB80 BC14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_322)
{
    // 3C14 0041;	
    // (㰔) CJK UNIFIED IDEOGRAPH-3C14	[FB80 BC14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_323)
{
    // 3C14 0062;	
    // (㰔) CJK UNIFIED IDEOGRAPH-3C14	[FB80 BC14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_324)
{
    // 3C15 0021;	
    // (㰕) CJK UNIFIED IDEOGRAPH-3C15	[FB80 BC15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_325)
{
    // 3C15 003F;	
    // (㰕) CJK UNIFIED IDEOGRAPH-3C15	[FB80 BC15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_326)
{
    // 3C15 0061;	
    // (㰕) CJK UNIFIED IDEOGRAPH-3C15	[FB80 BC15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_327)
{
    // 3C15 0041;	
    // (㰕) CJK UNIFIED IDEOGRAPH-3C15	[FB80 BC15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_328)
{
    // 3C15 0062;	
    // (㰕) CJK UNIFIED IDEOGRAPH-3C15	[FB80 BC15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_329)
{
    // 3C16 0021;	
    // (㰖) CJK UNIFIED IDEOGRAPH-3C16	[FB80 BC16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_330)
{
    // 3C16 003F;	
    // (㰖) CJK UNIFIED IDEOGRAPH-3C16	[FB80 BC16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_331)
{
    // 3C16 0061;	
    // (㰖) CJK UNIFIED IDEOGRAPH-3C16	[FB80 BC16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_332)
{
    // 3C16 0041;	
    // (㰖) CJK UNIFIED IDEOGRAPH-3C16	[FB80 BC16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_333)
{
    // 3C16 0062;	
    // (㰖) CJK UNIFIED IDEOGRAPH-3C16	[FB80 BC16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_334)
{
    // 3C17 0021;	
    // (㰗) CJK UNIFIED IDEOGRAPH-3C17	[FB80 BC17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_335)
{
    // 3C17 003F;	
    // (㰗) CJK UNIFIED IDEOGRAPH-3C17	[FB80 BC17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_336)
{
    // 3C17 0061;	
    // (㰗) CJK UNIFIED IDEOGRAPH-3C17	[FB80 BC17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_337)
{
    // 3C17 0041;	
    // (㰗) CJK UNIFIED IDEOGRAPH-3C17	[FB80 BC17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_338)
{
    // 3C17 0062;	
    // (㰗) CJK UNIFIED IDEOGRAPH-3C17	[FB80 BC17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_339)
{
    // 3C18 0021;	
    // (㰘) CJK UNIFIED IDEOGRAPH-3C18	[FB80 BC18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_340)
{
    // 2F8EE 0021;	
    // (㰘) CJK COMPATIBILITY IDEOGRAPH-2F8EE	[FB80 BC18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_341)
{
    // 3C18 003F;	
    // (㰘) CJK UNIFIED IDEOGRAPH-3C18	[FB80 BC18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_342)
{
    // 2F8EE 003F;	
    // (㰘) CJK COMPATIBILITY IDEOGRAPH-2F8EE	[FB80 BC18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_343)
{
    // 3C18 0061;	
    // (㰘) CJK UNIFIED IDEOGRAPH-3C18	[FB80 BC18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_344)
{
    // 2F8EE 0061;	
    // (㰘) CJK COMPATIBILITY IDEOGRAPH-2F8EE	[FB80 BC18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_345)
{
    // 3C18 0041;	
    // (㰘) CJK UNIFIED IDEOGRAPH-3C18	[FB80 BC18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_346)
{
    // 2F8EE 0041;	
    // (㰘) CJK COMPATIBILITY IDEOGRAPH-2F8EE	[FB80 BC18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_347)
{
    // 3C18 0062;	
    // (㰘) CJK UNIFIED IDEOGRAPH-3C18	[FB80 BC18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_348)
{
    // 2F8EE 0062;	
    // (㰘) CJK COMPATIBILITY IDEOGRAPH-2F8EE	[FB80 BC18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_349)
{
    // 3C19 0021;	
    // (㰙) CJK UNIFIED IDEOGRAPH-3C19	[FB80 BC19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_350)
{
    // 3C19 003F;	
    // (㰙) CJK UNIFIED IDEOGRAPH-3C19	[FB80 BC19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_351)
{
    // 3C19 0061;	
    // (㰙) CJK UNIFIED IDEOGRAPH-3C19	[FB80 BC19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_352)
{
    // 3C19 0041;	
    // (㰙) CJK UNIFIED IDEOGRAPH-3C19	[FB80 BC19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_353)
{
    // 3C19 0062;	
    // (㰙) CJK UNIFIED IDEOGRAPH-3C19	[FB80 BC19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_354)
{
    // 3C1A 0021;	
    // (㰚) CJK UNIFIED IDEOGRAPH-3C1A	[FB80 BC1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_355)
{
    // 3C1A 003F;	
    // (㰚) CJK UNIFIED IDEOGRAPH-3C1A	[FB80 BC1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_356)
{
    // 3C1A 0061;	
    // (㰚) CJK UNIFIED IDEOGRAPH-3C1A	[FB80 BC1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_357)
{
    // 3C1A 0041;	
    // (㰚) CJK UNIFIED IDEOGRAPH-3C1A	[FB80 BC1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_358)
{
    // 3C1A 0062;	
    // (㰚) CJK UNIFIED IDEOGRAPH-3C1A	[FB80 BC1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_359)
{
    // 3C1B 0021;	
    // (㰛) CJK UNIFIED IDEOGRAPH-3C1B	[FB80 BC1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_360)
{
    // 3C1B 003F;	
    // (㰛) CJK UNIFIED IDEOGRAPH-3C1B	[FB80 BC1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_361)
{
    // 3C1B 0061;	
    // (㰛) CJK UNIFIED IDEOGRAPH-3C1B	[FB80 BC1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_362)
{
    // 3C1B 0041;	
    // (㰛) CJK UNIFIED IDEOGRAPH-3C1B	[FB80 BC1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_363)
{
    // 3C1B 0062;	
    // (㰛) CJK UNIFIED IDEOGRAPH-3C1B	[FB80 BC1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_364)
{
    // 3C1C 0021;	
    // (㰜) CJK UNIFIED IDEOGRAPH-3C1C	[FB80 BC1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_365)
{
    // 3C1C 003F;	
    // (㰜) CJK UNIFIED IDEOGRAPH-3C1C	[FB80 BC1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_366)
{
    // 3C1C 0061;	
    // (㰜) CJK UNIFIED IDEOGRAPH-3C1C	[FB80 BC1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_367)
{
    // 3C1C 0041;	
    // (㰜) CJK UNIFIED IDEOGRAPH-3C1C	[FB80 BC1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_368)
{
    // 3C1C 0062;	
    // (㰜) CJK UNIFIED IDEOGRAPH-3C1C	[FB80 BC1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_369)
{
    // 3C1D 0021;	
    // (㰝) CJK UNIFIED IDEOGRAPH-3C1D	[FB80 BC1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_370)
{
    // 3C1D 003F;	
    // (㰝) CJK UNIFIED IDEOGRAPH-3C1D	[FB80 BC1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_371)
{
    // 3C1D 0061;	
    // (㰝) CJK UNIFIED IDEOGRAPH-3C1D	[FB80 BC1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_372)
{
    // 3C1D 0041;	
    // (㰝) CJK UNIFIED IDEOGRAPH-3C1D	[FB80 BC1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_373)
{
    // 3C1D 0062;	
    // (㰝) CJK UNIFIED IDEOGRAPH-3C1D	[FB80 BC1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_374)
{
    // 3C1E 0021;	
    // (㰞) CJK UNIFIED IDEOGRAPH-3C1E	[FB80 BC1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_375)
{
    // 3C1E 003F;	
    // (㰞) CJK UNIFIED IDEOGRAPH-3C1E	[FB80 BC1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_376)
{
    // 3C1E 0061;	
    // (㰞) CJK UNIFIED IDEOGRAPH-3C1E	[FB80 BC1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_377)
{
    // 3C1E 0041;	
    // (㰞) CJK UNIFIED IDEOGRAPH-3C1E	[FB80 BC1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_378)
{
    // 3C1E 0062;	
    // (㰞) CJK UNIFIED IDEOGRAPH-3C1E	[FB80 BC1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_379)
{
    // 3C1F 0021;	
    // (㰟) CJK UNIFIED IDEOGRAPH-3C1F	[FB80 BC1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_380)
{
    // 3C1F 003F;	
    // (㰟) CJK UNIFIED IDEOGRAPH-3C1F	[FB80 BC1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_381)
{
    // 3C1F 0061;	
    // (㰟) CJK UNIFIED IDEOGRAPH-3C1F	[FB80 BC1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_382)
{
    // 3C1F 0041;	
    // (㰟) CJK UNIFIED IDEOGRAPH-3C1F	[FB80 BC1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_383)
{
    // 3C1F 0062;	
    // (㰟) CJK UNIFIED IDEOGRAPH-3C1F	[FB80 BC1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_384)
{
    // 3C20 0021;	
    // (㰠) CJK UNIFIED IDEOGRAPH-3C20	[FB80 BC20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_385)
{
    // 3C20 003F;	
    // (㰠) CJK UNIFIED IDEOGRAPH-3C20	[FB80 BC20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_386)
{
    // 3C20 0061;	
    // (㰠) CJK UNIFIED IDEOGRAPH-3C20	[FB80 BC20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_387)
{
    // 3C20 0041;	
    // (㰠) CJK UNIFIED IDEOGRAPH-3C20	[FB80 BC20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_388)
{
    // 3C20 0062;	
    // (㰠) CJK UNIFIED IDEOGRAPH-3C20	[FB80 BC20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_389)
{
    // 3C21 0021;	
    // (㰡) CJK UNIFIED IDEOGRAPH-3C21	[FB80 BC21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_390)
{
    // 3C21 003F;	
    // (㰡) CJK UNIFIED IDEOGRAPH-3C21	[FB80 BC21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_391)
{
    // 3C21 0061;	
    // (㰡) CJK UNIFIED IDEOGRAPH-3C21	[FB80 BC21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_392)
{
    // 3C21 0041;	
    // (㰡) CJK UNIFIED IDEOGRAPH-3C21	[FB80 BC21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_393)
{
    // 3C21 0062;	
    // (㰡) CJK UNIFIED IDEOGRAPH-3C21	[FB80 BC21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_394)
{
    // 3C22 0021;	
    // (㰢) CJK UNIFIED IDEOGRAPH-3C22	[FB80 BC22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_395)
{
    // 3C22 003F;	
    // (㰢) CJK UNIFIED IDEOGRAPH-3C22	[FB80 BC22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_396)
{
    // 3C22 0061;	
    // (㰢) CJK UNIFIED IDEOGRAPH-3C22	[FB80 BC22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_397)
{
    // 3C22 0041;	
    // (㰢) CJK UNIFIED IDEOGRAPH-3C22	[FB80 BC22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_398)
{
    // 3C22 0062;	
    // (㰢) CJK UNIFIED IDEOGRAPH-3C22	[FB80 BC22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_399)
{
    // 3C23 0021;	
    // (㰣) CJK UNIFIED IDEOGRAPH-3C23	[FB80 BC23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_400)
{
    // 3C23 003F;	
    // (㰣) CJK UNIFIED IDEOGRAPH-3C23	[FB80 BC23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_401)
{
    // 3C23 0061;	
    // (㰣) CJK UNIFIED IDEOGRAPH-3C23	[FB80 BC23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_402)
{
    // 3C23 0041;	
    // (㰣) CJK UNIFIED IDEOGRAPH-3C23	[FB80 BC23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_403)
{
    // 3C23 0062;	
    // (㰣) CJK UNIFIED IDEOGRAPH-3C23	[FB80 BC23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_404)
{
    // 3C24 0021;	
    // (㰤) CJK UNIFIED IDEOGRAPH-3C24	[FB80 BC24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_405)
{
    // 3C24 003F;	
    // (㰤) CJK UNIFIED IDEOGRAPH-3C24	[FB80 BC24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_406)
{
    // 3C24 0061;	
    // (㰤) CJK UNIFIED IDEOGRAPH-3C24	[FB80 BC24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_407)
{
    // 3C24 0041;	
    // (㰤) CJK UNIFIED IDEOGRAPH-3C24	[FB80 BC24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_408)
{
    // 3C24 0062;	
    // (㰤) CJK UNIFIED IDEOGRAPH-3C24	[FB80 BC24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_409)
{
    // 3C25 0021;	
    // (㰥) CJK UNIFIED IDEOGRAPH-3C25	[FB80 BC25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_410)
{
    // 3C25 003F;	
    // (㰥) CJK UNIFIED IDEOGRAPH-3C25	[FB80 BC25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_411)
{
    // 3C25 0061;	
    // (㰥) CJK UNIFIED IDEOGRAPH-3C25	[FB80 BC25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_412)
{
    // 3C25 0041;	
    // (㰥) CJK UNIFIED IDEOGRAPH-3C25	[FB80 BC25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_413)
{
    // 3C25 0062;	
    // (㰥) CJK UNIFIED IDEOGRAPH-3C25	[FB80 BC25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_414)
{
    // 3C26 0021;	
    // (㰦) CJK UNIFIED IDEOGRAPH-3C26	[FB80 BC26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_415)
{
    // 3C26 003F;	
    // (㰦) CJK UNIFIED IDEOGRAPH-3C26	[FB80 BC26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_416)
{
    // 3C26 0061;	
    // (㰦) CJK UNIFIED IDEOGRAPH-3C26	[FB80 BC26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_417)
{
    // 3C26 0041;	
    // (㰦) CJK UNIFIED IDEOGRAPH-3C26	[FB80 BC26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_418)
{
    // 3C26 0062;	
    // (㰦) CJK UNIFIED IDEOGRAPH-3C26	[FB80 BC26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_419)
{
    // 3C27 0021;	
    // (㰧) CJK UNIFIED IDEOGRAPH-3C27	[FB80 BC27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_420)
{
    // 3C27 003F;	
    // (㰧) CJK UNIFIED IDEOGRAPH-3C27	[FB80 BC27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_421)
{
    // 3C27 0061;	
    // (㰧) CJK UNIFIED IDEOGRAPH-3C27	[FB80 BC27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_422)
{
    // 3C27 0041;	
    // (㰧) CJK UNIFIED IDEOGRAPH-3C27	[FB80 BC27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_423)
{
    // 3C27 0062;	
    // (㰧) CJK UNIFIED IDEOGRAPH-3C27	[FB80 BC27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_424)
{
    // 3C28 0021;	
    // (㰨) CJK UNIFIED IDEOGRAPH-3C28	[FB80 BC28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_425)
{
    // 3C28 003F;	
    // (㰨) CJK UNIFIED IDEOGRAPH-3C28	[FB80 BC28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_426)
{
    // 3C28 0061;	
    // (㰨) CJK UNIFIED IDEOGRAPH-3C28	[FB80 BC28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_427)
{
    // 3C28 0041;	
    // (㰨) CJK UNIFIED IDEOGRAPH-3C28	[FB80 BC28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_428)
{
    // 3C28 0062;	
    // (㰨) CJK UNIFIED IDEOGRAPH-3C28	[FB80 BC28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_429)
{
    // 3C29 0021;	
    // (㰩) CJK UNIFIED IDEOGRAPH-3C29	[FB80 BC29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_430)
{
    // 3C29 003F;	
    // (㰩) CJK UNIFIED IDEOGRAPH-3C29	[FB80 BC29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_431)
{
    // 3C29 0061;	
    // (㰩) CJK UNIFIED IDEOGRAPH-3C29	[FB80 BC29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_432)
{
    // 3C29 0041;	
    // (㰩) CJK UNIFIED IDEOGRAPH-3C29	[FB80 BC29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_433)
{
    // 3C29 0062;	
    // (㰩) CJK UNIFIED IDEOGRAPH-3C29	[FB80 BC29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_434)
{
    // 3C2A 0021;	
    // (㰪) CJK UNIFIED IDEOGRAPH-3C2A	[FB80 BC2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_435)
{
    // 3C2A 003F;	
    // (㰪) CJK UNIFIED IDEOGRAPH-3C2A	[FB80 BC2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_436)
{
    // 3C2A 0061;	
    // (㰪) CJK UNIFIED IDEOGRAPH-3C2A	[FB80 BC2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_437)
{
    // 3C2A 0041;	
    // (㰪) CJK UNIFIED IDEOGRAPH-3C2A	[FB80 BC2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_438)
{
    // 3C2A 0062;	
    // (㰪) CJK UNIFIED IDEOGRAPH-3C2A	[FB80 BC2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_439)
{
    // 3C2B 0021;	
    // (㰫) CJK UNIFIED IDEOGRAPH-3C2B	[FB80 BC2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_440)
{
    // 3C2B 003F;	
    // (㰫) CJK UNIFIED IDEOGRAPH-3C2B	[FB80 BC2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_441)
{
    // 3C2B 0061;	
    // (㰫) CJK UNIFIED IDEOGRAPH-3C2B	[FB80 BC2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_442)
{
    // 3C2B 0041;	
    // (㰫) CJK UNIFIED IDEOGRAPH-3C2B	[FB80 BC2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_443)
{
    // 3C2B 0062;	
    // (㰫) CJK UNIFIED IDEOGRAPH-3C2B	[FB80 BC2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_444)
{
    // 3C2C 0021;	
    // (㰬) CJK UNIFIED IDEOGRAPH-3C2C	[FB80 BC2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_445)
{
    // 3C2C 003F;	
    // (㰬) CJK UNIFIED IDEOGRAPH-3C2C	[FB80 BC2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_446)
{
    // 3C2C 0061;	
    // (㰬) CJK UNIFIED IDEOGRAPH-3C2C	[FB80 BC2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_447)
{
    // 3C2C 0041;	
    // (㰬) CJK UNIFIED IDEOGRAPH-3C2C	[FB80 BC2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_448)
{
    // 3C2C 0062;	
    // (㰬) CJK UNIFIED IDEOGRAPH-3C2C	[FB80 BC2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_449)
{
    // 3C2D 0021;	
    // (㰭) CJK UNIFIED IDEOGRAPH-3C2D	[FB80 BC2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_450)
{
    // 3C2D 003F;	
    // (㰭) CJK UNIFIED IDEOGRAPH-3C2D	[FB80 BC2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_451)
{
    // 3C2D 0061;	
    // (㰭) CJK UNIFIED IDEOGRAPH-3C2D	[FB80 BC2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_452)
{
    // 3C2D 0041;	
    // (㰭) CJK UNIFIED IDEOGRAPH-3C2D	[FB80 BC2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_453)
{
    // 3C2D 0062;	
    // (㰭) CJK UNIFIED IDEOGRAPH-3C2D	[FB80 BC2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_454)
{
    // 3C2E 0021;	
    // (㰮) CJK UNIFIED IDEOGRAPH-3C2E	[FB80 BC2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_455)
{
    // 3C2E 003F;	
    // (㰮) CJK UNIFIED IDEOGRAPH-3C2E	[FB80 BC2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_456)
{
    // 3C2E 0061;	
    // (㰮) CJK UNIFIED IDEOGRAPH-3C2E	[FB80 BC2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_457)
{
    // 3C2E 0041;	
    // (㰮) CJK UNIFIED IDEOGRAPH-3C2E	[FB80 BC2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_458)
{
    // 3C2E 0062;	
    // (㰮) CJK UNIFIED IDEOGRAPH-3C2E	[FB80 BC2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_459)
{
    // 3C2F 0021;	
    // (㰯) CJK UNIFIED IDEOGRAPH-3C2F	[FB80 BC2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_460)
{
    // 3C2F 003F;	
    // (㰯) CJK UNIFIED IDEOGRAPH-3C2F	[FB80 BC2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_461)
{
    // 3C2F 0061;	
    // (㰯) CJK UNIFIED IDEOGRAPH-3C2F	[FB80 BC2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_462)
{
    // 3C2F 0041;	
    // (㰯) CJK UNIFIED IDEOGRAPH-3C2F	[FB80 BC2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_463)
{
    // 3C2F 0062;	
    // (㰯) CJK UNIFIED IDEOGRAPH-3C2F	[FB80 BC2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_464)
{
    // 3C30 0021;	
    // (㰰) CJK UNIFIED IDEOGRAPH-3C30	[FB80 BC30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_465)
{
    // 3C30 003F;	
    // (㰰) CJK UNIFIED IDEOGRAPH-3C30	[FB80 BC30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_466)
{
    // 3C30 0061;	
    // (㰰) CJK UNIFIED IDEOGRAPH-3C30	[FB80 BC30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_467)
{
    // 3C30 0041;	
    // (㰰) CJK UNIFIED IDEOGRAPH-3C30	[FB80 BC30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_468)
{
    // 3C30 0062;	
    // (㰰) CJK UNIFIED IDEOGRAPH-3C30	[FB80 BC30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_469)
{
    // 3C31 0021;	
    // (㰱) CJK UNIFIED IDEOGRAPH-3C31	[FB80 BC31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_470)
{
    // 3C31 003F;	
    // (㰱) CJK UNIFIED IDEOGRAPH-3C31	[FB80 BC31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_471)
{
    // 3C31 0061;	
    // (㰱) CJK UNIFIED IDEOGRAPH-3C31	[FB80 BC31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_472)
{
    // 3C31 0041;	
    // (㰱) CJK UNIFIED IDEOGRAPH-3C31	[FB80 BC31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_473)
{
    // 3C31 0062;	
    // (㰱) CJK UNIFIED IDEOGRAPH-3C31	[FB80 BC31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_474)
{
    // 3C32 0021;	
    // (㰲) CJK UNIFIED IDEOGRAPH-3C32	[FB80 BC32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_475)
{
    // 3C32 003F;	
    // (㰲) CJK UNIFIED IDEOGRAPH-3C32	[FB80 BC32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_476)
{
    // 3C32 0061;	
    // (㰲) CJK UNIFIED IDEOGRAPH-3C32	[FB80 BC32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_477)
{
    // 3C32 0041;	
    // (㰲) CJK UNIFIED IDEOGRAPH-3C32	[FB80 BC32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_478)
{
    // 3C32 0062;	
    // (㰲) CJK UNIFIED IDEOGRAPH-3C32	[FB80 BC32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_479)
{
    // 3C33 0021;	
    // (㰳) CJK UNIFIED IDEOGRAPH-3C33	[FB80 BC33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_480)
{
    // 3C33 003F;	
    // (㰳) CJK UNIFIED IDEOGRAPH-3C33	[FB80 BC33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_481)
{
    // 3C33 0061;	
    // (㰳) CJK UNIFIED IDEOGRAPH-3C33	[FB80 BC33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_482)
{
    // 3C33 0041;	
    // (㰳) CJK UNIFIED IDEOGRAPH-3C33	[FB80 BC33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_483)
{
    // 3C33 0062;	
    // (㰳) CJK UNIFIED IDEOGRAPH-3C33	[FB80 BC33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_484)
{
    // 3C34 0021;	
    // (㰴) CJK UNIFIED IDEOGRAPH-3C34	[FB80 BC34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_485)
{
    // 3C34 003F;	
    // (㰴) CJK UNIFIED IDEOGRAPH-3C34	[FB80 BC34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_486)
{
    // 3C34 0061;	
    // (㰴) CJK UNIFIED IDEOGRAPH-3C34	[FB80 BC34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_487)
{
    // 3C34 0041;	
    // (㰴) CJK UNIFIED IDEOGRAPH-3C34	[FB80 BC34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_488)
{
    // 3C34 0062;	
    // (㰴) CJK UNIFIED IDEOGRAPH-3C34	[FB80 BC34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_489)
{
    // 3C35 0021;	
    // (㰵) CJK UNIFIED IDEOGRAPH-3C35	[FB80 BC35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_490)
{
    // 3C35 003F;	
    // (㰵) CJK UNIFIED IDEOGRAPH-3C35	[FB80 BC35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_491)
{
    // 3C35 0061;	
    // (㰵) CJK UNIFIED IDEOGRAPH-3C35	[FB80 BC35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_492)
{
    // 3C35 0041;	
    // (㰵) CJK UNIFIED IDEOGRAPH-3C35	[FB80 BC35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_493)
{
    // 3C35 0062;	
    // (㰵) CJK UNIFIED IDEOGRAPH-3C35	[FB80 BC35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_494)
{
    // 3C36 0021;	
    // (㰶) CJK UNIFIED IDEOGRAPH-3C36	[FB80 BC36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_495)
{
    // 3C36 003F;	
    // (㰶) CJK UNIFIED IDEOGRAPH-3C36	[FB80 BC36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_496)
{
    // 3C36 0061;	
    // (㰶) CJK UNIFIED IDEOGRAPH-3C36	[FB80 BC36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_497)
{
    // 3C36 0041;	
    // (㰶) CJK UNIFIED IDEOGRAPH-3C36	[FB80 BC36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_498)
{
    // 3C36 0062;	
    // (㰶) CJK UNIFIED IDEOGRAPH-3C36	[FB80 BC36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_347_499)
{
    // 3C37 0021;	
    // (㰷) CJK UNIFIED IDEOGRAPH-3C37	[FB80 BC37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

