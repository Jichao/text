// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_028_000)
{
    // 250D 0041;	
    // (┍) BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY	[083C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250D, 0x0041 };
    uint32_t const ces[9] = { 0x083C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_001)
{
    // 250D 0062;	
    // (┍) BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY	[083C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250D, 0x0062 };
    uint32_t const ces[9] = { 0x083C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_002)
{
    // 250E 0021;	
    // (┎) BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT	[083D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250E, 0x0021 };
    uint32_t const ces[9] = { 0x083D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_003)
{
    // 250E 003F;	
    // (┎) BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT	[083D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250E, 0x003F };
    uint32_t const ces[9] = { 0x083D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_004)
{
    // 250E 0061;	
    // (┎) BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT	[083D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250E, 0x0061 };
    uint32_t const ces[9] = { 0x083D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_005)
{
    // 250E 0041;	
    // (┎) BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT	[083D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250E, 0x0041 };
    uint32_t const ces[9] = { 0x083D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_006)
{
    // 250E 0062;	
    // (┎) BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT	[083D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250E, 0x0062 };
    uint32_t const ces[9] = { 0x083D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_007)
{
    // 250F 0021;	
    // (┏) BOX DRAWINGS HEAVY DOWN AND RIGHT	[083E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250F, 0x0021 };
    uint32_t const ces[9] = { 0x083E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_008)
{
    // 250F 003F;	
    // (┏) BOX DRAWINGS HEAVY DOWN AND RIGHT	[083E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250F, 0x003F };
    uint32_t const ces[9] = { 0x083E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_009)
{
    // 250F 0061;	
    // (┏) BOX DRAWINGS HEAVY DOWN AND RIGHT	[083E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250F, 0x0061 };
    uint32_t const ces[9] = { 0x083E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_010)
{
    // 250F 0041;	
    // (┏) BOX DRAWINGS HEAVY DOWN AND RIGHT	[083E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250F, 0x0041 };
    uint32_t const ces[9] = { 0x083E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_011)
{
    // 250F 0062;	
    // (┏) BOX DRAWINGS HEAVY DOWN AND RIGHT	[083E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250F, 0x0062 };
    uint32_t const ces[9] = { 0x083E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_012)
{
    // 2510 0021;	
    // (┐) BOX DRAWINGS LIGHT DOWN AND LEFT	[083F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2510, 0x0021 };
    uint32_t const ces[9] = { 0x083F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_013)
{
    // 2510 003F;	
    // (┐) BOX DRAWINGS LIGHT DOWN AND LEFT	[083F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2510, 0x003F };
    uint32_t const ces[9] = { 0x083F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_014)
{
    // 2510 0061;	
    // (┐) BOX DRAWINGS LIGHT DOWN AND LEFT	[083F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2510, 0x0061 };
    uint32_t const ces[9] = { 0x083F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_015)
{
    // 2510 0041;	
    // (┐) BOX DRAWINGS LIGHT DOWN AND LEFT	[083F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2510, 0x0041 };
    uint32_t const ces[9] = { 0x083F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_016)
{
    // 2510 0062;	
    // (┐) BOX DRAWINGS LIGHT DOWN AND LEFT	[083F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2510, 0x0062 };
    uint32_t const ces[9] = { 0x083F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_017)
{
    // 2511 0021;	
    // (┑) BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY	[0840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2511, 0x0021 };
    uint32_t const ces[9] = { 0x0840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_018)
{
    // 2511 003F;	
    // (┑) BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY	[0840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2511, 0x003F };
    uint32_t const ces[9] = { 0x0840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_019)
{
    // 2511 0061;	
    // (┑) BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY	[0840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2511, 0x0061 };
    uint32_t const ces[9] = { 0x0840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_020)
{
    // 2511 0041;	
    // (┑) BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY	[0840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2511, 0x0041 };
    uint32_t const ces[9] = { 0x0840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_021)
{
    // 2511 0062;	
    // (┑) BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY	[0840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2511, 0x0062 };
    uint32_t const ces[9] = { 0x0840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_022)
{
    // 2512 0021;	
    // (┒) BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT	[0841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2512, 0x0021 };
    uint32_t const ces[9] = { 0x0841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_023)
{
    // 2512 003F;	
    // (┒) BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT	[0841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2512, 0x003F };
    uint32_t const ces[9] = { 0x0841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_024)
{
    // 2512 0061;	
    // (┒) BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT	[0841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2512, 0x0061 };
    uint32_t const ces[9] = { 0x0841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_025)
{
    // 2512 0041;	
    // (┒) BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT	[0841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2512, 0x0041 };
    uint32_t const ces[9] = { 0x0841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_026)
{
    // 2512 0062;	
    // (┒) BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT	[0841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2512, 0x0062 };
    uint32_t const ces[9] = { 0x0841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_027)
{
    // 2513 0021;	
    // (┓) BOX DRAWINGS HEAVY DOWN AND LEFT	[0842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2513, 0x0021 };
    uint32_t const ces[9] = { 0x0842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_028)
{
    // 2513 003F;	
    // (┓) BOX DRAWINGS HEAVY DOWN AND LEFT	[0842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2513, 0x003F };
    uint32_t const ces[9] = { 0x0842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_029)
{
    // 2513 0061;	
    // (┓) BOX DRAWINGS HEAVY DOWN AND LEFT	[0842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2513, 0x0061 };
    uint32_t const ces[9] = { 0x0842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_030)
{
    // 2513 0041;	
    // (┓) BOX DRAWINGS HEAVY DOWN AND LEFT	[0842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2513, 0x0041 };
    uint32_t const ces[9] = { 0x0842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_031)
{
    // 2513 0062;	
    // (┓) BOX DRAWINGS HEAVY DOWN AND LEFT	[0842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2513, 0x0062 };
    uint32_t const ces[9] = { 0x0842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_032)
{
    // 2514 0021;	
    // (└) BOX DRAWINGS LIGHT UP AND RIGHT	[0843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2514, 0x0021 };
    uint32_t const ces[9] = { 0x0843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_033)
{
    // 2514 003F;	
    // (└) BOX DRAWINGS LIGHT UP AND RIGHT	[0843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2514, 0x003F };
    uint32_t const ces[9] = { 0x0843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_034)
{
    // 2514 0061;	
    // (└) BOX DRAWINGS LIGHT UP AND RIGHT	[0843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2514, 0x0061 };
    uint32_t const ces[9] = { 0x0843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_035)
{
    // 2514 0041;	
    // (└) BOX DRAWINGS LIGHT UP AND RIGHT	[0843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2514, 0x0041 };
    uint32_t const ces[9] = { 0x0843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_036)
{
    // 2514 0062;	
    // (└) BOX DRAWINGS LIGHT UP AND RIGHT	[0843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2514, 0x0062 };
    uint32_t const ces[9] = { 0x0843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_037)
{
    // 2515 0021;	
    // (┕) BOX DRAWINGS UP LIGHT AND RIGHT HEAVY	[0844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2515, 0x0021 };
    uint32_t const ces[9] = { 0x0844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_038)
{
    // 2515 003F;	
    // (┕) BOX DRAWINGS UP LIGHT AND RIGHT HEAVY	[0844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2515, 0x003F };
    uint32_t const ces[9] = { 0x0844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_039)
{
    // 2515 0061;	
    // (┕) BOX DRAWINGS UP LIGHT AND RIGHT HEAVY	[0844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2515, 0x0061 };
    uint32_t const ces[9] = { 0x0844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_040)
{
    // 2515 0041;	
    // (┕) BOX DRAWINGS UP LIGHT AND RIGHT HEAVY	[0844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2515, 0x0041 };
    uint32_t const ces[9] = { 0x0844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_041)
{
    // 2515 0062;	
    // (┕) BOX DRAWINGS UP LIGHT AND RIGHT HEAVY	[0844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2515, 0x0062 };
    uint32_t const ces[9] = { 0x0844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_042)
{
    // 2516 0021;	
    // (┖) BOX DRAWINGS UP HEAVY AND RIGHT LIGHT	[0845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2516, 0x0021 };
    uint32_t const ces[9] = { 0x0845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_043)
{
    // 2516 003F;	
    // (┖) BOX DRAWINGS UP HEAVY AND RIGHT LIGHT	[0845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2516, 0x003F };
    uint32_t const ces[9] = { 0x0845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_044)
{
    // 2516 0061;	
    // (┖) BOX DRAWINGS UP HEAVY AND RIGHT LIGHT	[0845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2516, 0x0061 };
    uint32_t const ces[9] = { 0x0845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_045)
{
    // 2516 0041;	
    // (┖) BOX DRAWINGS UP HEAVY AND RIGHT LIGHT	[0845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2516, 0x0041 };
    uint32_t const ces[9] = { 0x0845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_046)
{
    // 2516 0062;	
    // (┖) BOX DRAWINGS UP HEAVY AND RIGHT LIGHT	[0845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2516, 0x0062 };
    uint32_t const ces[9] = { 0x0845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_047)
{
    // 2517 0021;	
    // (┗) BOX DRAWINGS HEAVY UP AND RIGHT	[0846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2517, 0x0021 };
    uint32_t const ces[9] = { 0x0846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_048)
{
    // 2517 003F;	
    // (┗) BOX DRAWINGS HEAVY UP AND RIGHT	[0846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2517, 0x003F };
    uint32_t const ces[9] = { 0x0846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_049)
{
    // 2517 0061;	
    // (┗) BOX DRAWINGS HEAVY UP AND RIGHT	[0846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2517, 0x0061 };
    uint32_t const ces[9] = { 0x0846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_050)
{
    // 2517 0041;	
    // (┗) BOX DRAWINGS HEAVY UP AND RIGHT	[0846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2517, 0x0041 };
    uint32_t const ces[9] = { 0x0846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_051)
{
    // 2517 0062;	
    // (┗) BOX DRAWINGS HEAVY UP AND RIGHT	[0846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2517, 0x0062 };
    uint32_t const ces[9] = { 0x0846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_052)
{
    // 2518 0021;	
    // (┘) BOX DRAWINGS LIGHT UP AND LEFT	[0847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2518, 0x0021 };
    uint32_t const ces[9] = { 0x0847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_053)
{
    // 2518 003F;	
    // (┘) BOX DRAWINGS LIGHT UP AND LEFT	[0847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2518, 0x003F };
    uint32_t const ces[9] = { 0x0847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_054)
{
    // 2518 0061;	
    // (┘) BOX DRAWINGS LIGHT UP AND LEFT	[0847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2518, 0x0061 };
    uint32_t const ces[9] = { 0x0847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_055)
{
    // 2518 0041;	
    // (┘) BOX DRAWINGS LIGHT UP AND LEFT	[0847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2518, 0x0041 };
    uint32_t const ces[9] = { 0x0847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_056)
{
    // 2518 0062;	
    // (┘) BOX DRAWINGS LIGHT UP AND LEFT	[0847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2518, 0x0062 };
    uint32_t const ces[9] = { 0x0847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_057)
{
    // 2519 0021;	
    // (┙) BOX DRAWINGS UP LIGHT AND LEFT HEAVY	[0848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2519, 0x0021 };
    uint32_t const ces[9] = { 0x0848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_058)
{
    // 2519 003F;	
    // (┙) BOX DRAWINGS UP LIGHT AND LEFT HEAVY	[0848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2519, 0x003F };
    uint32_t const ces[9] = { 0x0848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_059)
{
    // 2519 0061;	
    // (┙) BOX DRAWINGS UP LIGHT AND LEFT HEAVY	[0848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2519, 0x0061 };
    uint32_t const ces[9] = { 0x0848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_060)
{
    // 2519 0041;	
    // (┙) BOX DRAWINGS UP LIGHT AND LEFT HEAVY	[0848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2519, 0x0041 };
    uint32_t const ces[9] = { 0x0848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_061)
{
    // 2519 0062;	
    // (┙) BOX DRAWINGS UP LIGHT AND LEFT HEAVY	[0848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2519, 0x0062 };
    uint32_t const ces[9] = { 0x0848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_062)
{
    // 251A 0021;	
    // (┚) BOX DRAWINGS UP HEAVY AND LEFT LIGHT	[0849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251A, 0x0021 };
    uint32_t const ces[9] = { 0x0849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_063)
{
    // 251A 003F;	
    // (┚) BOX DRAWINGS UP HEAVY AND LEFT LIGHT	[0849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251A, 0x003F };
    uint32_t const ces[9] = { 0x0849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_064)
{
    // 251A 0061;	
    // (┚) BOX DRAWINGS UP HEAVY AND LEFT LIGHT	[0849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251A, 0x0061 };
    uint32_t const ces[9] = { 0x0849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_065)
{
    // 251A 0041;	
    // (┚) BOX DRAWINGS UP HEAVY AND LEFT LIGHT	[0849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251A, 0x0041 };
    uint32_t const ces[9] = { 0x0849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_066)
{
    // 251A 0062;	
    // (┚) BOX DRAWINGS UP HEAVY AND LEFT LIGHT	[0849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251A, 0x0062 };
    uint32_t const ces[9] = { 0x0849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_067)
{
    // 251B 0021;	
    // (┛) BOX DRAWINGS HEAVY UP AND LEFT	[084A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251B, 0x0021 };
    uint32_t const ces[9] = { 0x084A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_068)
{
    // 251B 003F;	
    // (┛) BOX DRAWINGS HEAVY UP AND LEFT	[084A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251B, 0x003F };
    uint32_t const ces[9] = { 0x084A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_069)
{
    // 251B 0061;	
    // (┛) BOX DRAWINGS HEAVY UP AND LEFT	[084A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251B, 0x0061 };
    uint32_t const ces[9] = { 0x084A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_070)
{
    // 251B 0041;	
    // (┛) BOX DRAWINGS HEAVY UP AND LEFT	[084A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251B, 0x0041 };
    uint32_t const ces[9] = { 0x084A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_071)
{
    // 251B 0062;	
    // (┛) BOX DRAWINGS HEAVY UP AND LEFT	[084A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251B, 0x0062 };
    uint32_t const ces[9] = { 0x084A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_072)
{
    // 251C 0021;	
    // (├) BOX DRAWINGS LIGHT VERTICAL AND RIGHT	[084B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251C, 0x0021 };
    uint32_t const ces[9] = { 0x084B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_073)
{
    // 251C 003F;	
    // (├) BOX DRAWINGS LIGHT VERTICAL AND RIGHT	[084B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251C, 0x003F };
    uint32_t const ces[9] = { 0x084B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_074)
{
    // 251C 0061;	
    // (├) BOX DRAWINGS LIGHT VERTICAL AND RIGHT	[084B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251C, 0x0061 };
    uint32_t const ces[9] = { 0x084B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_075)
{
    // 251C 0041;	
    // (├) BOX DRAWINGS LIGHT VERTICAL AND RIGHT	[084B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251C, 0x0041 };
    uint32_t const ces[9] = { 0x084B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_076)
{
    // 251C 0062;	
    // (├) BOX DRAWINGS LIGHT VERTICAL AND RIGHT	[084B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251C, 0x0062 };
    uint32_t const ces[9] = { 0x084B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_077)
{
    // 251D 0021;	
    // (┝) BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY	[084C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251D, 0x0021 };
    uint32_t const ces[9] = { 0x084C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_078)
{
    // 251D 003F;	
    // (┝) BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY	[084C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251D, 0x003F };
    uint32_t const ces[9] = { 0x084C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_079)
{
    // 251D 0061;	
    // (┝) BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY	[084C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251D, 0x0061 };
    uint32_t const ces[9] = { 0x084C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_080)
{
    // 251D 0041;	
    // (┝) BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY	[084C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251D, 0x0041 };
    uint32_t const ces[9] = { 0x084C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_081)
{
    // 251D 0062;	
    // (┝) BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY	[084C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251D, 0x0062 };
    uint32_t const ces[9] = { 0x084C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_082)
{
    // 251E 0021;	
    // (┞) BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT	[084D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251E, 0x0021 };
    uint32_t const ces[9] = { 0x084D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_083)
{
    // 251E 003F;	
    // (┞) BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT	[084D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251E, 0x003F };
    uint32_t const ces[9] = { 0x084D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_084)
{
    // 251E 0061;	
    // (┞) BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT	[084D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251E, 0x0061 };
    uint32_t const ces[9] = { 0x084D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_085)
{
    // 251E 0041;	
    // (┞) BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT	[084D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251E, 0x0041 };
    uint32_t const ces[9] = { 0x084D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_086)
{
    // 251E 0062;	
    // (┞) BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT	[084D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251E, 0x0062 };
    uint32_t const ces[9] = { 0x084D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_087)
{
    // 251F 0021;	
    // (┟) BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT	[084E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251F, 0x0021 };
    uint32_t const ces[9] = { 0x084E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_088)
{
    // 251F 003F;	
    // (┟) BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT	[084E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251F, 0x003F };
    uint32_t const ces[9] = { 0x084E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_089)
{
    // 251F 0061;	
    // (┟) BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT	[084E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251F, 0x0061 };
    uint32_t const ces[9] = { 0x084E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_090)
{
    // 251F 0041;	
    // (┟) BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT	[084E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x251F, 0x0041 };
    uint32_t const ces[9] = { 0x084E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_091)
{
    // 251F 0062;	
    // (┟) BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT	[084E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x251F, 0x0062 };
    uint32_t const ces[9] = { 0x084E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_092)
{
    // 2520 0021;	
    // (┠) BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT	[084F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2520, 0x0021 };
    uint32_t const ces[9] = { 0x084F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_093)
{
    // 2520 003F;	
    // (┠) BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT	[084F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2520, 0x003F };
    uint32_t const ces[9] = { 0x084F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_094)
{
    // 2520 0061;	
    // (┠) BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT	[084F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2520, 0x0061 };
    uint32_t const ces[9] = { 0x084F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_095)
{
    // 2520 0041;	
    // (┠) BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT	[084F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2520, 0x0041 };
    uint32_t const ces[9] = { 0x084F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_096)
{
    // 2520 0062;	
    // (┠) BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT	[084F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2520, 0x0062 };
    uint32_t const ces[9] = { 0x084F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_097)
{
    // 2521 0021;	
    // (┡) BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY	[0850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2521, 0x0021 };
    uint32_t const ces[9] = { 0x0850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_098)
{
    // 2521 003F;	
    // (┡) BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY	[0850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2521, 0x003F };
    uint32_t const ces[9] = { 0x0850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_099)
{
    // 2521 0061;	
    // (┡) BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY	[0850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2521, 0x0061 };
    uint32_t const ces[9] = { 0x0850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_100)
{
    // 2521 0041;	
    // (┡) BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY	[0850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2521, 0x0041 };
    uint32_t const ces[9] = { 0x0850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_101)
{
    // 2521 0062;	
    // (┡) BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY	[0850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2521, 0x0062 };
    uint32_t const ces[9] = { 0x0850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_102)
{
    // 2522 0021;	
    // (┢) BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY	[0851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2522, 0x0021 };
    uint32_t const ces[9] = { 0x0851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_103)
{
    // 2522 003F;	
    // (┢) BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY	[0851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2522, 0x003F };
    uint32_t const ces[9] = { 0x0851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_104)
{
    // 2522 0061;	
    // (┢) BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY	[0851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2522, 0x0061 };
    uint32_t const ces[9] = { 0x0851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_105)
{
    // 2522 0041;	
    // (┢) BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY	[0851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2522, 0x0041 };
    uint32_t const ces[9] = { 0x0851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_106)
{
    // 2522 0062;	
    // (┢) BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY	[0851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2522, 0x0062 };
    uint32_t const ces[9] = { 0x0851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_107)
{
    // 2523 0021;	
    // (┣) BOX DRAWINGS HEAVY VERTICAL AND RIGHT	[0852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2523, 0x0021 };
    uint32_t const ces[9] = { 0x0852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_108)
{
    // 2523 003F;	
    // (┣) BOX DRAWINGS HEAVY VERTICAL AND RIGHT	[0852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2523, 0x003F };
    uint32_t const ces[9] = { 0x0852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_109)
{
    // 2523 0061;	
    // (┣) BOX DRAWINGS HEAVY VERTICAL AND RIGHT	[0852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2523, 0x0061 };
    uint32_t const ces[9] = { 0x0852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_110)
{
    // 2523 0041;	
    // (┣) BOX DRAWINGS HEAVY VERTICAL AND RIGHT	[0852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2523, 0x0041 };
    uint32_t const ces[9] = { 0x0852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_111)
{
    // 2523 0062;	
    // (┣) BOX DRAWINGS HEAVY VERTICAL AND RIGHT	[0852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2523, 0x0062 };
    uint32_t const ces[9] = { 0x0852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_112)
{
    // 2524 0021;	
    // (┤) BOX DRAWINGS LIGHT VERTICAL AND LEFT	[0853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2524, 0x0021 };
    uint32_t const ces[9] = { 0x0853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_113)
{
    // 2524 003F;	
    // (┤) BOX DRAWINGS LIGHT VERTICAL AND LEFT	[0853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2524, 0x003F };
    uint32_t const ces[9] = { 0x0853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_114)
{
    // 2524 0061;	
    // (┤) BOX DRAWINGS LIGHT VERTICAL AND LEFT	[0853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2524, 0x0061 };
    uint32_t const ces[9] = { 0x0853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_115)
{
    // 2524 0041;	
    // (┤) BOX DRAWINGS LIGHT VERTICAL AND LEFT	[0853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2524, 0x0041 };
    uint32_t const ces[9] = { 0x0853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_116)
{
    // 2524 0062;	
    // (┤) BOX DRAWINGS LIGHT VERTICAL AND LEFT	[0853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2524, 0x0062 };
    uint32_t const ces[9] = { 0x0853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_117)
{
    // 2525 0021;	
    // (┥) BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY	[0854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2525, 0x0021 };
    uint32_t const ces[9] = { 0x0854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_118)
{
    // 2525 003F;	
    // (┥) BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY	[0854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2525, 0x003F };
    uint32_t const ces[9] = { 0x0854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_119)
{
    // 2525 0061;	
    // (┥) BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY	[0854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2525, 0x0061 };
    uint32_t const ces[9] = { 0x0854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_120)
{
    // 2525 0041;	
    // (┥) BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY	[0854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2525, 0x0041 };
    uint32_t const ces[9] = { 0x0854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_121)
{
    // 2525 0062;	
    // (┥) BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY	[0854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2525, 0x0062 };
    uint32_t const ces[9] = { 0x0854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_122)
{
    // 2526 0021;	
    // (┦) BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT	[0855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2526, 0x0021 };
    uint32_t const ces[9] = { 0x0855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_123)
{
    // 2526 003F;	
    // (┦) BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT	[0855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2526, 0x003F };
    uint32_t const ces[9] = { 0x0855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_124)
{
    // 2526 0061;	
    // (┦) BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT	[0855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2526, 0x0061 };
    uint32_t const ces[9] = { 0x0855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_125)
{
    // 2526 0041;	
    // (┦) BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT	[0855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2526, 0x0041 };
    uint32_t const ces[9] = { 0x0855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_126)
{
    // 2526 0062;	
    // (┦) BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT	[0855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2526, 0x0062 };
    uint32_t const ces[9] = { 0x0855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_127)
{
    // 2527 0021;	
    // (┧) BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT	[0856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2527, 0x0021 };
    uint32_t const ces[9] = { 0x0856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_128)
{
    // 2527 003F;	
    // (┧) BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT	[0856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2527, 0x003F };
    uint32_t const ces[9] = { 0x0856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_129)
{
    // 2527 0061;	
    // (┧) BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT	[0856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2527, 0x0061 };
    uint32_t const ces[9] = { 0x0856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_130)
{
    // 2527 0041;	
    // (┧) BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT	[0856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2527, 0x0041 };
    uint32_t const ces[9] = { 0x0856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_131)
{
    // 2527 0062;	
    // (┧) BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT	[0856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2527, 0x0062 };
    uint32_t const ces[9] = { 0x0856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_132)
{
    // 2528 0021;	
    // (┨) BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT	[0857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2528, 0x0021 };
    uint32_t const ces[9] = { 0x0857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_133)
{
    // 2528 003F;	
    // (┨) BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT	[0857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2528, 0x003F };
    uint32_t const ces[9] = { 0x0857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_134)
{
    // 2528 0061;	
    // (┨) BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT	[0857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2528, 0x0061 };
    uint32_t const ces[9] = { 0x0857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_135)
{
    // 2528 0041;	
    // (┨) BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT	[0857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2528, 0x0041 };
    uint32_t const ces[9] = { 0x0857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_136)
{
    // 2528 0062;	
    // (┨) BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT	[0857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2528, 0x0062 };
    uint32_t const ces[9] = { 0x0857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_137)
{
    // 2529 0021;	
    // (┩) BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY	[0858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2529, 0x0021 };
    uint32_t const ces[9] = { 0x0858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_138)
{
    // 2529 003F;	
    // (┩) BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY	[0858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2529, 0x003F };
    uint32_t const ces[9] = { 0x0858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_139)
{
    // 2529 0061;	
    // (┩) BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY	[0858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2529, 0x0061 };
    uint32_t const ces[9] = { 0x0858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_140)
{
    // 2529 0041;	
    // (┩) BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY	[0858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2529, 0x0041 };
    uint32_t const ces[9] = { 0x0858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_141)
{
    // 2529 0062;	
    // (┩) BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY	[0858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2529, 0x0062 };
    uint32_t const ces[9] = { 0x0858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_142)
{
    // 252A 0021;	
    // (┪) BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY	[0859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252A, 0x0021 };
    uint32_t const ces[9] = { 0x0859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_143)
{
    // 252A 003F;	
    // (┪) BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY	[0859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252A, 0x003F };
    uint32_t const ces[9] = { 0x0859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_144)
{
    // 252A 0061;	
    // (┪) BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY	[0859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252A, 0x0061 };
    uint32_t const ces[9] = { 0x0859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_145)
{
    // 252A 0041;	
    // (┪) BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY	[0859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252A, 0x0041 };
    uint32_t const ces[9] = { 0x0859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_146)
{
    // 252A 0062;	
    // (┪) BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY	[0859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252A, 0x0062 };
    uint32_t const ces[9] = { 0x0859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_147)
{
    // 252B 0021;	
    // (┫) BOX DRAWINGS HEAVY VERTICAL AND LEFT	[085A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252B, 0x0021 };
    uint32_t const ces[9] = { 0x085A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_148)
{
    // 252B 003F;	
    // (┫) BOX DRAWINGS HEAVY VERTICAL AND LEFT	[085A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252B, 0x003F };
    uint32_t const ces[9] = { 0x085A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_149)
{
    // 252B 0061;	
    // (┫) BOX DRAWINGS HEAVY VERTICAL AND LEFT	[085A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252B, 0x0061 };
    uint32_t const ces[9] = { 0x085A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_150)
{
    // 252B 0041;	
    // (┫) BOX DRAWINGS HEAVY VERTICAL AND LEFT	[085A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252B, 0x0041 };
    uint32_t const ces[9] = { 0x085A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_151)
{
    // 252B 0062;	
    // (┫) BOX DRAWINGS HEAVY VERTICAL AND LEFT	[085A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252B, 0x0062 };
    uint32_t const ces[9] = { 0x085A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_152)
{
    // 252C 0021;	
    // (┬) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL	[085B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252C, 0x0021 };
    uint32_t const ces[9] = { 0x085B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_153)
{
    // 252C 003F;	
    // (┬) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL	[085B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252C, 0x003F };
    uint32_t const ces[9] = { 0x085B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_154)
{
    // 252C 0061;	
    // (┬) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL	[085B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252C, 0x0061 };
    uint32_t const ces[9] = { 0x085B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_155)
{
    // 252C 0041;	
    // (┬) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL	[085B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252C, 0x0041 };
    uint32_t const ces[9] = { 0x085B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_156)
{
    // 252C 0062;	
    // (┬) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL	[085B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252C, 0x0062 };
    uint32_t const ces[9] = { 0x085B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_157)
{
    // 252D 0021;	
    // (┭) BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT	[085C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252D, 0x0021 };
    uint32_t const ces[9] = { 0x085C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_158)
{
    // 252D 003F;	
    // (┭) BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT	[085C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252D, 0x003F };
    uint32_t const ces[9] = { 0x085C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_159)
{
    // 252D 0061;	
    // (┭) BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT	[085C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252D, 0x0061 };
    uint32_t const ces[9] = { 0x085C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_160)
{
    // 252D 0041;	
    // (┭) BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT	[085C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252D, 0x0041 };
    uint32_t const ces[9] = { 0x085C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_161)
{
    // 252D 0062;	
    // (┭) BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT	[085C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252D, 0x0062 };
    uint32_t const ces[9] = { 0x085C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_162)
{
    // 252E 0021;	
    // (┮) BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT	[085D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252E, 0x0021 };
    uint32_t const ces[9] = { 0x085D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_163)
{
    // 252E 003F;	
    // (┮) BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT	[085D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252E, 0x003F };
    uint32_t const ces[9] = { 0x085D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_164)
{
    // 252E 0061;	
    // (┮) BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT	[085D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252E, 0x0061 };
    uint32_t const ces[9] = { 0x085D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_165)
{
    // 252E 0041;	
    // (┮) BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT	[085D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252E, 0x0041 };
    uint32_t const ces[9] = { 0x085D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_166)
{
    // 252E 0062;	
    // (┮) BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT	[085D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252E, 0x0062 };
    uint32_t const ces[9] = { 0x085D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_167)
{
    // 252F 0021;	
    // (┯) BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY	[085E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252F, 0x0021 };
    uint32_t const ces[9] = { 0x085E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_168)
{
    // 252F 003F;	
    // (┯) BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY	[085E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252F, 0x003F };
    uint32_t const ces[9] = { 0x085E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_169)
{
    // 252F 0061;	
    // (┯) BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY	[085E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252F, 0x0061 };
    uint32_t const ces[9] = { 0x085E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_170)
{
    // 252F 0041;	
    // (┯) BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY	[085E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x252F, 0x0041 };
    uint32_t const ces[9] = { 0x085E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_171)
{
    // 252F 0062;	
    // (┯) BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY	[085E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x252F, 0x0062 };
    uint32_t const ces[9] = { 0x085E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_172)
{
    // 2530 0021;	
    // (┰) BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT	[085F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2530, 0x0021 };
    uint32_t const ces[9] = { 0x085F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_173)
{
    // 2530 003F;	
    // (┰) BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT	[085F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2530, 0x003F };
    uint32_t const ces[9] = { 0x085F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_174)
{
    // 2530 0061;	
    // (┰) BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT	[085F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2530, 0x0061 };
    uint32_t const ces[9] = { 0x085F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_175)
{
    // 2530 0041;	
    // (┰) BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT	[085F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2530, 0x0041 };
    uint32_t const ces[9] = { 0x085F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_176)
{
    // 2530 0062;	
    // (┰) BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT	[085F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2530, 0x0062 };
    uint32_t const ces[9] = { 0x085F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_177)
{
    // 2531 0021;	
    // (┱) BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY	[0860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2531, 0x0021 };
    uint32_t const ces[9] = { 0x0860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_178)
{
    // 2531 003F;	
    // (┱) BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY	[0860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2531, 0x003F };
    uint32_t const ces[9] = { 0x0860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_179)
{
    // 2531 0061;	
    // (┱) BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY	[0860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2531, 0x0061 };
    uint32_t const ces[9] = { 0x0860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_180)
{
    // 2531 0041;	
    // (┱) BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY	[0860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2531, 0x0041 };
    uint32_t const ces[9] = { 0x0860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_181)
{
    // 2531 0062;	
    // (┱) BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY	[0860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2531, 0x0062 };
    uint32_t const ces[9] = { 0x0860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_182)
{
    // 2532 0021;	
    // (┲) BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY	[0861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2532, 0x0021 };
    uint32_t const ces[9] = { 0x0861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_183)
{
    // 2532 003F;	
    // (┲) BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY	[0861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2532, 0x003F };
    uint32_t const ces[9] = { 0x0861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_184)
{
    // 2532 0061;	
    // (┲) BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY	[0861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2532, 0x0061 };
    uint32_t const ces[9] = { 0x0861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_185)
{
    // 2532 0041;	
    // (┲) BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY	[0861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2532, 0x0041 };
    uint32_t const ces[9] = { 0x0861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_186)
{
    // 2532 0062;	
    // (┲) BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY	[0861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2532, 0x0062 };
    uint32_t const ces[9] = { 0x0861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_187)
{
    // 2533 0021;	
    // (┳) BOX DRAWINGS HEAVY DOWN AND HORIZONTAL	[0862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2533, 0x0021 };
    uint32_t const ces[9] = { 0x0862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_188)
{
    // 2533 003F;	
    // (┳) BOX DRAWINGS HEAVY DOWN AND HORIZONTAL	[0862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2533, 0x003F };
    uint32_t const ces[9] = { 0x0862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_189)
{
    // 2533 0061;	
    // (┳) BOX DRAWINGS HEAVY DOWN AND HORIZONTAL	[0862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2533, 0x0061 };
    uint32_t const ces[9] = { 0x0862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_190)
{
    // 2533 0041;	
    // (┳) BOX DRAWINGS HEAVY DOWN AND HORIZONTAL	[0862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2533, 0x0041 };
    uint32_t const ces[9] = { 0x0862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_191)
{
    // 2533 0062;	
    // (┳) BOX DRAWINGS HEAVY DOWN AND HORIZONTAL	[0862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2533, 0x0062 };
    uint32_t const ces[9] = { 0x0862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_192)
{
    // 2534 0021;	
    // (┴) BOX DRAWINGS LIGHT UP AND HORIZONTAL	[0863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2534, 0x0021 };
    uint32_t const ces[9] = { 0x0863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_193)
{
    // 2534 003F;	
    // (┴) BOX DRAWINGS LIGHT UP AND HORIZONTAL	[0863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2534, 0x003F };
    uint32_t const ces[9] = { 0x0863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_194)
{
    // 2534 0061;	
    // (┴) BOX DRAWINGS LIGHT UP AND HORIZONTAL	[0863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2534, 0x0061 };
    uint32_t const ces[9] = { 0x0863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_195)
{
    // 2534 0041;	
    // (┴) BOX DRAWINGS LIGHT UP AND HORIZONTAL	[0863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2534, 0x0041 };
    uint32_t const ces[9] = { 0x0863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_196)
{
    // 2534 0062;	
    // (┴) BOX DRAWINGS LIGHT UP AND HORIZONTAL	[0863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2534, 0x0062 };
    uint32_t const ces[9] = { 0x0863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_197)
{
    // 2535 0021;	
    // (┵) BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT	[0864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2535, 0x0021 };
    uint32_t const ces[9] = { 0x0864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_198)
{
    // 2535 003F;	
    // (┵) BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT	[0864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2535, 0x003F };
    uint32_t const ces[9] = { 0x0864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_199)
{
    // 2535 0061;	
    // (┵) BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT	[0864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2535, 0x0061 };
    uint32_t const ces[9] = { 0x0864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_200)
{
    // 2535 0041;	
    // (┵) BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT	[0864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2535, 0x0041 };
    uint32_t const ces[9] = { 0x0864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_201)
{
    // 2535 0062;	
    // (┵) BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT	[0864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2535, 0x0062 };
    uint32_t const ces[9] = { 0x0864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_202)
{
    // 2536 0021;	
    // (┶) BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT	[0865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2536, 0x0021 };
    uint32_t const ces[9] = { 0x0865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_203)
{
    // 2536 003F;	
    // (┶) BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT	[0865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2536, 0x003F };
    uint32_t const ces[9] = { 0x0865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_204)
{
    // 2536 0061;	
    // (┶) BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT	[0865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2536, 0x0061 };
    uint32_t const ces[9] = { 0x0865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_205)
{
    // 2536 0041;	
    // (┶) BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT	[0865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2536, 0x0041 };
    uint32_t const ces[9] = { 0x0865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_206)
{
    // 2536 0062;	
    // (┶) BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT	[0865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2536, 0x0062 };
    uint32_t const ces[9] = { 0x0865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_207)
{
    // 2537 0021;	
    // (┷) BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY	[0866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2537, 0x0021 };
    uint32_t const ces[9] = { 0x0866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_208)
{
    // 2537 003F;	
    // (┷) BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY	[0866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2537, 0x003F };
    uint32_t const ces[9] = { 0x0866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_209)
{
    // 2537 0061;	
    // (┷) BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY	[0866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2537, 0x0061 };
    uint32_t const ces[9] = { 0x0866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_210)
{
    // 2537 0041;	
    // (┷) BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY	[0866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2537, 0x0041 };
    uint32_t const ces[9] = { 0x0866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_211)
{
    // 2537 0062;	
    // (┷) BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY	[0866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2537, 0x0062 };
    uint32_t const ces[9] = { 0x0866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_212)
{
    // 2538 0021;	
    // (┸) BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT	[0867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2538, 0x0021 };
    uint32_t const ces[9] = { 0x0867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_213)
{
    // 2538 003F;	
    // (┸) BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT	[0867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2538, 0x003F };
    uint32_t const ces[9] = { 0x0867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_214)
{
    // 2538 0061;	
    // (┸) BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT	[0867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2538, 0x0061 };
    uint32_t const ces[9] = { 0x0867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_215)
{
    // 2538 0041;	
    // (┸) BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT	[0867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2538, 0x0041 };
    uint32_t const ces[9] = { 0x0867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_216)
{
    // 2538 0062;	
    // (┸) BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT	[0867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2538, 0x0062 };
    uint32_t const ces[9] = { 0x0867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_217)
{
    // 2539 0021;	
    // (┹) BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY	[0868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2539, 0x0021 };
    uint32_t const ces[9] = { 0x0868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_218)
{
    // 2539 003F;	
    // (┹) BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY	[0868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2539, 0x003F };
    uint32_t const ces[9] = { 0x0868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_219)
{
    // 2539 0061;	
    // (┹) BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY	[0868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2539, 0x0061 };
    uint32_t const ces[9] = { 0x0868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_220)
{
    // 2539 0041;	
    // (┹) BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY	[0868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2539, 0x0041 };
    uint32_t const ces[9] = { 0x0868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_221)
{
    // 2539 0062;	
    // (┹) BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY	[0868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2539, 0x0062 };
    uint32_t const ces[9] = { 0x0868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_222)
{
    // 253A 0021;	
    // (┺) BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY	[0869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253A, 0x0021 };
    uint32_t const ces[9] = { 0x0869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_223)
{
    // 253A 003F;	
    // (┺) BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY	[0869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253A, 0x003F };
    uint32_t const ces[9] = { 0x0869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_224)
{
    // 253A 0061;	
    // (┺) BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY	[0869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253A, 0x0061 };
    uint32_t const ces[9] = { 0x0869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_225)
{
    // 253A 0041;	
    // (┺) BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY	[0869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253A, 0x0041 };
    uint32_t const ces[9] = { 0x0869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_226)
{
    // 253A 0062;	
    // (┺) BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY	[0869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253A, 0x0062 };
    uint32_t const ces[9] = { 0x0869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_227)
{
    // 253B 0021;	
    // (┻) BOX DRAWINGS HEAVY UP AND HORIZONTAL	[086A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253B, 0x0021 };
    uint32_t const ces[9] = { 0x086A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_228)
{
    // 253B 003F;	
    // (┻) BOX DRAWINGS HEAVY UP AND HORIZONTAL	[086A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253B, 0x003F };
    uint32_t const ces[9] = { 0x086A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_229)
{
    // 253B 0061;	
    // (┻) BOX DRAWINGS HEAVY UP AND HORIZONTAL	[086A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253B, 0x0061 };
    uint32_t const ces[9] = { 0x086A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_230)
{
    // 253B 0041;	
    // (┻) BOX DRAWINGS HEAVY UP AND HORIZONTAL	[086A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253B, 0x0041 };
    uint32_t const ces[9] = { 0x086A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_231)
{
    // 253B 0062;	
    // (┻) BOX DRAWINGS HEAVY UP AND HORIZONTAL	[086A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253B, 0x0062 };
    uint32_t const ces[9] = { 0x086A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_232)
{
    // 253C 0021;	
    // (┼) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL	[086B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253C, 0x0021 };
    uint32_t const ces[9] = { 0x086B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_233)
{
    // 253C 003F;	
    // (┼) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL	[086B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253C, 0x003F };
    uint32_t const ces[9] = { 0x086B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_234)
{
    // 253C 0061;	
    // (┼) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL	[086B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253C, 0x0061 };
    uint32_t const ces[9] = { 0x086B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_235)
{
    // 253C 0041;	
    // (┼) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL	[086B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253C, 0x0041 };
    uint32_t const ces[9] = { 0x086B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_236)
{
    // 253C 0062;	
    // (┼) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL	[086B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253C, 0x0062 };
    uint32_t const ces[9] = { 0x086B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_237)
{
    // 253D 0021;	
    // (┽) BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT	[086C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253D, 0x0021 };
    uint32_t const ces[9] = { 0x086C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_238)
{
    // 253D 003F;	
    // (┽) BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT	[086C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253D, 0x003F };
    uint32_t const ces[9] = { 0x086C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_239)
{
    // 253D 0061;	
    // (┽) BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT	[086C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253D, 0x0061 };
    uint32_t const ces[9] = { 0x086C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_240)
{
    // 253D 0041;	
    // (┽) BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT	[086C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253D, 0x0041 };
    uint32_t const ces[9] = { 0x086C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_241)
{
    // 253D 0062;	
    // (┽) BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT	[086C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253D, 0x0062 };
    uint32_t const ces[9] = { 0x086C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_242)
{
    // 253E 0021;	
    // (┾) BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT	[086D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253E, 0x0021 };
    uint32_t const ces[9] = { 0x086D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_243)
{
    // 253E 003F;	
    // (┾) BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT	[086D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253E, 0x003F };
    uint32_t const ces[9] = { 0x086D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_244)
{
    // 253E 0061;	
    // (┾) BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT	[086D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253E, 0x0061 };
    uint32_t const ces[9] = { 0x086D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_245)
{
    // 253E 0041;	
    // (┾) BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT	[086D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253E, 0x0041 };
    uint32_t const ces[9] = { 0x086D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_246)
{
    // 253E 0062;	
    // (┾) BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT	[086D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253E, 0x0062 };
    uint32_t const ces[9] = { 0x086D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_247)
{
    // 253F 0021;	
    // (┿) BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY	[086E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253F, 0x0021 };
    uint32_t const ces[9] = { 0x086E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_248)
{
    // 253F 003F;	
    // (┿) BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY	[086E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253F, 0x003F };
    uint32_t const ces[9] = { 0x086E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_249)
{
    // 253F 0061;	
    // (┿) BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY	[086E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253F, 0x0061 };
    uint32_t const ces[9] = { 0x086E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_250)
{
    // 253F 0041;	
    // (┿) BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY	[086E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x253F, 0x0041 };
    uint32_t const ces[9] = { 0x086E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_251)
{
    // 253F 0062;	
    // (┿) BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY	[086E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x253F, 0x0062 };
    uint32_t const ces[9] = { 0x086E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_252)
{
    // 2540 0021;	
    // (╀) BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT	[086F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2540, 0x0021 };
    uint32_t const ces[9] = { 0x086F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_253)
{
    // 2540 003F;	
    // (╀) BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT	[086F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2540, 0x003F };
    uint32_t const ces[9] = { 0x086F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_254)
{
    // 2540 0061;	
    // (╀) BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT	[086F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2540, 0x0061 };
    uint32_t const ces[9] = { 0x086F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_255)
{
    // 2540 0041;	
    // (╀) BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT	[086F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2540, 0x0041 };
    uint32_t const ces[9] = { 0x086F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_256)
{
    // 2540 0062;	
    // (╀) BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT	[086F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2540, 0x0062 };
    uint32_t const ces[9] = { 0x086F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_257)
{
    // 2541 0021;	
    // (╁) BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT	[0870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2541, 0x0021 };
    uint32_t const ces[9] = { 0x0870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_258)
{
    // 2541 003F;	
    // (╁) BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT	[0870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2541, 0x003F };
    uint32_t const ces[9] = { 0x0870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_259)
{
    // 2541 0061;	
    // (╁) BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT	[0870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2541, 0x0061 };
    uint32_t const ces[9] = { 0x0870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_260)
{
    // 2541 0041;	
    // (╁) BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT	[0870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2541, 0x0041 };
    uint32_t const ces[9] = { 0x0870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_261)
{
    // 2541 0062;	
    // (╁) BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT	[0870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2541, 0x0062 };
    uint32_t const ces[9] = { 0x0870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_262)
{
    // 2542 0021;	
    // (╂) BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT	[0871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2542, 0x0021 };
    uint32_t const ces[9] = { 0x0871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_263)
{
    // 2542 003F;	
    // (╂) BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT	[0871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2542, 0x003F };
    uint32_t const ces[9] = { 0x0871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_264)
{
    // 2542 0061;	
    // (╂) BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT	[0871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2542, 0x0061 };
    uint32_t const ces[9] = { 0x0871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_265)
{
    // 2542 0041;	
    // (╂) BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT	[0871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2542, 0x0041 };
    uint32_t const ces[9] = { 0x0871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_266)
{
    // 2542 0062;	
    // (╂) BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT	[0871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2542, 0x0062 };
    uint32_t const ces[9] = { 0x0871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_267)
{
    // 2543 0021;	
    // (╃) BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT	[0872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2543, 0x0021 };
    uint32_t const ces[9] = { 0x0872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_268)
{
    // 2543 003F;	
    // (╃) BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT	[0872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2543, 0x003F };
    uint32_t const ces[9] = { 0x0872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_269)
{
    // 2543 0061;	
    // (╃) BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT	[0872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2543, 0x0061 };
    uint32_t const ces[9] = { 0x0872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_270)
{
    // 2543 0041;	
    // (╃) BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT	[0872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2543, 0x0041 };
    uint32_t const ces[9] = { 0x0872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_271)
{
    // 2543 0062;	
    // (╃) BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT	[0872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2543, 0x0062 };
    uint32_t const ces[9] = { 0x0872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_272)
{
    // 2544 0021;	
    // (╄) BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT	[0873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2544, 0x0021 };
    uint32_t const ces[9] = { 0x0873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_273)
{
    // 2544 003F;	
    // (╄) BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT	[0873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2544, 0x003F };
    uint32_t const ces[9] = { 0x0873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_274)
{
    // 2544 0061;	
    // (╄) BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT	[0873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2544, 0x0061 };
    uint32_t const ces[9] = { 0x0873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_275)
{
    // 2544 0041;	
    // (╄) BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT	[0873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2544, 0x0041 };
    uint32_t const ces[9] = { 0x0873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_276)
{
    // 2544 0062;	
    // (╄) BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT	[0873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2544, 0x0062 };
    uint32_t const ces[9] = { 0x0873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_277)
{
    // 2545 0021;	
    // (╅) BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT	[0874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2545, 0x0021 };
    uint32_t const ces[9] = { 0x0874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_278)
{
    // 2545 003F;	
    // (╅) BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT	[0874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2545, 0x003F };
    uint32_t const ces[9] = { 0x0874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_279)
{
    // 2545 0061;	
    // (╅) BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT	[0874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2545, 0x0061 };
    uint32_t const ces[9] = { 0x0874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_280)
{
    // 2545 0041;	
    // (╅) BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT	[0874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2545, 0x0041 };
    uint32_t const ces[9] = { 0x0874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_281)
{
    // 2545 0062;	
    // (╅) BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT	[0874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2545, 0x0062 };
    uint32_t const ces[9] = { 0x0874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_282)
{
    // 2546 0021;	
    // (╆) BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT	[0875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2546, 0x0021 };
    uint32_t const ces[9] = { 0x0875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_283)
{
    // 2546 003F;	
    // (╆) BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT	[0875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2546, 0x003F };
    uint32_t const ces[9] = { 0x0875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_284)
{
    // 2546 0061;	
    // (╆) BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT	[0875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2546, 0x0061 };
    uint32_t const ces[9] = { 0x0875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_285)
{
    // 2546 0041;	
    // (╆) BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT	[0875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2546, 0x0041 };
    uint32_t const ces[9] = { 0x0875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_286)
{
    // 2546 0062;	
    // (╆) BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT	[0875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2546, 0x0062 };
    uint32_t const ces[9] = { 0x0875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_287)
{
    // 2547 0021;	
    // (╇) BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY	[0876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2547, 0x0021 };
    uint32_t const ces[9] = { 0x0876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_288)
{
    // 2547 003F;	
    // (╇) BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY	[0876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2547, 0x003F };
    uint32_t const ces[9] = { 0x0876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_289)
{
    // 2547 0061;	
    // (╇) BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY	[0876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2547, 0x0061 };
    uint32_t const ces[9] = { 0x0876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_290)
{
    // 2547 0041;	
    // (╇) BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY	[0876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2547, 0x0041 };
    uint32_t const ces[9] = { 0x0876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_291)
{
    // 2547 0062;	
    // (╇) BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY	[0876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2547, 0x0062 };
    uint32_t const ces[9] = { 0x0876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_292)
{
    // 2548 0021;	
    // (╈) BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY	[0877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2548, 0x0021 };
    uint32_t const ces[9] = { 0x0877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_293)
{
    // 2548 003F;	
    // (╈) BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY	[0877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2548, 0x003F };
    uint32_t const ces[9] = { 0x0877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_294)
{
    // 2548 0061;	
    // (╈) BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY	[0877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2548, 0x0061 };
    uint32_t const ces[9] = { 0x0877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_295)
{
    // 2548 0041;	
    // (╈) BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY	[0877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2548, 0x0041 };
    uint32_t const ces[9] = { 0x0877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_296)
{
    // 2548 0062;	
    // (╈) BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY	[0877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2548, 0x0062 };
    uint32_t const ces[9] = { 0x0877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_297)
{
    // 2549 0021;	
    // (╉) BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY	[0878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2549, 0x0021 };
    uint32_t const ces[9] = { 0x0878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_298)
{
    // 2549 003F;	
    // (╉) BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY	[0878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2549, 0x003F };
    uint32_t const ces[9] = { 0x0878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_299)
{
    // 2549 0061;	
    // (╉) BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY	[0878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2549, 0x0061 };
    uint32_t const ces[9] = { 0x0878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_300)
{
    // 2549 0041;	
    // (╉) BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY	[0878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2549, 0x0041 };
    uint32_t const ces[9] = { 0x0878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_301)
{
    // 2549 0062;	
    // (╉) BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY	[0878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2549, 0x0062 };
    uint32_t const ces[9] = { 0x0878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_302)
{
    // 254A 0021;	
    // (╊) BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY	[0879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254A, 0x0021 };
    uint32_t const ces[9] = { 0x0879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_303)
{
    // 254A 003F;	
    // (╊) BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY	[0879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254A, 0x003F };
    uint32_t const ces[9] = { 0x0879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_304)
{
    // 254A 0061;	
    // (╊) BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY	[0879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254A, 0x0061 };
    uint32_t const ces[9] = { 0x0879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_305)
{
    // 254A 0041;	
    // (╊) BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY	[0879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254A, 0x0041 };
    uint32_t const ces[9] = { 0x0879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_306)
{
    // 254A 0062;	
    // (╊) BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY	[0879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254A, 0x0062 };
    uint32_t const ces[9] = { 0x0879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_307)
{
    // 254B 0021;	
    // (╋) BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL	[087A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254B, 0x0021 };
    uint32_t const ces[9] = { 0x087A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_308)
{
    // 254B 003F;	
    // (╋) BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL	[087A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254B, 0x003F };
    uint32_t const ces[9] = { 0x087A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_309)
{
    // 254B 0061;	
    // (╋) BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL	[087A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254B, 0x0061 };
    uint32_t const ces[9] = { 0x087A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_310)
{
    // 254B 0041;	
    // (╋) BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL	[087A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254B, 0x0041 };
    uint32_t const ces[9] = { 0x087A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_311)
{
    // 254B 0062;	
    // (╋) BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL	[087A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254B, 0x0062 };
    uint32_t const ces[9] = { 0x087A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_312)
{
    // 254C 0021;	
    // (╌) BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL	[087B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254C, 0x0021 };
    uint32_t const ces[9] = { 0x087B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_313)
{
    // 254C 003F;	
    // (╌) BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL	[087B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254C, 0x003F };
    uint32_t const ces[9] = { 0x087B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_314)
{
    // 254C 0061;	
    // (╌) BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL	[087B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254C, 0x0061 };
    uint32_t const ces[9] = { 0x087B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_315)
{
    // 254C 0041;	
    // (╌) BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL	[087B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254C, 0x0041 };
    uint32_t const ces[9] = { 0x087B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_316)
{
    // 254C 0062;	
    // (╌) BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL	[087B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254C, 0x0062 };
    uint32_t const ces[9] = { 0x087B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_317)
{
    // 254D 0021;	
    // (╍) BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL	[087C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254D, 0x0021 };
    uint32_t const ces[9] = { 0x087C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_318)
{
    // 254D 003F;	
    // (╍) BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL	[087C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254D, 0x003F };
    uint32_t const ces[9] = { 0x087C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_319)
{
    // 254D 0061;	
    // (╍) BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL	[087C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254D, 0x0061 };
    uint32_t const ces[9] = { 0x087C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_320)
{
    // 254D 0041;	
    // (╍) BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL	[087C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254D, 0x0041 };
    uint32_t const ces[9] = { 0x087C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_321)
{
    // 254D 0062;	
    // (╍) BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL	[087C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254D, 0x0062 };
    uint32_t const ces[9] = { 0x087C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_322)
{
    // 254E 0021;	
    // (╎) BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL	[087D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254E, 0x0021 };
    uint32_t const ces[9] = { 0x087D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_323)
{
    // 254E 003F;	
    // (╎) BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL	[087D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254E, 0x003F };
    uint32_t const ces[9] = { 0x087D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_324)
{
    // 254E 0061;	
    // (╎) BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL	[087D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254E, 0x0061 };
    uint32_t const ces[9] = { 0x087D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_325)
{
    // 254E 0041;	
    // (╎) BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL	[087D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254E, 0x0041 };
    uint32_t const ces[9] = { 0x087D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_326)
{
    // 254E 0062;	
    // (╎) BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL	[087D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254E, 0x0062 };
    uint32_t const ces[9] = { 0x087D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_327)
{
    // 254F 0021;	
    // (╏) BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL	[087E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254F, 0x0021 };
    uint32_t const ces[9] = { 0x087E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_328)
{
    // 254F 003F;	
    // (╏) BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL	[087E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254F, 0x003F };
    uint32_t const ces[9] = { 0x087E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_329)
{
    // 254F 0061;	
    // (╏) BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL	[087E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254F, 0x0061 };
    uint32_t const ces[9] = { 0x087E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_330)
{
    // 254F 0041;	
    // (╏) BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL	[087E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x254F, 0x0041 };
    uint32_t const ces[9] = { 0x087E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_331)
{
    // 254F 0062;	
    // (╏) BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL	[087E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x254F, 0x0062 };
    uint32_t const ces[9] = { 0x087E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_332)
{
    // 2550 0021;	
    // (═) BOX DRAWINGS DOUBLE HORIZONTAL	[087F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2550, 0x0021 };
    uint32_t const ces[9] = { 0x087F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_333)
{
    // 2550 003F;	
    // (═) BOX DRAWINGS DOUBLE HORIZONTAL	[087F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2550, 0x003F };
    uint32_t const ces[9] = { 0x087F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_334)
{
    // 2550 0061;	
    // (═) BOX DRAWINGS DOUBLE HORIZONTAL	[087F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2550, 0x0061 };
    uint32_t const ces[9] = { 0x087F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_335)
{
    // 2550 0041;	
    // (═) BOX DRAWINGS DOUBLE HORIZONTAL	[087F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2550, 0x0041 };
    uint32_t const ces[9] = { 0x087F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_336)
{
    // 2550 0062;	
    // (═) BOX DRAWINGS DOUBLE HORIZONTAL	[087F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2550, 0x0062 };
    uint32_t const ces[9] = { 0x087F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_337)
{
    // 2551 0021;	
    // (║) BOX DRAWINGS DOUBLE VERTICAL	[0880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2551, 0x0021 };
    uint32_t const ces[9] = { 0x0880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_338)
{
    // 2551 003F;	
    // (║) BOX DRAWINGS DOUBLE VERTICAL	[0880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2551, 0x003F };
    uint32_t const ces[9] = { 0x0880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_339)
{
    // 2551 0061;	
    // (║) BOX DRAWINGS DOUBLE VERTICAL	[0880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2551, 0x0061 };
    uint32_t const ces[9] = { 0x0880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_340)
{
    // 2551 0041;	
    // (║) BOX DRAWINGS DOUBLE VERTICAL	[0880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2551, 0x0041 };
    uint32_t const ces[9] = { 0x0880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_341)
{
    // 2551 0062;	
    // (║) BOX DRAWINGS DOUBLE VERTICAL	[0880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2551, 0x0062 };
    uint32_t const ces[9] = { 0x0880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_342)
{
    // 2552 0021;	
    // (╒) BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE	[0881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2552, 0x0021 };
    uint32_t const ces[9] = { 0x0881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_343)
{
    // 2552 003F;	
    // (╒) BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE	[0881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2552, 0x003F };
    uint32_t const ces[9] = { 0x0881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_344)
{
    // 2552 0061;	
    // (╒) BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE	[0881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2552, 0x0061 };
    uint32_t const ces[9] = { 0x0881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_345)
{
    // 2552 0041;	
    // (╒) BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE	[0881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2552, 0x0041 };
    uint32_t const ces[9] = { 0x0881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_346)
{
    // 2552 0062;	
    // (╒) BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE	[0881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2552, 0x0062 };
    uint32_t const ces[9] = { 0x0881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_347)
{
    // 2553 0021;	
    // (╓) BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE	[0882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2553, 0x0021 };
    uint32_t const ces[9] = { 0x0882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_348)
{
    // 2553 003F;	
    // (╓) BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE	[0882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2553, 0x003F };
    uint32_t const ces[9] = { 0x0882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_349)
{
    // 2553 0061;	
    // (╓) BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE	[0882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2553, 0x0061 };
    uint32_t const ces[9] = { 0x0882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_350)
{
    // 2553 0041;	
    // (╓) BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE	[0882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2553, 0x0041 };
    uint32_t const ces[9] = { 0x0882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_351)
{
    // 2553 0062;	
    // (╓) BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE	[0882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2553, 0x0062 };
    uint32_t const ces[9] = { 0x0882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_352)
{
    // 2554 0021;	
    // (╔) BOX DRAWINGS DOUBLE DOWN AND RIGHT	[0883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2554, 0x0021 };
    uint32_t const ces[9] = { 0x0883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_353)
{
    // 2554 003F;	
    // (╔) BOX DRAWINGS DOUBLE DOWN AND RIGHT	[0883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2554, 0x003F };
    uint32_t const ces[9] = { 0x0883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_354)
{
    // 2554 0061;	
    // (╔) BOX DRAWINGS DOUBLE DOWN AND RIGHT	[0883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2554, 0x0061 };
    uint32_t const ces[9] = { 0x0883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_355)
{
    // 2554 0041;	
    // (╔) BOX DRAWINGS DOUBLE DOWN AND RIGHT	[0883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2554, 0x0041 };
    uint32_t const ces[9] = { 0x0883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_356)
{
    // 2554 0062;	
    // (╔) BOX DRAWINGS DOUBLE DOWN AND RIGHT	[0883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2554, 0x0062 };
    uint32_t const ces[9] = { 0x0883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_357)
{
    // 2555 0021;	
    // (╕) BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE	[0884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2555, 0x0021 };
    uint32_t const ces[9] = { 0x0884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_358)
{
    // 2555 003F;	
    // (╕) BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE	[0884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2555, 0x003F };
    uint32_t const ces[9] = { 0x0884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_359)
{
    // 2555 0061;	
    // (╕) BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE	[0884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2555, 0x0061 };
    uint32_t const ces[9] = { 0x0884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_360)
{
    // 2555 0041;	
    // (╕) BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE	[0884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2555, 0x0041 };
    uint32_t const ces[9] = { 0x0884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_361)
{
    // 2555 0062;	
    // (╕) BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE	[0884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2555, 0x0062 };
    uint32_t const ces[9] = { 0x0884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_362)
{
    // 2556 0021;	
    // (╖) BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE	[0885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2556, 0x0021 };
    uint32_t const ces[9] = { 0x0885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_363)
{
    // 2556 003F;	
    // (╖) BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE	[0885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2556, 0x003F };
    uint32_t const ces[9] = { 0x0885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_364)
{
    // 2556 0061;	
    // (╖) BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE	[0885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2556, 0x0061 };
    uint32_t const ces[9] = { 0x0885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_365)
{
    // 2556 0041;	
    // (╖) BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE	[0885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2556, 0x0041 };
    uint32_t const ces[9] = { 0x0885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_366)
{
    // 2556 0062;	
    // (╖) BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE	[0885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2556, 0x0062 };
    uint32_t const ces[9] = { 0x0885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_367)
{
    // 2557 0021;	
    // (╗) BOX DRAWINGS DOUBLE DOWN AND LEFT	[0886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2557, 0x0021 };
    uint32_t const ces[9] = { 0x0886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_368)
{
    // 2557 003F;	
    // (╗) BOX DRAWINGS DOUBLE DOWN AND LEFT	[0886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2557, 0x003F };
    uint32_t const ces[9] = { 0x0886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_369)
{
    // 2557 0061;	
    // (╗) BOX DRAWINGS DOUBLE DOWN AND LEFT	[0886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2557, 0x0061 };
    uint32_t const ces[9] = { 0x0886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_370)
{
    // 2557 0041;	
    // (╗) BOX DRAWINGS DOUBLE DOWN AND LEFT	[0886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2557, 0x0041 };
    uint32_t const ces[9] = { 0x0886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_371)
{
    // 2557 0062;	
    // (╗) BOX DRAWINGS DOUBLE DOWN AND LEFT	[0886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2557, 0x0062 };
    uint32_t const ces[9] = { 0x0886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_372)
{
    // 2558 0021;	
    // (╘) BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE	[0887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2558, 0x0021 };
    uint32_t const ces[9] = { 0x0887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_373)
{
    // 2558 003F;	
    // (╘) BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE	[0887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2558, 0x003F };
    uint32_t const ces[9] = { 0x0887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_374)
{
    // 2558 0061;	
    // (╘) BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE	[0887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2558, 0x0061 };
    uint32_t const ces[9] = { 0x0887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_375)
{
    // 2558 0041;	
    // (╘) BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE	[0887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2558, 0x0041 };
    uint32_t const ces[9] = { 0x0887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_376)
{
    // 2558 0062;	
    // (╘) BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE	[0887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2558, 0x0062 };
    uint32_t const ces[9] = { 0x0887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_377)
{
    // 2559 0021;	
    // (╙) BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE	[0888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2559, 0x0021 };
    uint32_t const ces[9] = { 0x0888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_378)
{
    // 2559 003F;	
    // (╙) BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE	[0888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2559, 0x003F };
    uint32_t const ces[9] = { 0x0888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_379)
{
    // 2559 0061;	
    // (╙) BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE	[0888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2559, 0x0061 };
    uint32_t const ces[9] = { 0x0888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_380)
{
    // 2559 0041;	
    // (╙) BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE	[0888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2559, 0x0041 };
    uint32_t const ces[9] = { 0x0888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_381)
{
    // 2559 0062;	
    // (╙) BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE	[0888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2559, 0x0062 };
    uint32_t const ces[9] = { 0x0888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_382)
{
    // 255A 0021;	
    // (╚) BOX DRAWINGS DOUBLE UP AND RIGHT	[0889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255A, 0x0021 };
    uint32_t const ces[9] = { 0x0889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_383)
{
    // 255A 003F;	
    // (╚) BOX DRAWINGS DOUBLE UP AND RIGHT	[0889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255A, 0x003F };
    uint32_t const ces[9] = { 0x0889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_384)
{
    // 255A 0061;	
    // (╚) BOX DRAWINGS DOUBLE UP AND RIGHT	[0889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255A, 0x0061 };
    uint32_t const ces[9] = { 0x0889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_385)
{
    // 255A 0041;	
    // (╚) BOX DRAWINGS DOUBLE UP AND RIGHT	[0889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255A, 0x0041 };
    uint32_t const ces[9] = { 0x0889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_386)
{
    // 255A 0062;	
    // (╚) BOX DRAWINGS DOUBLE UP AND RIGHT	[0889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255A, 0x0062 };
    uint32_t const ces[9] = { 0x0889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_387)
{
    // 255B 0021;	
    // (╛) BOX DRAWINGS UP SINGLE AND LEFT DOUBLE	[088A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255B, 0x0021 };
    uint32_t const ces[9] = { 0x088A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_388)
{
    // 255B 003F;	
    // (╛) BOX DRAWINGS UP SINGLE AND LEFT DOUBLE	[088A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255B, 0x003F };
    uint32_t const ces[9] = { 0x088A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_389)
{
    // 255B 0061;	
    // (╛) BOX DRAWINGS UP SINGLE AND LEFT DOUBLE	[088A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255B, 0x0061 };
    uint32_t const ces[9] = { 0x088A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_390)
{
    // 255B 0041;	
    // (╛) BOX DRAWINGS UP SINGLE AND LEFT DOUBLE	[088A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255B, 0x0041 };
    uint32_t const ces[9] = { 0x088A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_391)
{
    // 255B 0062;	
    // (╛) BOX DRAWINGS UP SINGLE AND LEFT DOUBLE	[088A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255B, 0x0062 };
    uint32_t const ces[9] = { 0x088A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_392)
{
    // 255C 0021;	
    // (╜) BOX DRAWINGS UP DOUBLE AND LEFT SINGLE	[088B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255C, 0x0021 };
    uint32_t const ces[9] = { 0x088B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_393)
{
    // 255C 003F;	
    // (╜) BOX DRAWINGS UP DOUBLE AND LEFT SINGLE	[088B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255C, 0x003F };
    uint32_t const ces[9] = { 0x088B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_394)
{
    // 255C 0061;	
    // (╜) BOX DRAWINGS UP DOUBLE AND LEFT SINGLE	[088B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255C, 0x0061 };
    uint32_t const ces[9] = { 0x088B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_395)
{
    // 255C 0041;	
    // (╜) BOX DRAWINGS UP DOUBLE AND LEFT SINGLE	[088B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255C, 0x0041 };
    uint32_t const ces[9] = { 0x088B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_396)
{
    // 255C 0062;	
    // (╜) BOX DRAWINGS UP DOUBLE AND LEFT SINGLE	[088B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255C, 0x0062 };
    uint32_t const ces[9] = { 0x088B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_397)
{
    // 255D 0021;	
    // (╝) BOX DRAWINGS DOUBLE UP AND LEFT	[088C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255D, 0x0021 };
    uint32_t const ces[9] = { 0x088C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_398)
{
    // 255D 003F;	
    // (╝) BOX DRAWINGS DOUBLE UP AND LEFT	[088C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255D, 0x003F };
    uint32_t const ces[9] = { 0x088C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_399)
{
    // 255D 0061;	
    // (╝) BOX DRAWINGS DOUBLE UP AND LEFT	[088C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255D, 0x0061 };
    uint32_t const ces[9] = { 0x088C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_400)
{
    // 255D 0041;	
    // (╝) BOX DRAWINGS DOUBLE UP AND LEFT	[088C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255D, 0x0041 };
    uint32_t const ces[9] = { 0x088C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_401)
{
    // 255D 0062;	
    // (╝) BOX DRAWINGS DOUBLE UP AND LEFT	[088C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255D, 0x0062 };
    uint32_t const ces[9] = { 0x088C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_402)
{
    // 255E 0021;	
    // (╞) BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE	[088D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255E, 0x0021 };
    uint32_t const ces[9] = { 0x088D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_403)
{
    // 255E 003F;	
    // (╞) BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE	[088D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255E, 0x003F };
    uint32_t const ces[9] = { 0x088D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_404)
{
    // 255E 0061;	
    // (╞) BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE	[088D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255E, 0x0061 };
    uint32_t const ces[9] = { 0x088D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_405)
{
    // 255E 0041;	
    // (╞) BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE	[088D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255E, 0x0041 };
    uint32_t const ces[9] = { 0x088D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_406)
{
    // 255E 0062;	
    // (╞) BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE	[088D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255E, 0x0062 };
    uint32_t const ces[9] = { 0x088D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_407)
{
    // 255F 0021;	
    // (╟) BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE	[088E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255F, 0x0021 };
    uint32_t const ces[9] = { 0x088E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_408)
{
    // 255F 003F;	
    // (╟) BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE	[088E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255F, 0x003F };
    uint32_t const ces[9] = { 0x088E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_409)
{
    // 255F 0061;	
    // (╟) BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE	[088E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255F, 0x0061 };
    uint32_t const ces[9] = { 0x088E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_410)
{
    // 255F 0041;	
    // (╟) BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE	[088E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x255F, 0x0041 };
    uint32_t const ces[9] = { 0x088E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_411)
{
    // 255F 0062;	
    // (╟) BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE	[088E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x255F, 0x0062 };
    uint32_t const ces[9] = { 0x088E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_412)
{
    // 2560 0021;	
    // (╠) BOX DRAWINGS DOUBLE VERTICAL AND RIGHT	[088F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2560, 0x0021 };
    uint32_t const ces[9] = { 0x088F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_413)
{
    // 2560 003F;	
    // (╠) BOX DRAWINGS DOUBLE VERTICAL AND RIGHT	[088F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2560, 0x003F };
    uint32_t const ces[9] = { 0x088F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_414)
{
    // 2560 0061;	
    // (╠) BOX DRAWINGS DOUBLE VERTICAL AND RIGHT	[088F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2560, 0x0061 };
    uint32_t const ces[9] = { 0x088F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_415)
{
    // 2560 0041;	
    // (╠) BOX DRAWINGS DOUBLE VERTICAL AND RIGHT	[088F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2560, 0x0041 };
    uint32_t const ces[9] = { 0x088F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_416)
{
    // 2560 0062;	
    // (╠) BOX DRAWINGS DOUBLE VERTICAL AND RIGHT	[088F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2560, 0x0062 };
    uint32_t const ces[9] = { 0x088F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_417)
{
    // 2561 0021;	
    // (╡) BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE	[0890 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2561, 0x0021 };
    uint32_t const ces[9] = { 0x0890, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_418)
{
    // 2561 003F;	
    // (╡) BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE	[0890 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2561, 0x003F };
    uint32_t const ces[9] = { 0x0890, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_419)
{
    // 2561 0061;	
    // (╡) BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE	[0890 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2561, 0x0061 };
    uint32_t const ces[9] = { 0x0890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_420)
{
    // 2561 0041;	
    // (╡) BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE	[0890 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2561, 0x0041 };
    uint32_t const ces[9] = { 0x0890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_421)
{
    // 2561 0062;	
    // (╡) BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE	[0890 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2561, 0x0062 };
    uint32_t const ces[9] = { 0x0890, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_422)
{
    // 2562 0021;	
    // (╢) BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE	[0891 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2562, 0x0021 };
    uint32_t const ces[9] = { 0x0891, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_423)
{
    // 2562 003F;	
    // (╢) BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE	[0891 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2562, 0x003F };
    uint32_t const ces[9] = { 0x0891, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_424)
{
    // 2562 0061;	
    // (╢) BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE	[0891 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2562, 0x0061 };
    uint32_t const ces[9] = { 0x0891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_425)
{
    // 2562 0041;	
    // (╢) BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE	[0891 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2562, 0x0041 };
    uint32_t const ces[9] = { 0x0891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_426)
{
    // 2562 0062;	
    // (╢) BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE	[0891 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2562, 0x0062 };
    uint32_t const ces[9] = { 0x0891, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_427)
{
    // 2563 0021;	
    // (╣) BOX DRAWINGS DOUBLE VERTICAL AND LEFT	[0892 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2563, 0x0021 };
    uint32_t const ces[9] = { 0x0892, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_428)
{
    // 2563 003F;	
    // (╣) BOX DRAWINGS DOUBLE VERTICAL AND LEFT	[0892 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2563, 0x003F };
    uint32_t const ces[9] = { 0x0892, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_429)
{
    // 2563 0061;	
    // (╣) BOX DRAWINGS DOUBLE VERTICAL AND LEFT	[0892 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2563, 0x0061 };
    uint32_t const ces[9] = { 0x0892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_430)
{
    // 2563 0041;	
    // (╣) BOX DRAWINGS DOUBLE VERTICAL AND LEFT	[0892 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2563, 0x0041 };
    uint32_t const ces[9] = { 0x0892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_431)
{
    // 2563 0062;	
    // (╣) BOX DRAWINGS DOUBLE VERTICAL AND LEFT	[0892 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2563, 0x0062 };
    uint32_t const ces[9] = { 0x0892, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_432)
{
    // 2564 0021;	
    // (╤) BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE	[0893 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2564, 0x0021 };
    uint32_t const ces[9] = { 0x0893, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_433)
{
    // 2564 003F;	
    // (╤) BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE	[0893 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2564, 0x003F };
    uint32_t const ces[9] = { 0x0893, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_434)
{
    // 2564 0061;	
    // (╤) BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE	[0893 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2564, 0x0061 };
    uint32_t const ces[9] = { 0x0893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_435)
{
    // 2564 0041;	
    // (╤) BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE	[0893 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2564, 0x0041 };
    uint32_t const ces[9] = { 0x0893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_436)
{
    // 2564 0062;	
    // (╤) BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE	[0893 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2564, 0x0062 };
    uint32_t const ces[9] = { 0x0893, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_437)
{
    // 2565 0021;	
    // (╥) BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE	[0894 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2565, 0x0021 };
    uint32_t const ces[9] = { 0x0894, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_438)
{
    // 2565 003F;	
    // (╥) BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE	[0894 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2565, 0x003F };
    uint32_t const ces[9] = { 0x0894, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_439)
{
    // 2565 0061;	
    // (╥) BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE	[0894 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2565, 0x0061 };
    uint32_t const ces[9] = { 0x0894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_440)
{
    // 2565 0041;	
    // (╥) BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE	[0894 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2565, 0x0041 };
    uint32_t const ces[9] = { 0x0894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_441)
{
    // 2565 0062;	
    // (╥) BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE	[0894 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2565, 0x0062 };
    uint32_t const ces[9] = { 0x0894, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_442)
{
    // 2566 0021;	
    // (╦) BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL	[0895 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2566, 0x0021 };
    uint32_t const ces[9] = { 0x0895, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_443)
{
    // 2566 003F;	
    // (╦) BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL	[0895 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2566, 0x003F };
    uint32_t const ces[9] = { 0x0895, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_444)
{
    // 2566 0061;	
    // (╦) BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL	[0895 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2566, 0x0061 };
    uint32_t const ces[9] = { 0x0895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_445)
{
    // 2566 0041;	
    // (╦) BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL	[0895 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2566, 0x0041 };
    uint32_t const ces[9] = { 0x0895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_446)
{
    // 2566 0062;	
    // (╦) BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL	[0895 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2566, 0x0062 };
    uint32_t const ces[9] = { 0x0895, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_447)
{
    // 2567 0021;	
    // (╧) BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE	[0896 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2567, 0x0021 };
    uint32_t const ces[9] = { 0x0896, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_448)
{
    // 2567 003F;	
    // (╧) BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE	[0896 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2567, 0x003F };
    uint32_t const ces[9] = { 0x0896, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_449)
{
    // 2567 0061;	
    // (╧) BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE	[0896 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2567, 0x0061 };
    uint32_t const ces[9] = { 0x0896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_450)
{
    // 2567 0041;	
    // (╧) BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE	[0896 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2567, 0x0041 };
    uint32_t const ces[9] = { 0x0896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_451)
{
    // 2567 0062;	
    // (╧) BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE	[0896 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2567, 0x0062 };
    uint32_t const ces[9] = { 0x0896, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_452)
{
    // 2568 0021;	
    // (╨) BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE	[0897 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2568, 0x0021 };
    uint32_t const ces[9] = { 0x0897, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_453)
{
    // 2568 003F;	
    // (╨) BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE	[0897 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2568, 0x003F };
    uint32_t const ces[9] = { 0x0897, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_454)
{
    // 2568 0061;	
    // (╨) BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE	[0897 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2568, 0x0061 };
    uint32_t const ces[9] = { 0x0897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_455)
{
    // 2568 0041;	
    // (╨) BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE	[0897 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2568, 0x0041 };
    uint32_t const ces[9] = { 0x0897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_456)
{
    // 2568 0062;	
    // (╨) BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE	[0897 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2568, 0x0062 };
    uint32_t const ces[9] = { 0x0897, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_457)
{
    // 2569 0021;	
    // (╩) BOX DRAWINGS DOUBLE UP AND HORIZONTAL	[0898 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2569, 0x0021 };
    uint32_t const ces[9] = { 0x0898, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_458)
{
    // 2569 003F;	
    // (╩) BOX DRAWINGS DOUBLE UP AND HORIZONTAL	[0898 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2569, 0x003F };
    uint32_t const ces[9] = { 0x0898, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_459)
{
    // 2569 0061;	
    // (╩) BOX DRAWINGS DOUBLE UP AND HORIZONTAL	[0898 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2569, 0x0061 };
    uint32_t const ces[9] = { 0x0898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_460)
{
    // 2569 0041;	
    // (╩) BOX DRAWINGS DOUBLE UP AND HORIZONTAL	[0898 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2569, 0x0041 };
    uint32_t const ces[9] = { 0x0898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_461)
{
    // 2569 0062;	
    // (╩) BOX DRAWINGS DOUBLE UP AND HORIZONTAL	[0898 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2569, 0x0062 };
    uint32_t const ces[9] = { 0x0898, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_462)
{
    // 256A 0021;	
    // (╪) BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE	[0899 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256A, 0x0021 };
    uint32_t const ces[9] = { 0x0899, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_463)
{
    // 256A 003F;	
    // (╪) BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE	[0899 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256A, 0x003F };
    uint32_t const ces[9] = { 0x0899, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_464)
{
    // 256A 0061;	
    // (╪) BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE	[0899 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256A, 0x0061 };
    uint32_t const ces[9] = { 0x0899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_465)
{
    // 256A 0041;	
    // (╪) BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE	[0899 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256A, 0x0041 };
    uint32_t const ces[9] = { 0x0899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_466)
{
    // 256A 0062;	
    // (╪) BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE	[0899 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256A, 0x0062 };
    uint32_t const ces[9] = { 0x0899, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_467)
{
    // 256B 0021;	
    // (╫) BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE	[089A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256B, 0x0021 };
    uint32_t const ces[9] = { 0x089A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_468)
{
    // 256B 003F;	
    // (╫) BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE	[089A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256B, 0x003F };
    uint32_t const ces[9] = { 0x089A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_469)
{
    // 256B 0061;	
    // (╫) BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE	[089A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256B, 0x0061 };
    uint32_t const ces[9] = { 0x089A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_470)
{
    // 256B 0041;	
    // (╫) BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE	[089A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256B, 0x0041 };
    uint32_t const ces[9] = { 0x089A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_471)
{
    // 256B 0062;	
    // (╫) BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE	[089A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256B, 0x0062 };
    uint32_t const ces[9] = { 0x089A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_472)
{
    // 256C 0021;	
    // (╬) BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL	[089B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256C, 0x0021 };
    uint32_t const ces[9] = { 0x089B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_473)
{
    // 256C 003F;	
    // (╬) BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL	[089B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256C, 0x003F };
    uint32_t const ces[9] = { 0x089B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_474)
{
    // 256C 0061;	
    // (╬) BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL	[089B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256C, 0x0061 };
    uint32_t const ces[9] = { 0x089B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_475)
{
    // 256C 0041;	
    // (╬) BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL	[089B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256C, 0x0041 };
    uint32_t const ces[9] = { 0x089B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_476)
{
    // 256C 0062;	
    // (╬) BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL	[089B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256C, 0x0062 };
    uint32_t const ces[9] = { 0x089B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_477)
{
    // 256D 0021;	
    // (╭) BOX DRAWINGS LIGHT ARC DOWN AND RIGHT	[089C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256D, 0x0021 };
    uint32_t const ces[9] = { 0x089C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_478)
{
    // 256D 003F;	
    // (╭) BOX DRAWINGS LIGHT ARC DOWN AND RIGHT	[089C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256D, 0x003F };
    uint32_t const ces[9] = { 0x089C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_479)
{
    // 256D 0061;	
    // (╭) BOX DRAWINGS LIGHT ARC DOWN AND RIGHT	[089C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256D, 0x0061 };
    uint32_t const ces[9] = { 0x089C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_480)
{
    // 256D 0041;	
    // (╭) BOX DRAWINGS LIGHT ARC DOWN AND RIGHT	[089C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256D, 0x0041 };
    uint32_t const ces[9] = { 0x089C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_481)
{
    // 256D 0062;	
    // (╭) BOX DRAWINGS LIGHT ARC DOWN AND RIGHT	[089C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256D, 0x0062 };
    uint32_t const ces[9] = { 0x089C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_482)
{
    // 256E 0021;	
    // (╮) BOX DRAWINGS LIGHT ARC DOWN AND LEFT	[089D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256E, 0x0021 };
    uint32_t const ces[9] = { 0x089D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_483)
{
    // 256E 003F;	
    // (╮) BOX DRAWINGS LIGHT ARC DOWN AND LEFT	[089D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256E, 0x003F };
    uint32_t const ces[9] = { 0x089D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_484)
{
    // 256E 0061;	
    // (╮) BOX DRAWINGS LIGHT ARC DOWN AND LEFT	[089D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256E, 0x0061 };
    uint32_t const ces[9] = { 0x089D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_485)
{
    // 256E 0041;	
    // (╮) BOX DRAWINGS LIGHT ARC DOWN AND LEFT	[089D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256E, 0x0041 };
    uint32_t const ces[9] = { 0x089D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_486)
{
    // 256E 0062;	
    // (╮) BOX DRAWINGS LIGHT ARC DOWN AND LEFT	[089D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256E, 0x0062 };
    uint32_t const ces[9] = { 0x089D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_487)
{
    // 256F 0021;	
    // (╯) BOX DRAWINGS LIGHT ARC UP AND LEFT	[089E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256F, 0x0021 };
    uint32_t const ces[9] = { 0x089E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_488)
{
    // 256F 003F;	
    // (╯) BOX DRAWINGS LIGHT ARC UP AND LEFT	[089E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256F, 0x003F };
    uint32_t const ces[9] = { 0x089E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_489)
{
    // 256F 0061;	
    // (╯) BOX DRAWINGS LIGHT ARC UP AND LEFT	[089E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256F, 0x0061 };
    uint32_t const ces[9] = { 0x089E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_490)
{
    // 256F 0041;	
    // (╯) BOX DRAWINGS LIGHT ARC UP AND LEFT	[089E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x256F, 0x0041 };
    uint32_t const ces[9] = { 0x089E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_491)
{
    // 256F 0062;	
    // (╯) BOX DRAWINGS LIGHT ARC UP AND LEFT	[089E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x256F, 0x0062 };
    uint32_t const ces[9] = { 0x089E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_492)
{
    // 2570 0021;	
    // (╰) BOX DRAWINGS LIGHT ARC UP AND RIGHT	[089F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2570, 0x0021 };
    uint32_t const ces[9] = { 0x089F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_493)
{
    // 2570 003F;	
    // (╰) BOX DRAWINGS LIGHT ARC UP AND RIGHT	[089F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2570, 0x003F };
    uint32_t const ces[9] = { 0x089F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_494)
{
    // 2570 0061;	
    // (╰) BOX DRAWINGS LIGHT ARC UP AND RIGHT	[089F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2570, 0x0061 };
    uint32_t const ces[9] = { 0x089F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_495)
{
    // 2570 0041;	
    // (╰) BOX DRAWINGS LIGHT ARC UP AND RIGHT	[089F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2570, 0x0041 };
    uint32_t const ces[9] = { 0x089F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_496)
{
    // 2570 0062;	
    // (╰) BOX DRAWINGS LIGHT ARC UP AND RIGHT	[089F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2570, 0x0062 };
    uint32_t const ces[9] = { 0x089F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_497)
{
    // 2571 0021;	
    // (╱) BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT	[08A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2571, 0x0021 };
    uint32_t const ces[9] = { 0x08A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_498)
{
    // 2571 003F;	
    // (╱) BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT	[08A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2571, 0x003F };
    uint32_t const ces[9] = { 0x08A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_028_499)
{
    // 2571 0061;	
    // (╱) BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT	[08A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2571, 0x0061 };
    uint32_t const ces[9] = { 0x08A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

