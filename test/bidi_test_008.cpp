// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;

TEST(bidi, bidi_008_000)
{

    expected_levels = { 0, -1, 1 };

    {
        // WS RLE NSM; 3 ('auto') (line 8001)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE NSM; 3 ('LTR') (line 8001)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE ON; 3 ('auto') (line 8002)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE ON; 3 ('LTR') (line 8002)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO L; 3 ('auto') (line 8003)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO L; 3 ('LTR') (line 8003)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO R; 2 ('LTR') (line 8004)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO AL; 2 ('LTR') (line 8005)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO EN; 3 ('auto') (line 8006)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO EN; 3 ('LTR') (line 8006)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ES; 3 ('auto') (line 8007)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ES; 3 ('LTR') (line 8007)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ET; 3 ('auto') (line 8008)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ET; 3 ('LTR') (line 8008)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO AN; 3 ('auto') (line 8009)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO AN; 3 ('LTR') (line 8009)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO CS; 3 ('auto') (line 8010)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO CS; 3 ('LTR') (line 8010)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO NSM; 3 ('auto') (line 8011)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO NSM; 3 ('LTR') (line 8011)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ON; 3 ('auto') (line 8012)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLO ON; 3 ('LTR') (line 8012)
        std::vector<uint32_t> const cps = { 0x0020, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS PDF R; 2 ('LTR') (line 8013)
        std::vector<uint32_t> const cps = { 0x0020, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS PDF AL; 2 ('LTR') (line 8014)
        std::vector<uint32_t> const cps = { 0x0020, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS BN R; 2 ('LTR') (line 8015)
        std::vector<uint32_t> const cps = { 0x0020, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS BN AL; 2 ('LTR') (line 8016)
        std::vector<uint32_t> const cps = { 0x0020, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE R; 2 ('LTR') (line 8017)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE AL; 2 ('LTR') (line 8018)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ES; 3 ('auto') (line 8019)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ES; 3 ('LTR') (line 8019)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ET; 3 ('auto') (line 8020)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ET; 3 ('LTR') (line 8020)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE CS; 3 ('auto') (line 8021)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE CS; 3 ('LTR') (line 8021)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE NSM; 3 ('auto') (line 8022)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE NSM; 3 ('LTR') (line 8022)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ON; 3 ('auto') (line 8023)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE ON; 3 ('LTR') (line 8023)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO L; 3 ('auto') (line 8024)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO L; 3 ('LTR') (line 8024)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO R; 2 ('LTR') (line 8025)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_001)
{

    expected_levels = { 0, -1, 1 };

    {
        // ON RLO AL; 2 ('LTR') (line 8026)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO EN; 3 ('auto') (line 8027)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO EN; 3 ('LTR') (line 8027)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ES; 3 ('auto') (line 8028)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ES; 3 ('LTR') (line 8028)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ET; 3 ('auto') (line 8029)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ET; 3 ('LTR') (line 8029)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO AN; 3 ('auto') (line 8030)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO AN; 3 ('LTR') (line 8030)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO CS; 3 ('auto') (line 8031)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO CS; 3 ('LTR') (line 8031)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO NSM; 3 ('auto') (line 8032)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO NSM; 3 ('LTR') (line 8032)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ON; 3 ('auto') (line 8033)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLO ON; 3 ('LTR') (line 8033)
        std::vector<uint32_t> const cps = { 0x0021, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON PDF R; 2 ('LTR') (line 8034)
        std::vector<uint32_t> const cps = { 0x0021, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON PDF AL; 2 ('LTR') (line 8035)
        std::vector<uint32_t> const cps = { 0x0021, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON BN R; 2 ('LTR') (line 8036)
        std::vector<uint32_t> const cps = { 0x0021, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON BN AL; 2 ('LTR') (line 8037)
        std::vector<uint32_t> const cps = { 0x0021, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF R; 3 ('auto') (line 8038)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF R; 3 ('LTR') (line 8038)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF AL; 3 ('auto') (line 8039)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF AL; 3 ('LTR') (line 8039)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ES; 3 ('auto') (line 8040)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ES; 3 ('LTR') (line 8040)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ET; 3 ('auto') (line 8041)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ET; 3 ('LTR') (line 8041)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF CS; 3 ('auto') (line 8042)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF CS; 3 ('LTR') (line 8042)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF NSM; 3 ('auto') (line 8043)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF NSM; 3 ('LTR') (line 8043)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ON; 3 ('auto') (line 8044)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF ON; 3 ('LTR') (line 8044)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN R; 3 ('auto') (line 8045)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN R; 3 ('LTR') (line 8045)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN AL; 3 ('auto') (line 8046)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN AL; 3 ('LTR') (line 8046)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN ES; 3 ('auto') (line 8047)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN ES; 3 ('LTR') (line 8047)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN ET; 3 ('auto') (line 8048)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN ET; 3 ('LTR') (line 8048)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN CS; 3 ('auto') (line 8049)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN CS; 3 ('LTR') (line 8049)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN NSM; 3 ('auto') (line 8050)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN NSM; 3 ('LTR') (line 8050)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_002)
{

    expected_levels = { 0, -1, 1 };

    {
        // RLI BN ON; 3 ('auto') (line 8051)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN ON; 3 ('LTR') (line 8051)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF R; 3 ('auto') (line 8052)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF R; 3 ('LTR') (line 8052)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF AL; 3 ('auto') (line 8053)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF AL; 3 ('LTR') (line 8053)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN R; 3 ('auto') (line 8054)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN R; 3 ('LTR') (line 8054)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN AL; 3 ('auto') (line 8055)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN AL; 3 ('LTR') (line 8055)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE R; 2 ('LTR') (line 8056)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE AL; 2 ('LTR') (line 8057)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ES; 3 ('auto') (line 8058)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ES; 3 ('LTR') (line 8058)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ET; 3 ('auto') (line 8059)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ET; 3 ('LTR') (line 8059)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE CS; 3 ('auto') (line 8060)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE CS; 3 ('LTR') (line 8060)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE NSM; 3 ('auto') (line 8061)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE NSM; 3 ('LTR') (line 8061)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ON; 3 ('auto') (line 8062)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE ON; 3 ('LTR') (line 8062)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO L; 3 ('auto') (line 8063)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO L; 3 ('LTR') (line 8063)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO R; 2 ('LTR') (line 8064)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO AL; 2 ('LTR') (line 8065)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO EN; 3 ('auto') (line 8066)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO EN; 3 ('LTR') (line 8066)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ES; 3 ('auto') (line 8067)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ES; 3 ('LTR') (line 8067)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ET; 3 ('auto') (line 8068)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ET; 3 ('LTR') (line 8068)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO AN; 3 ('auto') (line 8069)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO AN; 3 ('LTR') (line 8069)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO CS; 3 ('auto') (line 8070)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO CS; 3 ('LTR') (line 8070)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO NSM; 3 ('auto') (line 8071)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO NSM; 3 ('LTR') (line 8071)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ON; 3 ('auto') (line 8072)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLO ON; 3 ('LTR') (line 8072)
        std::vector<uint32_t> const cps = { 0x2069, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI PDF R; 2 ('LTR') (line 8073)
        std::vector<uint32_t> const cps = { 0x2069, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI PDF AL; 2 ('LTR') (line 8074)
        std::vector<uint32_t> const cps = { 0x2069, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI BN R; 2 ('LTR') (line 8075)
        std::vector<uint32_t> const cps = { 0x2069, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_003)
{

    expected_levels = { 0, -1, 1 };

    {
        // PDI BN AL; 2 ('LTR') (line 8076)
        std::vector<uint32_t> const cps = { 0x2069, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, 2 };

    {
        // L LRE L; 3 ('auto') (line 8082)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE L; 3 ('LTR') (line 8082)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE EN; 3 ('auto') (line 8083)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE EN; 3 ('LTR') (line 8083)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ES; 3 ('auto') (line 8084)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ES; 3 ('LTR') (line 8084)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ET; 3 ('auto') (line 8085)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ET; 3 ('LTR') (line 8085)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE CS; 3 ('auto') (line 8086)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE CS; 3 ('LTR') (line 8086)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE NSM; 3 ('auto') (line 8087)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE NSM; 3 ('LTR') (line 8087)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ON; 3 ('auto') (line 8088)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE ON; 3 ('LTR') (line 8088)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO L; 3 ('auto') (line 8089)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO L; 3 ('LTR') (line 8089)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO R; 3 ('auto') (line 8090)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO R; 3 ('LTR') (line 8090)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO AL; 3 ('auto') (line 8091)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO AL; 3 ('LTR') (line 8091)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO EN; 3 ('auto') (line 8092)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO EN; 3 ('LTR') (line 8092)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ES; 3 ('auto') (line 8093)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ES; 3 ('LTR') (line 8093)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ET; 3 ('auto') (line 8094)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ET; 3 ('LTR') (line 8094)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO AN; 3 ('auto') (line 8095)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO AN; 3 ('LTR') (line 8095)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO CS; 3 ('auto') (line 8096)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO CS; 3 ('LTR') (line 8096)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO NSM; 3 ('auto') (line 8097)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO NSM; 3 ('LTR') (line 8097)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ON; 3 ('auto') (line 8098)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO ON; 3 ('LTR') (line 8098)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE L; 3 ('auto') (line 8099)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE L; 3 ('LTR') (line 8099)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE EN; 3 ('auto') (line 8100)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE EN; 3 ('LTR') (line 8100)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE AN; 3 ('auto') (line 8101)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE AN; 3 ('LTR') (line 8101)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF AN; 3 ('auto') (line 8102)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF AN; 3 ('LTR') (line 8102)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN AN; 3 ('auto') (line 8103)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN AN; 3 ('LTR') (line 8103)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE L; 3 ('auto') (line 8104)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE L; 3 ('LTR') (line 8104)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE EN; 3 ('auto') (line 8105)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE EN; 3 ('LTR') (line 8105)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_004)
{

    expected_levels = { 0, -1, 2 };

    {
        // EN LRE ES; 3 ('auto') (line 8106)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE ES; 3 ('LTR') (line 8106)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE ET; 3 ('auto') (line 8107)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE ET; 3 ('LTR') (line 8107)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE CS; 3 ('auto') (line 8108)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE CS; 3 ('LTR') (line 8108)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE NSM; 3 ('auto') (line 8109)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE NSM; 3 ('LTR') (line 8109)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE ON; 3 ('auto') (line 8110)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE ON; 3 ('LTR') (line 8110)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO L; 3 ('auto') (line 8111)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO L; 3 ('LTR') (line 8111)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO R; 2 ('LTR') (line 8112)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO AL; 2 ('LTR') (line 8113)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO EN; 3 ('auto') (line 8114)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO EN; 3 ('LTR') (line 8114)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ES; 3 ('auto') (line 8115)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ES; 3 ('LTR') (line 8115)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ET; 3 ('auto') (line 8116)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ET; 3 ('LTR') (line 8116)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO AN; 3 ('auto') (line 8117)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO AN; 3 ('LTR') (line 8117)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO CS; 3 ('auto') (line 8118)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO CS; 3 ('LTR') (line 8118)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO NSM; 3 ('auto') (line 8119)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO NSM; 3 ('LTR') (line 8119)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ON; 3 ('auto') (line 8120)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO ON; 3 ('LTR') (line 8120)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE L; 3 ('auto') (line 8121)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE L; 3 ('LTR') (line 8121)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE EN; 3 ('auto') (line 8122)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE EN; 3 ('LTR') (line 8122)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE AN; 3 ('auto') (line 8123)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE AN; 3 ('LTR') (line 8123)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF AN; 3 ('auto') (line 8124)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF AN; 3 ('LTR') (line 8124)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN AN; 3 ('auto') (line 8125)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN AN; 3 ('LTR') (line 8125)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE L; 3 ('auto') (line 8126)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE L; 3 ('LTR') (line 8126)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE EN; 3 ('auto') (line 8127)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE EN; 3 ('LTR') (line 8127)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ES; 3 ('auto') (line 8128)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ES; 3 ('LTR') (line 8128)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ET; 3 ('auto') (line 8129)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ET; 3 ('LTR') (line 8129)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE CS; 3 ('auto') (line 8130)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE CS; 3 ('LTR') (line 8130)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_005)
{

    expected_levels = { 0, -1, 2 };

    {
        // ES LRE NSM; 3 ('auto') (line 8131)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE NSM; 3 ('LTR') (line 8131)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ON; 3 ('auto') (line 8132)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE ON; 3 ('LTR') (line 8132)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO L; 3 ('auto') (line 8133)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO L; 3 ('LTR') (line 8133)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO R; 2 ('LTR') (line 8134)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO AL; 2 ('LTR') (line 8135)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO EN; 3 ('auto') (line 8136)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO EN; 3 ('LTR') (line 8136)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ES; 3 ('auto') (line 8137)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ES; 3 ('LTR') (line 8137)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ET; 3 ('auto') (line 8138)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ET; 3 ('LTR') (line 8138)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO AN; 3 ('auto') (line 8139)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO AN; 3 ('LTR') (line 8139)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO CS; 3 ('auto') (line 8140)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO CS; 3 ('LTR') (line 8140)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO NSM; 3 ('auto') (line 8141)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO NSM; 3 ('LTR') (line 8141)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ON; 3 ('auto') (line 8142)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO ON; 3 ('LTR') (line 8142)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE L; 3 ('auto') (line 8143)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE L; 3 ('LTR') (line 8143)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE EN; 3 ('auto') (line 8144)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE EN; 3 ('LTR') (line 8144)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE AN; 3 ('auto') (line 8145)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES RLE AN; 3 ('LTR') (line 8145)
        std::vector<uint32_t> const cps = { 0x002B, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES PDF AN; 3 ('auto') (line 8146)
        std::vector<uint32_t> const cps = { 0x002B, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES PDF AN; 3 ('LTR') (line 8146)
        std::vector<uint32_t> const cps = { 0x002B, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES BN AN; 3 ('auto') (line 8147)
        std::vector<uint32_t> const cps = { 0x002B, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES BN AN; 3 ('LTR') (line 8147)
        std::vector<uint32_t> const cps = { 0x002B, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE L; 3 ('auto') (line 8148)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE L; 3 ('LTR') (line 8148)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE EN; 3 ('auto') (line 8149)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE EN; 3 ('LTR') (line 8149)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ES; 3 ('auto') (line 8150)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ES; 3 ('LTR') (line 8150)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ET; 3 ('auto') (line 8151)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ET; 3 ('LTR') (line 8151)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE CS; 3 ('auto') (line 8152)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE CS; 3 ('LTR') (line 8152)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE NSM; 3 ('auto') (line 8153)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE NSM; 3 ('LTR') (line 8153)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ON; 3 ('auto') (line 8154)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE ON; 3 ('LTR') (line 8154)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO L; 3 ('auto') (line 8155)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO L; 3 ('LTR') (line 8155)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_006)
{

    expected_levels = { 0, -1, 2 };

    {
        // ET LRO R; 2 ('LTR') (line 8156)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO AL; 2 ('LTR') (line 8157)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO EN; 3 ('auto') (line 8158)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO EN; 3 ('LTR') (line 8158)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ES; 3 ('auto') (line 8159)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ES; 3 ('LTR') (line 8159)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ET; 3 ('auto') (line 8160)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ET; 3 ('LTR') (line 8160)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO AN; 3 ('auto') (line 8161)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO AN; 3 ('LTR') (line 8161)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO CS; 3 ('auto') (line 8162)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO CS; 3 ('LTR') (line 8162)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO NSM; 3 ('auto') (line 8163)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO NSM; 3 ('LTR') (line 8163)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ON; 3 ('auto') (line 8164)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRO ON; 3 ('LTR') (line 8164)
        std::vector<uint32_t> const cps = { 0x0023, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE L; 3 ('auto') (line 8165)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE L; 3 ('LTR') (line 8165)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE EN; 3 ('auto') (line 8166)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE EN; 3 ('LTR') (line 8166)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE AN; 3 ('auto') (line 8167)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET RLE AN; 3 ('LTR') (line 8167)
        std::vector<uint32_t> const cps = { 0x0023, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET PDF AN; 3 ('auto') (line 8168)
        std::vector<uint32_t> const cps = { 0x0023, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET PDF AN; 3 ('LTR') (line 8168)
        std::vector<uint32_t> const cps = { 0x0023, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET BN AN; 3 ('auto') (line 8169)
        std::vector<uint32_t> const cps = { 0x0023, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET BN AN; 3 ('LTR') (line 8169)
        std::vector<uint32_t> const cps = { 0x0023, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE L; 3 ('auto') (line 8170)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE L; 3 ('LTR') (line 8170)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE EN; 3 ('auto') (line 8171)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE EN; 3 ('LTR') (line 8171)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ES; 3 ('auto') (line 8172)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ES; 3 ('LTR') (line 8172)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ET; 3 ('auto') (line 8173)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ET; 3 ('LTR') (line 8173)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE CS; 3 ('auto') (line 8174)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE CS; 3 ('LTR') (line 8174)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE NSM; 3 ('auto') (line 8175)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE NSM; 3 ('LTR') (line 8175)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ON; 3 ('auto') (line 8176)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE ON; 3 ('LTR') (line 8176)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO L; 3 ('auto') (line 8177)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO L; 3 ('LTR') (line 8177)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO R; 2 ('LTR') (line 8178)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO AL; 2 ('LTR') (line 8179)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO EN; 3 ('auto') (line 8180)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO EN; 3 ('LTR') (line 8180)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_007)
{

    expected_levels = { 0, -1, 2 };

    {
        // CS LRO ES; 3 ('auto') (line 8181)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO ES; 3 ('LTR') (line 8181)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO ET; 3 ('auto') (line 8182)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO ET; 3 ('LTR') (line 8182)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO AN; 3 ('auto') (line 8183)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO AN; 3 ('LTR') (line 8183)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO CS; 3 ('auto') (line 8184)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO CS; 3 ('LTR') (line 8184)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO NSM; 3 ('auto') (line 8185)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO NSM; 3 ('LTR') (line 8185)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO ON; 3 ('auto') (line 8186)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRO ON; 3 ('LTR') (line 8186)
        std::vector<uint32_t> const cps = { 0x002C, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE L; 3 ('auto') (line 8187)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE L; 3 ('LTR') (line 8187)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE EN; 3 ('auto') (line 8188)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE EN; 3 ('LTR') (line 8188)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE AN; 3 ('auto') (line 8189)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS RLE AN; 3 ('LTR') (line 8189)
        std::vector<uint32_t> const cps = { 0x002C, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS PDF AN; 3 ('auto') (line 8190)
        std::vector<uint32_t> const cps = { 0x002C, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS PDF AN; 3 ('LTR') (line 8190)
        std::vector<uint32_t> const cps = { 0x002C, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS BN AN; 3 ('auto') (line 8191)
        std::vector<uint32_t> const cps = { 0x002C, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS BN AN; 3 ('LTR') (line 8191)
        std::vector<uint32_t> const cps = { 0x002C, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE L; 3 ('auto') (line 8192)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE L; 3 ('LTR') (line 8192)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE EN; 3 ('auto') (line 8193)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE EN; 3 ('LTR') (line 8193)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ES; 3 ('auto') (line 8194)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ES; 3 ('LTR') (line 8194)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ET; 3 ('auto') (line 8195)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ET; 3 ('LTR') (line 8195)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE CS; 3 ('auto') (line 8196)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE CS; 3 ('LTR') (line 8196)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE NSM; 3 ('auto') (line 8197)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE NSM; 3 ('LTR') (line 8197)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ON; 3 ('auto') (line 8198)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE ON; 3 ('LTR') (line 8198)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO L; 3 ('auto') (line 8199)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO L; 3 ('LTR') (line 8199)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO R; 2 ('LTR') (line 8200)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO AL; 2 ('LTR') (line 8201)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO EN; 3 ('auto') (line 8202)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO EN; 3 ('LTR') (line 8202)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ES; 3 ('auto') (line 8203)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ES; 3 ('LTR') (line 8203)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ET; 3 ('auto') (line 8204)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ET; 3 ('LTR') (line 8204)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO AN; 3 ('auto') (line 8205)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO AN; 3 ('LTR') (line 8205)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_008)
{

    expected_levels = { 0, -1, 2 };

    {
        // NSM LRO CS; 3 ('auto') (line 8206)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO CS; 3 ('LTR') (line 8206)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO NSM; 3 ('auto') (line 8207)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO NSM; 3 ('LTR') (line 8207)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ON; 3 ('auto') (line 8208)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRO ON; 3 ('LTR') (line 8208)
        std::vector<uint32_t> const cps = { 0x0300, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE L; 3 ('auto') (line 8209)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE L; 3 ('LTR') (line 8209)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE EN; 3 ('auto') (line 8210)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE EN; 3 ('LTR') (line 8210)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE AN; 3 ('auto') (line 8211)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM RLE AN; 3 ('LTR') (line 8211)
        std::vector<uint32_t> const cps = { 0x0300, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM PDF AN; 3 ('auto') (line 8212)
        std::vector<uint32_t> const cps = { 0x0300, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM PDF AN; 3 ('LTR') (line 8212)
        std::vector<uint32_t> const cps = { 0x0300, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM BN AN; 3 ('auto') (line 8213)
        std::vector<uint32_t> const cps = { 0x0300, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM BN AN; 3 ('LTR') (line 8213)
        std::vector<uint32_t> const cps = { 0x0300, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE L; 3 ('auto') (line 8214)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE L; 3 ('LTR') (line 8214)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE EN; 3 ('auto') (line 8215)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE EN; 3 ('LTR') (line 8215)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ES; 3 ('auto') (line 8216)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ES; 3 ('LTR') (line 8216)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ET; 3 ('auto') (line 8217)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ET; 3 ('LTR') (line 8217)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE CS; 3 ('auto') (line 8218)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE CS; 3 ('LTR') (line 8218)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE NSM; 3 ('auto') (line 8219)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE NSM; 3 ('LTR') (line 8219)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ON; 3 ('auto') (line 8220)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE ON; 3 ('LTR') (line 8220)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO L; 3 ('auto') (line 8221)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO L; 3 ('LTR') (line 8221)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO R; 2 ('LTR') (line 8222)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO AL; 2 ('LTR') (line 8223)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO EN; 3 ('auto') (line 8224)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO EN; 3 ('LTR') (line 8224)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ES; 3 ('auto') (line 8225)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ES; 3 ('LTR') (line 8225)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ET; 3 ('auto') (line 8226)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ET; 3 ('LTR') (line 8226)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO AN; 3 ('auto') (line 8227)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO AN; 3 ('LTR') (line 8227)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO CS; 3 ('auto') (line 8228)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO CS; 3 ('LTR') (line 8228)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO NSM; 3 ('auto') (line 8229)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO NSM; 3 ('LTR') (line 8229)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ON; 3 ('auto') (line 8230)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRO ON; 3 ('LTR') (line 8230)
        std::vector<uint32_t> const cps = { 0x0009, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_009)
{

    expected_levels = { 0, -1, 2 };

    {
        // S RLE L; 3 ('auto') (line 8231)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S RLE L; 3 ('LTR') (line 8231)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S RLE EN; 3 ('auto') (line 8232)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S RLE EN; 3 ('LTR') (line 8232)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S RLE AN; 3 ('auto') (line 8233)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S RLE AN; 3 ('LTR') (line 8233)
        std::vector<uint32_t> const cps = { 0x0009, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S PDF AN; 3 ('auto') (line 8234)
        std::vector<uint32_t> const cps = { 0x0009, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S PDF AN; 3 ('LTR') (line 8234)
        std::vector<uint32_t> const cps = { 0x0009, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S BN AN; 3 ('auto') (line 8235)
        std::vector<uint32_t> const cps = { 0x0009, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S BN AN; 3 ('LTR') (line 8235)
        std::vector<uint32_t> const cps = { 0x0009, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE L; 3 ('auto') (line 8236)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE L; 3 ('LTR') (line 8236)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE EN; 3 ('auto') (line 8237)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE EN; 3 ('LTR') (line 8237)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ES; 3 ('auto') (line 8238)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ES; 3 ('LTR') (line 8238)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ET; 3 ('auto') (line 8239)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ET; 3 ('LTR') (line 8239)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE CS; 3 ('auto') (line 8240)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE CS; 3 ('LTR') (line 8240)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE NSM; 3 ('auto') (line 8241)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE NSM; 3 ('LTR') (line 8241)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ON; 3 ('auto') (line 8242)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE ON; 3 ('LTR') (line 8242)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO L; 3 ('auto') (line 8243)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO L; 3 ('LTR') (line 8243)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO R; 2 ('LTR') (line 8244)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO AL; 2 ('LTR') (line 8245)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO EN; 3 ('auto') (line 8246)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO EN; 3 ('LTR') (line 8246)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ES; 3 ('auto') (line 8247)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ES; 3 ('LTR') (line 8247)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ET; 3 ('auto') (line 8248)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ET; 3 ('LTR') (line 8248)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO AN; 3 ('auto') (line 8249)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO AN; 3 ('LTR') (line 8249)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO CS; 3 ('auto') (line 8250)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO CS; 3 ('LTR') (line 8250)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO NSM; 3 ('auto') (line 8251)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO NSM; 3 ('LTR') (line 8251)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ON; 3 ('auto') (line 8252)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRO ON; 3 ('LTR') (line 8252)
        std::vector<uint32_t> const cps = { 0x0020, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE L; 3 ('auto') (line 8253)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE L; 3 ('LTR') (line 8253)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE EN; 3 ('auto') (line 8254)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE EN; 3 ('LTR') (line 8254)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE AN; 3 ('auto') (line 8255)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS RLE AN; 3 ('LTR') (line 8255)
        std::vector<uint32_t> const cps = { 0x0020, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_010)
{

    expected_levels = { 0, -1, 2 };

    {
        // WS PDF AN; 3 ('auto') (line 8256)
        std::vector<uint32_t> const cps = { 0x0020, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS PDF AN; 3 ('LTR') (line 8256)
        std::vector<uint32_t> const cps = { 0x0020, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS BN AN; 3 ('auto') (line 8257)
        std::vector<uint32_t> const cps = { 0x0020, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS BN AN; 3 ('LTR') (line 8257)
        std::vector<uint32_t> const cps = { 0x0020, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE L; 3 ('auto') (line 8258)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE L; 3 ('LTR') (line 8258)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE EN; 3 ('auto') (line 8259)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE EN; 3 ('LTR') (line 8259)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ES; 3 ('auto') (line 8260)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ES; 3 ('LTR') (line 8260)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ET; 3 ('auto') (line 8261)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ET; 3 ('LTR') (line 8261)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE CS; 3 ('auto') (line 8262)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE CS; 3 ('LTR') (line 8262)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE NSM; 3 ('auto') (line 8263)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE NSM; 3 ('LTR') (line 8263)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ON; 3 ('auto') (line 8264)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE ON; 3 ('LTR') (line 8264)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO L; 3 ('auto') (line 8265)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO L; 3 ('LTR') (line 8265)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO R; 2 ('LTR') (line 8266)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO AL; 2 ('LTR') (line 8267)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO EN; 3 ('auto') (line 8268)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO EN; 3 ('LTR') (line 8268)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ES; 3 ('auto') (line 8269)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ES; 3 ('LTR') (line 8269)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ET; 3 ('auto') (line 8270)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ET; 3 ('LTR') (line 8270)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO AN; 3 ('auto') (line 8271)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO AN; 3 ('LTR') (line 8271)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO CS; 3 ('auto') (line 8272)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO CS; 3 ('LTR') (line 8272)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO NSM; 3 ('auto') (line 8273)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO NSM; 3 ('LTR') (line 8273)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ON; 3 ('auto') (line 8274)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRO ON; 3 ('LTR') (line 8274)
        std::vector<uint32_t> const cps = { 0x0021, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE L; 3 ('auto') (line 8275)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE L; 3 ('LTR') (line 8275)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE EN; 3 ('auto') (line 8276)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE EN; 3 ('LTR') (line 8276)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE AN; 3 ('auto') (line 8277)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON RLE AN; 3 ('LTR') (line 8277)
        std::vector<uint32_t> const cps = { 0x0021, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON PDF AN; 3 ('auto') (line 8278)
        std::vector<uint32_t> const cps = { 0x0021, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON PDF AN; 3 ('LTR') (line 8278)
        std::vector<uint32_t> const cps = { 0x0021, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON BN AN; 3 ('auto') (line 8279)
        std::vector<uint32_t> const cps = { 0x0021, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON BN AN; 3 ('LTR') (line 8279)
        std::vector<uint32_t> const cps = { 0x0021, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF L; 3 ('auto') (line 8280)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF L; 3 ('LTR') (line 8280)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_011)
{

    expected_levels = { 0, -1, 2 };

    {
        // LRI PDF EN; 3 ('auto') (line 8281)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF EN; 3 ('LTR') (line 8281)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ES; 3 ('auto') (line 8282)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ES; 3 ('LTR') (line 8282)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ET; 3 ('auto') (line 8283)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ET; 3 ('LTR') (line 8283)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF CS; 3 ('auto') (line 8284)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF CS; 3 ('LTR') (line 8284)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF NSM; 3 ('auto') (line 8285)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF NSM; 3 ('LTR') (line 8285)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ON; 3 ('auto') (line 8286)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF ON; 3 ('LTR') (line 8286)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN L; 3 ('auto') (line 8287)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN L; 3 ('LTR') (line 8287)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN EN; 3 ('auto') (line 8288)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN EN; 3 ('LTR') (line 8288)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ES; 3 ('auto') (line 8289)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ES; 3 ('LTR') (line 8289)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ET; 3 ('auto') (line 8290)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ET; 3 ('LTR') (line 8290)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN CS; 3 ('auto') (line 8291)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN CS; 3 ('LTR') (line 8291)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN NSM; 3 ('auto') (line 8292)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN NSM; 3 ('LTR') (line 8292)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ON; 3 ('auto') (line 8293)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN ON; 3 ('LTR') (line 8293)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE L; 3 ('auto') (line 8294)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE L; 3 ('LTR') (line 8294)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE EN; 3 ('auto') (line 8295)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE EN; 3 ('LTR') (line 8295)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ES; 3 ('auto') (line 8296)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ES; 3 ('LTR') (line 8296)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ET; 3 ('auto') (line 8297)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ET; 3 ('LTR') (line 8297)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE CS; 3 ('auto') (line 8298)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE CS; 3 ('LTR') (line 8298)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE NSM; 3 ('auto') (line 8299)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE NSM; 3 ('LTR') (line 8299)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ON; 3 ('auto') (line 8300)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE ON; 3 ('LTR') (line 8300)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO L; 3 ('auto') (line 8301)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO L; 3 ('LTR') (line 8301)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO R; 3 ('auto') (line 8302)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO R; 3 ('LTR') (line 8302)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO AL; 3 ('auto') (line 8303)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO AL; 3 ('LTR') (line 8303)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO EN; 3 ('auto') (line 8304)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO EN; 3 ('LTR') (line 8304)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO ES; 3 ('auto') (line 8305)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO ES; 3 ('LTR') (line 8305)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_012)
{

    expected_levels = { 0, -1, 2 };

    {
        // RLI LRO ET; 3 ('auto') (line 8306)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO ET; 3 ('LTR') (line 8306)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO AN; 3 ('auto') (line 8307)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO AN; 3 ('LTR') (line 8307)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO CS; 3 ('auto') (line 8308)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO CS; 3 ('LTR') (line 8308)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO NSM; 3 ('auto') (line 8309)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO NSM; 3 ('LTR') (line 8309)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO ON; 3 ('auto') (line 8310)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRO ON; 3 ('LTR') (line 8310)
        std::vector<uint32_t> const cps = { 0x2067, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF L; 3 ('auto') (line 8311)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF L; 3 ('LTR') (line 8311)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF EN; 3 ('auto') (line 8312)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF EN; 3 ('LTR') (line 8312)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF AN; 3 ('auto') (line 8313)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI PDF AN; 3 ('LTR') (line 8313)
        std::vector<uint32_t> const cps = { 0x2067, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN L; 3 ('auto') (line 8314)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN L; 3 ('LTR') (line 8314)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN EN; 3 ('auto') (line 8315)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN EN; 3 ('LTR') (line 8315)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN AN; 3 ('auto') (line 8316)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI BN AN; 3 ('LTR') (line 8316)
        std::vector<uint32_t> const cps = { 0x2067, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO R; 3 ('auto') (line 8317)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO R; 3 ('LTR') (line 8317)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO AL; 3 ('auto') (line 8318)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO AL; 3 ('LTR') (line 8318)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF L; 3 ('auto') (line 8319)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF L; 3 ('LTR') (line 8319)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF EN; 3 ('auto') (line 8320)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF EN; 3 ('LTR') (line 8320)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ES; 3 ('auto') (line 8321)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ES; 3 ('LTR') (line 8321)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ET; 3 ('auto') (line 8322)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ET; 3 ('LTR') (line 8322)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF CS; 3 ('auto') (line 8323)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF CS; 3 ('LTR') (line 8323)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF NSM; 3 ('auto') (line 8324)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF NSM; 3 ('LTR') (line 8324)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ON; 3 ('auto') (line 8325)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF ON; 3 ('LTR') (line 8325)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN L; 3 ('auto') (line 8326)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN L; 3 ('LTR') (line 8326)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN EN; 3 ('auto') (line 8327)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN EN; 3 ('LTR') (line 8327)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ES; 3 ('auto') (line 8328)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ES; 3 ('LTR') (line 8328)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ET; 3 ('auto') (line 8329)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ET; 3 ('LTR') (line 8329)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN CS; 3 ('auto') (line 8330)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN CS; 3 ('LTR') (line 8330)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_013)
{

    expected_levels = { 0, -1, 2 };

    {
        // FSI BN NSM; 3 ('auto') (line 8331)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN NSM; 3 ('LTR') (line 8331)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ON; 3 ('auto') (line 8332)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN ON; 3 ('LTR') (line 8332)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE L; 3 ('auto') (line 8333)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE L; 3 ('LTR') (line 8333)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE EN; 3 ('auto') (line 8334)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE EN; 3 ('LTR') (line 8334)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ES; 3 ('auto') (line 8335)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ES; 3 ('LTR') (line 8335)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ET; 3 ('auto') (line 8336)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ET; 3 ('LTR') (line 8336)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE CS; 3 ('auto') (line 8337)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE CS; 3 ('LTR') (line 8337)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE NSM; 3 ('auto') (line 8338)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE NSM; 3 ('LTR') (line 8338)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ON; 3 ('auto') (line 8339)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE ON; 3 ('LTR') (line 8339)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO L; 3 ('auto') (line 8340)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO L; 3 ('LTR') (line 8340)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO R; 2 ('LTR') (line 8341)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO AL; 2 ('LTR') (line 8342)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO EN; 3 ('auto') (line 8343)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO EN; 3 ('LTR') (line 8343)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ES; 3 ('auto') (line 8344)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ES; 3 ('LTR') (line 8344)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ET; 3 ('auto') (line 8345)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ET; 3 ('LTR') (line 8345)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO AN; 3 ('auto') (line 8346)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO AN; 3 ('LTR') (line 8346)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO CS; 3 ('auto') (line 8347)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO CS; 3 ('LTR') (line 8347)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO NSM; 3 ('auto') (line 8348)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO NSM; 3 ('LTR') (line 8348)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ON; 3 ('auto') (line 8349)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRO ON; 3 ('LTR') (line 8349)
        std::vector<uint32_t> const cps = { 0x2069, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE L; 3 ('auto') (line 8350)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE L; 3 ('LTR') (line 8350)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE EN; 3 ('auto') (line 8351)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE EN; 3 ('LTR') (line 8351)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE AN; 3 ('auto') (line 8352)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI RLE AN; 3 ('LTR') (line 8352)
        std::vector<uint32_t> const cps = { 0x2069, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI PDF AN; 3 ('auto') (line 8353)
        std::vector<uint32_t> const cps = { 0x2069, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI PDF AN; 3 ('LTR') (line 8353)
        std::vector<uint32_t> const cps = { 0x2069, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI BN AN; 3 ('auto') (line 8354)
        std::vector<uint32_t> const cps = { 0x2069, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI BN AN; 3 ('LTR') (line 8354)
        std::vector<uint32_t> const cps = { 0x2069, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, 3 };

    {
        // L LRE R; 3 ('auto') (line 8360)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE R; 3 ('LTR') (line 8360)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_014)
{

    expected_levels = { 0, -1, 3 };

    {
        // L LRE AL; 3 ('auto') (line 8361)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE AL; 3 ('LTR') (line 8361)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE R; 2 ('LTR') (line 8362)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE AL; 2 ('LTR') (line 8363)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE R; 2 ('LTR') (line 8364)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE AL; 2 ('LTR') (line 8365)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE R; 2 ('LTR') (line 8366)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE AL; 2 ('LTR') (line 8367)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE R; 2 ('LTR') (line 8368)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE AL; 2 ('LTR') (line 8369)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE R; 2 ('LTR') (line 8370)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE AL; 2 ('LTR') (line 8371)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE R; 2 ('LTR') (line 8372)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE AL; 2 ('LTR') (line 8373)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE R; 2 ('LTR') (line 8374)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE AL; 2 ('LTR') (line 8375)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE R; 2 ('LTR') (line 8376)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE AL; 2 ('LTR') (line 8377)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE R; 3 ('auto') (line 8378)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE R; 3 ('LTR') (line 8378)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE AL; 3 ('auto') (line 8379)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE AL; 3 ('LTR') (line 8379)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ES; 3 ('auto') (line 8380)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ES; 3 ('LTR') (line 8380)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ET; 3 ('auto') (line 8381)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ET; 3 ('LTR') (line 8381)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE CS; 3 ('auto') (line 8382)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE CS; 3 ('LTR') (line 8382)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE NSM; 3 ('auto') (line 8383)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE NSM; 3 ('LTR') (line 8383)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ON; 3 ('auto') (line 8384)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE ON; 3 ('LTR') (line 8384)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO L; 3 ('auto') (line 8385)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO L; 3 ('LTR') (line 8385)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_015)
{

    expected_levels = { 0, -1, 3 };

    {
        // LRI RLO R; 3 ('auto') (line 8386)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO R; 3 ('LTR') (line 8386)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO AL; 3 ('auto') (line 8387)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO AL; 3 ('LTR') (line 8387)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO EN; 3 ('auto') (line 8388)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO EN; 3 ('LTR') (line 8388)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ES; 3 ('auto') (line 8389)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ES; 3 ('LTR') (line 8389)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ET; 3 ('auto') (line 8390)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ET; 3 ('LTR') (line 8390)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO AN; 3 ('auto') (line 8391)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO AN; 3 ('LTR') (line 8391)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO CS; 3 ('auto') (line 8392)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO CS; 3 ('LTR') (line 8392)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO NSM; 3 ('auto') (line 8393)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO NSM; 3 ('LTR') (line 8393)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ON; 3 ('auto') (line 8394)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLO ON; 3 ('LTR') (line 8394)
        std::vector<uint32_t> const cps = { 0x2066, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF R; 3 ('auto') (line 8395)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF R; 3 ('LTR') (line 8395)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF AL; 3 ('auto') (line 8396)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF AL; 3 ('LTR') (line 8396)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN R; 3 ('auto') (line 8397)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN R; 3 ('LTR') (line 8397)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN AL; 3 ('auto') (line 8398)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN AL; 3 ('LTR') (line 8398)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE R; 3 ('auto') (line 8399)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE R; 3 ('LTR') (line 8399)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE AL; 3 ('auto') (line 8400)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE AL; 3 ('LTR') (line 8400)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE R; 3 ('auto') (line 8401)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE R; 3 ('LTR') (line 8401)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE AL; 3 ('auto') (line 8402)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE AL; 3 ('LTR') (line 8402)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ES; 3 ('auto') (line 8403)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ES; 3 ('LTR') (line 8403)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ET; 3 ('auto') (line 8404)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ET; 3 ('LTR') (line 8404)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE CS; 3 ('auto') (line 8405)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE CS; 3 ('LTR') (line 8405)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE NSM; 3 ('auto') (line 8406)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE NSM; 3 ('LTR') (line 8406)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ON; 3 ('auto') (line 8407)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE ON; 3 ('LTR') (line 8407)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO L; 3 ('auto') (line 8408)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO L; 3 ('LTR') (line 8408)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO R; 3 ('auto') (line 8409)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO R; 3 ('LTR') (line 8409)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO AL; 3 ('auto') (line 8410)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO AL; 3 ('LTR') (line 8410)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_016)
{

    expected_levels = { 0, -1, 3 };

    {
        // RLI RLO EN; 3 ('auto') (line 8411)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO EN; 3 ('LTR') (line 8411)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ES; 3 ('auto') (line 8412)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ES; 3 ('LTR') (line 8412)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ET; 3 ('auto') (line 8413)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ET; 3 ('LTR') (line 8413)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO AN; 3 ('auto') (line 8414)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO AN; 3 ('LTR') (line 8414)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO CS; 3 ('auto') (line 8415)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO CS; 3 ('LTR') (line 8415)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO NSM; 3 ('auto') (line 8416)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO NSM; 3 ('LTR') (line 8416)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ON; 3 ('auto') (line 8417)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLO ON; 3 ('LTR') (line 8417)
        std::vector<uint32_t> const cps = { 0x2067, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE R; 3 ('auto') (line 8418)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE R; 3 ('LTR') (line 8418)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE AL; 3 ('auto') (line 8419)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE AL; 3 ('LTR') (line 8419)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE R; 3 ('auto') (line 8420)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE R; 3 ('LTR') (line 8420)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE AL; 3 ('auto') (line 8421)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE AL; 3 ('LTR') (line 8421)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ES; 3 ('auto') (line 8422)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ES; 3 ('LTR') (line 8422)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ET; 3 ('auto') (line 8423)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ET; 3 ('LTR') (line 8423)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE CS; 3 ('auto') (line 8424)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE CS; 3 ('LTR') (line 8424)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE NSM; 3 ('auto') (line 8425)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE NSM; 3 ('LTR') (line 8425)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ON; 3 ('auto') (line 8426)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE ON; 3 ('LTR') (line 8426)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO L; 3 ('auto') (line 8427)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO L; 3 ('LTR') (line 8427)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO R; 3 ('auto') (line 8428)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO R; 3 ('LTR') (line 8428)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO AL; 3 ('auto') (line 8429)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO AL; 3 ('LTR') (line 8429)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO EN; 3 ('auto') (line 8430)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO EN; 3 ('LTR') (line 8430)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO ES; 3 ('auto') (line 8431)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO ES; 3 ('LTR') (line 8431)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO ET; 3 ('auto') (line 8432)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO ET; 3 ('LTR') (line 8432)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO AN; 3 ('auto') (line 8433)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO AN; 3 ('LTR') (line 8433)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO CS; 3 ('auto') (line 8434)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO CS; 3 ('LTR') (line 8434)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO NSM; 3 ('auto') (line 8435)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO NSM; 3 ('LTR') (line 8435)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_017)
{

    expected_levels = { 0, -1, 3 };

    {
        // FSI RLO ON; 3 ('auto') (line 8436)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLO ON; 3 ('LTR') (line 8436)
        std::vector<uint32_t> const cps = { 0x2068, 0x202E, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE R; 2 ('LTR') (line 8437)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE AL; 2 ('LTR') (line 8438)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, 4 };

    {
        // L LRE AN; 3 ('auto') (line 8444)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE AN; 3 ('LTR') (line 8444)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE AN; 3 ('auto') (line 8445)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE AN; 3 ('LTR') (line 8445)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE AN; 3 ('auto') (line 8446)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE AN; 3 ('LTR') (line 8446)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE AN; 3 ('auto') (line 8447)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ET LRE AN; 3 ('LTR') (line 8447)
        std::vector<uint32_t> const cps = { 0x0023, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE AN; 3 ('auto') (line 8448)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // CS LRE AN; 3 ('LTR') (line 8448)
        std::vector<uint32_t> const cps = { 0x002C, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE AN; 3 ('auto') (line 8449)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // NSM LRE AN; 3 ('LTR') (line 8449)
        std::vector<uint32_t> const cps = { 0x0300, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE AN; 3 ('auto') (line 8450)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // S LRE AN; 3 ('LTR') (line 8450)
        std::vector<uint32_t> const cps = { 0x0009, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE AN; 3 ('auto') (line 8451)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // WS LRE AN; 3 ('LTR') (line 8451)
        std::vector<uint32_t> const cps = { 0x0020, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE AN; 3 ('auto') (line 8452)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ON LRE AN; 3 ('LTR') (line 8452)
        std::vector<uint32_t> const cps = { 0x0021, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE L; 3 ('auto') (line 8453)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE L; 3 ('LTR') (line 8453)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE EN; 3 ('auto') (line 8454)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE EN; 3 ('LTR') (line 8454)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ES; 3 ('auto') (line 8455)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ES; 3 ('LTR') (line 8455)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ET; 3 ('auto') (line 8456)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ET; 3 ('LTR') (line 8456)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE CS; 3 ('auto') (line 8457)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE CS; 3 ('LTR') (line 8457)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE NSM; 3 ('auto') (line 8458)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE NSM; 3 ('LTR') (line 8458)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ON; 3 ('auto') (line 8459)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE ON; 3 ('LTR') (line 8459)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO L; 3 ('auto') (line 8460)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO L; 3 ('LTR') (line 8460)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO R; 3 ('auto') (line 8461)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO R; 3 ('LTR') (line 8461)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO AL; 3 ('auto') (line 8462)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO AL; 3 ('LTR') (line 8462)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO EN; 3 ('auto') (line 8463)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO EN; 3 ('LTR') (line 8463)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ES; 3 ('auto') (line 8464)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ES; 3 ('LTR') (line 8464)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ET; 3 ('auto') (line 8465)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ET; 3 ('LTR') (line 8465)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_018)
{

    expected_levels = { 0, -1, 4 };

    {
        // LRI LRO AN; 3 ('auto') (line 8466)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO AN; 3 ('LTR') (line 8466)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO CS; 3 ('auto') (line 8467)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO CS; 3 ('LTR') (line 8467)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO NSM; 3 ('auto') (line 8468)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO NSM; 3 ('LTR') (line 8468)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ON; 3 ('auto') (line 8469)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRO ON; 3 ('LTR') (line 8469)
        std::vector<uint32_t> const cps = { 0x2066, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE L; 3 ('auto') (line 8470)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE L; 3 ('LTR') (line 8470)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE EN; 3 ('auto') (line 8471)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE EN; 3 ('LTR') (line 8471)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE AN; 3 ('auto') (line 8472)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI RLE AN; 3 ('LTR') (line 8472)
        std::vector<uint32_t> const cps = { 0x2066, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF AN; 3 ('auto') (line 8473)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI PDF AN; 3 ('LTR') (line 8473)
        std::vector<uint32_t> const cps = { 0x2066, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN AN; 3 ('auto') (line 8474)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI BN AN; 3 ('LTR') (line 8474)
        std::vector<uint32_t> const cps = { 0x2066, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE AN; 3 ('auto') (line 8475)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRE AN; 3 ('LTR') (line 8475)
        std::vector<uint32_t> const cps = { 0x2067, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE L; 3 ('auto') (line 8476)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE L; 3 ('LTR') (line 8476)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE EN; 3 ('auto') (line 8477)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE EN; 3 ('LTR') (line 8477)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE AN; 3 ('auto') (line 8478)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI RLE AN; 3 ('LTR') (line 8478)
        std::vector<uint32_t> const cps = { 0x2067, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE L; 3 ('auto') (line 8479)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE L; 3 ('LTR') (line 8479)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE EN; 3 ('auto') (line 8480)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE EN; 3 ('LTR') (line 8480)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ES; 3 ('auto') (line 8481)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ES; 3 ('LTR') (line 8481)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ET; 3 ('auto') (line 8482)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ET; 3 ('LTR') (line 8482)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE CS; 3 ('auto') (line 8483)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE CS; 3 ('LTR') (line 8483)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE NSM; 3 ('auto') (line 8484)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE NSM; 3 ('LTR') (line 8484)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ON; 3 ('auto') (line 8485)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE ON; 3 ('LTR') (line 8485)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO L; 3 ('auto') (line 8486)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO L; 3 ('LTR') (line 8486)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO EN; 3 ('auto') (line 8487)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO EN; 3 ('LTR') (line 8487)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ES; 3 ('auto') (line 8488)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ES; 3 ('LTR') (line 8488)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x002B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ET; 3 ('auto') (line 8489)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ET; 3 ('LTR') (line 8489)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0023 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO AN; 3 ('auto') (line 8490)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO AN; 3 ('LTR') (line 8490)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_019)
{

    expected_levels = { 0, -1, 4 };

    {
        // FSI LRO CS; 3 ('auto') (line 8491)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO CS; 3 ('LTR') (line 8491)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x002C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO NSM; 3 ('auto') (line 8492)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO NSM; 3 ('LTR') (line 8492)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0300 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ON; 3 ('auto') (line 8493)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRO ON; 3 ('LTR') (line 8493)
        std::vector<uint32_t> const cps = { 0x2068, 0x202D, 0x0021 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE L; 3 ('auto') (line 8494)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE L; 3 ('LTR') (line 8494)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0041 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE EN; 3 ('auto') (line 8495)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE EN; 3 ('LTR') (line 8495)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0030 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE AN; 3 ('auto') (line 8496)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI RLE AN; 3 ('LTR') (line 8496)
        std::vector<uint32_t> const cps = { 0x2068, 0x202B, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF AN; 3 ('auto') (line 8497)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI PDF AN; 3 ('LTR') (line 8497)
        std::vector<uint32_t> const cps = { 0x2068, 0x202C, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN AN; 3 ('auto') (line 8498)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI BN AN; 3 ('LTR') (line 8498)
        std::vector<uint32_t> const cps = { 0x2068, 0x00AD, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE AN; 3 ('auto') (line 8499)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // PDI LRE AN; 3 ('LTR') (line 8499)
        std::vector<uint32_t> const cps = { 0x2069, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, 5 };

    {
        // LRI LRE R; 3 ('auto') (line 8505)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE R; 3 ('LTR') (line 8505)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x05BE };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE AL; 3 ('auto') (line 8506)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE AL; 3 ('LTR') (line 8506)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0608 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, 6 };

    {
        // LRI LRE AN; 3 ('auto') (line 8512)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI LRE AN; 3 ('LTR') (line 8512)
        std::vector<uint32_t> const cps = { 0x2066, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE AN; 3 ('auto') (line 8513)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI LRE AN; 3 ('LTR') (line 8513)
        std::vector<uint32_t> const cps = { 0x2068, 0x202A, 0x0660 };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 0, -1, -1, -1 };

    {
        // L LRE LRE LRE; 3 ('auto') (line 8519)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE LRE; 3 ('LTR') (line 8519)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE LRO; 3 ('auto') (line 8520)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE LRO; 3 ('LTR') (line 8520)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE RLE; 3 ('auto') (line 8521)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE RLE; 3 ('LTR') (line 8521)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE RLO; 3 ('auto') (line 8522)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE RLO; 3 ('LTR') (line 8522)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE PDF; 3 ('auto') (line 8523)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE PDF; 3 ('LTR') (line 8523)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE BN; 3 ('auto') (line 8524)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRE BN; 3 ('LTR') (line 8524)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO LRE; 3 ('auto') (line 8525)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO LRE; 3 ('LTR') (line 8525)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO LRO; 3 ('auto') (line 8526)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO LRO; 3 ('LTR') (line 8526)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO RLE; 3 ('auto') (line 8527)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO RLE; 3 ('LTR') (line 8527)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO RLO; 3 ('auto') (line 8528)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO RLO; 3 ('LTR') (line 8528)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO PDF; 3 ('auto') (line 8529)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO PDF; 3 ('LTR') (line 8529)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO BN; 3 ('auto') (line 8530)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE LRO BN; 3 ('LTR') (line 8530)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_020)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L LRE RLE LRE; 3 ('auto') (line 8531)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE LRE; 3 ('LTR') (line 8531)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE LRO; 3 ('auto') (line 8532)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE LRO; 3 ('LTR') (line 8532)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE RLE; 3 ('auto') (line 8533)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE RLE; 3 ('LTR') (line 8533)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE RLO; 3 ('auto') (line 8534)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE RLO; 3 ('LTR') (line 8534)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE PDF; 3 ('auto') (line 8535)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE PDF; 3 ('LTR') (line 8535)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE BN; 3 ('auto') (line 8536)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLE BN; 3 ('LTR') (line 8536)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO LRE; 3 ('auto') (line 8537)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO LRE; 3 ('LTR') (line 8537)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO LRO; 3 ('auto') (line 8538)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO LRO; 3 ('LTR') (line 8538)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO RLE; 3 ('auto') (line 8539)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO RLE; 3 ('LTR') (line 8539)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO RLO; 3 ('auto') (line 8540)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO RLO; 3 ('LTR') (line 8540)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO PDF; 3 ('auto') (line 8541)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO PDF; 3 ('LTR') (line 8541)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO BN; 3 ('auto') (line 8542)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE RLO BN; 3 ('LTR') (line 8542)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF LRE; 3 ('auto') (line 8543)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF LRE; 3 ('LTR') (line 8543)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF LRO; 3 ('auto') (line 8544)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF LRO; 3 ('LTR') (line 8544)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF RLE; 3 ('auto') (line 8545)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF RLE; 3 ('LTR') (line 8545)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF RLO; 3 ('auto') (line 8546)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF RLO; 3 ('LTR') (line 8546)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF PDF; 3 ('auto') (line 8547)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF PDF; 3 ('LTR') (line 8547)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF BN; 3 ('auto') (line 8548)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE PDF BN; 3 ('LTR') (line 8548)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN LRE; 3 ('auto') (line 8549)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN LRE; 3 ('LTR') (line 8549)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN LRO; 3 ('auto') (line 8550)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN LRO; 3 ('LTR') (line 8550)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN RLE; 3 ('auto') (line 8551)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN RLE; 3 ('LTR') (line 8551)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN RLO; 3 ('auto') (line 8552)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN RLO; 3 ('LTR') (line 8552)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN PDF; 3 ('auto') (line 8553)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN PDF; 3 ('LTR') (line 8553)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN BN; 3 ('auto') (line 8554)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRE BN BN; 3 ('LTR') (line 8554)
        std::vector<uint32_t> const cps = { 0x0041, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE LRE; 3 ('auto') (line 8555)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE LRE; 3 ('LTR') (line 8555)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_021)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L LRO LRE LRO; 3 ('auto') (line 8556)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE LRO; 3 ('LTR') (line 8556)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE RLE; 3 ('auto') (line 8557)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE RLE; 3 ('LTR') (line 8557)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE RLO; 3 ('auto') (line 8558)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE RLO; 3 ('LTR') (line 8558)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE PDF; 3 ('auto') (line 8559)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE PDF; 3 ('LTR') (line 8559)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE BN; 3 ('auto') (line 8560)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRE BN; 3 ('LTR') (line 8560)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO LRE; 3 ('auto') (line 8561)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO LRE; 3 ('LTR') (line 8561)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO LRO; 3 ('auto') (line 8562)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO LRO; 3 ('LTR') (line 8562)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO RLE; 3 ('auto') (line 8563)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO RLE; 3 ('LTR') (line 8563)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO RLO; 3 ('auto') (line 8564)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO RLO; 3 ('LTR') (line 8564)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO PDF; 3 ('auto') (line 8565)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO PDF; 3 ('LTR') (line 8565)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO BN; 3 ('auto') (line 8566)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO LRO BN; 3 ('LTR') (line 8566)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE LRE; 3 ('auto') (line 8567)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE LRE; 3 ('LTR') (line 8567)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE LRO; 3 ('auto') (line 8568)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE LRO; 3 ('LTR') (line 8568)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE RLE; 3 ('auto') (line 8569)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE RLE; 3 ('LTR') (line 8569)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE RLO; 3 ('auto') (line 8570)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE RLO; 3 ('LTR') (line 8570)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE PDF; 3 ('auto') (line 8571)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE PDF; 3 ('LTR') (line 8571)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE BN; 3 ('auto') (line 8572)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLE BN; 3 ('LTR') (line 8572)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO LRE; 3 ('auto') (line 8573)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO LRE; 3 ('LTR') (line 8573)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO LRO; 3 ('auto') (line 8574)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO LRO; 3 ('LTR') (line 8574)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO RLE; 3 ('auto') (line 8575)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO RLE; 3 ('LTR') (line 8575)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO RLO; 3 ('auto') (line 8576)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO RLO; 3 ('LTR') (line 8576)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO PDF; 3 ('auto') (line 8577)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO PDF; 3 ('LTR') (line 8577)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO BN; 3 ('auto') (line 8578)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO RLO BN; 3 ('LTR') (line 8578)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF LRE; 3 ('auto') (line 8579)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF LRE; 3 ('LTR') (line 8579)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF LRO; 3 ('auto') (line 8580)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF LRO; 3 ('LTR') (line 8580)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_022)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L LRO PDF RLE; 3 ('auto') (line 8581)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF RLE; 3 ('LTR') (line 8581)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF RLO; 3 ('auto') (line 8582)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF RLO; 3 ('LTR') (line 8582)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF PDF; 3 ('auto') (line 8583)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF PDF; 3 ('LTR') (line 8583)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF BN; 3 ('auto') (line 8584)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO PDF BN; 3 ('LTR') (line 8584)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN LRE; 3 ('auto') (line 8585)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN LRE; 3 ('LTR') (line 8585)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN LRO; 3 ('auto') (line 8586)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN LRO; 3 ('LTR') (line 8586)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN RLE; 3 ('auto') (line 8587)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN RLE; 3 ('LTR') (line 8587)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN RLO; 3 ('auto') (line 8588)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN RLO; 3 ('LTR') (line 8588)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN PDF; 3 ('auto') (line 8589)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN PDF; 3 ('LTR') (line 8589)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN BN; 3 ('auto') (line 8590)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L LRO BN BN; 3 ('LTR') (line 8590)
        std::vector<uint32_t> const cps = { 0x0041, 0x202D, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE LRE; 3 ('auto') (line 8591)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE LRE; 3 ('LTR') (line 8591)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE LRO; 3 ('auto') (line 8592)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE LRO; 3 ('LTR') (line 8592)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE RLE; 3 ('auto') (line 8593)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE RLE; 3 ('LTR') (line 8593)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE RLO; 3 ('auto') (line 8594)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE RLO; 3 ('LTR') (line 8594)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE PDF; 3 ('auto') (line 8595)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE PDF; 3 ('LTR') (line 8595)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE BN; 3 ('auto') (line 8596)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRE BN; 3 ('LTR') (line 8596)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO LRE; 3 ('auto') (line 8597)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO LRE; 3 ('LTR') (line 8597)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO LRO; 3 ('auto') (line 8598)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO LRO; 3 ('LTR') (line 8598)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO RLE; 3 ('auto') (line 8599)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO RLE; 3 ('LTR') (line 8599)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO RLO; 3 ('auto') (line 8600)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO RLO; 3 ('LTR') (line 8600)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO PDF; 3 ('auto') (line 8601)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO PDF; 3 ('LTR') (line 8601)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO BN; 3 ('auto') (line 8602)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE LRO BN; 3 ('LTR') (line 8602)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE LRE; 3 ('auto') (line 8603)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE LRE; 3 ('LTR') (line 8603)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE LRO; 3 ('auto') (line 8604)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE LRO; 3 ('LTR') (line 8604)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE RLE; 3 ('auto') (line 8605)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE RLE; 3 ('LTR') (line 8605)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_023)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L RLE RLE RLO; 3 ('auto') (line 8606)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE RLO; 3 ('LTR') (line 8606)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE PDF; 3 ('auto') (line 8607)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE PDF; 3 ('LTR') (line 8607)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE BN; 3 ('auto') (line 8608)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLE BN; 3 ('LTR') (line 8608)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO LRE; 3 ('auto') (line 8609)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO LRE; 3 ('LTR') (line 8609)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO LRO; 3 ('auto') (line 8610)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO LRO; 3 ('LTR') (line 8610)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO RLE; 3 ('auto') (line 8611)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO RLE; 3 ('LTR') (line 8611)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO RLO; 3 ('auto') (line 8612)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO RLO; 3 ('LTR') (line 8612)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO PDF; 3 ('auto') (line 8613)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO PDF; 3 ('LTR') (line 8613)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO BN; 3 ('auto') (line 8614)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE RLO BN; 3 ('LTR') (line 8614)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF LRE; 3 ('auto') (line 8615)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF LRE; 3 ('LTR') (line 8615)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF LRO; 3 ('auto') (line 8616)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF LRO; 3 ('LTR') (line 8616)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF RLE; 3 ('auto') (line 8617)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF RLE; 3 ('LTR') (line 8617)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF RLO; 3 ('auto') (line 8618)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF RLO; 3 ('LTR') (line 8618)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF PDF; 3 ('auto') (line 8619)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF PDF; 3 ('LTR') (line 8619)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF BN; 3 ('auto') (line 8620)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE PDF BN; 3 ('LTR') (line 8620)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN LRE; 3 ('auto') (line 8621)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN LRE; 3 ('LTR') (line 8621)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN LRO; 3 ('auto') (line 8622)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN LRO; 3 ('LTR') (line 8622)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN RLE; 3 ('auto') (line 8623)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN RLE; 3 ('LTR') (line 8623)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN RLO; 3 ('auto') (line 8624)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN RLO; 3 ('LTR') (line 8624)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN PDF; 3 ('auto') (line 8625)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN PDF; 3 ('LTR') (line 8625)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN BN; 3 ('auto') (line 8626)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLE BN BN; 3 ('LTR') (line 8626)
        std::vector<uint32_t> const cps = { 0x0041, 0x202B, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE LRE; 3 ('auto') (line 8627)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE LRE; 3 ('LTR') (line 8627)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE LRO; 3 ('auto') (line 8628)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE LRO; 3 ('LTR') (line 8628)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE RLE; 3 ('auto') (line 8629)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE RLE; 3 ('LTR') (line 8629)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE RLO; 3 ('auto') (line 8630)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE RLO; 3 ('LTR') (line 8630)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_024)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L RLO LRE PDF; 3 ('auto') (line 8631)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE PDF; 3 ('LTR') (line 8631)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE BN; 3 ('auto') (line 8632)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRE BN; 3 ('LTR') (line 8632)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO LRE; 3 ('auto') (line 8633)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO LRE; 3 ('LTR') (line 8633)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO LRO; 3 ('auto') (line 8634)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO LRO; 3 ('LTR') (line 8634)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO RLE; 3 ('auto') (line 8635)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO RLE; 3 ('LTR') (line 8635)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO RLO; 3 ('auto') (line 8636)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO RLO; 3 ('LTR') (line 8636)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO PDF; 3 ('auto') (line 8637)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO PDF; 3 ('LTR') (line 8637)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO BN; 3 ('auto') (line 8638)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO LRO BN; 3 ('LTR') (line 8638)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE LRE; 3 ('auto') (line 8639)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE LRE; 3 ('LTR') (line 8639)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE LRO; 3 ('auto') (line 8640)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE LRO; 3 ('LTR') (line 8640)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE RLE; 3 ('auto') (line 8641)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE RLE; 3 ('LTR') (line 8641)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE RLO; 3 ('auto') (line 8642)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE RLO; 3 ('LTR') (line 8642)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE PDF; 3 ('auto') (line 8643)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE PDF; 3 ('LTR') (line 8643)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE BN; 3 ('auto') (line 8644)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLE BN; 3 ('LTR') (line 8644)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO LRE; 3 ('auto') (line 8645)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO LRE; 3 ('LTR') (line 8645)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO LRO; 3 ('auto') (line 8646)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO LRO; 3 ('LTR') (line 8646)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO RLE; 3 ('auto') (line 8647)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO RLE; 3 ('LTR') (line 8647)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO RLO; 3 ('auto') (line 8648)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO RLO; 3 ('LTR') (line 8648)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO PDF; 3 ('auto') (line 8649)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO PDF; 3 ('LTR') (line 8649)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO BN; 3 ('auto') (line 8650)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO RLO BN; 3 ('LTR') (line 8650)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF LRE; 3 ('auto') (line 8651)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF LRE; 3 ('LTR') (line 8651)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF LRO; 3 ('auto') (line 8652)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF LRO; 3 ('LTR') (line 8652)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF RLE; 3 ('auto') (line 8653)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF RLE; 3 ('LTR') (line 8653)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF RLO; 3 ('auto') (line 8654)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF RLO; 3 ('LTR') (line 8654)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF PDF; 3 ('auto') (line 8655)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF PDF; 3 ('LTR') (line 8655)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_025)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L RLO PDF BN; 3 ('auto') (line 8656)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO PDF BN; 3 ('LTR') (line 8656)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN LRE; 3 ('auto') (line 8657)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN LRE; 3 ('LTR') (line 8657)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN LRO; 3 ('auto') (line 8658)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN LRO; 3 ('LTR') (line 8658)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN RLE; 3 ('auto') (line 8659)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN RLE; 3 ('LTR') (line 8659)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN RLO; 3 ('auto') (line 8660)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN RLO; 3 ('LTR') (line 8660)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN PDF; 3 ('auto') (line 8661)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN PDF; 3 ('LTR') (line 8661)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN BN; 3 ('auto') (line 8662)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L RLO BN BN; 3 ('LTR') (line 8662)
        std::vector<uint32_t> const cps = { 0x0041, 0x202E, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE LRE; 3 ('auto') (line 8663)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE LRE; 3 ('LTR') (line 8663)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE LRO; 3 ('auto') (line 8664)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE LRO; 3 ('LTR') (line 8664)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE RLE; 3 ('auto') (line 8665)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE RLE; 3 ('LTR') (line 8665)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE RLO; 3 ('auto') (line 8666)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE RLO; 3 ('LTR') (line 8666)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE PDF; 3 ('auto') (line 8667)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE PDF; 3 ('LTR') (line 8667)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE BN; 3 ('auto') (line 8668)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRE BN; 3 ('LTR') (line 8668)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO LRE; 3 ('auto') (line 8669)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO LRE; 3 ('LTR') (line 8669)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO LRO; 3 ('auto') (line 8670)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO LRO; 3 ('LTR') (line 8670)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO RLE; 3 ('auto') (line 8671)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO RLE; 3 ('LTR') (line 8671)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO RLO; 3 ('auto') (line 8672)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO RLO; 3 ('LTR') (line 8672)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO PDF; 3 ('auto') (line 8673)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO PDF; 3 ('LTR') (line 8673)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO BN; 3 ('auto') (line 8674)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF LRO BN; 3 ('LTR') (line 8674)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE LRE; 3 ('auto') (line 8675)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE LRE; 3 ('LTR') (line 8675)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE LRO; 3 ('auto') (line 8676)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE LRO; 3 ('LTR') (line 8676)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE RLE; 3 ('auto') (line 8677)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE RLE; 3 ('LTR') (line 8677)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE RLO; 3 ('auto') (line 8678)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE RLO; 3 ('LTR') (line 8678)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE PDF; 3 ('auto') (line 8679)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE PDF; 3 ('LTR') (line 8679)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE BN; 3 ('auto') (line 8680)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLE BN; 3 ('LTR') (line 8680)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_026)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L PDF RLO LRE; 3 ('auto') (line 8681)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO LRE; 3 ('LTR') (line 8681)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO LRO; 3 ('auto') (line 8682)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO LRO; 3 ('LTR') (line 8682)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO RLE; 3 ('auto') (line 8683)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO RLE; 3 ('LTR') (line 8683)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO RLO; 3 ('auto') (line 8684)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO RLO; 3 ('LTR') (line 8684)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO PDF; 3 ('auto') (line 8685)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO PDF; 3 ('LTR') (line 8685)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO BN; 3 ('auto') (line 8686)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF RLO BN; 3 ('LTR') (line 8686)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF LRE; 3 ('auto') (line 8687)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF LRE; 3 ('LTR') (line 8687)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF LRO; 3 ('auto') (line 8688)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF LRO; 3 ('LTR') (line 8688)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF RLE; 3 ('auto') (line 8689)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF RLE; 3 ('LTR') (line 8689)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF RLO; 3 ('auto') (line 8690)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF RLO; 3 ('LTR') (line 8690)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF PDF; 3 ('auto') (line 8691)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF PDF; 3 ('LTR') (line 8691)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF BN; 3 ('auto') (line 8692)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF PDF BN; 3 ('LTR') (line 8692)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN LRE; 3 ('auto') (line 8693)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN LRE; 3 ('LTR') (line 8693)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN LRO; 3 ('auto') (line 8694)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN LRO; 3 ('LTR') (line 8694)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN RLE; 3 ('auto') (line 8695)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN RLE; 3 ('LTR') (line 8695)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN RLO; 3 ('auto') (line 8696)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN RLO; 3 ('LTR') (line 8696)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN PDF; 3 ('auto') (line 8697)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN PDF; 3 ('LTR') (line 8697)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN BN; 3 ('auto') (line 8698)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L PDF BN BN; 3 ('LTR') (line 8698)
        std::vector<uint32_t> const cps = { 0x0041, 0x202C, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE LRE; 3 ('auto') (line 8699)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE LRE; 3 ('LTR') (line 8699)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE LRO; 3 ('auto') (line 8700)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE LRO; 3 ('LTR') (line 8700)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE RLE; 3 ('auto') (line 8701)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE RLE; 3 ('LTR') (line 8701)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE RLO; 3 ('auto') (line 8702)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE RLO; 3 ('LTR') (line 8702)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE PDF; 3 ('auto') (line 8703)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE PDF; 3 ('LTR') (line 8703)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE BN; 3 ('auto') (line 8704)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRE BN; 3 ('LTR') (line 8704)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO LRE; 3 ('auto') (line 8705)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO LRE; 3 ('LTR') (line 8705)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_027)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L BN LRO LRO; 3 ('auto') (line 8706)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO LRO; 3 ('LTR') (line 8706)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO RLE; 3 ('auto') (line 8707)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO RLE; 3 ('LTR') (line 8707)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO RLO; 3 ('auto') (line 8708)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO RLO; 3 ('LTR') (line 8708)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO PDF; 3 ('auto') (line 8709)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO PDF; 3 ('LTR') (line 8709)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO BN; 3 ('auto') (line 8710)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN LRO BN; 3 ('LTR') (line 8710)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE LRE; 3 ('auto') (line 8711)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE LRE; 3 ('LTR') (line 8711)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE LRO; 3 ('auto') (line 8712)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE LRO; 3 ('LTR') (line 8712)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE RLE; 3 ('auto') (line 8713)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE RLE; 3 ('LTR') (line 8713)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE RLO; 3 ('auto') (line 8714)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE RLO; 3 ('LTR') (line 8714)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE PDF; 3 ('auto') (line 8715)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE PDF; 3 ('LTR') (line 8715)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE BN; 3 ('auto') (line 8716)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLE BN; 3 ('LTR') (line 8716)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO LRE; 3 ('auto') (line 8717)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO LRE; 3 ('LTR') (line 8717)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO LRO; 3 ('auto') (line 8718)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO LRO; 3 ('LTR') (line 8718)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO RLE; 3 ('auto') (line 8719)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO RLE; 3 ('LTR') (line 8719)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO RLO; 3 ('auto') (line 8720)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO RLO; 3 ('LTR') (line 8720)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO PDF; 3 ('auto') (line 8721)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO PDF; 3 ('LTR') (line 8721)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO BN; 3 ('auto') (line 8722)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN RLO BN; 3 ('LTR') (line 8722)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF LRE; 3 ('auto') (line 8723)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF LRE; 3 ('LTR') (line 8723)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF LRO; 3 ('auto') (line 8724)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF LRO; 3 ('LTR') (line 8724)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF RLE; 3 ('auto') (line 8725)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF RLE; 3 ('LTR') (line 8725)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF RLO; 3 ('auto') (line 8726)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF RLO; 3 ('LTR') (line 8726)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF PDF; 3 ('auto') (line 8727)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF PDF; 3 ('LTR') (line 8727)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF BN; 3 ('auto') (line 8728)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN PDF BN; 3 ('LTR') (line 8728)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN LRE; 3 ('auto') (line 8729)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN LRE; 3 ('LTR') (line 8729)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN LRO; 3 ('auto') (line 8730)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN LRO; 3 ('LTR') (line 8730)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_028)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // L BN BN RLE; 3 ('auto') (line 8731)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN RLE; 3 ('LTR') (line 8731)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN RLO; 3 ('auto') (line 8732)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN RLO; 3 ('LTR') (line 8732)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN PDF; 3 ('auto') (line 8733)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN PDF; 3 ('LTR') (line 8733)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN BN; 3 ('auto') (line 8734)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // L BN BN BN; 3 ('LTR') (line 8734)
        std::vector<uint32_t> const cps = { 0x0041, 0x00AD, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE LRE; 3 ('auto') (line 8735)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE LRE; 3 ('LTR') (line 8735)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE LRO; 3 ('auto') (line 8736)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE LRO; 3 ('LTR') (line 8736)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE RLE; 3 ('auto') (line 8737)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE RLE; 3 ('LTR') (line 8737)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE RLO; 3 ('auto') (line 8738)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE RLO; 3 ('LTR') (line 8738)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE PDF; 3 ('auto') (line 8739)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE PDF; 3 ('LTR') (line 8739)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE BN; 3 ('auto') (line 8740)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRE BN; 3 ('LTR') (line 8740)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO LRE; 3 ('auto') (line 8741)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO LRE; 3 ('LTR') (line 8741)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO LRO; 3 ('auto') (line 8742)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO LRO; 3 ('LTR') (line 8742)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO RLE; 3 ('auto') (line 8743)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO RLE; 3 ('LTR') (line 8743)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO RLO; 3 ('auto') (line 8744)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO RLO; 3 ('LTR') (line 8744)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO PDF; 3 ('auto') (line 8745)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO PDF; 3 ('LTR') (line 8745)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO BN; 3 ('auto') (line 8746)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE LRO BN; 3 ('LTR') (line 8746)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE LRE; 3 ('auto') (line 8747)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE LRE; 3 ('LTR') (line 8747)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE LRO; 3 ('auto') (line 8748)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE LRO; 3 ('LTR') (line 8748)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE RLE; 3 ('auto') (line 8749)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE RLE; 3 ('LTR') (line 8749)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE RLO; 3 ('auto') (line 8750)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE RLO; 3 ('LTR') (line 8750)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE PDF; 3 ('auto') (line 8751)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE PDF; 3 ('LTR') (line 8751)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE BN; 3 ('auto') (line 8752)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLE BN; 3 ('LTR') (line 8752)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO LRE; 3 ('auto') (line 8753)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO LRE; 3 ('LTR') (line 8753)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO LRO; 3 ('auto') (line 8754)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO LRO; 3 ('LTR') (line 8754)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO RLE; 3 ('auto') (line 8755)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO RLE; 3 ('LTR') (line 8755)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_029)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN LRE RLO RLO; 3 ('auto') (line 8756)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO RLO; 3 ('LTR') (line 8756)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO PDF; 3 ('auto') (line 8757)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO PDF; 3 ('LTR') (line 8757)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO BN; 3 ('auto') (line 8758)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE RLO BN; 3 ('LTR') (line 8758)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF LRE; 3 ('auto') (line 8759)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF LRE; 3 ('LTR') (line 8759)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF LRO; 3 ('auto') (line 8760)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF LRO; 3 ('LTR') (line 8760)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF RLE; 3 ('auto') (line 8761)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF RLE; 3 ('LTR') (line 8761)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF RLO; 3 ('auto') (line 8762)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF RLO; 3 ('LTR') (line 8762)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF PDF; 3 ('auto') (line 8763)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF PDF; 3 ('LTR') (line 8763)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF BN; 3 ('auto') (line 8764)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE PDF BN; 3 ('LTR') (line 8764)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN LRE; 3 ('auto') (line 8765)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN LRE; 3 ('LTR') (line 8765)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN LRO; 3 ('auto') (line 8766)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN LRO; 3 ('LTR') (line 8766)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN RLE; 3 ('auto') (line 8767)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN RLE; 3 ('LTR') (line 8767)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN RLO; 3 ('auto') (line 8768)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN RLO; 3 ('LTR') (line 8768)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN PDF; 3 ('auto') (line 8769)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN PDF; 3 ('LTR') (line 8769)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN BN; 3 ('auto') (line 8770)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRE BN BN; 3 ('LTR') (line 8770)
        std::vector<uint32_t> const cps = { 0x0030, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE LRE; 3 ('auto') (line 8771)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE LRE; 3 ('LTR') (line 8771)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE LRO; 3 ('auto') (line 8772)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE LRO; 3 ('LTR') (line 8772)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE RLE; 3 ('auto') (line 8773)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE RLE; 3 ('LTR') (line 8773)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE RLO; 3 ('auto') (line 8774)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE RLO; 3 ('LTR') (line 8774)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE PDF; 3 ('auto') (line 8775)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE PDF; 3 ('LTR') (line 8775)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE BN; 3 ('auto') (line 8776)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRE BN; 3 ('LTR') (line 8776)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO LRE; 3 ('auto') (line 8777)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO LRE; 3 ('LTR') (line 8777)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO LRO; 3 ('auto') (line 8778)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO LRO; 3 ('LTR') (line 8778)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO RLE; 3 ('auto') (line 8779)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO RLE; 3 ('LTR') (line 8779)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO RLO; 3 ('auto') (line 8780)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO RLO; 3 ('LTR') (line 8780)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_030)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN LRO LRO PDF; 3 ('auto') (line 8781)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO PDF; 3 ('LTR') (line 8781)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO BN; 3 ('auto') (line 8782)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO LRO BN; 3 ('LTR') (line 8782)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE LRE; 3 ('auto') (line 8783)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE LRE; 3 ('LTR') (line 8783)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE LRO; 3 ('auto') (line 8784)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE LRO; 3 ('LTR') (line 8784)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE RLE; 3 ('auto') (line 8785)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE RLE; 3 ('LTR') (line 8785)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE RLO; 3 ('auto') (line 8786)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE RLO; 3 ('LTR') (line 8786)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE PDF; 3 ('auto') (line 8787)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE PDF; 3 ('LTR') (line 8787)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE BN; 3 ('auto') (line 8788)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLE BN; 3 ('LTR') (line 8788)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO LRE; 3 ('auto') (line 8789)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO LRE; 3 ('LTR') (line 8789)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO LRO; 3 ('auto') (line 8790)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO LRO; 3 ('LTR') (line 8790)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO RLE; 3 ('auto') (line 8791)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO RLE; 3 ('LTR') (line 8791)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO RLO; 3 ('auto') (line 8792)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO RLO; 3 ('LTR') (line 8792)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO PDF; 3 ('auto') (line 8793)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO PDF; 3 ('LTR') (line 8793)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO BN; 3 ('auto') (line 8794)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO RLO BN; 3 ('LTR') (line 8794)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF LRE; 3 ('auto') (line 8795)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF LRE; 3 ('LTR') (line 8795)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF LRO; 3 ('auto') (line 8796)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF LRO; 3 ('LTR') (line 8796)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF RLE; 3 ('auto') (line 8797)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF RLE; 3 ('LTR') (line 8797)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF RLO; 3 ('auto') (line 8798)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF RLO; 3 ('LTR') (line 8798)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF PDF; 3 ('auto') (line 8799)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF PDF; 3 ('LTR') (line 8799)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF BN; 3 ('auto') (line 8800)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO PDF BN; 3 ('LTR') (line 8800)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN LRE; 3 ('auto') (line 8801)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN LRE; 3 ('LTR') (line 8801)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN LRO; 3 ('auto') (line 8802)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN LRO; 3 ('LTR') (line 8802)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN RLE; 3 ('auto') (line 8803)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN RLE; 3 ('LTR') (line 8803)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN RLO; 3 ('auto') (line 8804)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN RLO; 3 ('LTR') (line 8804)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN PDF; 3 ('auto') (line 8805)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN PDF; 3 ('LTR') (line 8805)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_031)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN LRO BN BN; 3 ('auto') (line 8806)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN LRO BN BN; 3 ('LTR') (line 8806)
        std::vector<uint32_t> const cps = { 0x0030, 0x202D, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE LRE; 3 ('auto') (line 8807)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE LRE; 3 ('LTR') (line 8807)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE LRO; 3 ('auto') (line 8808)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE LRO; 3 ('LTR') (line 8808)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE RLE; 3 ('auto') (line 8809)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE RLE; 3 ('LTR') (line 8809)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE RLO; 3 ('auto') (line 8810)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE RLO; 3 ('LTR') (line 8810)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE PDF; 3 ('auto') (line 8811)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE PDF; 3 ('LTR') (line 8811)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE BN; 3 ('auto') (line 8812)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRE BN; 3 ('LTR') (line 8812)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO LRE; 3 ('auto') (line 8813)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO LRE; 3 ('LTR') (line 8813)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO LRO; 3 ('auto') (line 8814)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO LRO; 3 ('LTR') (line 8814)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO RLE; 3 ('auto') (line 8815)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO RLE; 3 ('LTR') (line 8815)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO RLO; 3 ('auto') (line 8816)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO RLO; 3 ('LTR') (line 8816)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO PDF; 3 ('auto') (line 8817)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO PDF; 3 ('LTR') (line 8817)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO BN; 3 ('auto') (line 8818)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE LRO BN; 3 ('LTR') (line 8818)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE LRE; 3 ('auto') (line 8819)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE LRE; 3 ('LTR') (line 8819)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE LRO; 3 ('auto') (line 8820)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE LRO; 3 ('LTR') (line 8820)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE RLE; 3 ('auto') (line 8821)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE RLE; 3 ('LTR') (line 8821)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE RLO; 3 ('auto') (line 8822)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE RLO; 3 ('LTR') (line 8822)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE PDF; 3 ('auto') (line 8823)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE PDF; 3 ('LTR') (line 8823)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE BN; 3 ('auto') (line 8824)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLE BN; 3 ('LTR') (line 8824)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO LRE; 3 ('auto') (line 8825)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO LRE; 3 ('LTR') (line 8825)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO LRO; 3 ('auto') (line 8826)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO LRO; 3 ('LTR') (line 8826)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO RLE; 3 ('auto') (line 8827)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO RLE; 3 ('LTR') (line 8827)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO RLO; 3 ('auto') (line 8828)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO RLO; 3 ('LTR') (line 8828)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO PDF; 3 ('auto') (line 8829)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO PDF; 3 ('LTR') (line 8829)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO BN; 3 ('auto') (line 8830)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE RLO BN; 3 ('LTR') (line 8830)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_032)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN RLE PDF LRE; 3 ('auto') (line 8831)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF LRE; 3 ('LTR') (line 8831)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF LRO; 3 ('auto') (line 8832)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF LRO; 3 ('LTR') (line 8832)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF RLE; 3 ('auto') (line 8833)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF RLE; 3 ('LTR') (line 8833)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF RLO; 3 ('auto') (line 8834)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF RLO; 3 ('LTR') (line 8834)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF PDF; 3 ('auto') (line 8835)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF PDF; 3 ('LTR') (line 8835)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF BN; 3 ('auto') (line 8836)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE PDF BN; 3 ('LTR') (line 8836)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN LRE; 3 ('auto') (line 8837)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN LRE; 3 ('LTR') (line 8837)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN LRO; 3 ('auto') (line 8838)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN LRO; 3 ('LTR') (line 8838)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN RLE; 3 ('auto') (line 8839)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN RLE; 3 ('LTR') (line 8839)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN RLO; 3 ('auto') (line 8840)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN RLO; 3 ('LTR') (line 8840)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN PDF; 3 ('auto') (line 8841)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN PDF; 3 ('LTR') (line 8841)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN BN; 3 ('auto') (line 8842)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLE BN BN; 3 ('LTR') (line 8842)
        std::vector<uint32_t> const cps = { 0x0030, 0x202B, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE LRE; 3 ('auto') (line 8843)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE LRE; 3 ('LTR') (line 8843)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE LRO; 3 ('auto') (line 8844)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE LRO; 3 ('LTR') (line 8844)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE RLE; 3 ('auto') (line 8845)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE RLE; 3 ('LTR') (line 8845)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE RLO; 3 ('auto') (line 8846)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE RLO; 3 ('LTR') (line 8846)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE PDF; 3 ('auto') (line 8847)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE PDF; 3 ('LTR') (line 8847)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE BN; 3 ('auto') (line 8848)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRE BN; 3 ('LTR') (line 8848)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO LRE; 3 ('auto') (line 8849)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO LRE; 3 ('LTR') (line 8849)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO LRO; 3 ('auto') (line 8850)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO LRO; 3 ('LTR') (line 8850)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO RLE; 3 ('auto') (line 8851)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO RLE; 3 ('LTR') (line 8851)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO RLO; 3 ('auto') (line 8852)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO RLO; 3 ('LTR') (line 8852)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO PDF; 3 ('auto') (line 8853)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO PDF; 3 ('LTR') (line 8853)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO BN; 3 ('auto') (line 8854)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO LRO BN; 3 ('LTR') (line 8854)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE LRE; 3 ('auto') (line 8855)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE LRE; 3 ('LTR') (line 8855)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_033)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN RLO RLE LRO; 3 ('auto') (line 8856)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE LRO; 3 ('LTR') (line 8856)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE RLE; 3 ('auto') (line 8857)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE RLE; 3 ('LTR') (line 8857)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE RLO; 3 ('auto') (line 8858)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE RLO; 3 ('LTR') (line 8858)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE PDF; 3 ('auto') (line 8859)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE PDF; 3 ('LTR') (line 8859)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE BN; 3 ('auto') (line 8860)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLE BN; 3 ('LTR') (line 8860)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO LRE; 3 ('auto') (line 8861)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO LRE; 3 ('LTR') (line 8861)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO LRO; 3 ('auto') (line 8862)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO LRO; 3 ('LTR') (line 8862)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO RLE; 3 ('auto') (line 8863)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO RLE; 3 ('LTR') (line 8863)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO RLO; 3 ('auto') (line 8864)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO RLO; 3 ('LTR') (line 8864)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO PDF; 3 ('auto') (line 8865)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO PDF; 3 ('LTR') (line 8865)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO BN; 3 ('auto') (line 8866)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO RLO BN; 3 ('LTR') (line 8866)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF LRE; 3 ('auto') (line 8867)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF LRE; 3 ('LTR') (line 8867)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF LRO; 3 ('auto') (line 8868)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF LRO; 3 ('LTR') (line 8868)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF RLE; 3 ('auto') (line 8869)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF RLE; 3 ('LTR') (line 8869)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF RLO; 3 ('auto') (line 8870)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF RLO; 3 ('LTR') (line 8870)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF PDF; 3 ('auto') (line 8871)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF PDF; 3 ('LTR') (line 8871)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF BN; 3 ('auto') (line 8872)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO PDF BN; 3 ('LTR') (line 8872)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN LRE; 3 ('auto') (line 8873)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN LRE; 3 ('LTR') (line 8873)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN LRO; 3 ('auto') (line 8874)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN LRO; 3 ('LTR') (line 8874)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN RLE; 3 ('auto') (line 8875)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN RLE; 3 ('LTR') (line 8875)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN RLO; 3 ('auto') (line 8876)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN RLO; 3 ('LTR') (line 8876)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN PDF; 3 ('auto') (line 8877)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN PDF; 3 ('LTR') (line 8877)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN BN; 3 ('auto') (line 8878)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN RLO BN BN; 3 ('LTR') (line 8878)
        std::vector<uint32_t> const cps = { 0x0030, 0x202E, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE LRE; 3 ('auto') (line 8879)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE LRE; 3 ('LTR') (line 8879)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE LRO; 3 ('auto') (line 8880)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE LRO; 3 ('LTR') (line 8880)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_034)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN PDF LRE RLE; 3 ('auto') (line 8881)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE RLE; 3 ('LTR') (line 8881)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE RLO; 3 ('auto') (line 8882)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE RLO; 3 ('LTR') (line 8882)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE PDF; 3 ('auto') (line 8883)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE PDF; 3 ('LTR') (line 8883)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE BN; 3 ('auto') (line 8884)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRE BN; 3 ('LTR') (line 8884)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO LRE; 3 ('auto') (line 8885)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO LRE; 3 ('LTR') (line 8885)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO LRO; 3 ('auto') (line 8886)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO LRO; 3 ('LTR') (line 8886)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO RLE; 3 ('auto') (line 8887)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO RLE; 3 ('LTR') (line 8887)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO RLO; 3 ('auto') (line 8888)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO RLO; 3 ('LTR') (line 8888)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO PDF; 3 ('auto') (line 8889)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO PDF; 3 ('LTR') (line 8889)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO BN; 3 ('auto') (line 8890)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF LRO BN; 3 ('LTR') (line 8890)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE LRE; 3 ('auto') (line 8891)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE LRE; 3 ('LTR') (line 8891)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE LRO; 3 ('auto') (line 8892)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE LRO; 3 ('LTR') (line 8892)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE RLE; 3 ('auto') (line 8893)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE RLE; 3 ('LTR') (line 8893)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE RLO; 3 ('auto') (line 8894)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE RLO; 3 ('LTR') (line 8894)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE PDF; 3 ('auto') (line 8895)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE PDF; 3 ('LTR') (line 8895)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE BN; 3 ('auto') (line 8896)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLE BN; 3 ('LTR') (line 8896)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO LRE; 3 ('auto') (line 8897)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO LRE; 3 ('LTR') (line 8897)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO LRO; 3 ('auto') (line 8898)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO LRO; 3 ('LTR') (line 8898)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO RLE; 3 ('auto') (line 8899)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO RLE; 3 ('LTR') (line 8899)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO RLO; 3 ('auto') (line 8900)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO RLO; 3 ('LTR') (line 8900)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO PDF; 3 ('auto') (line 8901)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO PDF; 3 ('LTR') (line 8901)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO BN; 3 ('auto') (line 8902)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF RLO BN; 3 ('LTR') (line 8902)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF LRE; 3 ('auto') (line 8903)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF LRE; 3 ('LTR') (line 8903)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF LRO; 3 ('auto') (line 8904)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF LRO; 3 ('LTR') (line 8904)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF RLE; 3 ('auto') (line 8905)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF RLE; 3 ('LTR') (line 8905)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_035)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN PDF PDF RLO; 3 ('auto') (line 8906)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF RLO; 3 ('LTR') (line 8906)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF PDF; 3 ('auto') (line 8907)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF PDF; 3 ('LTR') (line 8907)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF BN; 3 ('auto') (line 8908)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF PDF BN; 3 ('LTR') (line 8908)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN LRE; 3 ('auto') (line 8909)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN LRE; 3 ('LTR') (line 8909)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN LRO; 3 ('auto') (line 8910)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN LRO; 3 ('LTR') (line 8910)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN RLE; 3 ('auto') (line 8911)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN RLE; 3 ('LTR') (line 8911)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN RLO; 3 ('auto') (line 8912)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN RLO; 3 ('LTR') (line 8912)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN PDF; 3 ('auto') (line 8913)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN PDF; 3 ('LTR') (line 8913)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN BN; 3 ('auto') (line 8914)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN PDF BN BN; 3 ('LTR') (line 8914)
        std::vector<uint32_t> const cps = { 0x0030, 0x202C, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE LRE; 3 ('auto') (line 8915)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE LRE; 3 ('LTR') (line 8915)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE LRO; 3 ('auto') (line 8916)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE LRO; 3 ('LTR') (line 8916)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE RLE; 3 ('auto') (line 8917)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE RLE; 3 ('LTR') (line 8917)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE RLO; 3 ('auto') (line 8918)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE RLO; 3 ('LTR') (line 8918)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE PDF; 3 ('auto') (line 8919)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE PDF; 3 ('LTR') (line 8919)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE BN; 3 ('auto') (line 8920)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRE BN; 3 ('LTR') (line 8920)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO LRE; 3 ('auto') (line 8921)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO LRE; 3 ('LTR') (line 8921)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO LRO; 3 ('auto') (line 8922)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO LRO; 3 ('LTR') (line 8922)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO RLE; 3 ('auto') (line 8923)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO RLE; 3 ('LTR') (line 8923)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO RLO; 3 ('auto') (line 8924)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO RLO; 3 ('LTR') (line 8924)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO PDF; 3 ('auto') (line 8925)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO PDF; 3 ('LTR') (line 8925)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO BN; 3 ('auto') (line 8926)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN LRO BN; 3 ('LTR') (line 8926)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE LRE; 3 ('auto') (line 8927)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE LRE; 3 ('LTR') (line 8927)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE LRO; 3 ('auto') (line 8928)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE LRO; 3 ('LTR') (line 8928)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE RLE; 3 ('auto') (line 8929)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE RLE; 3 ('LTR') (line 8929)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE RLO; 3 ('auto') (line 8930)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE RLO; 3 ('LTR') (line 8930)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_036)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // EN BN RLE PDF; 3 ('auto') (line 8931)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE PDF; 3 ('LTR') (line 8931)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE BN; 3 ('auto') (line 8932)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLE BN; 3 ('LTR') (line 8932)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO LRE; 3 ('auto') (line 8933)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO LRE; 3 ('LTR') (line 8933)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO LRO; 3 ('auto') (line 8934)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO LRO; 3 ('LTR') (line 8934)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO RLE; 3 ('auto') (line 8935)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO RLE; 3 ('LTR') (line 8935)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO RLO; 3 ('auto') (line 8936)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO RLO; 3 ('LTR') (line 8936)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO PDF; 3 ('auto') (line 8937)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO PDF; 3 ('LTR') (line 8937)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO BN; 3 ('auto') (line 8938)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN RLO BN; 3 ('LTR') (line 8938)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF LRE; 3 ('auto') (line 8939)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF LRE; 3 ('LTR') (line 8939)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF LRO; 3 ('auto') (line 8940)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF LRO; 3 ('LTR') (line 8940)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF RLE; 3 ('auto') (line 8941)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF RLE; 3 ('LTR') (line 8941)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF RLO; 3 ('auto') (line 8942)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF RLO; 3 ('LTR') (line 8942)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF PDF; 3 ('auto') (line 8943)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF PDF; 3 ('LTR') (line 8943)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF BN; 3 ('auto') (line 8944)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN PDF BN; 3 ('LTR') (line 8944)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN LRE; 3 ('auto') (line 8945)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN LRE; 3 ('LTR') (line 8945)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN LRO; 3 ('auto') (line 8946)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN LRO; 3 ('LTR') (line 8946)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN RLE; 3 ('auto') (line 8947)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN RLE; 3 ('LTR') (line 8947)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN RLO; 3 ('auto') (line 8948)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN RLO; 3 ('LTR') (line 8948)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN PDF; 3 ('auto') (line 8949)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN PDF; 3 ('LTR') (line 8949)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN BN; 3 ('auto') (line 8950)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // EN BN BN BN; 3 ('LTR') (line 8950)
        std::vector<uint32_t> const cps = { 0x0030, 0x00AD, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE LRE; 3 ('auto') (line 8951)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE LRE; 3 ('LTR') (line 8951)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE LRO; 3 ('auto') (line 8952)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE LRO; 3 ('LTR') (line 8952)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE RLE; 3 ('auto') (line 8953)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE RLE; 3 ('LTR') (line 8953)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE RLO; 3 ('auto') (line 8954)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE RLO; 3 ('LTR') (line 8954)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE PDF; 3 ('auto') (line 8955)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE PDF; 3 ('LTR') (line 8955)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_037)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // ES LRE LRE BN; 3 ('auto') (line 8956)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRE BN; 3 ('LTR') (line 8956)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO LRE; 3 ('auto') (line 8957)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO LRE; 3 ('LTR') (line 8957)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO LRO; 3 ('auto') (line 8958)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO LRO; 3 ('LTR') (line 8958)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO RLE; 3 ('auto') (line 8959)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO RLE; 3 ('LTR') (line 8959)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO RLO; 3 ('auto') (line 8960)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO RLO; 3 ('LTR') (line 8960)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO PDF; 3 ('auto') (line 8961)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO PDF; 3 ('LTR') (line 8961)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO BN; 3 ('auto') (line 8962)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE LRO BN; 3 ('LTR') (line 8962)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE LRE; 3 ('auto') (line 8963)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE LRE; 3 ('LTR') (line 8963)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE LRO; 3 ('auto') (line 8964)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE LRO; 3 ('LTR') (line 8964)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE RLE; 3 ('auto') (line 8965)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE RLE; 3 ('LTR') (line 8965)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE RLO; 3 ('auto') (line 8966)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE RLO; 3 ('LTR') (line 8966)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE PDF; 3 ('auto') (line 8967)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE PDF; 3 ('LTR') (line 8967)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE BN; 3 ('auto') (line 8968)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLE BN; 3 ('LTR') (line 8968)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO LRE; 3 ('auto') (line 8969)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO LRE; 3 ('LTR') (line 8969)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO LRO; 3 ('auto') (line 8970)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO LRO; 3 ('LTR') (line 8970)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO RLE; 3 ('auto') (line 8971)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO RLE; 3 ('LTR') (line 8971)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO RLO; 3 ('auto') (line 8972)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO RLO; 3 ('LTR') (line 8972)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO PDF; 3 ('auto') (line 8973)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO PDF; 3 ('LTR') (line 8973)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO BN; 3 ('auto') (line 8974)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE RLO BN; 3 ('LTR') (line 8974)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202E, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF LRE; 3 ('auto') (line 8975)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF LRE; 3 ('LTR') (line 8975)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF LRO; 3 ('auto') (line 8976)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF LRO; 3 ('LTR') (line 8976)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF RLE; 3 ('auto') (line 8977)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF RLE; 3 ('LTR') (line 8977)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF RLO; 3 ('auto') (line 8978)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF RLO; 3 ('LTR') (line 8978)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF PDF; 3 ('auto') (line 8979)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF PDF; 3 ('LTR') (line 8979)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF BN; 3 ('auto') (line 8980)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE PDF BN; 3 ('LTR') (line 8980)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x202C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_008_038)
{

    expected_levels = { 0, -1, -1, -1 };

    {
        // ES LRE BN LRE; 3 ('auto') (line 8981)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN LRE; 3 ('LTR') (line 8981)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN LRO; 3 ('auto') (line 8982)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN LRO; 3 ('LTR') (line 8982)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN RLE; 3 ('auto') (line 8983)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN RLE; 3 ('LTR') (line 8983)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN RLO; 3 ('auto') (line 8984)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN RLO; 3 ('LTR') (line 8984)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN PDF; 3 ('auto') (line 8985)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN PDF; 3 ('LTR') (line 8985)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN BN; 3 ('auto') (line 8986)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRE BN BN; 3 ('LTR') (line 8986)
        std::vector<uint32_t> const cps = { 0x002B, 0x202A, 0x00AD, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE LRE; 3 ('auto') (line 8987)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE LRE; 3 ('LTR') (line 8987)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE LRO; 3 ('auto') (line 8988)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE LRO; 3 ('LTR') (line 8988)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE RLE; 3 ('auto') (line 8989)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE RLE; 3 ('LTR') (line 8989)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE RLO; 3 ('auto') (line 8990)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE RLO; 3 ('LTR') (line 8990)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE PDF; 3 ('auto') (line 8991)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE PDF; 3 ('LTR') (line 8991)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE BN; 3 ('auto') (line 8992)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRE BN; 3 ('LTR') (line 8992)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202A, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO LRE; 3 ('auto') (line 8993)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO LRE; 3 ('LTR') (line 8993)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO LRO; 3 ('auto') (line 8994)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO LRO; 3 ('LTR') (line 8994)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO RLE; 3 ('auto') (line 8995)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO RLE; 3 ('LTR') (line 8995)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO RLO; 3 ('auto') (line 8996)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO RLO; 3 ('LTR') (line 8996)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO PDF; 3 ('auto') (line 8997)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO PDF; 3 ('LTR') (line 8997)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO BN; 3 ('auto') (line 8998)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO LRO BN; 3 ('LTR') (line 8998)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202D, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO RLE LRE; 3 ('auto') (line 8999)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO RLE LRE; 3 ('LTR') (line 8999)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO RLE LRO; 3 ('auto') (line 9000)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // ES LRO RLE LRO; 3 ('LTR') (line 9000)
        std::vector<uint32_t> const cps = { 0x002B, 0x202D, 0x202B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

}
