// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_109_000)
{
    // 0049 0334 0300;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_001)
{
    // 0049 0334 0340;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_002)
{
    // 00CC 0334;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CC, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_003)
{
    // 0069 0306 0334;	
    // (ĭ) LATIN SMALL LETTER I, COMBINING BREVE	[1D98 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_004)
{
    // 0069 0334 0306;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_005)
{
    // 012D 0334;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012D, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_006)
{
    // 0049 0306 0334;	
    // (Ĭ) LATIN CAPITAL LETTER I, COMBINING BREVE	[1D98 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_007)
{
    // 0049 0334 0306;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_008)
{
    // 012C 0334;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012C, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_009)
{
    // 0069 0302 0334;	
    // (î) LATIN SMALL LETTER I, COMBINING CIRCUMFLEX ACCENT	[1D98 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_010)
{
    // 0069 0334 0302;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_011)
{
    // 00EE 0334;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EE, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_012)
{
    // 0049 0302 0334;	
    // (Î) LATIN CAPITAL LETTER I, COMBINING CIRCUMFLEX ACCENT	[1D98 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_013)
{
    // 0049 0334 0302;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_014)
{
    // 00CE 0334;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CE, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_015)
{
    // 0069 030C 0334;	
    // (ǐ) LATIN SMALL LETTER I, COMBINING CARON	[1D98 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_016)
{
    // 0069 0334 030C;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_017)
{
    // 01D0 0334;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D0, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_018)
{
    // 0049 030C 0334;	
    // (Ǐ) LATIN CAPITAL LETTER I, COMBINING CARON	[1D98 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_019)
{
    // 0049 0334 030C;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_020)
{
    // 01CF 0334;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CF, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_021)
{
    // 0069 0308 0334;	
    // (ï) LATIN SMALL LETTER I, COMBINING DIAERESIS	[1D98 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_022)
{
    // 0069 0334 0308;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_023)
{
    // 00EF 0334;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EF, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_024)
{
    // 0049 0308 0334;	
    // (Ï) LATIN CAPITAL LETTER I, COMBINING DIAERESIS	[1D98 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_025)
{
    // 0049 0334 0308;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_026)
{
    // 00CF 0334;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CF, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_027)
{
    // 0069 0308 0301 0334;	
    // (ḯ) LATIN SMALL LETTER I, COMBINING DIAERESIS, COMBINING ACUTE ACCENT	[1D98 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0069, 0x0308, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_028)
{
    // 00EF 0301 0334;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS, COMBINING ACUTE ACCENT	[1D98 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00EF, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_029)
{
    // 00EF 0341 0334;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS, COMBINING ACUTE TONE MARK	[1D98 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00EF, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_030)
{
    // 1E2F 0334;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 | 0020 004A 002B 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2F, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_031)
{
    // 0049 0308 0334 0301;	
    // (Ï̴) LATIN CAPITAL LETTER I, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002B 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0049, 0x0308, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_032)
{
    // 0049 0308 0334 0341;	
    // (Ï̴) LATIN CAPITAL LETTER I, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002B 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0049, 0x0308, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_033)
{
    // 00CF 0301 0334;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS, COMBINING ACUTE ACCENT	[1D98 | 0020 004A 002B 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00CF, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_034)
{
    // 00CF 0341 0334;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS, COMBINING ACUTE TONE MARK	[1D98 | 0020 004A 002B 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00CF, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002B, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_035)
{
    // 0069 0303 0334;	
    // (ĩ) LATIN SMALL LETTER I, COMBINING TILDE	[1D98 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_036)
{
    // 0069 0334 0303;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_037)
{
    // 0129 0334;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0129, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_038)
{
    // 0049 0303 0334;	
    // (Ĩ) LATIN CAPITAL LETTER I, COMBINING TILDE	[1D98 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_039)
{
    // 0049 0334 0303;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_040)
{
    // 0128 0334;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0128, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_041)
{
    // 0049 0307 0334;	
    // (İ) LATIN CAPITAL LETTER I, COMBINING DOT ABOVE	[1D98 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_042)
{
    // 0049 0334 0307;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_043)
{
    // 0130 0334;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0130, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_044)
{
    // 0069 0328 0334;	
    // (į) LATIN SMALL LETTER I, COMBINING OGONEK	[1D98 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_045)
{
    // 0069 0334 0328;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_046)
{
    // 012F 0334;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012F, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_047)
{
    // 0049 0328 0334;	
    // (Į) LATIN CAPITAL LETTER I, COMBINING OGONEK	[1D98 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_048)
{
    // 0049 0334 0328;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_049)
{
    // 012E 0334;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012E, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_050)
{
    // 0069 0304 0334;	
    // (ī) LATIN SMALL LETTER I, COMBINING MACRON	[1D98 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_051)
{
    // 0069 0334 0304;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_052)
{
    // 012B 0334;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012B, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_053)
{
    // 0049 0304 0334;	
    // (Ī) LATIN CAPITAL LETTER I, COMBINING MACRON	[1D98 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_054)
{
    // 0049 0334 0304;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_055)
{
    // 012A 0334;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012A, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_056)
{
    // 0069 0309 0334;	
    // (ỉ) LATIN SMALL LETTER I, COMBINING HOOK ABOVE	[1D98 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_057)
{
    // 0069 0334 0309;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_058)
{
    // 1EC9 0334;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC9, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_059)
{
    // 0049 0309 0334;	
    // (Ỉ) LATIN CAPITAL LETTER I, COMBINING HOOK ABOVE	[1D98 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_060)
{
    // 0049 0334 0309;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_061)
{
    // 1EC8 0334;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EC8, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_062)
{
    // 0069 030F 0334;	
    // (ȉ) LATIN SMALL LETTER I, COMBINING DOUBLE GRAVE ACCENT	[1D98 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_063)
{
    // 0069 0334 030F;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_064)
{
    // 0209 0334;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0209, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_065)
{
    // 0049 030F 0334;	
    // (Ȉ) LATIN CAPITAL LETTER I, COMBINING DOUBLE GRAVE ACCENT	[1D98 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_066)
{
    // 0049 0334 030F;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_067)
{
    // 0208 0334;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0208, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_068)
{
    // 0069 0311 0334;	
    // (ȋ) LATIN SMALL LETTER I, COMBINING INVERTED BREVE	[1D98 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_069)
{
    // 0069 0334 0311;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_070)
{
    // 020B 0334;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020B, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_071)
{
    // 0049 0311 0334;	
    // (Ȋ) LATIN CAPITAL LETTER I, COMBINING INVERTED BREVE	[1D98 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_072)
{
    // 0049 0334 0311;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_073)
{
    // 020A 0334;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020A, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_074)
{
    // 0069 0323 0334;	
    // (ị) LATIN SMALL LETTER I, COMBINING DOT BELOW	[1D98 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_075)
{
    // 0069 0334 0323;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_076)
{
    // 1ECB 0334;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECB, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_077)
{
    // 0049 0323 0334;	
    // (Ị) LATIN CAPITAL LETTER I, COMBINING DOT BELOW	[1D98 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_078)
{
    // 0049 0334 0323;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_079)
{
    // 1ECA 0334;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECA, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_080)
{
    // 0069 0330 0334;	
    // (ḭ) LATIN SMALL LETTER I, COMBINING TILDE BELOW	[1D98 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0330, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_081)
{
    // 0069 0334 0330;	
    // (i̴) LATIN SMALL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0069, 0x0334, 0x0330 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_082)
{
    // 1E2D 0334;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2D, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_083)
{
    // 0049 0330 0334;	
    // (Ḭ) LATIN CAPITAL LETTER I, COMBINING TILDE BELOW	[1D98 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0330, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_084)
{
    // 0049 0334 0330;	
    // (I̴) LATIN CAPITAL LETTER I, COMBINING TILDE OVERLAY	[1D98 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0049, 0x0334, 0x0330 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_085)
{
    // 1E2C 0334;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E2C, 0x0334 };
    uint32_t const ces[10] = { 0x1D98, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_086)
{
    // 0334 0365;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0365 };
    uint32_t const ces[8] = { 0x1D98, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_087)
{
    // 0365 0334;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0365, 0x0334 };
    uint32_t const ces[8] = { 0x1D98, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_088)
{
    // 0069 0021;	
    // (i) LATIN SMALL LETTER I	[1D98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0069, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_089)
{
    // FF49 0021;	
    // (ｉ) FULLWIDTH LATIN SMALL LETTER I	[1D98 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF49, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_090)
{
    // 0365 0021;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0365, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_091)
{
    // 2170 0021;	
    // (ⅰ) SMALL ROMAN NUMERAL ONE	[1D98 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2170, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_092)
{
    // 2139 0021;	
    // (ℹ) INFORMATION SOURCE	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2139, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_093)
{
    // 2148 0021;	
    // (ⅈ) DOUBLE-STRUCK ITALIC SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2148, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_094)
{
    // 1D422 0021;	
    // (𝐢) MATHEMATICAL BOLD SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D422, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_095)
{
    // 1D456 0021;	
    // (𝑖) MATHEMATICAL ITALIC SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D456, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_096)
{
    // 1D48A 0021;	
    // (𝒊) MATHEMATICAL BOLD ITALIC SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48A, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_097)
{
    // 1D4BE 0021;	
    // (𝒾) MATHEMATICAL SCRIPT SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BE, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_098)
{
    // 1D4F2 0021;	
    // (𝓲) MATHEMATICAL BOLD SCRIPT SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F2, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_099)
{
    // 1D526 0021;	
    // (𝔦) MATHEMATICAL FRAKTUR SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D526, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_100)
{
    // 1D55A 0021;	
    // (𝕚) MATHEMATICAL DOUBLE-STRUCK SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55A, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_101)
{
    // 1D58E 0021;	
    // (𝖎) MATHEMATICAL BOLD FRAKTUR SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58E, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_102)
{
    // 1D5C2 0021;	
    // (𝗂) MATHEMATICAL SANS-SERIF SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C2, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_103)
{
    // 1D5F6 0021;	
    // (𝗶) MATHEMATICAL SANS-SERIF BOLD SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F6, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_104)
{
    // 1D62A 0021;	
    // (𝘪) MATHEMATICAL SANS-SERIF ITALIC SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62A, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_105)
{
    // 1D65E 0021;	
    // (𝙞) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65E, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_106)
{
    // 1D692 0021;	
    // (𝚒) MATHEMATICAL MONOSPACE SMALL I	[1D98 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D692, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_107)
{
    // 24D8 0021;	
    // (ⓘ) CIRCLED LATIN SMALL LETTER I	[1D98 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D8, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_108)
{
    // 0049 0021;	
    // (I) LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0049, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_109)
{
    // FF29 0021;	
    // (Ｉ) FULLWIDTH LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF29, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_110)
{
    // 2160 0021;	
    // (Ⅰ) ROMAN NUMERAL ONE	[1D98 0261 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2160, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_111)
{
    // 2110 0021;	
    // (ℐ) SCRIPT CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2110, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_112)
{
    // 2111 0021;	
    // (ℑ) BLACK-LETTER CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2111, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_113)
{
    // 1D408 0021;	
    // (𝐈) MATHEMATICAL BOLD CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D408, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_114)
{
    // 1D43C 0021;	
    // (𝐼) MATHEMATICAL ITALIC CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43C, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_115)
{
    // 1D470 0021;	
    // (𝑰) MATHEMATICAL BOLD ITALIC CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D470, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_116)
{
    // 1D4D8 0021;	
    // (𝓘) MATHEMATICAL BOLD SCRIPT CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D8, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_117)
{
    // 1D540 0021;	
    // (𝕀) MATHEMATICAL DOUBLE-STRUCK CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D540, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_118)
{
    // 1D574 0021;	
    // (𝕴) MATHEMATICAL BOLD FRAKTUR CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D574, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_119)
{
    // 1D5A8 0021;	
    // (𝖨) MATHEMATICAL SANS-SERIF CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A8, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_120)
{
    // 1D5DC 0021;	
    // (𝗜) MATHEMATICAL SANS-SERIF BOLD CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DC, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_121)
{
    // 1D610 0021;	
    // (𝘐) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D610, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_122)
{
    // 1D644 0021;	
    // (𝙄) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D644, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_123)
{
    // 1D678 0021;	
    // (𝙸) MATHEMATICAL MONOSPACE CAPITAL I	[1D98 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D678, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_124)
{
    // 24BE 0021;	
    // (Ⓘ) CIRCLED LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BE, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_125)
{
    // 1F158 0021;	
    // (🅘) NEGATIVE CIRCLED LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F158, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_126)
{
    // 2071 0021;	
    // (ⁱ) SUPERSCRIPT LATIN SMALL LETTER I	[1D98 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2071, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_127)
{
    // 1D62 0021;	
    // (ᵢ) LATIN SUBSCRIPT SMALL LETTER I	[1D98 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D62, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_128)
{
    // 1D35 0021;	
    // (ᴵ) MODIFIER LETTER CAPITAL I	[1D98 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D35, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_129)
{
    // 1F138 0021;	
    // (🄸) SQUARED LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F138, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_130)
{
    // 1F178 0021;	
    // (🅸) NEGATIVE SQUARED LATIN CAPITAL LETTER I	[1D98 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F178, 0x0021 };
    uint32_t const ces[9] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_131)
{
    // 00ED 0021;	
    // (í) LATIN SMALL LETTER I WITH ACUTE	[1D98 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00ED, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_132)
{
    // 00CD 0021;	
    // (Í) LATIN CAPITAL LETTER I WITH ACUTE	[1D98 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CD, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_133)
{
    // 00EC 0021;	
    // (ì) LATIN SMALL LETTER I WITH GRAVE	[1D98 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EC, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_134)
{
    // 00CC 0021;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CC, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_135)
{
    // 012D 0021;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012D, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_136)
{
    // 012C 0021;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012C, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_137)
{
    // 00EE 0021;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EE, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_138)
{
    // 00CE 0021;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CE, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_139)
{
    // 01D0 0021;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D0, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_140)
{
    // 01CF 0021;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CF, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_141)
{
    // 00EF 0021;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EF, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_142)
{
    // 00CF 0021;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CF, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_143)
{
    // 1E2F 0021;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 0261 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2F, 0x0021 };
    uint32_t const ces[13] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_144)
{
    // 1E2E 0021;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE	[1D98 0261 | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2E, 0x0021 };
    uint32_t const ces[13] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_145)
{
    // 0129 0021;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 0261 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0129, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_146)
{
    // 0128 0021;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 0261 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0128, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_147)
{
    // 0130 0021;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0130, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_148)
{
    // 012F 0021;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 0261 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012F, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_149)
{
    // 012E 0021;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 0261 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012E, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_150)
{
    // 012B 0021;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012B, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_151)
{
    // 012A 0021;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012A, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_152)
{
    // 1EC9 0021;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC9, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_153)
{
    // 1EC8 0021;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EC8, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_154)
{
    // 0209 0021;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0209, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_155)
{
    // 0208 0021;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0208, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_156)
{
    // 020B 0021;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 0261 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020B, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_157)
{
    // 020A 0021;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 0261 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020A, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_158)
{
    // 1ECB 0021;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECB, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_159)
{
    // 1ECA 0021;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECA, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_160)
{
    // 1E2D 0021;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 0261 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2D, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_161)
{
    // 1E2C 0021;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 0261 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E2C, 0x0021 };
    uint32_t const ces[11] = { 0x1D98, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_162)
{
    // 0069 003F;	
    // (i) LATIN SMALL LETTER I	[1D98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0069, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_163)
{
    // FF49 003F;	
    // (ｉ) FULLWIDTH LATIN SMALL LETTER I	[1D98 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF49, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_164)
{
    // 0365 003F;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0365, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_165)
{
    // 2170 003F;	
    // (ⅰ) SMALL ROMAN NUMERAL ONE	[1D98 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2170, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_166)
{
    // 2139 003F;	
    // (ℹ) INFORMATION SOURCE	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2139, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_167)
{
    // 2148 003F;	
    // (ⅈ) DOUBLE-STRUCK ITALIC SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2148, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_168)
{
    // 1D422 003F;	
    // (𝐢) MATHEMATICAL BOLD SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D422, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_169)
{
    // 1D456 003F;	
    // (𝑖) MATHEMATICAL ITALIC SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D456, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_170)
{
    // 1D48A 003F;	
    // (𝒊) MATHEMATICAL BOLD ITALIC SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48A, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_171)
{
    // 1D4BE 003F;	
    // (𝒾) MATHEMATICAL SCRIPT SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BE, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_172)
{
    // 1D4F2 003F;	
    // (𝓲) MATHEMATICAL BOLD SCRIPT SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F2, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_173)
{
    // 1D526 003F;	
    // (𝔦) MATHEMATICAL FRAKTUR SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D526, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_174)
{
    // 1D55A 003F;	
    // (𝕚) MATHEMATICAL DOUBLE-STRUCK SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55A, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_175)
{
    // 1D58E 003F;	
    // (𝖎) MATHEMATICAL BOLD FRAKTUR SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58E, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_176)
{
    // 1D5C2 003F;	
    // (𝗂) MATHEMATICAL SANS-SERIF SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C2, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_177)
{
    // 1D5F6 003F;	
    // (𝗶) MATHEMATICAL SANS-SERIF BOLD SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F6, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_178)
{
    // 1D62A 003F;	
    // (𝘪) MATHEMATICAL SANS-SERIF ITALIC SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62A, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_179)
{
    // 1D65E 003F;	
    // (𝙞) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65E, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_180)
{
    // 1D692 003F;	
    // (𝚒) MATHEMATICAL MONOSPACE SMALL I	[1D98 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D692, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_181)
{
    // 24D8 003F;	
    // (ⓘ) CIRCLED LATIN SMALL LETTER I	[1D98 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D8, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_182)
{
    // 0049 003F;	
    // (I) LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0049, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_183)
{
    // FF29 003F;	
    // (Ｉ) FULLWIDTH LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF29, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_184)
{
    // 2160 003F;	
    // (Ⅰ) ROMAN NUMERAL ONE	[1D98 0267 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2160, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_185)
{
    // 2110 003F;	
    // (ℐ) SCRIPT CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2110, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_186)
{
    // 2111 003F;	
    // (ℑ) BLACK-LETTER CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2111, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_187)
{
    // 1D408 003F;	
    // (𝐈) MATHEMATICAL BOLD CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D408, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_188)
{
    // 1D43C 003F;	
    // (𝐼) MATHEMATICAL ITALIC CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43C, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_189)
{
    // 1D470 003F;	
    // (𝑰) MATHEMATICAL BOLD ITALIC CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D470, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_190)
{
    // 1D4D8 003F;	
    // (𝓘) MATHEMATICAL BOLD SCRIPT CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D8, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_191)
{
    // 1D540 003F;	
    // (𝕀) MATHEMATICAL DOUBLE-STRUCK CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D540, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_192)
{
    // 1D574 003F;	
    // (𝕴) MATHEMATICAL BOLD FRAKTUR CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D574, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_193)
{
    // 1D5A8 003F;	
    // (𝖨) MATHEMATICAL SANS-SERIF CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A8, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_194)
{
    // 1D5DC 003F;	
    // (𝗜) MATHEMATICAL SANS-SERIF BOLD CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DC, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_195)
{
    // 1D610 003F;	
    // (𝘐) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D610, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_196)
{
    // 1D644 003F;	
    // (𝙄) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D644, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_197)
{
    // 1D678 003F;	
    // (𝙸) MATHEMATICAL MONOSPACE CAPITAL I	[1D98 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D678, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_198)
{
    // 24BE 003F;	
    // (Ⓘ) CIRCLED LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BE, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_199)
{
    // 1F158 003F;	
    // (🅘) NEGATIVE CIRCLED LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F158, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_200)
{
    // 2071 003F;	
    // (ⁱ) SUPERSCRIPT LATIN SMALL LETTER I	[1D98 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2071, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_201)
{
    // 1D62 003F;	
    // (ᵢ) LATIN SUBSCRIPT SMALL LETTER I	[1D98 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D62, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_202)
{
    // 1D35 003F;	
    // (ᴵ) MODIFIER LETTER CAPITAL I	[1D98 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D35, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_203)
{
    // 1F138 003F;	
    // (🄸) SQUARED LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F138, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_204)
{
    // 1F178 003F;	
    // (🅸) NEGATIVE SQUARED LATIN CAPITAL LETTER I	[1D98 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F178, 0x003F };
    uint32_t const ces[9] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_205)
{
    // 00ED 003F;	
    // (í) LATIN SMALL LETTER I WITH ACUTE	[1D98 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00ED, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_206)
{
    // 00CD 003F;	
    // (Í) LATIN CAPITAL LETTER I WITH ACUTE	[1D98 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CD, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_207)
{
    // 00EC 003F;	
    // (ì) LATIN SMALL LETTER I WITH GRAVE	[1D98 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EC, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_208)
{
    // 00CC 003F;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CC, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_209)
{
    // 012D 003F;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012D, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_210)
{
    // 012C 003F;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012C, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_211)
{
    // 00EE 003F;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EE, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_212)
{
    // 00CE 003F;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CE, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_213)
{
    // 01D0 003F;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D0, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_214)
{
    // 01CF 003F;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CF, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_215)
{
    // 00EF 003F;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EF, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_216)
{
    // 00CF 003F;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CF, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_217)
{
    // 1E2F 003F;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2F, 0x003F };
    uint32_t const ces[13] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_218)
{
    // 1E2E 003F;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE	[1D98 0267 | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2E, 0x003F };
    uint32_t const ces[13] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_219)
{
    // 0129 003F;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0129, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_220)
{
    // 0128 003F;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0128, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_221)
{
    // 0130 003F;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0130, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_222)
{
    // 012F 003F;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 0267 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012F, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_223)
{
    // 012E 003F;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 0267 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012E, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_224)
{
    // 012B 003F;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012B, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_225)
{
    // 012A 003F;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012A, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_226)
{
    // 1EC9 003F;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC9, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_227)
{
    // 1EC8 003F;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EC8, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_228)
{
    // 0209 003F;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0209, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_229)
{
    // 0208 003F;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0208, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_230)
{
    // 020B 003F;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 0267 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020B, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_231)
{
    // 020A 003F;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 0267 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020A, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_232)
{
    // 1ECB 003F;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECB, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_233)
{
    // 1ECA 003F;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECA, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_234)
{
    // 1E2D 003F;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 0267 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2D, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_235)
{
    // 1E2C 003F;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 0267 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E2C, 0x003F };
    uint32_t const ces[11] = { 0x1D98, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_236)
{
    // 0069 0061;	
    // (i) LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0069, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_237)
{
    // 0069 0041;	
    // (i) LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0069, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_238)
{
    // FF49 0061;	
    // (ｉ) FULLWIDTH LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF49, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_239)
{
    // FF49 0041;	
    // (ｉ) FULLWIDTH LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF49, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_240)
{
    // 0365 0061;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0365, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_241)
{
    // 2170 0061;	
    // (ⅰ) SMALL ROMAN NUMERAL ONE	[1D98 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2170, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_242)
{
    // 0365 0041;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0365, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_243)
{
    // 2170 0041;	
    // (ⅰ) SMALL ROMAN NUMERAL ONE	[1D98 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2170, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_244)
{
    // 2139 0061;	
    // (ℹ) INFORMATION SOURCE	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2139, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_245)
{
    // 2148 0061;	
    // (ⅈ) DOUBLE-STRUCK ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2148, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_246)
{
    // 1D422 0061;	
    // (𝐢) MATHEMATICAL BOLD SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D422, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_247)
{
    // 1D456 0061;	
    // (𝑖) MATHEMATICAL ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D456, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_248)
{
    // 1D48A 0061;	
    // (𝒊) MATHEMATICAL BOLD ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48A, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_249)
{
    // 1D4BE 0061;	
    // (𝒾) MATHEMATICAL SCRIPT SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BE, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_250)
{
    // 1D4F2 0061;	
    // (𝓲) MATHEMATICAL BOLD SCRIPT SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F2, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_251)
{
    // 1D526 0061;	
    // (𝔦) MATHEMATICAL FRAKTUR SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D526, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_252)
{
    // 1D55A 0061;	
    // (𝕚) MATHEMATICAL DOUBLE-STRUCK SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55A, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_253)
{
    // 1D58E 0061;	
    // (𝖎) MATHEMATICAL BOLD FRAKTUR SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58E, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_254)
{
    // 1D5C2 0061;	
    // (𝗂) MATHEMATICAL SANS-SERIF SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C2, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_255)
{
    // 1D5F6 0061;	
    // (𝗶) MATHEMATICAL SANS-SERIF BOLD SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F6, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_256)
{
    // 1D62A 0061;	
    // (𝘪) MATHEMATICAL SANS-SERIF ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62A, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_257)
{
    // 1D65E 0061;	
    // (𝙞) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65E, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_258)
{
    // 1D692 0061;	
    // (𝚒) MATHEMATICAL MONOSPACE SMALL I	[1D98 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D692, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_259)
{
    // 2139 0041;	
    // (ℹ) INFORMATION SOURCE	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x2139, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_260)
{
    // 2148 0041;	
    // (ⅈ) DOUBLE-STRUCK ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x2148, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_261)
{
    // 1D422 0041;	
    // (𝐢) MATHEMATICAL BOLD SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D422, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_262)
{
    // 1D456 0041;	
    // (𝑖) MATHEMATICAL ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D456, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_263)
{
    // 1D48A 0041;	
    // (𝒊) MATHEMATICAL BOLD ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D48A, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_264)
{
    // 1D4BE 0041;	
    // (𝒾) MATHEMATICAL SCRIPT SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4BE, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_265)
{
    // 1D4F2 0041;	
    // (𝓲) MATHEMATICAL BOLD SCRIPT SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4F2, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_266)
{
    // 1D526 0041;	
    // (𝔦) MATHEMATICAL FRAKTUR SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D526, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_267)
{
    // 1D55A 0041;	
    // (𝕚) MATHEMATICAL DOUBLE-STRUCK SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D55A, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_268)
{
    // 1D58E 0041;	
    // (𝖎) MATHEMATICAL BOLD FRAKTUR SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D58E, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_269)
{
    // 1D5C2 0041;	
    // (𝗂) MATHEMATICAL SANS-SERIF SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5C2, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_270)
{
    // 1D5F6 0041;	
    // (𝗶) MATHEMATICAL SANS-SERIF BOLD SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5F6, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_271)
{
    // 1D62A 0041;	
    // (𝘪) MATHEMATICAL SANS-SERIF ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D62A, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_272)
{
    // 1D65E 0041;	
    // (𝙞) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D65E, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_273)
{
    // 1D692 0041;	
    // (𝚒) MATHEMATICAL MONOSPACE SMALL I	[1D98 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D692, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_274)
{
    // 24D8 0061;	
    // (ⓘ) CIRCLED LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D8, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_275)
{
    // 24D8 0041;	
    // (ⓘ) CIRCLED LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24D8, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_276)
{
    // 0049 0061;	
    // (I) LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0049, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_277)
{
    // 0049 0041;	
    // (I) LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0049, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_278)
{
    // FF29 0061;	
    // (Ｉ) FULLWIDTH LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF29, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_279)
{
    // FF29 0041;	
    // (Ｉ) FULLWIDTH LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF29, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_280)
{
    // 2160 0061;	
    // (Ⅰ) ROMAN NUMERAL ONE	[1D98 1CAD | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2160, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_281)
{
    // 2160 0041;	
    // (Ⅰ) ROMAN NUMERAL ONE	[1D98 1CAD | 0020 0020 | 000A 0008 |]

    uint32_t cps[2] = { 0x2160, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_282)
{
    // 2110 0061;	
    // (ℐ) SCRIPT CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2110, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_283)
{
    // 2111 0061;	
    // (ℑ) BLACK-LETTER CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2111, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_284)
{
    // 1D408 0061;	
    // (𝐈) MATHEMATICAL BOLD CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D408, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_285)
{
    // 1D43C 0061;	
    // (𝐼) MATHEMATICAL ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43C, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_286)
{
    // 1D470 0061;	
    // (𝑰) MATHEMATICAL BOLD ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D470, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_287)
{
    // 1D4D8 0061;	
    // (𝓘) MATHEMATICAL BOLD SCRIPT CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D8, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_288)
{
    // 1D540 0061;	
    // (𝕀) MATHEMATICAL DOUBLE-STRUCK CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D540, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_289)
{
    // 1D574 0061;	
    // (𝕴) MATHEMATICAL BOLD FRAKTUR CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D574, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_290)
{
    // 1D5A8 0061;	
    // (𝖨) MATHEMATICAL SANS-SERIF CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A8, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_291)
{
    // 1D5DC 0061;	
    // (𝗜) MATHEMATICAL SANS-SERIF BOLD CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DC, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_292)
{
    // 1D610 0061;	
    // (𝘐) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D610, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_293)
{
    // 1D644 0061;	
    // (𝙄) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D644, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_294)
{
    // 1D678 0061;	
    // (𝙸) MATHEMATICAL MONOSPACE CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D678, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_295)
{
    // 2110 0041;	
    // (ℐ) SCRIPT CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2110, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_296)
{
    // 2111 0041;	
    // (ℑ) BLACK-LETTER CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2111, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_297)
{
    // 1D408 0041;	
    // (𝐈) MATHEMATICAL BOLD CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D408, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_298)
{
    // 1D43C 0041;	
    // (𝐼) MATHEMATICAL ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D43C, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_299)
{
    // 1D470 0041;	
    // (𝑰) MATHEMATICAL BOLD ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D470, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_300)
{
    // 1D4D8 0041;	
    // (𝓘) MATHEMATICAL BOLD SCRIPT CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4D8, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_301)
{
    // 1D540 0041;	
    // (𝕀) MATHEMATICAL DOUBLE-STRUCK CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D540, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_302)
{
    // 1D574 0041;	
    // (𝕴) MATHEMATICAL BOLD FRAKTUR CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D574, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_303)
{
    // 1D5A8 0041;	
    // (𝖨) MATHEMATICAL SANS-SERIF CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5A8, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_304)
{
    // 1D5DC 0041;	
    // (𝗜) MATHEMATICAL SANS-SERIF BOLD CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5DC, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_305)
{
    // 1D610 0041;	
    // (𝘐) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D610, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_306)
{
    // 1D644 0041;	
    // (𝙄) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D644, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_307)
{
    // 1D678 0041;	
    // (𝙸) MATHEMATICAL MONOSPACE CAPITAL I	[1D98 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D678, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_308)
{
    // 24BE 0061;	
    // (Ⓘ) CIRCLED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BE, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_309)
{
    // 1F158 0061;	
    // (🅘) NEGATIVE CIRCLED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F158, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_310)
{
    // 24BE 0041;	
    // (Ⓘ) CIRCLED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24BE, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_311)
{
    // 1F158 0041;	
    // (🅘) NEGATIVE CIRCLED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F158, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_312)
{
    // 2071 0061;	
    // (ⁱ) SUPERSCRIPT LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2071, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_313)
{
    // 2071 0041;	
    // (ⁱ) SUPERSCRIPT LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2071, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_314)
{
    // 1D62 0061;	
    // (ᵢ) LATIN SUBSCRIPT SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D62, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_315)
{
    // 1D62 0041;	
    // (ᵢ) LATIN SUBSCRIPT SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x1D62, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_316)
{
    // 1D35 0061;	
    // (ᴵ) MODIFIER LETTER CAPITAL I	[1D98 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D35, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_317)
{
    // 1F138 0061;	
    // (🄸) SQUARED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F138, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_318)
{
    // 1F178 0061;	
    // (🅸) NEGATIVE SQUARED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F178, 0x0061 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_319)
{
    // 1D35 0041;	
    // (ᴵ) MODIFIER LETTER CAPITAL I	[1D98 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D35, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_320)
{
    // 1F138 0041;	
    // (🄸) SQUARED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F138, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_321)
{
    // 1F178 0041;	
    // (🅸) NEGATIVE SQUARED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F178, 0x0041 };
    uint32_t const ces[9] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_322)
{
    // 00ED 0061;	
    // (í) LATIN SMALL LETTER I WITH ACUTE	[1D98 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00ED, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_323)
{
    // 00ED 0041;	
    // (í) LATIN SMALL LETTER I WITH ACUTE	[1D98 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00ED, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_324)
{
    // 00CD 0061;	
    // (Í) LATIN CAPITAL LETTER I WITH ACUTE	[1D98 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CD, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_325)
{
    // 00CD 0041;	
    // (Í) LATIN CAPITAL LETTER I WITH ACUTE	[1D98 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CD, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_326)
{
    // 00EC 0061;	
    // (ì) LATIN SMALL LETTER I WITH GRAVE	[1D98 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EC, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_327)
{
    // 00EC 0041;	
    // (ì) LATIN SMALL LETTER I WITH GRAVE	[1D98 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00EC, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_328)
{
    // 00CC 0061;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CC, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_329)
{
    // 00CC 0041;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CC, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_330)
{
    // 012D 0061;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012D, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_331)
{
    // 012D 0041;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x012D, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_332)
{
    // 012C 0061;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012C, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_333)
{
    // 012C 0041;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x012C, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_334)
{
    // 00EE 0061;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EE, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_335)
{
    // 00EE 0041;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00EE, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_336)
{
    // 00CE 0061;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CE, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_337)
{
    // 00CE 0041;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CE, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_338)
{
    // 01D0 0061;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D0, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_339)
{
    // 01D0 0041;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D0, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_340)
{
    // 01CF 0061;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CF, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_341)
{
    // 01CF 0041;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01CF, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_342)
{
    // 00EF 0061;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EF, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_343)
{
    // 00EF 0041;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00EF, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_344)
{
    // 00CF 0061;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CF, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_345)
{
    // 00CF 0041;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CF, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_346)
{
    // 1E2F 0061;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2F, 0x0061 };
    uint32_t const ces[13] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_347)
{
    // 1E2F 0041;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E2F, 0x0041 };
    uint32_t const ces[13] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_348)
{
    // 1E2E 0061;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CAD | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2E, 0x0061 };
    uint32_t const ces[13] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_349)
{
    // 1E2E 0041;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CAD | 0020 002B 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E2E, 0x0041 };
    uint32_t const ces[13] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_350)
{
    // 0129 0061;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 1CAD | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0129, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_351)
{
    // 0129 0041;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 1CAD | 0020 002D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0129, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_352)
{
    // 0128 0061;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 1CAD | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0128, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_353)
{
    // 0128 0041;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 1CAD | 0020 002D 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0128, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_354)
{
    // 0130 0061;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0130, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_355)
{
    // 0130 0041;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0130, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_356)
{
    // 012F 0061;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 1CAD | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012F, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_357)
{
    // 012F 0041;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 1CAD | 0020 0031 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x012F, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_358)
{
    // 012E 0061;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 1CAD | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012E, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_359)
{
    // 012E 0041;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 1CAD | 0020 0031 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x012E, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_360)
{
    // 012B 0061;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012B, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_361)
{
    // 012B 0041;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x012B, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_362)
{
    // 012A 0061;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012A, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_363)
{
    // 012A 0041;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x012A, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_364)
{
    // 1EC9 0061;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 1CAD | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC9, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_365)
{
    // 1EC9 0041;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 1CAD | 0020 003B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC9, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_366)
{
    // 1EC8 0061;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 1CAD | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EC8, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_367)
{
    // 1EC8 0041;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 1CAD | 0020 003B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EC8, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_368)
{
    // 0209 0061;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 1CAD | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0209, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_369)
{
    // 0209 0041;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 1CAD | 0020 003C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0209, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_370)
{
    // 0208 0061;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 1CAD | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0208, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_371)
{
    // 0208 0041;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 1CAD | 0020 003C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0208, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_372)
{
    // 020B 0061;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 1CAD | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020B, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_373)
{
    // 020B 0041;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 1CAD | 0020 003E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x020B, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_374)
{
    // 020A 0061;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 1CAD | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020A, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_375)
{
    // 020A 0041;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 1CAD | 0020 003E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x020A, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_376)
{
    // 1ECB 0061;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECB, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_377)
{
    // 1ECB 0041;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1ECB, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_378)
{
    // 1ECA 0061;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECA, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_379)
{
    // 1ECA 0041;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1ECA, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_380)
{
    // 1E2D 0061;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 1CAD | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2D, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_381)
{
    // 1E2D 0041;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 1CAD | 0020 0048 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E2D, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_382)
{
    // 1E2C 0061;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 1CAD | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E2C, 0x0061 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_383)
{
    // 1E2C 0041;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 1CAD | 0020 0048 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E2C, 0x0041 };
    uint32_t const ces[11] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_384)
{
    // 0069 0062;	
    // (i) LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0069, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_385)
{
    // FF49 0062;	
    // (ｉ) FULLWIDTH LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF49, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_386)
{
    // 0365 0062;	
    // (ͥ) COMBINING LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0365, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_387)
{
    // 2170 0062;	
    // (ⅰ) SMALL ROMAN NUMERAL ONE	[1D98 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2170, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_388)
{
    // 2139 0062;	
    // (ℹ) INFORMATION SOURCE	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2139, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_389)
{
    // 2148 0062;	
    // (ⅈ) DOUBLE-STRUCK ITALIC SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2148, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_390)
{
    // 1D422 0062;	
    // (𝐢) MATHEMATICAL BOLD SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D422, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_391)
{
    // 1D456 0062;	
    // (𝑖) MATHEMATICAL ITALIC SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D456, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_392)
{
    // 1D48A 0062;	
    // (𝒊) MATHEMATICAL BOLD ITALIC SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D48A, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_393)
{
    // 1D4BE 0062;	
    // (𝒾) MATHEMATICAL SCRIPT SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4BE, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_394)
{
    // 1D4F2 0062;	
    // (𝓲) MATHEMATICAL BOLD SCRIPT SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F2, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_395)
{
    // 1D526 0062;	
    // (𝔦) MATHEMATICAL FRAKTUR SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D526, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_396)
{
    // 1D55A 0062;	
    // (𝕚) MATHEMATICAL DOUBLE-STRUCK SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D55A, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_397)
{
    // 1D58E 0062;	
    // (𝖎) MATHEMATICAL BOLD FRAKTUR SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58E, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_398)
{
    // 1D5C2 0062;	
    // (𝗂) MATHEMATICAL SANS-SERIF SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C2, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_399)
{
    // 1D5F6 0062;	
    // (𝗶) MATHEMATICAL SANS-SERIF BOLD SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F6, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_400)
{
    // 1D62A 0062;	
    // (𝘪) MATHEMATICAL SANS-SERIF ITALIC SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D62A, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_401)
{
    // 1D65E 0062;	
    // (𝙞) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65E, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_402)
{
    // 1D692 0062;	
    // (𝚒) MATHEMATICAL MONOSPACE SMALL I	[1D98 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D692, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_403)
{
    // 24D8 0062;	
    // (ⓘ) CIRCLED LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D8, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_404)
{
    // 0049 0062;	
    // (I) LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0049, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_405)
{
    // FF29 0062;	
    // (Ｉ) FULLWIDTH LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF29, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_406)
{
    // 2160 0062;	
    // (Ⅰ) ROMAN NUMERAL ONE	[1D98 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2160, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_407)
{
    // 2110 0062;	
    // (ℐ) SCRIPT CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2110, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_408)
{
    // 2111 0062;	
    // (ℑ) BLACK-LETTER CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2111, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_409)
{
    // 1D408 0062;	
    // (𝐈) MATHEMATICAL BOLD CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D408, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_410)
{
    // 1D43C 0062;	
    // (𝐼) MATHEMATICAL ITALIC CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43C, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_411)
{
    // 1D470 0062;	
    // (𝑰) MATHEMATICAL BOLD ITALIC CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D470, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_412)
{
    // 1D4D8 0062;	
    // (𝓘) MATHEMATICAL BOLD SCRIPT CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D8, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_413)
{
    // 1D540 0062;	
    // (𝕀) MATHEMATICAL DOUBLE-STRUCK CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D540, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_414)
{
    // 1D574 0062;	
    // (𝕴) MATHEMATICAL BOLD FRAKTUR CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D574, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_415)
{
    // 1D5A8 0062;	
    // (𝖨) MATHEMATICAL SANS-SERIF CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A8, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_416)
{
    // 1D5DC 0062;	
    // (𝗜) MATHEMATICAL SANS-SERIF BOLD CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DC, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_417)
{
    // 1D610 0062;	
    // (𝘐) MATHEMATICAL SANS-SERIF ITALIC CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D610, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_418)
{
    // 1D644 0062;	
    // (𝙄) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D644, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_419)
{
    // 1D678 0062;	
    // (𝙸) MATHEMATICAL MONOSPACE CAPITAL I	[1D98 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D678, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_420)
{
    // 24BE 0062;	
    // (Ⓘ) CIRCLED LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BE, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_421)
{
    // 1F158 0062;	
    // (🅘) NEGATIVE CIRCLED LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F158, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_422)
{
    // 2071 0062;	
    // (ⁱ) SUPERSCRIPT LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2071, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_423)
{
    // 1D62 0062;	
    // (ᵢ) LATIN SUBSCRIPT SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D62, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_424)
{
    // 1D35 0062;	
    // (ᴵ) MODIFIER LETTER CAPITAL I	[1D98 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D35, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_425)
{
    // 1F138 0062;	
    // (🄸) SQUARED LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F138, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_426)
{
    // 1F178 0062;	
    // (🅸) NEGATIVE SQUARED LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F178, 0x0062 };
    uint32_t const ces[9] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_427)
{
    // 00ED 0062;	
    // (í) LATIN SMALL LETTER I WITH ACUTE	[1D98 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00ED, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_428)
{
    // 00CD 0062;	
    // (Í) LATIN CAPITAL LETTER I WITH ACUTE	[1D98 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CD, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_429)
{
    // 00EC 0062;	
    // (ì) LATIN SMALL LETTER I WITH GRAVE	[1D98 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EC, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_430)
{
    // 00CC 0062;	
    // (Ì) LATIN CAPITAL LETTER I WITH GRAVE	[1D98 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CC, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_431)
{
    // 012D 0062;	
    // (ĭ) LATIN SMALL LETTER I WITH BREVE	[1D98 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012D, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_432)
{
    // 012C 0062;	
    // (Ĭ) LATIN CAPITAL LETTER I WITH BREVE	[1D98 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012C, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_433)
{
    // 00EE 0062;	
    // (î) LATIN SMALL LETTER I WITH CIRCUMFLEX	[1D98 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EE, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_434)
{
    // 00CE 0062;	
    // (Î) LATIN CAPITAL LETTER I WITH CIRCUMFLEX	[1D98 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CE, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_435)
{
    // 01D0 0062;	
    // (ǐ) LATIN SMALL LETTER I WITH CARON	[1D98 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D0, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_436)
{
    // 01CF 0062;	
    // (Ǐ) LATIN CAPITAL LETTER I WITH CARON	[1D98 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CF, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_437)
{
    // 00EF 0062;	
    // (ï) LATIN SMALL LETTER I WITH DIAERESIS	[1D98 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EF, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_438)
{
    // 00CF 0062;	
    // (Ï) LATIN CAPITAL LETTER I WITH DIAERESIS	[1D98 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CF, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_439)
{
    // 1E2F 0062;	
    // (ḯ) LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2F, 0x0062 };
    uint32_t const ces[13] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_440)
{
    // 1E2E 0062;	
    // (Ḯ) LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE	[1D98 1CC6 | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2E, 0x0062 };
    uint32_t const ces[13] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_441)
{
    // 0129 0062;	
    // (ĩ) LATIN SMALL LETTER I WITH TILDE	[1D98 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0129, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_442)
{
    // 0128 0062;	
    // (Ĩ) LATIN CAPITAL LETTER I WITH TILDE	[1D98 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0128, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_443)
{
    // 0130 0062;	
    // (İ) LATIN CAPITAL LETTER I WITH DOT ABOVE	[1D98 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0130, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_444)
{
    // 012F 0062;	
    // (į) LATIN SMALL LETTER I WITH OGONEK	[1D98 1CC6 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012F, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_445)
{
    // 012E 0062;	
    // (Į) LATIN CAPITAL LETTER I WITH OGONEK	[1D98 1CC6 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012E, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_446)
{
    // 012B 0062;	
    // (ī) LATIN SMALL LETTER I WITH MACRON	[1D98 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x012B, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_447)
{
    // 012A 0062;	
    // (Ī) LATIN CAPITAL LETTER I WITH MACRON	[1D98 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x012A, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_448)
{
    // 1EC9 0062;	
    // (ỉ) LATIN SMALL LETTER I WITH HOOK ABOVE	[1D98 1CC6 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC9, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_449)
{
    // 1EC8 0062;	
    // (Ỉ) LATIN CAPITAL LETTER I WITH HOOK ABOVE	[1D98 1CC6 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EC8, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_450)
{
    // 0209 0062;	
    // (ȉ) LATIN SMALL LETTER I WITH DOUBLE GRAVE	[1D98 1CC6 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0209, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_451)
{
    // 0208 0062;	
    // (Ȉ) LATIN CAPITAL LETTER I WITH DOUBLE GRAVE	[1D98 1CC6 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0208, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_452)
{
    // 020B 0062;	
    // (ȋ) LATIN SMALL LETTER I WITH INVERTED BREVE	[1D98 1CC6 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x020B, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_453)
{
    // 020A 0062;	
    // (Ȋ) LATIN CAPITAL LETTER I WITH INVERTED BREVE	[1D98 1CC6 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x020A, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_454)
{
    // 1ECB 0062;	
    // (ị) LATIN SMALL LETTER I WITH DOT BELOW	[1D98 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1ECB, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_455)
{
    // 1ECA 0062;	
    // (Ị) LATIN CAPITAL LETTER I WITH DOT BELOW	[1D98 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1ECA, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_456)
{
    // 1E2D 0062;	
    // (ḭ) LATIN SMALL LETTER I WITH TILDE BELOW	[1D98 1CC6 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E2D, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_457)
{
    // 1E2C 0062;	
    // (Ḭ) LATIN CAPITAL LETTER I WITH TILDE BELOW	[1D98 1CC6 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E2C, 0x0062 };
    uint32_t const ces[11] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_458)
{
    // 1F18B 0021;	
    // (🆋) NEGATIVE SQUARED IC	[1D98 1CE0 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18B, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_459)
{
    // 1F18B 003F;	
    // (🆋) NEGATIVE SQUARED IC	[1D98 1CE0 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18B, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_460)
{
    // 1F18B 0061;	
    // (🆋) NEGATIVE SQUARED IC	[1D98 1CE0 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18B, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_461)
{
    // 1F18B 0041;	
    // (🆋) NEGATIVE SQUARED IC	[1D98 1CE0 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F18B, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_462)
{
    // 1F18B 0062;	
    // (🆋) NEGATIVE SQUARED IC	[1D98 1CE0 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18B, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_463)
{
    // 1F194 0021;	
    // (🆔) SQUARED ID	[1D98 1CF5 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F194, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_464)
{
    // 1F194 003F;	
    // (🆔) SQUARED ID	[1D98 1CF5 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F194, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_465)
{
    // 1F194 0061;	
    // (🆔) SQUARED ID	[1D98 1CF5 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F194, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_466)
{
    // 1F194 0041;	
    // (🆔) SQUARED ID	[1D98 1CF5 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F194, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_467)
{
    // 1F194 0062;	
    // (🆔) SQUARED ID	[1D98 1CF5 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F194, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_468)
{
    // 2171 0021;	
    // (ⅱ) SMALL ROMAN NUMERAL TWO	[1D98 1D98 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2171, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_469)
{
    // 2161 0021;	
    // (Ⅱ) ROMAN NUMERAL TWO	[1D98 1D98 0261 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2161, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_470)
{
    // 2171 003F;	
    // (ⅱ) SMALL ROMAN NUMERAL TWO	[1D98 1D98 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2171, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_471)
{
    // 2161 003F;	
    // (Ⅱ) ROMAN NUMERAL TWO	[1D98 1D98 0267 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2161, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_472)
{
    // 2171 0061;	
    // (ⅱ) SMALL ROMAN NUMERAL TWO	[1D98 1D98 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2171, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_473)
{
    // 2171 0041;	
    // (ⅱ) SMALL ROMAN NUMERAL TWO	[1D98 1D98 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2171, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_474)
{
    // 2161 0061;	
    // (Ⅱ) ROMAN NUMERAL TWO	[1D98 1D98 1CAD | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2161, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_475)
{
    // 2161 0041;	
    // (Ⅱ) ROMAN NUMERAL TWO	[1D98 1D98 1CAD | 0020 0020 0020 | 000A 000A 0008 |]

    uint32_t cps[2] = { 0x2161, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_476)
{
    // 2171 0062;	
    // (ⅱ) SMALL ROMAN NUMERAL TWO	[1D98 1D98 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2171, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_477)
{
    // 2161 0062;	
    // (Ⅱ) ROMAN NUMERAL TWO	[1D98 1D98 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2161, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_478)
{
    // 2172 0021;	
    // (ⅲ) SMALL ROMAN NUMERAL THREE	[1D98 1D98 1D98 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2172, 0x0021 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_479)
{
    // 2162 0021;	
    // (Ⅲ) ROMAN NUMERAL THREE	[1D98 1D98 1D98 0261 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2162, 0x0021 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_480)
{
    // 2172 003F;	
    // (ⅲ) SMALL ROMAN NUMERAL THREE	[1D98 1D98 1D98 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2172, 0x003F };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_481)
{
    // 2162 003F;	
    // (Ⅲ) ROMAN NUMERAL THREE	[1D98 1D98 1D98 0267 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2162, 0x003F };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_482)
{
    // 2172 0061;	
    // (ⅲ) SMALL ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2172, 0x0061 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_483)
{
    // 2172 0041;	
    // (ⅲ) SMALL ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2172, 0x0041 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_484)
{
    // 2162 0061;	
    // (Ⅲ) ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2162, 0x0061 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_485)
{
    // 2162 0041;	
    // (Ⅲ) ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0008 |]

    uint32_t cps[2] = { 0x2162, 0x0041 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_486)
{
    // 2172 0062;	
    // (ⅲ) SMALL ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2172, 0x0062 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_487)
{
    // 2162 0062;	
    // (Ⅲ) ROMAN NUMERAL THREE	[1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x2162, 0x0062 };
    uint32_t const ces[15] = { 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_488)
{
    // 0133 0021;	
    // (ĳ) LATIN SMALL LIGATURE IJ	[1D98 1DB2 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0133, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_489)
{
    // 0132 0021;	
    // (Ĳ) LATIN CAPITAL LIGATURE IJ	[1D98 1DB2 0261 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x0132, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_490)
{
    // 0133 003F;	
    // (ĳ) LATIN SMALL LIGATURE IJ	[1D98 1DB2 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0133, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_491)
{
    // 0132 003F;	
    // (Ĳ) LATIN CAPITAL LIGATURE IJ	[1D98 1DB2 0267 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x0132, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_492)
{
    // 0133 0061;	
    // (ĳ) LATIN SMALL LIGATURE IJ	[1D98 1DB2 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0133, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_493)
{
    // 0133 0041;	
    // (ĳ) LATIN SMALL LIGATURE IJ	[1D98 1DB2 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0133, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_494)
{
    // 0132 0061;	
    // (Ĳ) LATIN CAPITAL LIGATURE IJ	[1D98 1DB2 1CAD | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x0132, 0x0061 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_495)
{
    // 0132 0041;	
    // (Ĳ) LATIN CAPITAL LIGATURE IJ	[1D98 1DB2 1CAD | 0020 0020 0020 | 000A 000A 0008 |]

    uint32_t cps[2] = { 0x0132, 0x0041 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_496)
{
    // 0133 0062;	
    // (ĳ) LATIN SMALL LIGATURE IJ	[1D98 1DB2 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0133, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_497)
{
    // 0132 0062;	
    // (Ĳ) LATIN CAPITAL LIGATURE IJ	[1D98 1DB2 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x0132, 0x0062 };
    uint32_t const ces[12] = { 0x1D98, 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_498)
{
    // 33CC 0021;	
    // (㏌) SQUARE IN	[1D98 1E1F 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33CC, 0x0021 };
    uint32_t const ces[12] = { 0x1D98, 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_109_499)
{
    // 33CC 003F;	
    // (㏌) SQUARE IN	[1D98 1E1F 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33CC, 0x003F };
    uint32_t const ces[12] = { 0x1D98, 0x1E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

