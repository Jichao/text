// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_297_000)
{
    // 1302D 003F;	
    // (𓀭) EGYPTIAN HIEROGLYPH A040	[5077 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302D, 0x003F };
    uint32_t const ces[9] = { 0x5077, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_001)
{
    // 1302D 0061;	
    // (𓀭) EGYPTIAN HIEROGLYPH A040	[5077 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302D, 0x0061 };
    uint32_t const ces[9] = { 0x5077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_002)
{
    // 1302D 0041;	
    // (𓀭) EGYPTIAN HIEROGLYPH A040	[5077 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1302D, 0x0041 };
    uint32_t const ces[9] = { 0x5077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_003)
{
    // 1302D 0062;	
    // (𓀭) EGYPTIAN HIEROGLYPH A040	[5077 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302D, 0x0062 };
    uint32_t const ces[9] = { 0x5077, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_004)
{
    // 1302E 0021;	
    // (𓀮) EGYPTIAN HIEROGLYPH A040A	[5078 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302E, 0x0021 };
    uint32_t const ces[9] = { 0x5078, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_005)
{
    // 1302E 003F;	
    // (𓀮) EGYPTIAN HIEROGLYPH A040A	[5078 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302E, 0x003F };
    uint32_t const ces[9] = { 0x5078, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_006)
{
    // 1302E 0061;	
    // (𓀮) EGYPTIAN HIEROGLYPH A040A	[5078 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302E, 0x0061 };
    uint32_t const ces[9] = { 0x5078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_007)
{
    // 1302E 0041;	
    // (𓀮) EGYPTIAN HIEROGLYPH A040A	[5078 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1302E, 0x0041 };
    uint32_t const ces[9] = { 0x5078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_008)
{
    // 1302E 0062;	
    // (𓀮) EGYPTIAN HIEROGLYPH A040A	[5078 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302E, 0x0062 };
    uint32_t const ces[9] = { 0x5078, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_009)
{
    // 1302F 0021;	
    // (𓀯) EGYPTIAN HIEROGLYPH A041	[5079 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302F, 0x0021 };
    uint32_t const ces[9] = { 0x5079, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_010)
{
    // 1302F 003F;	
    // (𓀯) EGYPTIAN HIEROGLYPH A041	[5079 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302F, 0x003F };
    uint32_t const ces[9] = { 0x5079, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_011)
{
    // 1302F 0061;	
    // (𓀯) EGYPTIAN HIEROGLYPH A041	[5079 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302F, 0x0061 };
    uint32_t const ces[9] = { 0x5079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_012)
{
    // 1302F 0041;	
    // (𓀯) EGYPTIAN HIEROGLYPH A041	[5079 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1302F, 0x0041 };
    uint32_t const ces[9] = { 0x5079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_013)
{
    // 1302F 0062;	
    // (𓀯) EGYPTIAN HIEROGLYPH A041	[5079 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1302F, 0x0062 };
    uint32_t const ces[9] = { 0x5079, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_014)
{
    // 13030 0021;	
    // (𓀰) EGYPTIAN HIEROGLYPH A042	[507A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13030, 0x0021 };
    uint32_t const ces[9] = { 0x507A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_015)
{
    // 13030 003F;	
    // (𓀰) EGYPTIAN HIEROGLYPH A042	[507A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13030, 0x003F };
    uint32_t const ces[9] = { 0x507A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_016)
{
    // 13030 0061;	
    // (𓀰) EGYPTIAN HIEROGLYPH A042	[507A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13030, 0x0061 };
    uint32_t const ces[9] = { 0x507A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_017)
{
    // 13030 0041;	
    // (𓀰) EGYPTIAN HIEROGLYPH A042	[507A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13030, 0x0041 };
    uint32_t const ces[9] = { 0x507A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_018)
{
    // 13030 0062;	
    // (𓀰) EGYPTIAN HIEROGLYPH A042	[507A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13030, 0x0062 };
    uint32_t const ces[9] = { 0x507A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_019)
{
    // 13031 0021;	
    // (𓀱) EGYPTIAN HIEROGLYPH A042A	[507B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13031, 0x0021 };
    uint32_t const ces[9] = { 0x507B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_020)
{
    // 13031 003F;	
    // (𓀱) EGYPTIAN HIEROGLYPH A042A	[507B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13031, 0x003F };
    uint32_t const ces[9] = { 0x507B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_021)
{
    // 13031 0061;	
    // (𓀱) EGYPTIAN HIEROGLYPH A042A	[507B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13031, 0x0061 };
    uint32_t const ces[9] = { 0x507B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_022)
{
    // 13031 0041;	
    // (𓀱) EGYPTIAN HIEROGLYPH A042A	[507B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13031, 0x0041 };
    uint32_t const ces[9] = { 0x507B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_023)
{
    // 13031 0062;	
    // (𓀱) EGYPTIAN HIEROGLYPH A042A	[507B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13031, 0x0062 };
    uint32_t const ces[9] = { 0x507B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_024)
{
    // 13032 0021;	
    // (𓀲) EGYPTIAN HIEROGLYPH A043	[507C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13032, 0x0021 };
    uint32_t const ces[9] = { 0x507C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_025)
{
    // 13032 003F;	
    // (𓀲) EGYPTIAN HIEROGLYPH A043	[507C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13032, 0x003F };
    uint32_t const ces[9] = { 0x507C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_026)
{
    // 13032 0061;	
    // (𓀲) EGYPTIAN HIEROGLYPH A043	[507C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13032, 0x0061 };
    uint32_t const ces[9] = { 0x507C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_027)
{
    // 13032 0041;	
    // (𓀲) EGYPTIAN HIEROGLYPH A043	[507C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13032, 0x0041 };
    uint32_t const ces[9] = { 0x507C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_028)
{
    // 13032 0062;	
    // (𓀲) EGYPTIAN HIEROGLYPH A043	[507C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13032, 0x0062 };
    uint32_t const ces[9] = { 0x507C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_029)
{
    // 13033 0021;	
    // (𓀳) EGYPTIAN HIEROGLYPH A043A	[507D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13033, 0x0021 };
    uint32_t const ces[9] = { 0x507D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_030)
{
    // 13033 003F;	
    // (𓀳) EGYPTIAN HIEROGLYPH A043A	[507D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13033, 0x003F };
    uint32_t const ces[9] = { 0x507D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_031)
{
    // 13033 0061;	
    // (𓀳) EGYPTIAN HIEROGLYPH A043A	[507D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13033, 0x0061 };
    uint32_t const ces[9] = { 0x507D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_032)
{
    // 13033 0041;	
    // (𓀳) EGYPTIAN HIEROGLYPH A043A	[507D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13033, 0x0041 };
    uint32_t const ces[9] = { 0x507D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_033)
{
    // 13033 0062;	
    // (𓀳) EGYPTIAN HIEROGLYPH A043A	[507D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13033, 0x0062 };
    uint32_t const ces[9] = { 0x507D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_034)
{
    // 13034 0021;	
    // (𓀴) EGYPTIAN HIEROGLYPH A044	[507E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13034, 0x0021 };
    uint32_t const ces[9] = { 0x507E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_035)
{
    // 13034 003F;	
    // (𓀴) EGYPTIAN HIEROGLYPH A044	[507E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13034, 0x003F };
    uint32_t const ces[9] = { 0x507E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_036)
{
    // 13034 0061;	
    // (𓀴) EGYPTIAN HIEROGLYPH A044	[507E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13034, 0x0061 };
    uint32_t const ces[9] = { 0x507E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_037)
{
    // 13034 0041;	
    // (𓀴) EGYPTIAN HIEROGLYPH A044	[507E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13034, 0x0041 };
    uint32_t const ces[9] = { 0x507E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_038)
{
    // 13034 0062;	
    // (𓀴) EGYPTIAN HIEROGLYPH A044	[507E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13034, 0x0062 };
    uint32_t const ces[9] = { 0x507E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_039)
{
    // 13035 0021;	
    // (𓀵) EGYPTIAN HIEROGLYPH A045	[507F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13035, 0x0021 };
    uint32_t const ces[9] = { 0x507F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_040)
{
    // 13035 003F;	
    // (𓀵) EGYPTIAN HIEROGLYPH A045	[507F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13035, 0x003F };
    uint32_t const ces[9] = { 0x507F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_041)
{
    // 13035 0061;	
    // (𓀵) EGYPTIAN HIEROGLYPH A045	[507F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13035, 0x0061 };
    uint32_t const ces[9] = { 0x507F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_042)
{
    // 13035 0041;	
    // (𓀵) EGYPTIAN HIEROGLYPH A045	[507F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13035, 0x0041 };
    uint32_t const ces[9] = { 0x507F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_043)
{
    // 13035 0062;	
    // (𓀵) EGYPTIAN HIEROGLYPH A045	[507F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13035, 0x0062 };
    uint32_t const ces[9] = { 0x507F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_044)
{
    // 13036 0021;	
    // (𓀶) EGYPTIAN HIEROGLYPH A045A	[5080 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13036, 0x0021 };
    uint32_t const ces[9] = { 0x5080, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_045)
{
    // 13036 003F;	
    // (𓀶) EGYPTIAN HIEROGLYPH A045A	[5080 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13036, 0x003F };
    uint32_t const ces[9] = { 0x5080, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_046)
{
    // 13036 0061;	
    // (𓀶) EGYPTIAN HIEROGLYPH A045A	[5080 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13036, 0x0061 };
    uint32_t const ces[9] = { 0x5080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_047)
{
    // 13036 0041;	
    // (𓀶) EGYPTIAN HIEROGLYPH A045A	[5080 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13036, 0x0041 };
    uint32_t const ces[9] = { 0x5080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_048)
{
    // 13036 0062;	
    // (𓀶) EGYPTIAN HIEROGLYPH A045A	[5080 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13036, 0x0062 };
    uint32_t const ces[9] = { 0x5080, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_049)
{
    // 13037 0021;	
    // (𓀷) EGYPTIAN HIEROGLYPH A046	[5081 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13037, 0x0021 };
    uint32_t const ces[9] = { 0x5081, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_050)
{
    // 13037 003F;	
    // (𓀷) EGYPTIAN HIEROGLYPH A046	[5081 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13037, 0x003F };
    uint32_t const ces[9] = { 0x5081, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_051)
{
    // 13037 0061;	
    // (𓀷) EGYPTIAN HIEROGLYPH A046	[5081 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13037, 0x0061 };
    uint32_t const ces[9] = { 0x5081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_052)
{
    // 13037 0041;	
    // (𓀷) EGYPTIAN HIEROGLYPH A046	[5081 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13037, 0x0041 };
    uint32_t const ces[9] = { 0x5081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_053)
{
    // 13037 0062;	
    // (𓀷) EGYPTIAN HIEROGLYPH A046	[5081 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13037, 0x0062 };
    uint32_t const ces[9] = { 0x5081, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_054)
{
    // 13038 0021;	
    // (𓀸) EGYPTIAN HIEROGLYPH A047	[5082 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13038, 0x0021 };
    uint32_t const ces[9] = { 0x5082, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_055)
{
    // 13038 003F;	
    // (𓀸) EGYPTIAN HIEROGLYPH A047	[5082 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13038, 0x003F };
    uint32_t const ces[9] = { 0x5082, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_056)
{
    // 13038 0061;	
    // (𓀸) EGYPTIAN HIEROGLYPH A047	[5082 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13038, 0x0061 };
    uint32_t const ces[9] = { 0x5082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_057)
{
    // 13038 0041;	
    // (𓀸) EGYPTIAN HIEROGLYPH A047	[5082 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13038, 0x0041 };
    uint32_t const ces[9] = { 0x5082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_058)
{
    // 13038 0062;	
    // (𓀸) EGYPTIAN HIEROGLYPH A047	[5082 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13038, 0x0062 };
    uint32_t const ces[9] = { 0x5082, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_059)
{
    // 13039 0021;	
    // (𓀹) EGYPTIAN HIEROGLYPH A048	[5083 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13039, 0x0021 };
    uint32_t const ces[9] = { 0x5083, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_060)
{
    // 13039 003F;	
    // (𓀹) EGYPTIAN HIEROGLYPH A048	[5083 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13039, 0x003F };
    uint32_t const ces[9] = { 0x5083, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_061)
{
    // 13039 0061;	
    // (𓀹) EGYPTIAN HIEROGLYPH A048	[5083 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13039, 0x0061 };
    uint32_t const ces[9] = { 0x5083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_062)
{
    // 13039 0041;	
    // (𓀹) EGYPTIAN HIEROGLYPH A048	[5083 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13039, 0x0041 };
    uint32_t const ces[9] = { 0x5083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_063)
{
    // 13039 0062;	
    // (𓀹) EGYPTIAN HIEROGLYPH A048	[5083 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13039, 0x0062 };
    uint32_t const ces[9] = { 0x5083, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_064)
{
    // 1303A 0021;	
    // (𓀺) EGYPTIAN HIEROGLYPH A049	[5084 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303A, 0x0021 };
    uint32_t const ces[9] = { 0x5084, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_065)
{
    // 1303A 003F;	
    // (𓀺) EGYPTIAN HIEROGLYPH A049	[5084 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303A, 0x003F };
    uint32_t const ces[9] = { 0x5084, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_066)
{
    // 1303A 0061;	
    // (𓀺) EGYPTIAN HIEROGLYPH A049	[5084 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303A, 0x0061 };
    uint32_t const ces[9] = { 0x5084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_067)
{
    // 1303A 0041;	
    // (𓀺) EGYPTIAN HIEROGLYPH A049	[5084 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303A, 0x0041 };
    uint32_t const ces[9] = { 0x5084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_068)
{
    // 1303A 0062;	
    // (𓀺) EGYPTIAN HIEROGLYPH A049	[5084 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303A, 0x0062 };
    uint32_t const ces[9] = { 0x5084, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_069)
{
    // 1303B 0021;	
    // (𓀻) EGYPTIAN HIEROGLYPH A050	[5085 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303B, 0x0021 };
    uint32_t const ces[9] = { 0x5085, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_070)
{
    // 1303B 003F;	
    // (𓀻) EGYPTIAN HIEROGLYPH A050	[5085 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303B, 0x003F };
    uint32_t const ces[9] = { 0x5085, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_071)
{
    // 1303B 0061;	
    // (𓀻) EGYPTIAN HIEROGLYPH A050	[5085 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303B, 0x0061 };
    uint32_t const ces[9] = { 0x5085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_072)
{
    // 1303B 0041;	
    // (𓀻) EGYPTIAN HIEROGLYPH A050	[5085 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303B, 0x0041 };
    uint32_t const ces[9] = { 0x5085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_073)
{
    // 1303B 0062;	
    // (𓀻) EGYPTIAN HIEROGLYPH A050	[5085 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303B, 0x0062 };
    uint32_t const ces[9] = { 0x5085, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_074)
{
    // 1303C 0021;	
    // (𓀼) EGYPTIAN HIEROGLYPH A051	[5086 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303C, 0x0021 };
    uint32_t const ces[9] = { 0x5086, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_075)
{
    // 1303C 003F;	
    // (𓀼) EGYPTIAN HIEROGLYPH A051	[5086 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303C, 0x003F };
    uint32_t const ces[9] = { 0x5086, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_076)
{
    // 1303C 0061;	
    // (𓀼) EGYPTIAN HIEROGLYPH A051	[5086 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303C, 0x0061 };
    uint32_t const ces[9] = { 0x5086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_077)
{
    // 1303C 0041;	
    // (𓀼) EGYPTIAN HIEROGLYPH A051	[5086 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303C, 0x0041 };
    uint32_t const ces[9] = { 0x5086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_078)
{
    // 1303C 0062;	
    // (𓀼) EGYPTIAN HIEROGLYPH A051	[5086 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303C, 0x0062 };
    uint32_t const ces[9] = { 0x5086, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_079)
{
    // 1303D 0021;	
    // (𓀽) EGYPTIAN HIEROGLYPH A052	[5087 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303D, 0x0021 };
    uint32_t const ces[9] = { 0x5087, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_080)
{
    // 1303D 003F;	
    // (𓀽) EGYPTIAN HIEROGLYPH A052	[5087 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303D, 0x003F };
    uint32_t const ces[9] = { 0x5087, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_081)
{
    // 1303D 0061;	
    // (𓀽) EGYPTIAN HIEROGLYPH A052	[5087 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303D, 0x0061 };
    uint32_t const ces[9] = { 0x5087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_082)
{
    // 1303D 0041;	
    // (𓀽) EGYPTIAN HIEROGLYPH A052	[5087 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303D, 0x0041 };
    uint32_t const ces[9] = { 0x5087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_083)
{
    // 1303D 0062;	
    // (𓀽) EGYPTIAN HIEROGLYPH A052	[5087 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303D, 0x0062 };
    uint32_t const ces[9] = { 0x5087, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_084)
{
    // 1303E 0021;	
    // (𓀾) EGYPTIAN HIEROGLYPH A053	[5088 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303E, 0x0021 };
    uint32_t const ces[9] = { 0x5088, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_085)
{
    // 1303E 003F;	
    // (𓀾) EGYPTIAN HIEROGLYPH A053	[5088 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303E, 0x003F };
    uint32_t const ces[9] = { 0x5088, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_086)
{
    // 1303E 0061;	
    // (𓀾) EGYPTIAN HIEROGLYPH A053	[5088 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303E, 0x0061 };
    uint32_t const ces[9] = { 0x5088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_087)
{
    // 1303E 0041;	
    // (𓀾) EGYPTIAN HIEROGLYPH A053	[5088 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303E, 0x0041 };
    uint32_t const ces[9] = { 0x5088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_088)
{
    // 1303E 0062;	
    // (𓀾) EGYPTIAN HIEROGLYPH A053	[5088 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303E, 0x0062 };
    uint32_t const ces[9] = { 0x5088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_089)
{
    // 1303F 0021;	
    // (𓀿) EGYPTIAN HIEROGLYPH A054	[5089 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303F, 0x0021 };
    uint32_t const ces[9] = { 0x5089, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_090)
{
    // 1303F 003F;	
    // (𓀿) EGYPTIAN HIEROGLYPH A054	[5089 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303F, 0x003F };
    uint32_t const ces[9] = { 0x5089, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_091)
{
    // 1303F 0061;	
    // (𓀿) EGYPTIAN HIEROGLYPH A054	[5089 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303F, 0x0061 };
    uint32_t const ces[9] = { 0x5089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_092)
{
    // 1303F 0041;	
    // (𓀿) EGYPTIAN HIEROGLYPH A054	[5089 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1303F, 0x0041 };
    uint32_t const ces[9] = { 0x5089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_093)
{
    // 1303F 0062;	
    // (𓀿) EGYPTIAN HIEROGLYPH A054	[5089 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1303F, 0x0062 };
    uint32_t const ces[9] = { 0x5089, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_094)
{
    // 13040 0021;	
    // (𓁀) EGYPTIAN HIEROGLYPH A055	[508A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13040, 0x0021 };
    uint32_t const ces[9] = { 0x508A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_095)
{
    // 13040 003F;	
    // (𓁀) EGYPTIAN HIEROGLYPH A055	[508A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13040, 0x003F };
    uint32_t const ces[9] = { 0x508A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_096)
{
    // 13040 0061;	
    // (𓁀) EGYPTIAN HIEROGLYPH A055	[508A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13040, 0x0061 };
    uint32_t const ces[9] = { 0x508A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_097)
{
    // 13040 0041;	
    // (𓁀) EGYPTIAN HIEROGLYPH A055	[508A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13040, 0x0041 };
    uint32_t const ces[9] = { 0x508A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_098)
{
    // 13040 0062;	
    // (𓁀) EGYPTIAN HIEROGLYPH A055	[508A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13040, 0x0062 };
    uint32_t const ces[9] = { 0x508A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_099)
{
    // 13041 0021;	
    // (𓁁) EGYPTIAN HIEROGLYPH A056	[508B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13041, 0x0021 };
    uint32_t const ces[9] = { 0x508B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_100)
{
    // 13041 003F;	
    // (𓁁) EGYPTIAN HIEROGLYPH A056	[508B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13041, 0x003F };
    uint32_t const ces[9] = { 0x508B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_101)
{
    // 13041 0061;	
    // (𓁁) EGYPTIAN HIEROGLYPH A056	[508B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13041, 0x0061 };
    uint32_t const ces[9] = { 0x508B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_102)
{
    // 13041 0041;	
    // (𓁁) EGYPTIAN HIEROGLYPH A056	[508B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13041, 0x0041 };
    uint32_t const ces[9] = { 0x508B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_103)
{
    // 13041 0062;	
    // (𓁁) EGYPTIAN HIEROGLYPH A056	[508B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13041, 0x0062 };
    uint32_t const ces[9] = { 0x508B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_104)
{
    // 13042 0021;	
    // (𓁂) EGYPTIAN HIEROGLYPH A057	[508C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13042, 0x0021 };
    uint32_t const ces[9] = { 0x508C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_105)
{
    // 13042 003F;	
    // (𓁂) EGYPTIAN HIEROGLYPH A057	[508C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13042, 0x003F };
    uint32_t const ces[9] = { 0x508C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_106)
{
    // 13042 0061;	
    // (𓁂) EGYPTIAN HIEROGLYPH A057	[508C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13042, 0x0061 };
    uint32_t const ces[9] = { 0x508C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_107)
{
    // 13042 0041;	
    // (𓁂) EGYPTIAN HIEROGLYPH A057	[508C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13042, 0x0041 };
    uint32_t const ces[9] = { 0x508C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_108)
{
    // 13042 0062;	
    // (𓁂) EGYPTIAN HIEROGLYPH A057	[508C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13042, 0x0062 };
    uint32_t const ces[9] = { 0x508C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_109)
{
    // 13043 0021;	
    // (𓁃) EGYPTIAN HIEROGLYPH A058	[508D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13043, 0x0021 };
    uint32_t const ces[9] = { 0x508D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_110)
{
    // 13043 003F;	
    // (𓁃) EGYPTIAN HIEROGLYPH A058	[508D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13043, 0x003F };
    uint32_t const ces[9] = { 0x508D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_111)
{
    // 13043 0061;	
    // (𓁃) EGYPTIAN HIEROGLYPH A058	[508D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13043, 0x0061 };
    uint32_t const ces[9] = { 0x508D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_112)
{
    // 13043 0041;	
    // (𓁃) EGYPTIAN HIEROGLYPH A058	[508D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13043, 0x0041 };
    uint32_t const ces[9] = { 0x508D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_113)
{
    // 13043 0062;	
    // (𓁃) EGYPTIAN HIEROGLYPH A058	[508D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13043, 0x0062 };
    uint32_t const ces[9] = { 0x508D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_114)
{
    // 13044 0021;	
    // (𓁄) EGYPTIAN HIEROGLYPH A059	[508E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13044, 0x0021 };
    uint32_t const ces[9] = { 0x508E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_115)
{
    // 13044 003F;	
    // (𓁄) EGYPTIAN HIEROGLYPH A059	[508E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13044, 0x003F };
    uint32_t const ces[9] = { 0x508E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_116)
{
    // 13044 0061;	
    // (𓁄) EGYPTIAN HIEROGLYPH A059	[508E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13044, 0x0061 };
    uint32_t const ces[9] = { 0x508E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_117)
{
    // 13044 0041;	
    // (𓁄) EGYPTIAN HIEROGLYPH A059	[508E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13044, 0x0041 };
    uint32_t const ces[9] = { 0x508E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_118)
{
    // 13044 0062;	
    // (𓁄) EGYPTIAN HIEROGLYPH A059	[508E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13044, 0x0062 };
    uint32_t const ces[9] = { 0x508E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_119)
{
    // 13045 0021;	
    // (𓁅) EGYPTIAN HIEROGLYPH A060	[508F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13045, 0x0021 };
    uint32_t const ces[9] = { 0x508F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_120)
{
    // 13045 003F;	
    // (𓁅) EGYPTIAN HIEROGLYPH A060	[508F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13045, 0x003F };
    uint32_t const ces[9] = { 0x508F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_121)
{
    // 13045 0061;	
    // (𓁅) EGYPTIAN HIEROGLYPH A060	[508F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13045, 0x0061 };
    uint32_t const ces[9] = { 0x508F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_122)
{
    // 13045 0041;	
    // (𓁅) EGYPTIAN HIEROGLYPH A060	[508F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13045, 0x0041 };
    uint32_t const ces[9] = { 0x508F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_123)
{
    // 13045 0062;	
    // (𓁅) EGYPTIAN HIEROGLYPH A060	[508F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13045, 0x0062 };
    uint32_t const ces[9] = { 0x508F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_124)
{
    // 13046 0021;	
    // (𓁆) EGYPTIAN HIEROGLYPH A061	[5090 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13046, 0x0021 };
    uint32_t const ces[9] = { 0x5090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_125)
{
    // 13046 003F;	
    // (𓁆) EGYPTIAN HIEROGLYPH A061	[5090 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13046, 0x003F };
    uint32_t const ces[9] = { 0x5090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_126)
{
    // 13046 0061;	
    // (𓁆) EGYPTIAN HIEROGLYPH A061	[5090 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13046, 0x0061 };
    uint32_t const ces[9] = { 0x5090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_127)
{
    // 13046 0041;	
    // (𓁆) EGYPTIAN HIEROGLYPH A061	[5090 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13046, 0x0041 };
    uint32_t const ces[9] = { 0x5090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_128)
{
    // 13046 0062;	
    // (𓁆) EGYPTIAN HIEROGLYPH A061	[5090 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13046, 0x0062 };
    uint32_t const ces[9] = { 0x5090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_129)
{
    // 13047 0021;	
    // (𓁇) EGYPTIAN HIEROGLYPH A062	[5091 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13047, 0x0021 };
    uint32_t const ces[9] = { 0x5091, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_130)
{
    // 13047 003F;	
    // (𓁇) EGYPTIAN HIEROGLYPH A062	[5091 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13047, 0x003F };
    uint32_t const ces[9] = { 0x5091, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_131)
{
    // 13047 0061;	
    // (𓁇) EGYPTIAN HIEROGLYPH A062	[5091 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13047, 0x0061 };
    uint32_t const ces[9] = { 0x5091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_132)
{
    // 13047 0041;	
    // (𓁇) EGYPTIAN HIEROGLYPH A062	[5091 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13047, 0x0041 };
    uint32_t const ces[9] = { 0x5091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_133)
{
    // 13047 0062;	
    // (𓁇) EGYPTIAN HIEROGLYPH A062	[5091 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13047, 0x0062 };
    uint32_t const ces[9] = { 0x5091, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_134)
{
    // 13048 0021;	
    // (𓁈) EGYPTIAN HIEROGLYPH A063	[5092 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13048, 0x0021 };
    uint32_t const ces[9] = { 0x5092, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_135)
{
    // 13048 003F;	
    // (𓁈) EGYPTIAN HIEROGLYPH A063	[5092 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13048, 0x003F };
    uint32_t const ces[9] = { 0x5092, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_136)
{
    // 13048 0061;	
    // (𓁈) EGYPTIAN HIEROGLYPH A063	[5092 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13048, 0x0061 };
    uint32_t const ces[9] = { 0x5092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_137)
{
    // 13048 0041;	
    // (𓁈) EGYPTIAN HIEROGLYPH A063	[5092 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13048, 0x0041 };
    uint32_t const ces[9] = { 0x5092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_138)
{
    // 13048 0062;	
    // (𓁈) EGYPTIAN HIEROGLYPH A063	[5092 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13048, 0x0062 };
    uint32_t const ces[9] = { 0x5092, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_139)
{
    // 13049 0021;	
    // (𓁉) EGYPTIAN HIEROGLYPH A064	[5093 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13049, 0x0021 };
    uint32_t const ces[9] = { 0x5093, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_140)
{
    // 13049 003F;	
    // (𓁉) EGYPTIAN HIEROGLYPH A064	[5093 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13049, 0x003F };
    uint32_t const ces[9] = { 0x5093, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_141)
{
    // 13049 0061;	
    // (𓁉) EGYPTIAN HIEROGLYPH A064	[5093 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13049, 0x0061 };
    uint32_t const ces[9] = { 0x5093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_142)
{
    // 13049 0041;	
    // (𓁉) EGYPTIAN HIEROGLYPH A064	[5093 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13049, 0x0041 };
    uint32_t const ces[9] = { 0x5093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_143)
{
    // 13049 0062;	
    // (𓁉) EGYPTIAN HIEROGLYPH A064	[5093 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13049, 0x0062 };
    uint32_t const ces[9] = { 0x5093, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_144)
{
    // 1304A 0021;	
    // (𓁊) EGYPTIAN HIEROGLYPH A065	[5094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304A, 0x0021 };
    uint32_t const ces[9] = { 0x5094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_145)
{
    // 1304A 003F;	
    // (𓁊) EGYPTIAN HIEROGLYPH A065	[5094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304A, 0x003F };
    uint32_t const ces[9] = { 0x5094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_146)
{
    // 1304A 0061;	
    // (𓁊) EGYPTIAN HIEROGLYPH A065	[5094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304A, 0x0061 };
    uint32_t const ces[9] = { 0x5094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_147)
{
    // 1304A 0041;	
    // (𓁊) EGYPTIAN HIEROGLYPH A065	[5094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304A, 0x0041 };
    uint32_t const ces[9] = { 0x5094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_148)
{
    // 1304A 0062;	
    // (𓁊) EGYPTIAN HIEROGLYPH A065	[5094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304A, 0x0062 };
    uint32_t const ces[9] = { 0x5094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_149)
{
    // 1304B 0021;	
    // (𓁋) EGYPTIAN HIEROGLYPH A066	[5095 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304B, 0x0021 };
    uint32_t const ces[9] = { 0x5095, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_150)
{
    // 1304B 003F;	
    // (𓁋) EGYPTIAN HIEROGLYPH A066	[5095 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304B, 0x003F };
    uint32_t const ces[9] = { 0x5095, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_151)
{
    // 1304B 0061;	
    // (𓁋) EGYPTIAN HIEROGLYPH A066	[5095 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304B, 0x0061 };
    uint32_t const ces[9] = { 0x5095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_152)
{
    // 1304B 0041;	
    // (𓁋) EGYPTIAN HIEROGLYPH A066	[5095 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304B, 0x0041 };
    uint32_t const ces[9] = { 0x5095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_153)
{
    // 1304B 0062;	
    // (𓁋) EGYPTIAN HIEROGLYPH A066	[5095 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304B, 0x0062 };
    uint32_t const ces[9] = { 0x5095, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_154)
{
    // 1304C 0021;	
    // (𓁌) EGYPTIAN HIEROGLYPH A067	[5096 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304C, 0x0021 };
    uint32_t const ces[9] = { 0x5096, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_155)
{
    // 1304C 003F;	
    // (𓁌) EGYPTIAN HIEROGLYPH A067	[5096 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304C, 0x003F };
    uint32_t const ces[9] = { 0x5096, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_156)
{
    // 1304C 0061;	
    // (𓁌) EGYPTIAN HIEROGLYPH A067	[5096 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304C, 0x0061 };
    uint32_t const ces[9] = { 0x5096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_157)
{
    // 1304C 0041;	
    // (𓁌) EGYPTIAN HIEROGLYPH A067	[5096 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304C, 0x0041 };
    uint32_t const ces[9] = { 0x5096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_158)
{
    // 1304C 0062;	
    // (𓁌) EGYPTIAN HIEROGLYPH A067	[5096 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304C, 0x0062 };
    uint32_t const ces[9] = { 0x5096, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_159)
{
    // 1304D 0021;	
    // (𓁍) EGYPTIAN HIEROGLYPH A068	[5097 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304D, 0x0021 };
    uint32_t const ces[9] = { 0x5097, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_160)
{
    // 1304D 003F;	
    // (𓁍) EGYPTIAN HIEROGLYPH A068	[5097 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304D, 0x003F };
    uint32_t const ces[9] = { 0x5097, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_161)
{
    // 1304D 0061;	
    // (𓁍) EGYPTIAN HIEROGLYPH A068	[5097 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304D, 0x0061 };
    uint32_t const ces[9] = { 0x5097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_162)
{
    // 1304D 0041;	
    // (𓁍) EGYPTIAN HIEROGLYPH A068	[5097 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304D, 0x0041 };
    uint32_t const ces[9] = { 0x5097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_163)
{
    // 1304D 0062;	
    // (𓁍) EGYPTIAN HIEROGLYPH A068	[5097 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304D, 0x0062 };
    uint32_t const ces[9] = { 0x5097, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_164)
{
    // 1304E 0021;	
    // (𓁎) EGYPTIAN HIEROGLYPH A069	[5098 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304E, 0x0021 };
    uint32_t const ces[9] = { 0x5098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_165)
{
    // 1304E 003F;	
    // (𓁎) EGYPTIAN HIEROGLYPH A069	[5098 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304E, 0x003F };
    uint32_t const ces[9] = { 0x5098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_166)
{
    // 1304E 0061;	
    // (𓁎) EGYPTIAN HIEROGLYPH A069	[5098 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304E, 0x0061 };
    uint32_t const ces[9] = { 0x5098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_167)
{
    // 1304E 0041;	
    // (𓁎) EGYPTIAN HIEROGLYPH A069	[5098 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304E, 0x0041 };
    uint32_t const ces[9] = { 0x5098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_168)
{
    // 1304E 0062;	
    // (𓁎) EGYPTIAN HIEROGLYPH A069	[5098 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304E, 0x0062 };
    uint32_t const ces[9] = { 0x5098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_169)
{
    // 1304F 0021;	
    // (𓁏) EGYPTIAN HIEROGLYPH A070	[5099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304F, 0x0021 };
    uint32_t const ces[9] = { 0x5099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_170)
{
    // 1304F 003F;	
    // (𓁏) EGYPTIAN HIEROGLYPH A070	[5099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304F, 0x003F };
    uint32_t const ces[9] = { 0x5099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_171)
{
    // 1304F 0061;	
    // (𓁏) EGYPTIAN HIEROGLYPH A070	[5099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304F, 0x0061 };
    uint32_t const ces[9] = { 0x5099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_172)
{
    // 1304F 0041;	
    // (𓁏) EGYPTIAN HIEROGLYPH A070	[5099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1304F, 0x0041 };
    uint32_t const ces[9] = { 0x5099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_173)
{
    // 1304F 0062;	
    // (𓁏) EGYPTIAN HIEROGLYPH A070	[5099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1304F, 0x0062 };
    uint32_t const ces[9] = { 0x5099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_174)
{
    // 13050 0021;	
    // (𓁐) EGYPTIAN HIEROGLYPH B001	[509A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13050, 0x0021 };
    uint32_t const ces[9] = { 0x509A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_175)
{
    // 13050 003F;	
    // (𓁐) EGYPTIAN HIEROGLYPH B001	[509A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13050, 0x003F };
    uint32_t const ces[9] = { 0x509A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_176)
{
    // 13050 0061;	
    // (𓁐) EGYPTIAN HIEROGLYPH B001	[509A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13050, 0x0061 };
    uint32_t const ces[9] = { 0x509A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_177)
{
    // 13050 0041;	
    // (𓁐) EGYPTIAN HIEROGLYPH B001	[509A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13050, 0x0041 };
    uint32_t const ces[9] = { 0x509A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_178)
{
    // 13050 0062;	
    // (𓁐) EGYPTIAN HIEROGLYPH B001	[509A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13050, 0x0062 };
    uint32_t const ces[9] = { 0x509A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_179)
{
    // 13051 0021;	
    // (𓁑) EGYPTIAN HIEROGLYPH B002	[509B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13051, 0x0021 };
    uint32_t const ces[9] = { 0x509B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_180)
{
    // 13051 003F;	
    // (𓁑) EGYPTIAN HIEROGLYPH B002	[509B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13051, 0x003F };
    uint32_t const ces[9] = { 0x509B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_181)
{
    // 13051 0061;	
    // (𓁑) EGYPTIAN HIEROGLYPH B002	[509B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13051, 0x0061 };
    uint32_t const ces[9] = { 0x509B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_182)
{
    // 13051 0041;	
    // (𓁑) EGYPTIAN HIEROGLYPH B002	[509B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13051, 0x0041 };
    uint32_t const ces[9] = { 0x509B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_183)
{
    // 13051 0062;	
    // (𓁑) EGYPTIAN HIEROGLYPH B002	[509B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13051, 0x0062 };
    uint32_t const ces[9] = { 0x509B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_184)
{
    // 13052 0021;	
    // (𓁒) EGYPTIAN HIEROGLYPH B003	[509C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13052, 0x0021 };
    uint32_t const ces[9] = { 0x509C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_185)
{
    // 13052 003F;	
    // (𓁒) EGYPTIAN HIEROGLYPH B003	[509C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13052, 0x003F };
    uint32_t const ces[9] = { 0x509C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_186)
{
    // 13052 0061;	
    // (𓁒) EGYPTIAN HIEROGLYPH B003	[509C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13052, 0x0061 };
    uint32_t const ces[9] = { 0x509C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_187)
{
    // 13052 0041;	
    // (𓁒) EGYPTIAN HIEROGLYPH B003	[509C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13052, 0x0041 };
    uint32_t const ces[9] = { 0x509C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_188)
{
    // 13052 0062;	
    // (𓁒) EGYPTIAN HIEROGLYPH B003	[509C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13052, 0x0062 };
    uint32_t const ces[9] = { 0x509C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_189)
{
    // 13053 0021;	
    // (𓁓) EGYPTIAN HIEROGLYPH B004	[509D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13053, 0x0021 };
    uint32_t const ces[9] = { 0x509D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_190)
{
    // 13053 003F;	
    // (𓁓) EGYPTIAN HIEROGLYPH B004	[509D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13053, 0x003F };
    uint32_t const ces[9] = { 0x509D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_191)
{
    // 13053 0061;	
    // (𓁓) EGYPTIAN HIEROGLYPH B004	[509D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13053, 0x0061 };
    uint32_t const ces[9] = { 0x509D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_192)
{
    // 13053 0041;	
    // (𓁓) EGYPTIAN HIEROGLYPH B004	[509D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13053, 0x0041 };
    uint32_t const ces[9] = { 0x509D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_193)
{
    // 13053 0062;	
    // (𓁓) EGYPTIAN HIEROGLYPH B004	[509D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13053, 0x0062 };
    uint32_t const ces[9] = { 0x509D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_194)
{
    // 13054 0021;	
    // (𓁔) EGYPTIAN HIEROGLYPH B005	[509E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13054, 0x0021 };
    uint32_t const ces[9] = { 0x509E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_195)
{
    // 13054 003F;	
    // (𓁔) EGYPTIAN HIEROGLYPH B005	[509E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13054, 0x003F };
    uint32_t const ces[9] = { 0x509E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_196)
{
    // 13054 0061;	
    // (𓁔) EGYPTIAN HIEROGLYPH B005	[509E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13054, 0x0061 };
    uint32_t const ces[9] = { 0x509E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_197)
{
    // 13054 0041;	
    // (𓁔) EGYPTIAN HIEROGLYPH B005	[509E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13054, 0x0041 };
    uint32_t const ces[9] = { 0x509E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_198)
{
    // 13054 0062;	
    // (𓁔) EGYPTIAN HIEROGLYPH B005	[509E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13054, 0x0062 };
    uint32_t const ces[9] = { 0x509E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_199)
{
    // 13055 0021;	
    // (𓁕) EGYPTIAN HIEROGLYPH B005A	[509F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13055, 0x0021 };
    uint32_t const ces[9] = { 0x509F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_200)
{
    // 13055 003F;	
    // (𓁕) EGYPTIAN HIEROGLYPH B005A	[509F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13055, 0x003F };
    uint32_t const ces[9] = { 0x509F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_201)
{
    // 13055 0061;	
    // (𓁕) EGYPTIAN HIEROGLYPH B005A	[509F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13055, 0x0061 };
    uint32_t const ces[9] = { 0x509F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_202)
{
    // 13055 0041;	
    // (𓁕) EGYPTIAN HIEROGLYPH B005A	[509F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13055, 0x0041 };
    uint32_t const ces[9] = { 0x509F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_203)
{
    // 13055 0062;	
    // (𓁕) EGYPTIAN HIEROGLYPH B005A	[509F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13055, 0x0062 };
    uint32_t const ces[9] = { 0x509F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_204)
{
    // 13056 0021;	
    // (𓁖) EGYPTIAN HIEROGLYPH B006	[50A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13056, 0x0021 };
    uint32_t const ces[9] = { 0x50A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_205)
{
    // 13056 003F;	
    // (𓁖) EGYPTIAN HIEROGLYPH B006	[50A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13056, 0x003F };
    uint32_t const ces[9] = { 0x50A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_206)
{
    // 13056 0061;	
    // (𓁖) EGYPTIAN HIEROGLYPH B006	[50A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13056, 0x0061 };
    uint32_t const ces[9] = { 0x50A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_207)
{
    // 13056 0041;	
    // (𓁖) EGYPTIAN HIEROGLYPH B006	[50A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13056, 0x0041 };
    uint32_t const ces[9] = { 0x50A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_208)
{
    // 13056 0062;	
    // (𓁖) EGYPTIAN HIEROGLYPH B006	[50A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13056, 0x0062 };
    uint32_t const ces[9] = { 0x50A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_209)
{
    // 13057 0021;	
    // (𓁗) EGYPTIAN HIEROGLYPH B007	[50A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13057, 0x0021 };
    uint32_t const ces[9] = { 0x50A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_210)
{
    // 13057 003F;	
    // (𓁗) EGYPTIAN HIEROGLYPH B007	[50A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13057, 0x003F };
    uint32_t const ces[9] = { 0x50A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_211)
{
    // 13057 0061;	
    // (𓁗) EGYPTIAN HIEROGLYPH B007	[50A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13057, 0x0061 };
    uint32_t const ces[9] = { 0x50A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_212)
{
    // 13057 0041;	
    // (𓁗) EGYPTIAN HIEROGLYPH B007	[50A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13057, 0x0041 };
    uint32_t const ces[9] = { 0x50A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_213)
{
    // 13057 0062;	
    // (𓁗) EGYPTIAN HIEROGLYPH B007	[50A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13057, 0x0062 };
    uint32_t const ces[9] = { 0x50A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_214)
{
    // 13058 0021;	
    // (𓁘) EGYPTIAN HIEROGLYPH B008	[50A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13058, 0x0021 };
    uint32_t const ces[9] = { 0x50A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_215)
{
    // 13058 003F;	
    // (𓁘) EGYPTIAN HIEROGLYPH B008	[50A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13058, 0x003F };
    uint32_t const ces[9] = { 0x50A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_216)
{
    // 13058 0061;	
    // (𓁘) EGYPTIAN HIEROGLYPH B008	[50A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13058, 0x0061 };
    uint32_t const ces[9] = { 0x50A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_217)
{
    // 13058 0041;	
    // (𓁘) EGYPTIAN HIEROGLYPH B008	[50A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13058, 0x0041 };
    uint32_t const ces[9] = { 0x50A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_218)
{
    // 13058 0062;	
    // (𓁘) EGYPTIAN HIEROGLYPH B008	[50A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13058, 0x0062 };
    uint32_t const ces[9] = { 0x50A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_219)
{
    // 13059 0021;	
    // (𓁙) EGYPTIAN HIEROGLYPH B009	[50A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13059, 0x0021 };
    uint32_t const ces[9] = { 0x50A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_220)
{
    // 13059 003F;	
    // (𓁙) EGYPTIAN HIEROGLYPH B009	[50A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13059, 0x003F };
    uint32_t const ces[9] = { 0x50A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_221)
{
    // 13059 0061;	
    // (𓁙) EGYPTIAN HIEROGLYPH B009	[50A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13059, 0x0061 };
    uint32_t const ces[9] = { 0x50A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_222)
{
    // 13059 0041;	
    // (𓁙) EGYPTIAN HIEROGLYPH B009	[50A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13059, 0x0041 };
    uint32_t const ces[9] = { 0x50A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_223)
{
    // 13059 0062;	
    // (𓁙) EGYPTIAN HIEROGLYPH B009	[50A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13059, 0x0062 };
    uint32_t const ces[9] = { 0x50A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_224)
{
    // 1305A 0021;	
    // (𓁚) EGYPTIAN HIEROGLYPH C001	[50A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305A, 0x0021 };
    uint32_t const ces[9] = { 0x50A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_225)
{
    // 1305A 003F;	
    // (𓁚) EGYPTIAN HIEROGLYPH C001	[50A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305A, 0x003F };
    uint32_t const ces[9] = { 0x50A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_226)
{
    // 1305A 0061;	
    // (𓁚) EGYPTIAN HIEROGLYPH C001	[50A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305A, 0x0061 };
    uint32_t const ces[9] = { 0x50A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_227)
{
    // 1305A 0041;	
    // (𓁚) EGYPTIAN HIEROGLYPH C001	[50A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305A, 0x0041 };
    uint32_t const ces[9] = { 0x50A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_228)
{
    // 1305A 0062;	
    // (𓁚) EGYPTIAN HIEROGLYPH C001	[50A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305A, 0x0062 };
    uint32_t const ces[9] = { 0x50A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_229)
{
    // 1305B 0021;	
    // (𓁛) EGYPTIAN HIEROGLYPH C002	[50A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305B, 0x0021 };
    uint32_t const ces[9] = { 0x50A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_230)
{
    // 1305B 003F;	
    // (𓁛) EGYPTIAN HIEROGLYPH C002	[50A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305B, 0x003F };
    uint32_t const ces[9] = { 0x50A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_231)
{
    // 1305B 0061;	
    // (𓁛) EGYPTIAN HIEROGLYPH C002	[50A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305B, 0x0061 };
    uint32_t const ces[9] = { 0x50A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_232)
{
    // 1305B 0041;	
    // (𓁛) EGYPTIAN HIEROGLYPH C002	[50A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305B, 0x0041 };
    uint32_t const ces[9] = { 0x50A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_233)
{
    // 1305B 0062;	
    // (𓁛) EGYPTIAN HIEROGLYPH C002	[50A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305B, 0x0062 };
    uint32_t const ces[9] = { 0x50A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_234)
{
    // 1305C 0021;	
    // (𓁜) EGYPTIAN HIEROGLYPH C002A	[50A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305C, 0x0021 };
    uint32_t const ces[9] = { 0x50A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_235)
{
    // 1305C 003F;	
    // (𓁜) EGYPTIAN HIEROGLYPH C002A	[50A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305C, 0x003F };
    uint32_t const ces[9] = { 0x50A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_236)
{
    // 1305C 0061;	
    // (𓁜) EGYPTIAN HIEROGLYPH C002A	[50A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305C, 0x0061 };
    uint32_t const ces[9] = { 0x50A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_237)
{
    // 1305C 0041;	
    // (𓁜) EGYPTIAN HIEROGLYPH C002A	[50A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305C, 0x0041 };
    uint32_t const ces[9] = { 0x50A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_238)
{
    // 1305C 0062;	
    // (𓁜) EGYPTIAN HIEROGLYPH C002A	[50A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305C, 0x0062 };
    uint32_t const ces[9] = { 0x50A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_239)
{
    // 1305D 0021;	
    // (𓁝) EGYPTIAN HIEROGLYPH C002B	[50A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305D, 0x0021 };
    uint32_t const ces[9] = { 0x50A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_240)
{
    // 1305D 003F;	
    // (𓁝) EGYPTIAN HIEROGLYPH C002B	[50A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305D, 0x003F };
    uint32_t const ces[9] = { 0x50A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_241)
{
    // 1305D 0061;	
    // (𓁝) EGYPTIAN HIEROGLYPH C002B	[50A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305D, 0x0061 };
    uint32_t const ces[9] = { 0x50A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_242)
{
    // 1305D 0041;	
    // (𓁝) EGYPTIAN HIEROGLYPH C002B	[50A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305D, 0x0041 };
    uint32_t const ces[9] = { 0x50A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_243)
{
    // 1305D 0062;	
    // (𓁝) EGYPTIAN HIEROGLYPH C002B	[50A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305D, 0x0062 };
    uint32_t const ces[9] = { 0x50A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_244)
{
    // 1305E 0021;	
    // (𓁞) EGYPTIAN HIEROGLYPH C002C	[50A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305E, 0x0021 };
    uint32_t const ces[9] = { 0x50A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_245)
{
    // 1305E 003F;	
    // (𓁞) EGYPTIAN HIEROGLYPH C002C	[50A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305E, 0x003F };
    uint32_t const ces[9] = { 0x50A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_246)
{
    // 1305E 0061;	
    // (𓁞) EGYPTIAN HIEROGLYPH C002C	[50A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305E, 0x0061 };
    uint32_t const ces[9] = { 0x50A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_247)
{
    // 1305E 0041;	
    // (𓁞) EGYPTIAN HIEROGLYPH C002C	[50A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305E, 0x0041 };
    uint32_t const ces[9] = { 0x50A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_248)
{
    // 1305E 0062;	
    // (𓁞) EGYPTIAN HIEROGLYPH C002C	[50A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305E, 0x0062 };
    uint32_t const ces[9] = { 0x50A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_249)
{
    // 1305F 0021;	
    // (𓁟) EGYPTIAN HIEROGLYPH C003	[50A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305F, 0x0021 };
    uint32_t const ces[9] = { 0x50A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_250)
{
    // 1305F 003F;	
    // (𓁟) EGYPTIAN HIEROGLYPH C003	[50A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305F, 0x003F };
    uint32_t const ces[9] = { 0x50A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_251)
{
    // 1305F 0061;	
    // (𓁟) EGYPTIAN HIEROGLYPH C003	[50A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305F, 0x0061 };
    uint32_t const ces[9] = { 0x50A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_252)
{
    // 1305F 0041;	
    // (𓁟) EGYPTIAN HIEROGLYPH C003	[50A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1305F, 0x0041 };
    uint32_t const ces[9] = { 0x50A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_253)
{
    // 1305F 0062;	
    // (𓁟) EGYPTIAN HIEROGLYPH C003	[50A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1305F, 0x0062 };
    uint32_t const ces[9] = { 0x50A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_254)
{
    // 13060 0021;	
    // (𓁠) EGYPTIAN HIEROGLYPH C004	[50AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13060, 0x0021 };
    uint32_t const ces[9] = { 0x50AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_255)
{
    // 13060 003F;	
    // (𓁠) EGYPTIAN HIEROGLYPH C004	[50AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13060, 0x003F };
    uint32_t const ces[9] = { 0x50AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_256)
{
    // 13060 0061;	
    // (𓁠) EGYPTIAN HIEROGLYPH C004	[50AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13060, 0x0061 };
    uint32_t const ces[9] = { 0x50AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_257)
{
    // 13060 0041;	
    // (𓁠) EGYPTIAN HIEROGLYPH C004	[50AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13060, 0x0041 };
    uint32_t const ces[9] = { 0x50AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_258)
{
    // 13060 0062;	
    // (𓁠) EGYPTIAN HIEROGLYPH C004	[50AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13060, 0x0062 };
    uint32_t const ces[9] = { 0x50AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_259)
{
    // 13061 0021;	
    // (𓁡) EGYPTIAN HIEROGLYPH C005	[50AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13061, 0x0021 };
    uint32_t const ces[9] = { 0x50AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_260)
{
    // 13061 003F;	
    // (𓁡) EGYPTIAN HIEROGLYPH C005	[50AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13061, 0x003F };
    uint32_t const ces[9] = { 0x50AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_261)
{
    // 13061 0061;	
    // (𓁡) EGYPTIAN HIEROGLYPH C005	[50AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13061, 0x0061 };
    uint32_t const ces[9] = { 0x50AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_262)
{
    // 13061 0041;	
    // (𓁡) EGYPTIAN HIEROGLYPH C005	[50AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13061, 0x0041 };
    uint32_t const ces[9] = { 0x50AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_263)
{
    // 13061 0062;	
    // (𓁡) EGYPTIAN HIEROGLYPH C005	[50AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13061, 0x0062 };
    uint32_t const ces[9] = { 0x50AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_264)
{
    // 13062 0021;	
    // (𓁢) EGYPTIAN HIEROGLYPH C006	[50AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13062, 0x0021 };
    uint32_t const ces[9] = { 0x50AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_265)
{
    // 13062 003F;	
    // (𓁢) EGYPTIAN HIEROGLYPH C006	[50AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13062, 0x003F };
    uint32_t const ces[9] = { 0x50AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_266)
{
    // 13062 0061;	
    // (𓁢) EGYPTIAN HIEROGLYPH C006	[50AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13062, 0x0061 };
    uint32_t const ces[9] = { 0x50AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_267)
{
    // 13062 0041;	
    // (𓁢) EGYPTIAN HIEROGLYPH C006	[50AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13062, 0x0041 };
    uint32_t const ces[9] = { 0x50AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_268)
{
    // 13062 0062;	
    // (𓁢) EGYPTIAN HIEROGLYPH C006	[50AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13062, 0x0062 };
    uint32_t const ces[9] = { 0x50AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_269)
{
    // 13063 0021;	
    // (𓁣) EGYPTIAN HIEROGLYPH C007	[50AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13063, 0x0021 };
    uint32_t const ces[9] = { 0x50AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_270)
{
    // 13063 003F;	
    // (𓁣) EGYPTIAN HIEROGLYPH C007	[50AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13063, 0x003F };
    uint32_t const ces[9] = { 0x50AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_271)
{
    // 13063 0061;	
    // (𓁣) EGYPTIAN HIEROGLYPH C007	[50AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13063, 0x0061 };
    uint32_t const ces[9] = { 0x50AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_272)
{
    // 13063 0041;	
    // (𓁣) EGYPTIAN HIEROGLYPH C007	[50AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13063, 0x0041 };
    uint32_t const ces[9] = { 0x50AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_273)
{
    // 13063 0062;	
    // (𓁣) EGYPTIAN HIEROGLYPH C007	[50AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13063, 0x0062 };
    uint32_t const ces[9] = { 0x50AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_274)
{
    // 13064 0021;	
    // (𓁤) EGYPTIAN HIEROGLYPH C008	[50AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13064, 0x0021 };
    uint32_t const ces[9] = { 0x50AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_275)
{
    // 13064 003F;	
    // (𓁤) EGYPTIAN HIEROGLYPH C008	[50AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13064, 0x003F };
    uint32_t const ces[9] = { 0x50AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_276)
{
    // 13064 0061;	
    // (𓁤) EGYPTIAN HIEROGLYPH C008	[50AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13064, 0x0061 };
    uint32_t const ces[9] = { 0x50AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_277)
{
    // 13064 0041;	
    // (𓁤) EGYPTIAN HIEROGLYPH C008	[50AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13064, 0x0041 };
    uint32_t const ces[9] = { 0x50AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_278)
{
    // 13064 0062;	
    // (𓁤) EGYPTIAN HIEROGLYPH C008	[50AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13064, 0x0062 };
    uint32_t const ces[9] = { 0x50AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_279)
{
    // 13065 0021;	
    // (𓁥) EGYPTIAN HIEROGLYPH C009	[50AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13065, 0x0021 };
    uint32_t const ces[9] = { 0x50AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_280)
{
    // 13065 003F;	
    // (𓁥) EGYPTIAN HIEROGLYPH C009	[50AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13065, 0x003F };
    uint32_t const ces[9] = { 0x50AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_281)
{
    // 13065 0061;	
    // (𓁥) EGYPTIAN HIEROGLYPH C009	[50AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13065, 0x0061 };
    uint32_t const ces[9] = { 0x50AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_282)
{
    // 13065 0041;	
    // (𓁥) EGYPTIAN HIEROGLYPH C009	[50AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13065, 0x0041 };
    uint32_t const ces[9] = { 0x50AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_283)
{
    // 13065 0062;	
    // (𓁥) EGYPTIAN HIEROGLYPH C009	[50AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13065, 0x0062 };
    uint32_t const ces[9] = { 0x50AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_284)
{
    // 13066 0021;	
    // (𓁦) EGYPTIAN HIEROGLYPH C010	[50B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13066, 0x0021 };
    uint32_t const ces[9] = { 0x50B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_285)
{
    // 13066 003F;	
    // (𓁦) EGYPTIAN HIEROGLYPH C010	[50B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13066, 0x003F };
    uint32_t const ces[9] = { 0x50B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_286)
{
    // 13066 0061;	
    // (𓁦) EGYPTIAN HIEROGLYPH C010	[50B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13066, 0x0061 };
    uint32_t const ces[9] = { 0x50B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_287)
{
    // 13066 0041;	
    // (𓁦) EGYPTIAN HIEROGLYPH C010	[50B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13066, 0x0041 };
    uint32_t const ces[9] = { 0x50B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_288)
{
    // 13066 0062;	
    // (𓁦) EGYPTIAN HIEROGLYPH C010	[50B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13066, 0x0062 };
    uint32_t const ces[9] = { 0x50B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_289)
{
    // 13067 0021;	
    // (𓁧) EGYPTIAN HIEROGLYPH C010A	[50B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13067, 0x0021 };
    uint32_t const ces[9] = { 0x50B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_290)
{
    // 13067 003F;	
    // (𓁧) EGYPTIAN HIEROGLYPH C010A	[50B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13067, 0x003F };
    uint32_t const ces[9] = { 0x50B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_291)
{
    // 13067 0061;	
    // (𓁧) EGYPTIAN HIEROGLYPH C010A	[50B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13067, 0x0061 };
    uint32_t const ces[9] = { 0x50B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_292)
{
    // 13067 0041;	
    // (𓁧) EGYPTIAN HIEROGLYPH C010A	[50B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13067, 0x0041 };
    uint32_t const ces[9] = { 0x50B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_293)
{
    // 13067 0062;	
    // (𓁧) EGYPTIAN HIEROGLYPH C010A	[50B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13067, 0x0062 };
    uint32_t const ces[9] = { 0x50B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_294)
{
    // 13068 0021;	
    // (𓁨) EGYPTIAN HIEROGLYPH C011	[50B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13068, 0x0021 };
    uint32_t const ces[9] = { 0x50B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_295)
{
    // 13068 003F;	
    // (𓁨) EGYPTIAN HIEROGLYPH C011	[50B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13068, 0x003F };
    uint32_t const ces[9] = { 0x50B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_296)
{
    // 13068 0061;	
    // (𓁨) EGYPTIAN HIEROGLYPH C011	[50B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13068, 0x0061 };
    uint32_t const ces[9] = { 0x50B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_297)
{
    // 13068 0041;	
    // (𓁨) EGYPTIAN HIEROGLYPH C011	[50B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13068, 0x0041 };
    uint32_t const ces[9] = { 0x50B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_298)
{
    // 13068 0062;	
    // (𓁨) EGYPTIAN HIEROGLYPH C011	[50B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13068, 0x0062 };
    uint32_t const ces[9] = { 0x50B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_299)
{
    // 13069 0021;	
    // (𓁩) EGYPTIAN HIEROGLYPH C012	[50B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13069, 0x0021 };
    uint32_t const ces[9] = { 0x50B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_300)
{
    // 13069 003F;	
    // (𓁩) EGYPTIAN HIEROGLYPH C012	[50B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13069, 0x003F };
    uint32_t const ces[9] = { 0x50B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_301)
{
    // 13069 0061;	
    // (𓁩) EGYPTIAN HIEROGLYPH C012	[50B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13069, 0x0061 };
    uint32_t const ces[9] = { 0x50B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_302)
{
    // 13069 0041;	
    // (𓁩) EGYPTIAN HIEROGLYPH C012	[50B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13069, 0x0041 };
    uint32_t const ces[9] = { 0x50B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_303)
{
    // 13069 0062;	
    // (𓁩) EGYPTIAN HIEROGLYPH C012	[50B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13069, 0x0062 };
    uint32_t const ces[9] = { 0x50B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_304)
{
    // 1306A 0021;	
    // (𓁪) EGYPTIAN HIEROGLYPH C013	[50B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306A, 0x0021 };
    uint32_t const ces[9] = { 0x50B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_305)
{
    // 1306A 003F;	
    // (𓁪) EGYPTIAN HIEROGLYPH C013	[50B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306A, 0x003F };
    uint32_t const ces[9] = { 0x50B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_306)
{
    // 1306A 0061;	
    // (𓁪) EGYPTIAN HIEROGLYPH C013	[50B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306A, 0x0061 };
    uint32_t const ces[9] = { 0x50B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_307)
{
    // 1306A 0041;	
    // (𓁪) EGYPTIAN HIEROGLYPH C013	[50B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306A, 0x0041 };
    uint32_t const ces[9] = { 0x50B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_308)
{
    // 1306A 0062;	
    // (𓁪) EGYPTIAN HIEROGLYPH C013	[50B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306A, 0x0062 };
    uint32_t const ces[9] = { 0x50B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_309)
{
    // 1306B 0021;	
    // (𓁫) EGYPTIAN HIEROGLYPH C014	[50B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306B, 0x0021 };
    uint32_t const ces[9] = { 0x50B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_310)
{
    // 1306B 003F;	
    // (𓁫) EGYPTIAN HIEROGLYPH C014	[50B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306B, 0x003F };
    uint32_t const ces[9] = { 0x50B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_311)
{
    // 1306B 0061;	
    // (𓁫) EGYPTIAN HIEROGLYPH C014	[50B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306B, 0x0061 };
    uint32_t const ces[9] = { 0x50B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_312)
{
    // 1306B 0041;	
    // (𓁫) EGYPTIAN HIEROGLYPH C014	[50B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306B, 0x0041 };
    uint32_t const ces[9] = { 0x50B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_313)
{
    // 1306B 0062;	
    // (𓁫) EGYPTIAN HIEROGLYPH C014	[50B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306B, 0x0062 };
    uint32_t const ces[9] = { 0x50B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_314)
{
    // 1306C 0021;	
    // (𓁬) EGYPTIAN HIEROGLYPH C015	[50B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306C, 0x0021 };
    uint32_t const ces[9] = { 0x50B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_315)
{
    // 1306C 003F;	
    // (𓁬) EGYPTIAN HIEROGLYPH C015	[50B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306C, 0x003F };
    uint32_t const ces[9] = { 0x50B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_316)
{
    // 1306C 0061;	
    // (𓁬) EGYPTIAN HIEROGLYPH C015	[50B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306C, 0x0061 };
    uint32_t const ces[9] = { 0x50B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_317)
{
    // 1306C 0041;	
    // (𓁬) EGYPTIAN HIEROGLYPH C015	[50B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306C, 0x0041 };
    uint32_t const ces[9] = { 0x50B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_318)
{
    // 1306C 0062;	
    // (𓁬) EGYPTIAN HIEROGLYPH C015	[50B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306C, 0x0062 };
    uint32_t const ces[9] = { 0x50B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_319)
{
    // 1306D 0021;	
    // (𓁭) EGYPTIAN HIEROGLYPH C016	[50B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306D, 0x0021 };
    uint32_t const ces[9] = { 0x50B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_320)
{
    // 1306D 003F;	
    // (𓁭) EGYPTIAN HIEROGLYPH C016	[50B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306D, 0x003F };
    uint32_t const ces[9] = { 0x50B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_321)
{
    // 1306D 0061;	
    // (𓁭) EGYPTIAN HIEROGLYPH C016	[50B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306D, 0x0061 };
    uint32_t const ces[9] = { 0x50B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_322)
{
    // 1306D 0041;	
    // (𓁭) EGYPTIAN HIEROGLYPH C016	[50B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306D, 0x0041 };
    uint32_t const ces[9] = { 0x50B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_323)
{
    // 1306D 0062;	
    // (𓁭) EGYPTIAN HIEROGLYPH C016	[50B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306D, 0x0062 };
    uint32_t const ces[9] = { 0x50B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_324)
{
    // 1306E 0021;	
    // (𓁮) EGYPTIAN HIEROGLYPH C017	[50B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306E, 0x0021 };
    uint32_t const ces[9] = { 0x50B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_325)
{
    // 1306E 003F;	
    // (𓁮) EGYPTIAN HIEROGLYPH C017	[50B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306E, 0x003F };
    uint32_t const ces[9] = { 0x50B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_326)
{
    // 1306E 0061;	
    // (𓁮) EGYPTIAN HIEROGLYPH C017	[50B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306E, 0x0061 };
    uint32_t const ces[9] = { 0x50B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_327)
{
    // 1306E 0041;	
    // (𓁮) EGYPTIAN HIEROGLYPH C017	[50B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306E, 0x0041 };
    uint32_t const ces[9] = { 0x50B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_328)
{
    // 1306E 0062;	
    // (𓁮) EGYPTIAN HIEROGLYPH C017	[50B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306E, 0x0062 };
    uint32_t const ces[9] = { 0x50B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_329)
{
    // 1306F 0021;	
    // (𓁯) EGYPTIAN HIEROGLYPH C018	[50B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306F, 0x0021 };
    uint32_t const ces[9] = { 0x50B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_330)
{
    // 1306F 003F;	
    // (𓁯) EGYPTIAN HIEROGLYPH C018	[50B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306F, 0x003F };
    uint32_t const ces[9] = { 0x50B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_331)
{
    // 1306F 0061;	
    // (𓁯) EGYPTIAN HIEROGLYPH C018	[50B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306F, 0x0061 };
    uint32_t const ces[9] = { 0x50B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_332)
{
    // 1306F 0041;	
    // (𓁯) EGYPTIAN HIEROGLYPH C018	[50B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1306F, 0x0041 };
    uint32_t const ces[9] = { 0x50B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_333)
{
    // 1306F 0062;	
    // (𓁯) EGYPTIAN HIEROGLYPH C018	[50B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1306F, 0x0062 };
    uint32_t const ces[9] = { 0x50B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_334)
{
    // 13070 0021;	
    // (𓁰) EGYPTIAN HIEROGLYPH C019	[50BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13070, 0x0021 };
    uint32_t const ces[9] = { 0x50BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_335)
{
    // 13070 003F;	
    // (𓁰) EGYPTIAN HIEROGLYPH C019	[50BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13070, 0x003F };
    uint32_t const ces[9] = { 0x50BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_336)
{
    // 13070 0061;	
    // (𓁰) EGYPTIAN HIEROGLYPH C019	[50BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13070, 0x0061 };
    uint32_t const ces[9] = { 0x50BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_337)
{
    // 13070 0041;	
    // (𓁰) EGYPTIAN HIEROGLYPH C019	[50BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13070, 0x0041 };
    uint32_t const ces[9] = { 0x50BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_338)
{
    // 13070 0062;	
    // (𓁰) EGYPTIAN HIEROGLYPH C019	[50BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13070, 0x0062 };
    uint32_t const ces[9] = { 0x50BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_339)
{
    // 13071 0021;	
    // (𓁱) EGYPTIAN HIEROGLYPH C020	[50BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13071, 0x0021 };
    uint32_t const ces[9] = { 0x50BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_340)
{
    // 13071 003F;	
    // (𓁱) EGYPTIAN HIEROGLYPH C020	[50BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13071, 0x003F };
    uint32_t const ces[9] = { 0x50BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_341)
{
    // 13071 0061;	
    // (𓁱) EGYPTIAN HIEROGLYPH C020	[50BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13071, 0x0061 };
    uint32_t const ces[9] = { 0x50BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_342)
{
    // 13071 0041;	
    // (𓁱) EGYPTIAN HIEROGLYPH C020	[50BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13071, 0x0041 };
    uint32_t const ces[9] = { 0x50BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_343)
{
    // 13071 0062;	
    // (𓁱) EGYPTIAN HIEROGLYPH C020	[50BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13071, 0x0062 };
    uint32_t const ces[9] = { 0x50BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_344)
{
    // 13072 0021;	
    // (𓁲) EGYPTIAN HIEROGLYPH C021	[50BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13072, 0x0021 };
    uint32_t const ces[9] = { 0x50BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_345)
{
    // 13072 003F;	
    // (𓁲) EGYPTIAN HIEROGLYPH C021	[50BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13072, 0x003F };
    uint32_t const ces[9] = { 0x50BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_346)
{
    // 13072 0061;	
    // (𓁲) EGYPTIAN HIEROGLYPH C021	[50BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13072, 0x0061 };
    uint32_t const ces[9] = { 0x50BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_347)
{
    // 13072 0041;	
    // (𓁲) EGYPTIAN HIEROGLYPH C021	[50BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13072, 0x0041 };
    uint32_t const ces[9] = { 0x50BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_348)
{
    // 13072 0062;	
    // (𓁲) EGYPTIAN HIEROGLYPH C021	[50BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13072, 0x0062 };
    uint32_t const ces[9] = { 0x50BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_349)
{
    // 13073 0021;	
    // (𓁳) EGYPTIAN HIEROGLYPH C022	[50BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13073, 0x0021 };
    uint32_t const ces[9] = { 0x50BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_350)
{
    // 13073 003F;	
    // (𓁳) EGYPTIAN HIEROGLYPH C022	[50BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13073, 0x003F };
    uint32_t const ces[9] = { 0x50BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_351)
{
    // 13073 0061;	
    // (𓁳) EGYPTIAN HIEROGLYPH C022	[50BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13073, 0x0061 };
    uint32_t const ces[9] = { 0x50BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_352)
{
    // 13073 0041;	
    // (𓁳) EGYPTIAN HIEROGLYPH C022	[50BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13073, 0x0041 };
    uint32_t const ces[9] = { 0x50BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_353)
{
    // 13073 0062;	
    // (𓁳) EGYPTIAN HIEROGLYPH C022	[50BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13073, 0x0062 };
    uint32_t const ces[9] = { 0x50BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_354)
{
    // 13074 0021;	
    // (𓁴) EGYPTIAN HIEROGLYPH C023	[50BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13074, 0x0021 };
    uint32_t const ces[9] = { 0x50BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_355)
{
    // 13074 003F;	
    // (𓁴) EGYPTIAN HIEROGLYPH C023	[50BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13074, 0x003F };
    uint32_t const ces[9] = { 0x50BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_356)
{
    // 13074 0061;	
    // (𓁴) EGYPTIAN HIEROGLYPH C023	[50BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13074, 0x0061 };
    uint32_t const ces[9] = { 0x50BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_357)
{
    // 13074 0041;	
    // (𓁴) EGYPTIAN HIEROGLYPH C023	[50BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13074, 0x0041 };
    uint32_t const ces[9] = { 0x50BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_358)
{
    // 13074 0062;	
    // (𓁴) EGYPTIAN HIEROGLYPH C023	[50BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13074, 0x0062 };
    uint32_t const ces[9] = { 0x50BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_359)
{
    // 13075 0021;	
    // (𓁵) EGYPTIAN HIEROGLYPH C024	[50BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13075, 0x0021 };
    uint32_t const ces[9] = { 0x50BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_360)
{
    // 13075 003F;	
    // (𓁵) EGYPTIAN HIEROGLYPH C024	[50BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13075, 0x003F };
    uint32_t const ces[9] = { 0x50BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_361)
{
    // 13075 0061;	
    // (𓁵) EGYPTIAN HIEROGLYPH C024	[50BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13075, 0x0061 };
    uint32_t const ces[9] = { 0x50BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_362)
{
    // 13075 0041;	
    // (𓁵) EGYPTIAN HIEROGLYPH C024	[50BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13075, 0x0041 };
    uint32_t const ces[9] = { 0x50BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_363)
{
    // 13075 0062;	
    // (𓁵) EGYPTIAN HIEROGLYPH C024	[50BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13075, 0x0062 };
    uint32_t const ces[9] = { 0x50BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_364)
{
    // 13076 0021;	
    // (𓁶) EGYPTIAN HIEROGLYPH D001	[50C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13076, 0x0021 };
    uint32_t const ces[9] = { 0x50C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_365)
{
    // 13076 003F;	
    // (𓁶) EGYPTIAN HIEROGLYPH D001	[50C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13076, 0x003F };
    uint32_t const ces[9] = { 0x50C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_366)
{
    // 13076 0061;	
    // (𓁶) EGYPTIAN HIEROGLYPH D001	[50C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13076, 0x0061 };
    uint32_t const ces[9] = { 0x50C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_367)
{
    // 13076 0041;	
    // (𓁶) EGYPTIAN HIEROGLYPH D001	[50C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13076, 0x0041 };
    uint32_t const ces[9] = { 0x50C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_368)
{
    // 13076 0062;	
    // (𓁶) EGYPTIAN HIEROGLYPH D001	[50C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13076, 0x0062 };
    uint32_t const ces[9] = { 0x50C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_369)
{
    // 13077 0021;	
    // (𓁷) EGYPTIAN HIEROGLYPH D002	[50C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13077, 0x0021 };
    uint32_t const ces[9] = { 0x50C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_370)
{
    // 13077 003F;	
    // (𓁷) EGYPTIAN HIEROGLYPH D002	[50C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13077, 0x003F };
    uint32_t const ces[9] = { 0x50C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_371)
{
    // 13077 0061;	
    // (𓁷) EGYPTIAN HIEROGLYPH D002	[50C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13077, 0x0061 };
    uint32_t const ces[9] = { 0x50C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_372)
{
    // 13077 0041;	
    // (𓁷) EGYPTIAN HIEROGLYPH D002	[50C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13077, 0x0041 };
    uint32_t const ces[9] = { 0x50C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_373)
{
    // 13077 0062;	
    // (𓁷) EGYPTIAN HIEROGLYPH D002	[50C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13077, 0x0062 };
    uint32_t const ces[9] = { 0x50C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_374)
{
    // 13078 0021;	
    // (𓁸) EGYPTIAN HIEROGLYPH D003	[50C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13078, 0x0021 };
    uint32_t const ces[9] = { 0x50C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_375)
{
    // 13078 003F;	
    // (𓁸) EGYPTIAN HIEROGLYPH D003	[50C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13078, 0x003F };
    uint32_t const ces[9] = { 0x50C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_376)
{
    // 13078 0061;	
    // (𓁸) EGYPTIAN HIEROGLYPH D003	[50C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13078, 0x0061 };
    uint32_t const ces[9] = { 0x50C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_377)
{
    // 13078 0041;	
    // (𓁸) EGYPTIAN HIEROGLYPH D003	[50C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13078, 0x0041 };
    uint32_t const ces[9] = { 0x50C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_378)
{
    // 13078 0062;	
    // (𓁸) EGYPTIAN HIEROGLYPH D003	[50C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13078, 0x0062 };
    uint32_t const ces[9] = { 0x50C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_379)
{
    // 13079 0021;	
    // (𓁹) EGYPTIAN HIEROGLYPH D004	[50C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13079, 0x0021 };
    uint32_t const ces[9] = { 0x50C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_380)
{
    // 13079 003F;	
    // (𓁹) EGYPTIAN HIEROGLYPH D004	[50C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13079, 0x003F };
    uint32_t const ces[9] = { 0x50C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_381)
{
    // 13079 0061;	
    // (𓁹) EGYPTIAN HIEROGLYPH D004	[50C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13079, 0x0061 };
    uint32_t const ces[9] = { 0x50C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_382)
{
    // 13079 0041;	
    // (𓁹) EGYPTIAN HIEROGLYPH D004	[50C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13079, 0x0041 };
    uint32_t const ces[9] = { 0x50C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_383)
{
    // 13079 0062;	
    // (𓁹) EGYPTIAN HIEROGLYPH D004	[50C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13079, 0x0062 };
    uint32_t const ces[9] = { 0x50C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_384)
{
    // 1307A 0021;	
    // (𓁺) EGYPTIAN HIEROGLYPH D005	[50C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307A, 0x0021 };
    uint32_t const ces[9] = { 0x50C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_385)
{
    // 1307A 003F;	
    // (𓁺) EGYPTIAN HIEROGLYPH D005	[50C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307A, 0x003F };
    uint32_t const ces[9] = { 0x50C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_386)
{
    // 1307A 0061;	
    // (𓁺) EGYPTIAN HIEROGLYPH D005	[50C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307A, 0x0061 };
    uint32_t const ces[9] = { 0x50C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_387)
{
    // 1307A 0041;	
    // (𓁺) EGYPTIAN HIEROGLYPH D005	[50C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307A, 0x0041 };
    uint32_t const ces[9] = { 0x50C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_388)
{
    // 1307A 0062;	
    // (𓁺) EGYPTIAN HIEROGLYPH D005	[50C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307A, 0x0062 };
    uint32_t const ces[9] = { 0x50C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_389)
{
    // 1307B 0021;	
    // (𓁻) EGYPTIAN HIEROGLYPH D006	[50C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307B, 0x0021 };
    uint32_t const ces[9] = { 0x50C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_390)
{
    // 1307B 003F;	
    // (𓁻) EGYPTIAN HIEROGLYPH D006	[50C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307B, 0x003F };
    uint32_t const ces[9] = { 0x50C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_391)
{
    // 1307B 0061;	
    // (𓁻) EGYPTIAN HIEROGLYPH D006	[50C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307B, 0x0061 };
    uint32_t const ces[9] = { 0x50C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_392)
{
    // 1307B 0041;	
    // (𓁻) EGYPTIAN HIEROGLYPH D006	[50C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307B, 0x0041 };
    uint32_t const ces[9] = { 0x50C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_393)
{
    // 1307B 0062;	
    // (𓁻) EGYPTIAN HIEROGLYPH D006	[50C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307B, 0x0062 };
    uint32_t const ces[9] = { 0x50C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_394)
{
    // 1307C 0021;	
    // (𓁼) EGYPTIAN HIEROGLYPH D007	[50C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307C, 0x0021 };
    uint32_t const ces[9] = { 0x50C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_395)
{
    // 1307C 003F;	
    // (𓁼) EGYPTIAN HIEROGLYPH D007	[50C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307C, 0x003F };
    uint32_t const ces[9] = { 0x50C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_396)
{
    // 1307C 0061;	
    // (𓁼) EGYPTIAN HIEROGLYPH D007	[50C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307C, 0x0061 };
    uint32_t const ces[9] = { 0x50C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_397)
{
    // 1307C 0041;	
    // (𓁼) EGYPTIAN HIEROGLYPH D007	[50C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307C, 0x0041 };
    uint32_t const ces[9] = { 0x50C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_398)
{
    // 1307C 0062;	
    // (𓁼) EGYPTIAN HIEROGLYPH D007	[50C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307C, 0x0062 };
    uint32_t const ces[9] = { 0x50C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_399)
{
    // 1307D 0021;	
    // (𓁽) EGYPTIAN HIEROGLYPH D008	[50C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307D, 0x0021 };
    uint32_t const ces[9] = { 0x50C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_400)
{
    // 1307D 003F;	
    // (𓁽) EGYPTIAN HIEROGLYPH D008	[50C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307D, 0x003F };
    uint32_t const ces[9] = { 0x50C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_401)
{
    // 1307D 0061;	
    // (𓁽) EGYPTIAN HIEROGLYPH D008	[50C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307D, 0x0061 };
    uint32_t const ces[9] = { 0x50C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_402)
{
    // 1307D 0041;	
    // (𓁽) EGYPTIAN HIEROGLYPH D008	[50C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307D, 0x0041 };
    uint32_t const ces[9] = { 0x50C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_403)
{
    // 1307D 0062;	
    // (𓁽) EGYPTIAN HIEROGLYPH D008	[50C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307D, 0x0062 };
    uint32_t const ces[9] = { 0x50C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_404)
{
    // 1307E 0021;	
    // (𓁾) EGYPTIAN HIEROGLYPH D008A	[50C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307E, 0x0021 };
    uint32_t const ces[9] = { 0x50C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_405)
{
    // 1307E 003F;	
    // (𓁾) EGYPTIAN HIEROGLYPH D008A	[50C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307E, 0x003F };
    uint32_t const ces[9] = { 0x50C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_406)
{
    // 1307E 0061;	
    // (𓁾) EGYPTIAN HIEROGLYPH D008A	[50C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307E, 0x0061 };
    uint32_t const ces[9] = { 0x50C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_407)
{
    // 1307E 0041;	
    // (𓁾) EGYPTIAN HIEROGLYPH D008A	[50C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307E, 0x0041 };
    uint32_t const ces[9] = { 0x50C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_408)
{
    // 1307E 0062;	
    // (𓁾) EGYPTIAN HIEROGLYPH D008A	[50C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307E, 0x0062 };
    uint32_t const ces[9] = { 0x50C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_409)
{
    // 1307F 0021;	
    // (𓁿) EGYPTIAN HIEROGLYPH D009	[50C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307F, 0x0021 };
    uint32_t const ces[9] = { 0x50C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_410)
{
    // 1307F 003F;	
    // (𓁿) EGYPTIAN HIEROGLYPH D009	[50C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307F, 0x003F };
    uint32_t const ces[9] = { 0x50C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_411)
{
    // 1307F 0061;	
    // (𓁿) EGYPTIAN HIEROGLYPH D009	[50C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307F, 0x0061 };
    uint32_t const ces[9] = { 0x50C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_412)
{
    // 1307F 0041;	
    // (𓁿) EGYPTIAN HIEROGLYPH D009	[50C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1307F, 0x0041 };
    uint32_t const ces[9] = { 0x50C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_413)
{
    // 1307F 0062;	
    // (𓁿) EGYPTIAN HIEROGLYPH D009	[50C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1307F, 0x0062 };
    uint32_t const ces[9] = { 0x50C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_414)
{
    // 13080 0021;	
    // (𓂀) EGYPTIAN HIEROGLYPH D010	[50CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13080, 0x0021 };
    uint32_t const ces[9] = { 0x50CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_415)
{
    // 13080 003F;	
    // (𓂀) EGYPTIAN HIEROGLYPH D010	[50CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13080, 0x003F };
    uint32_t const ces[9] = { 0x50CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_416)
{
    // 13080 0061;	
    // (𓂀) EGYPTIAN HIEROGLYPH D010	[50CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13080, 0x0061 };
    uint32_t const ces[9] = { 0x50CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_417)
{
    // 13080 0041;	
    // (𓂀) EGYPTIAN HIEROGLYPH D010	[50CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13080, 0x0041 };
    uint32_t const ces[9] = { 0x50CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_418)
{
    // 13080 0062;	
    // (𓂀) EGYPTIAN HIEROGLYPH D010	[50CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13080, 0x0062 };
    uint32_t const ces[9] = { 0x50CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_419)
{
    // 13081 0021;	
    // (𓂁) EGYPTIAN HIEROGLYPH D011	[50CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13081, 0x0021 };
    uint32_t const ces[9] = { 0x50CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_420)
{
    // 13081 003F;	
    // (𓂁) EGYPTIAN HIEROGLYPH D011	[50CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13081, 0x003F };
    uint32_t const ces[9] = { 0x50CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_421)
{
    // 13081 0061;	
    // (𓂁) EGYPTIAN HIEROGLYPH D011	[50CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13081, 0x0061 };
    uint32_t const ces[9] = { 0x50CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_422)
{
    // 13081 0041;	
    // (𓂁) EGYPTIAN HIEROGLYPH D011	[50CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13081, 0x0041 };
    uint32_t const ces[9] = { 0x50CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_423)
{
    // 13081 0062;	
    // (𓂁) EGYPTIAN HIEROGLYPH D011	[50CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13081, 0x0062 };
    uint32_t const ces[9] = { 0x50CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_424)
{
    // 13082 0021;	
    // (𓂂) EGYPTIAN HIEROGLYPH D012	[50CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13082, 0x0021 };
    uint32_t const ces[9] = { 0x50CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_425)
{
    // 13082 003F;	
    // (𓂂) EGYPTIAN HIEROGLYPH D012	[50CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13082, 0x003F };
    uint32_t const ces[9] = { 0x50CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_426)
{
    // 13082 0061;	
    // (𓂂) EGYPTIAN HIEROGLYPH D012	[50CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13082, 0x0061 };
    uint32_t const ces[9] = { 0x50CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_427)
{
    // 13082 0041;	
    // (𓂂) EGYPTIAN HIEROGLYPH D012	[50CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13082, 0x0041 };
    uint32_t const ces[9] = { 0x50CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_428)
{
    // 13082 0062;	
    // (𓂂) EGYPTIAN HIEROGLYPH D012	[50CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13082, 0x0062 };
    uint32_t const ces[9] = { 0x50CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_429)
{
    // 13083 0021;	
    // (𓂃) EGYPTIAN HIEROGLYPH D013	[50CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13083, 0x0021 };
    uint32_t const ces[9] = { 0x50CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_430)
{
    // 13083 003F;	
    // (𓂃) EGYPTIAN HIEROGLYPH D013	[50CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13083, 0x003F };
    uint32_t const ces[9] = { 0x50CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_431)
{
    // 13083 0061;	
    // (𓂃) EGYPTIAN HIEROGLYPH D013	[50CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13083, 0x0061 };
    uint32_t const ces[9] = { 0x50CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_432)
{
    // 13083 0041;	
    // (𓂃) EGYPTIAN HIEROGLYPH D013	[50CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13083, 0x0041 };
    uint32_t const ces[9] = { 0x50CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_433)
{
    // 13083 0062;	
    // (𓂃) EGYPTIAN HIEROGLYPH D013	[50CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13083, 0x0062 };
    uint32_t const ces[9] = { 0x50CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_434)
{
    // 13084 0021;	
    // (𓂄) EGYPTIAN HIEROGLYPH D014	[50CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13084, 0x0021 };
    uint32_t const ces[9] = { 0x50CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_435)
{
    // 13084 003F;	
    // (𓂄) EGYPTIAN HIEROGLYPH D014	[50CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13084, 0x003F };
    uint32_t const ces[9] = { 0x50CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_436)
{
    // 13084 0061;	
    // (𓂄) EGYPTIAN HIEROGLYPH D014	[50CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13084, 0x0061 };
    uint32_t const ces[9] = { 0x50CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_437)
{
    // 13084 0041;	
    // (𓂄) EGYPTIAN HIEROGLYPH D014	[50CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13084, 0x0041 };
    uint32_t const ces[9] = { 0x50CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_438)
{
    // 13084 0062;	
    // (𓂄) EGYPTIAN HIEROGLYPH D014	[50CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13084, 0x0062 };
    uint32_t const ces[9] = { 0x50CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_439)
{
    // 13085 0021;	
    // (𓂅) EGYPTIAN HIEROGLYPH D015	[50CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13085, 0x0021 };
    uint32_t const ces[9] = { 0x50CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_440)
{
    // 13085 003F;	
    // (𓂅) EGYPTIAN HIEROGLYPH D015	[50CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13085, 0x003F };
    uint32_t const ces[9] = { 0x50CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_441)
{
    // 13085 0061;	
    // (𓂅) EGYPTIAN HIEROGLYPH D015	[50CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13085, 0x0061 };
    uint32_t const ces[9] = { 0x50CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_442)
{
    // 13085 0041;	
    // (𓂅) EGYPTIAN HIEROGLYPH D015	[50CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13085, 0x0041 };
    uint32_t const ces[9] = { 0x50CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_443)
{
    // 13085 0062;	
    // (𓂅) EGYPTIAN HIEROGLYPH D015	[50CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13085, 0x0062 };
    uint32_t const ces[9] = { 0x50CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_444)
{
    // 13086 0021;	
    // (𓂆) EGYPTIAN HIEROGLYPH D016	[50D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13086, 0x0021 };
    uint32_t const ces[9] = { 0x50D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_445)
{
    // 13086 003F;	
    // (𓂆) EGYPTIAN HIEROGLYPH D016	[50D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13086, 0x003F };
    uint32_t const ces[9] = { 0x50D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_446)
{
    // 13086 0061;	
    // (𓂆) EGYPTIAN HIEROGLYPH D016	[50D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13086, 0x0061 };
    uint32_t const ces[9] = { 0x50D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_447)
{
    // 13086 0041;	
    // (𓂆) EGYPTIAN HIEROGLYPH D016	[50D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13086, 0x0041 };
    uint32_t const ces[9] = { 0x50D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_448)
{
    // 13086 0062;	
    // (𓂆) EGYPTIAN HIEROGLYPH D016	[50D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13086, 0x0062 };
    uint32_t const ces[9] = { 0x50D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_449)
{
    // 13087 0021;	
    // (𓂇) EGYPTIAN HIEROGLYPH D017	[50D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13087, 0x0021 };
    uint32_t const ces[9] = { 0x50D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_450)
{
    // 13087 003F;	
    // (𓂇) EGYPTIAN HIEROGLYPH D017	[50D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13087, 0x003F };
    uint32_t const ces[9] = { 0x50D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_451)
{
    // 13087 0061;	
    // (𓂇) EGYPTIAN HIEROGLYPH D017	[50D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13087, 0x0061 };
    uint32_t const ces[9] = { 0x50D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_452)
{
    // 13087 0041;	
    // (𓂇) EGYPTIAN HIEROGLYPH D017	[50D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13087, 0x0041 };
    uint32_t const ces[9] = { 0x50D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_453)
{
    // 13087 0062;	
    // (𓂇) EGYPTIAN HIEROGLYPH D017	[50D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13087, 0x0062 };
    uint32_t const ces[9] = { 0x50D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_454)
{
    // 13088 0021;	
    // (𓂈) EGYPTIAN HIEROGLYPH D018	[50D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13088, 0x0021 };
    uint32_t const ces[9] = { 0x50D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_455)
{
    // 13088 003F;	
    // (𓂈) EGYPTIAN HIEROGLYPH D018	[50D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13088, 0x003F };
    uint32_t const ces[9] = { 0x50D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_456)
{
    // 13088 0061;	
    // (𓂈) EGYPTIAN HIEROGLYPH D018	[50D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13088, 0x0061 };
    uint32_t const ces[9] = { 0x50D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_457)
{
    // 13088 0041;	
    // (𓂈) EGYPTIAN HIEROGLYPH D018	[50D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13088, 0x0041 };
    uint32_t const ces[9] = { 0x50D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_458)
{
    // 13088 0062;	
    // (𓂈) EGYPTIAN HIEROGLYPH D018	[50D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13088, 0x0062 };
    uint32_t const ces[9] = { 0x50D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_459)
{
    // 13089 0021;	
    // (𓂉) EGYPTIAN HIEROGLYPH D019	[50D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13089, 0x0021 };
    uint32_t const ces[9] = { 0x50D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_460)
{
    // 13089 003F;	
    // (𓂉) EGYPTIAN HIEROGLYPH D019	[50D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13089, 0x003F };
    uint32_t const ces[9] = { 0x50D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_461)
{
    // 13089 0061;	
    // (𓂉) EGYPTIAN HIEROGLYPH D019	[50D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13089, 0x0061 };
    uint32_t const ces[9] = { 0x50D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_462)
{
    // 13089 0041;	
    // (𓂉) EGYPTIAN HIEROGLYPH D019	[50D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13089, 0x0041 };
    uint32_t const ces[9] = { 0x50D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_463)
{
    // 13089 0062;	
    // (𓂉) EGYPTIAN HIEROGLYPH D019	[50D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13089, 0x0062 };
    uint32_t const ces[9] = { 0x50D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_464)
{
    // 1308A 0021;	
    // (𓂊) EGYPTIAN HIEROGLYPH D020	[50D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308A, 0x0021 };
    uint32_t const ces[9] = { 0x50D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_465)
{
    // 1308A 003F;	
    // (𓂊) EGYPTIAN HIEROGLYPH D020	[50D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308A, 0x003F };
    uint32_t const ces[9] = { 0x50D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_466)
{
    // 1308A 0061;	
    // (𓂊) EGYPTIAN HIEROGLYPH D020	[50D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308A, 0x0061 };
    uint32_t const ces[9] = { 0x50D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_467)
{
    // 1308A 0041;	
    // (𓂊) EGYPTIAN HIEROGLYPH D020	[50D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308A, 0x0041 };
    uint32_t const ces[9] = { 0x50D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_468)
{
    // 1308A 0062;	
    // (𓂊) EGYPTIAN HIEROGLYPH D020	[50D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308A, 0x0062 };
    uint32_t const ces[9] = { 0x50D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_469)
{
    // 1308B 0021;	
    // (𓂋) EGYPTIAN HIEROGLYPH D021	[50D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308B, 0x0021 };
    uint32_t const ces[9] = { 0x50D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_470)
{
    // 1308B 003F;	
    // (𓂋) EGYPTIAN HIEROGLYPH D021	[50D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308B, 0x003F };
    uint32_t const ces[9] = { 0x50D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_471)
{
    // 1308B 0061;	
    // (𓂋) EGYPTIAN HIEROGLYPH D021	[50D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308B, 0x0061 };
    uint32_t const ces[9] = { 0x50D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_472)
{
    // 1308B 0041;	
    // (𓂋) EGYPTIAN HIEROGLYPH D021	[50D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308B, 0x0041 };
    uint32_t const ces[9] = { 0x50D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_473)
{
    // 1308B 0062;	
    // (𓂋) EGYPTIAN HIEROGLYPH D021	[50D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308B, 0x0062 };
    uint32_t const ces[9] = { 0x50D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_474)
{
    // 1308C 0021;	
    // (𓂌) EGYPTIAN HIEROGLYPH D022	[50D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308C, 0x0021 };
    uint32_t const ces[9] = { 0x50D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_475)
{
    // 1308C 003F;	
    // (𓂌) EGYPTIAN HIEROGLYPH D022	[50D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308C, 0x003F };
    uint32_t const ces[9] = { 0x50D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_476)
{
    // 1308C 0061;	
    // (𓂌) EGYPTIAN HIEROGLYPH D022	[50D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308C, 0x0061 };
    uint32_t const ces[9] = { 0x50D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_477)
{
    // 1308C 0041;	
    // (𓂌) EGYPTIAN HIEROGLYPH D022	[50D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308C, 0x0041 };
    uint32_t const ces[9] = { 0x50D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_478)
{
    // 1308C 0062;	
    // (𓂌) EGYPTIAN HIEROGLYPH D022	[50D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308C, 0x0062 };
    uint32_t const ces[9] = { 0x50D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_479)
{
    // 1308D 0021;	
    // (𓂍) EGYPTIAN HIEROGLYPH D023	[50D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308D, 0x0021 };
    uint32_t const ces[9] = { 0x50D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_480)
{
    // 1308D 003F;	
    // (𓂍) EGYPTIAN HIEROGLYPH D023	[50D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308D, 0x003F };
    uint32_t const ces[9] = { 0x50D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_481)
{
    // 1308D 0061;	
    // (𓂍) EGYPTIAN HIEROGLYPH D023	[50D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308D, 0x0061 };
    uint32_t const ces[9] = { 0x50D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_482)
{
    // 1308D 0041;	
    // (𓂍) EGYPTIAN HIEROGLYPH D023	[50D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308D, 0x0041 };
    uint32_t const ces[9] = { 0x50D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_483)
{
    // 1308D 0062;	
    // (𓂍) EGYPTIAN HIEROGLYPH D023	[50D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308D, 0x0062 };
    uint32_t const ces[9] = { 0x50D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_484)
{
    // 1308E 0021;	
    // (𓂎) EGYPTIAN HIEROGLYPH D024	[50D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308E, 0x0021 };
    uint32_t const ces[9] = { 0x50D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_485)
{
    // 1308E 003F;	
    // (𓂎) EGYPTIAN HIEROGLYPH D024	[50D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308E, 0x003F };
    uint32_t const ces[9] = { 0x50D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_486)
{
    // 1308E 0061;	
    // (𓂎) EGYPTIAN HIEROGLYPH D024	[50D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308E, 0x0061 };
    uint32_t const ces[9] = { 0x50D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_487)
{
    // 1308E 0041;	
    // (𓂎) EGYPTIAN HIEROGLYPH D024	[50D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308E, 0x0041 };
    uint32_t const ces[9] = { 0x50D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_488)
{
    // 1308E 0062;	
    // (𓂎) EGYPTIAN HIEROGLYPH D024	[50D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308E, 0x0062 };
    uint32_t const ces[9] = { 0x50D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_489)
{
    // 1308F 0021;	
    // (𓂏) EGYPTIAN HIEROGLYPH D025	[50D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308F, 0x0021 };
    uint32_t const ces[9] = { 0x50D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_490)
{
    // 1308F 003F;	
    // (𓂏) EGYPTIAN HIEROGLYPH D025	[50D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308F, 0x003F };
    uint32_t const ces[9] = { 0x50D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_491)
{
    // 1308F 0061;	
    // (𓂏) EGYPTIAN HIEROGLYPH D025	[50D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308F, 0x0061 };
    uint32_t const ces[9] = { 0x50D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_492)
{
    // 1308F 0041;	
    // (𓂏) EGYPTIAN HIEROGLYPH D025	[50D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1308F, 0x0041 };
    uint32_t const ces[9] = { 0x50D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_493)
{
    // 1308F 0062;	
    // (𓂏) EGYPTIAN HIEROGLYPH D025	[50D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1308F, 0x0062 };
    uint32_t const ces[9] = { 0x50D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_494)
{
    // 13090 0021;	
    // (𓂐) EGYPTIAN HIEROGLYPH D026	[50DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13090, 0x0021 };
    uint32_t const ces[9] = { 0x50DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_495)
{
    // 13090 003F;	
    // (𓂐) EGYPTIAN HIEROGLYPH D026	[50DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13090, 0x003F };
    uint32_t const ces[9] = { 0x50DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_496)
{
    // 13090 0061;	
    // (𓂐) EGYPTIAN HIEROGLYPH D026	[50DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13090, 0x0061 };
    uint32_t const ces[9] = { 0x50DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_497)
{
    // 13090 0041;	
    // (𓂐) EGYPTIAN HIEROGLYPH D026	[50DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13090, 0x0041 };
    uint32_t const ces[9] = { 0x50DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_498)
{
    // 13090 0062;	
    // (𓂐) EGYPTIAN HIEROGLYPH D026	[50DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13090, 0x0062 };
    uint32_t const ces[9] = { 0x50DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_297_499)
{
    // 13091 0021;	
    // (𓂑) EGYPTIAN HIEROGLYPH D027	[50DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13091, 0x0021 };
    uint32_t const ces[9] = { 0x50DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

