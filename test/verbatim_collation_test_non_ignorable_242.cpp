// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_242_000)
{
    // 3179 0062;	
    // (ㅹ) HANGUL LETTER KAPYEOUNSSANGPIEUP	[3D38 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3179, 0x0062 };
    uint32_t const ces[9] = { 0x3D38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_001)
{
    // 112D 0021;	
    // (ᄭ) HANGUL CHOSEONG SIOS-KIYEOK	[3D39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D, 0x0021 };
    uint32_t const ces[9] = { 0x3D39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_002)
{
    // 317A 0021;	
    // (ㅺ) HANGUL LETTER SIOS-KIYEOK	[3D39 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317A, 0x0021 };
    uint32_t const ces[9] = { 0x3D39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_003)
{
    // 112D 003F;	
    // (ᄭ) HANGUL CHOSEONG SIOS-KIYEOK	[3D39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D, 0x003F };
    uint32_t const ces[9] = { 0x3D39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_004)
{
    // 317A 003F;	
    // (ㅺ) HANGUL LETTER SIOS-KIYEOK	[3D39 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317A, 0x003F };
    uint32_t const ces[9] = { 0x3D39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_005)
{
    // 112D 0061;	
    // (ᄭ) HANGUL CHOSEONG SIOS-KIYEOK	[3D39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D, 0x0061 };
    uint32_t const ces[9] = { 0x3D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_006)
{
    // 112D 0041;	
    // (ᄭ) HANGUL CHOSEONG SIOS-KIYEOK	[3D39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D, 0x0041 };
    uint32_t const ces[9] = { 0x3D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_007)
{
    // 317A 0061;	
    // (ㅺ) HANGUL LETTER SIOS-KIYEOK	[3D39 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317A, 0x0061 };
    uint32_t const ces[9] = { 0x3D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_008)
{
    // 317A 0041;	
    // (ㅺ) HANGUL LETTER SIOS-KIYEOK	[3D39 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317A, 0x0041 };
    uint32_t const ces[9] = { 0x3D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_009)
{
    // 112D 0062;	
    // (ᄭ) HANGUL CHOSEONG SIOS-KIYEOK	[3D39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D, 0x0062 };
    uint32_t const ces[9] = { 0x3D39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_010)
{
    // 317A 0062;	
    // (ㅺ) HANGUL LETTER SIOS-KIYEOK	[3D39 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317A, 0x0062 };
    uint32_t const ces[9] = { 0x3D39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_011)
{
    // 112E 0021;	
    // (ᄮ) HANGUL CHOSEONG SIOS-NIEUN	[3D3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E, 0x0021 };
    uint32_t const ces[9] = { 0x3D3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_012)
{
    // 317B 0021;	
    // (ㅻ) HANGUL LETTER SIOS-NIEUN	[3D3A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317B, 0x0021 };
    uint32_t const ces[9] = { 0x3D3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_013)
{
    // 112E 003F;	
    // (ᄮ) HANGUL CHOSEONG SIOS-NIEUN	[3D3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E, 0x003F };
    uint32_t const ces[9] = { 0x3D3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_014)
{
    // 317B 003F;	
    // (ㅻ) HANGUL LETTER SIOS-NIEUN	[3D3A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317B, 0x003F };
    uint32_t const ces[9] = { 0x3D3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_015)
{
    // 112E 0061;	
    // (ᄮ) HANGUL CHOSEONG SIOS-NIEUN	[3D3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E, 0x0061 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_016)
{
    // 112E 0041;	
    // (ᄮ) HANGUL CHOSEONG SIOS-NIEUN	[3D3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E, 0x0041 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_017)
{
    // 317B 0061;	
    // (ㅻ) HANGUL LETTER SIOS-NIEUN	[3D3A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317B, 0x0061 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_018)
{
    // 317B 0041;	
    // (ㅻ) HANGUL LETTER SIOS-NIEUN	[3D3A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317B, 0x0041 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_019)
{
    // 112E 0062;	
    // (ᄮ) HANGUL CHOSEONG SIOS-NIEUN	[3D3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E, 0x0062 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_020)
{
    // 317B 0062;	
    // (ㅻ) HANGUL LETTER SIOS-NIEUN	[3D3A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317B, 0x0062 };
    uint32_t const ces[9] = { 0x3D3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_021)
{
    // 112F 0021;	
    // (ᄯ) HANGUL CHOSEONG SIOS-TIKEUT	[3D3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F, 0x0021 };
    uint32_t const ces[9] = { 0x3D3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_022)
{
    // 317C 0021;	
    // (ㅼ) HANGUL LETTER SIOS-TIKEUT	[3D3B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317C, 0x0021 };
    uint32_t const ces[9] = { 0x3D3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_023)
{
    // 112F 003F;	
    // (ᄯ) HANGUL CHOSEONG SIOS-TIKEUT	[3D3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F, 0x003F };
    uint32_t const ces[9] = { 0x3D3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_024)
{
    // 317C 003F;	
    // (ㅼ) HANGUL LETTER SIOS-TIKEUT	[3D3B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317C, 0x003F };
    uint32_t const ces[9] = { 0x3D3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_025)
{
    // 112F 0061;	
    // (ᄯ) HANGUL CHOSEONG SIOS-TIKEUT	[3D3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F, 0x0061 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_026)
{
    // 112F 0041;	
    // (ᄯ) HANGUL CHOSEONG SIOS-TIKEUT	[3D3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F, 0x0041 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_027)
{
    // 317C 0061;	
    // (ㅼ) HANGUL LETTER SIOS-TIKEUT	[3D3B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317C, 0x0061 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_028)
{
    // 317C 0041;	
    // (ㅼ) HANGUL LETTER SIOS-TIKEUT	[3D3B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317C, 0x0041 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_029)
{
    // 112F 0062;	
    // (ᄯ) HANGUL CHOSEONG SIOS-TIKEUT	[3D3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F, 0x0062 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_030)
{
    // 317C 0062;	
    // (ㅼ) HANGUL LETTER SIOS-TIKEUT	[3D3B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317C, 0x0062 };
    uint32_t const ces[9] = { 0x3D3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_031)
{
    // 1130 0021;	
    // (ᄰ) HANGUL CHOSEONG SIOS-RIEUL	[3D3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130, 0x0021 };
    uint32_t const ces[9] = { 0x3D3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_032)
{
    // 1130 003F;	
    // (ᄰ) HANGUL CHOSEONG SIOS-RIEUL	[3D3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130, 0x003F };
    uint32_t const ces[9] = { 0x3D3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_033)
{
    // 1130 0061;	
    // (ᄰ) HANGUL CHOSEONG SIOS-RIEUL	[3D3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130, 0x0061 };
    uint32_t const ces[9] = { 0x3D3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_034)
{
    // 1130 0041;	
    // (ᄰ) HANGUL CHOSEONG SIOS-RIEUL	[3D3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1130, 0x0041 };
    uint32_t const ces[9] = { 0x3D3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_035)
{
    // 1130 0062;	
    // (ᄰ) HANGUL CHOSEONG SIOS-RIEUL	[3D3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130, 0x0062 };
    uint32_t const ces[9] = { 0x3D3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_036)
{
    // 1131 0021;	
    // (ᄱ) HANGUL CHOSEONG SIOS-MIEUM	[3D3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131, 0x0021 };
    uint32_t const ces[9] = { 0x3D3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_037)
{
    // 1131 003F;	
    // (ᄱ) HANGUL CHOSEONG SIOS-MIEUM	[3D3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131, 0x003F };
    uint32_t const ces[9] = { 0x3D3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_038)
{
    // 1131 0061;	
    // (ᄱ) HANGUL CHOSEONG SIOS-MIEUM	[3D3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131, 0x0061 };
    uint32_t const ces[9] = { 0x3D3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_039)
{
    // 1131 0041;	
    // (ᄱ) HANGUL CHOSEONG SIOS-MIEUM	[3D3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131, 0x0041 };
    uint32_t const ces[9] = { 0x3D3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_040)
{
    // 1131 0062;	
    // (ᄱ) HANGUL CHOSEONG SIOS-MIEUM	[3D3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131, 0x0062 };
    uint32_t const ces[9] = { 0x3D3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_041)
{
    // 1132 0021;	
    // (ᄲ) HANGUL CHOSEONG SIOS-PIEUP	[3D3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132, 0x0021 };
    uint32_t const ces[9] = { 0x3D3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_042)
{
    // 317D 0021;	
    // (ㅽ) HANGUL LETTER SIOS-PIEUP	[3D3E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317D, 0x0021 };
    uint32_t const ces[9] = { 0x3D3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_043)
{
    // 1132 003F;	
    // (ᄲ) HANGUL CHOSEONG SIOS-PIEUP	[3D3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132, 0x003F };
    uint32_t const ces[9] = { 0x3D3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_044)
{
    // 317D 003F;	
    // (ㅽ) HANGUL LETTER SIOS-PIEUP	[3D3E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317D, 0x003F };
    uint32_t const ces[9] = { 0x3D3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_045)
{
    // 1132 0061;	
    // (ᄲ) HANGUL CHOSEONG SIOS-PIEUP	[3D3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132, 0x0061 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_046)
{
    // 1132 0041;	
    // (ᄲ) HANGUL CHOSEONG SIOS-PIEUP	[3D3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1132, 0x0041 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_047)
{
    // 317D 0061;	
    // (ㅽ) HANGUL LETTER SIOS-PIEUP	[3D3E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317D, 0x0061 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_048)
{
    // 317D 0041;	
    // (ㅽ) HANGUL LETTER SIOS-PIEUP	[3D3E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317D, 0x0041 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_049)
{
    // 1132 0062;	
    // (ᄲ) HANGUL CHOSEONG SIOS-PIEUP	[3D3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1132, 0x0062 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_050)
{
    // 317D 0062;	
    // (ㅽ) HANGUL LETTER SIOS-PIEUP	[3D3E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317D, 0x0062 };
    uint32_t const ces[9] = { 0x3D3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_051)
{
    // 1133 0021;	
    // (ᄳ) HANGUL CHOSEONG SIOS-PIEUP-KIYEOK	[3D3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133, 0x0021 };
    uint32_t const ces[9] = { 0x3D3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_052)
{
    // 1133 003F;	
    // (ᄳ) HANGUL CHOSEONG SIOS-PIEUP-KIYEOK	[3D3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133, 0x003F };
    uint32_t const ces[9] = { 0x3D3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_053)
{
    // 1133 0061;	
    // (ᄳ) HANGUL CHOSEONG SIOS-PIEUP-KIYEOK	[3D3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133, 0x0061 };
    uint32_t const ces[9] = { 0x3D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_054)
{
    // 1133 0041;	
    // (ᄳ) HANGUL CHOSEONG SIOS-PIEUP-KIYEOK	[3D3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1133, 0x0041 };
    uint32_t const ces[9] = { 0x3D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_055)
{
    // 1133 0062;	
    // (ᄳ) HANGUL CHOSEONG SIOS-PIEUP-KIYEOK	[3D3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133, 0x0062 };
    uint32_t const ces[9] = { 0x3D3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_056)
{
    // 1134 0021;	
    // (ᄴ) HANGUL CHOSEONG SIOS-SSANGSIOS	[3D40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134, 0x0021 };
    uint32_t const ces[9] = { 0x3D40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_057)
{
    // 1134 003F;	
    // (ᄴ) HANGUL CHOSEONG SIOS-SSANGSIOS	[3D40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134, 0x003F };
    uint32_t const ces[9] = { 0x3D40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_058)
{
    // 1134 0061;	
    // (ᄴ) HANGUL CHOSEONG SIOS-SSANGSIOS	[3D40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134, 0x0061 };
    uint32_t const ces[9] = { 0x3D40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_059)
{
    // 1134 0041;	
    // (ᄴ) HANGUL CHOSEONG SIOS-SSANGSIOS	[3D40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1134, 0x0041 };
    uint32_t const ces[9] = { 0x3D40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_060)
{
    // 1134 0062;	
    // (ᄴ) HANGUL CHOSEONG SIOS-SSANGSIOS	[3D40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1134, 0x0062 };
    uint32_t const ces[9] = { 0x3D40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_061)
{
    // 1135 0021;	
    // (ᄵ) HANGUL CHOSEONG SIOS-IEUNG	[3D41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135, 0x0021 };
    uint32_t const ces[9] = { 0x3D41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_062)
{
    // 1135 003F;	
    // (ᄵ) HANGUL CHOSEONG SIOS-IEUNG	[3D41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135, 0x003F };
    uint32_t const ces[9] = { 0x3D41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_063)
{
    // 1135 0061;	
    // (ᄵ) HANGUL CHOSEONG SIOS-IEUNG	[3D41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135, 0x0061 };
    uint32_t const ces[9] = { 0x3D41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_064)
{
    // 1135 0041;	
    // (ᄵ) HANGUL CHOSEONG SIOS-IEUNG	[3D41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1135, 0x0041 };
    uint32_t const ces[9] = { 0x3D41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_065)
{
    // 1135 0062;	
    // (ᄵ) HANGUL CHOSEONG SIOS-IEUNG	[3D41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1135, 0x0062 };
    uint32_t const ces[9] = { 0x3D41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_066)
{
    // 1136 0021;	
    // (ᄶ) HANGUL CHOSEONG SIOS-CIEUC	[3D42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1136, 0x0021 };
    uint32_t const ces[9] = { 0x3D42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_067)
{
    // 317E 0021;	
    // (ㅾ) HANGUL LETTER SIOS-CIEUC	[3D42 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317E, 0x0021 };
    uint32_t const ces[9] = { 0x3D42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_068)
{
    // 1136 003F;	
    // (ᄶ) HANGUL CHOSEONG SIOS-CIEUC	[3D42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1136, 0x003F };
    uint32_t const ces[9] = { 0x3D42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_069)
{
    // 317E 003F;	
    // (ㅾ) HANGUL LETTER SIOS-CIEUC	[3D42 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317E, 0x003F };
    uint32_t const ces[9] = { 0x3D42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_070)
{
    // 1136 0061;	
    // (ᄶ) HANGUL CHOSEONG SIOS-CIEUC	[3D42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1136, 0x0061 };
    uint32_t const ces[9] = { 0x3D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_071)
{
    // 1136 0041;	
    // (ᄶ) HANGUL CHOSEONG SIOS-CIEUC	[3D42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1136, 0x0041 };
    uint32_t const ces[9] = { 0x3D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_072)
{
    // 317E 0061;	
    // (ㅾ) HANGUL LETTER SIOS-CIEUC	[3D42 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317E, 0x0061 };
    uint32_t const ces[9] = { 0x3D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_073)
{
    // 317E 0041;	
    // (ㅾ) HANGUL LETTER SIOS-CIEUC	[3D42 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317E, 0x0041 };
    uint32_t const ces[9] = { 0x3D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_074)
{
    // 1136 0062;	
    // (ᄶ) HANGUL CHOSEONG SIOS-CIEUC	[3D42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1136, 0x0062 };
    uint32_t const ces[9] = { 0x3D42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_075)
{
    // 317E 0062;	
    // (ㅾ) HANGUL LETTER SIOS-CIEUC	[3D42 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317E, 0x0062 };
    uint32_t const ces[9] = { 0x3D42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_076)
{
    // 1137 0021;	
    // (ᄷ) HANGUL CHOSEONG SIOS-CHIEUCH	[3D43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1137, 0x0021 };
    uint32_t const ces[9] = { 0x3D43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_077)
{
    // 1137 003F;	
    // (ᄷ) HANGUL CHOSEONG SIOS-CHIEUCH	[3D43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1137, 0x003F };
    uint32_t const ces[9] = { 0x3D43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_078)
{
    // 1137 0061;	
    // (ᄷ) HANGUL CHOSEONG SIOS-CHIEUCH	[3D43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1137, 0x0061 };
    uint32_t const ces[9] = { 0x3D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_079)
{
    // 1137 0041;	
    // (ᄷ) HANGUL CHOSEONG SIOS-CHIEUCH	[3D43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1137, 0x0041 };
    uint32_t const ces[9] = { 0x3D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_080)
{
    // 1137 0062;	
    // (ᄷ) HANGUL CHOSEONG SIOS-CHIEUCH	[3D43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1137, 0x0062 };
    uint32_t const ces[9] = { 0x3D43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_081)
{
    // 1138 0021;	
    // (ᄸ) HANGUL CHOSEONG SIOS-KHIEUKH	[3D44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1138, 0x0021 };
    uint32_t const ces[9] = { 0x3D44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_082)
{
    // 1138 003F;	
    // (ᄸ) HANGUL CHOSEONG SIOS-KHIEUKH	[3D44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1138, 0x003F };
    uint32_t const ces[9] = { 0x3D44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_083)
{
    // 1138 0061;	
    // (ᄸ) HANGUL CHOSEONG SIOS-KHIEUKH	[3D44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1138, 0x0061 };
    uint32_t const ces[9] = { 0x3D44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_084)
{
    // 1138 0041;	
    // (ᄸ) HANGUL CHOSEONG SIOS-KHIEUKH	[3D44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1138, 0x0041 };
    uint32_t const ces[9] = { 0x3D44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_085)
{
    // 1138 0062;	
    // (ᄸ) HANGUL CHOSEONG SIOS-KHIEUKH	[3D44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1138, 0x0062 };
    uint32_t const ces[9] = { 0x3D44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_086)
{
    // 1139 0021;	
    // (ᄹ) HANGUL CHOSEONG SIOS-THIEUTH	[3D45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1139, 0x0021 };
    uint32_t const ces[9] = { 0x3D45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_087)
{
    // 1139 003F;	
    // (ᄹ) HANGUL CHOSEONG SIOS-THIEUTH	[3D45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1139, 0x003F };
    uint32_t const ces[9] = { 0x3D45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_088)
{
    // 1139 0061;	
    // (ᄹ) HANGUL CHOSEONG SIOS-THIEUTH	[3D45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1139, 0x0061 };
    uint32_t const ces[9] = { 0x3D45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_089)
{
    // 1139 0041;	
    // (ᄹ) HANGUL CHOSEONG SIOS-THIEUTH	[3D45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1139, 0x0041 };
    uint32_t const ces[9] = { 0x3D45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_090)
{
    // 1139 0062;	
    // (ᄹ) HANGUL CHOSEONG SIOS-THIEUTH	[3D45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1139, 0x0062 };
    uint32_t const ces[9] = { 0x3D45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_091)
{
    // 113A 0021;	
    // (ᄺ) HANGUL CHOSEONG SIOS-PHIEUPH	[3D46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113A, 0x0021 };
    uint32_t const ces[9] = { 0x3D46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_092)
{
    // 113A 003F;	
    // (ᄺ) HANGUL CHOSEONG SIOS-PHIEUPH	[3D46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113A, 0x003F };
    uint32_t const ces[9] = { 0x3D46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_093)
{
    // 113A 0061;	
    // (ᄺ) HANGUL CHOSEONG SIOS-PHIEUPH	[3D46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113A, 0x0061 };
    uint32_t const ces[9] = { 0x3D46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_094)
{
    // 113A 0041;	
    // (ᄺ) HANGUL CHOSEONG SIOS-PHIEUPH	[3D46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113A, 0x0041 };
    uint32_t const ces[9] = { 0x3D46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_095)
{
    // 113A 0062;	
    // (ᄺ) HANGUL CHOSEONG SIOS-PHIEUPH	[3D46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113A, 0x0062 };
    uint32_t const ces[9] = { 0x3D46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_096)
{
    // 113B 0021;	
    // (ᄻ) HANGUL CHOSEONG SIOS-HIEUH	[3D47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113B, 0x0021 };
    uint32_t const ces[9] = { 0x3D47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_097)
{
    // 113B 003F;	
    // (ᄻ) HANGUL CHOSEONG SIOS-HIEUH	[3D47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113B, 0x003F };
    uint32_t const ces[9] = { 0x3D47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_098)
{
    // 113B 0061;	
    // (ᄻ) HANGUL CHOSEONG SIOS-HIEUH	[3D47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113B, 0x0061 };
    uint32_t const ces[9] = { 0x3D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_099)
{
    // 113B 0041;	
    // (ᄻ) HANGUL CHOSEONG SIOS-HIEUH	[3D47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113B, 0x0041 };
    uint32_t const ces[9] = { 0x3D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_100)
{
    // 113B 0062;	
    // (ᄻ) HANGUL CHOSEONG SIOS-HIEUH	[3D47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113B, 0x0062 };
    uint32_t const ces[9] = { 0x3D47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_101)
{
    // 113C 0021;	
    // (ᄼ) HANGUL CHOSEONG CHITUEUMSIOS	[3D48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113C, 0x0021 };
    uint32_t const ces[9] = { 0x3D48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_102)
{
    // 113C 003F;	
    // (ᄼ) HANGUL CHOSEONG CHITUEUMSIOS	[3D48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113C, 0x003F };
    uint32_t const ces[9] = { 0x3D48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_103)
{
    // 113C 0061;	
    // (ᄼ) HANGUL CHOSEONG CHITUEUMSIOS	[3D48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113C, 0x0061 };
    uint32_t const ces[9] = { 0x3D48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_104)
{
    // 113C 0041;	
    // (ᄼ) HANGUL CHOSEONG CHITUEUMSIOS	[3D48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113C, 0x0041 };
    uint32_t const ces[9] = { 0x3D48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_105)
{
    // 113C 0062;	
    // (ᄼ) HANGUL CHOSEONG CHITUEUMSIOS	[3D48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113C, 0x0062 };
    uint32_t const ces[9] = { 0x3D48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_106)
{
    // 113D 0021;	
    // (ᄽ) HANGUL CHOSEONG CHITUEUMSSANGSIOS	[3D49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113D, 0x0021 };
    uint32_t const ces[9] = { 0x3D49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_107)
{
    // 113D 003F;	
    // (ᄽ) HANGUL CHOSEONG CHITUEUMSSANGSIOS	[3D49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113D, 0x003F };
    uint32_t const ces[9] = { 0x3D49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_108)
{
    // 113D 0061;	
    // (ᄽ) HANGUL CHOSEONG CHITUEUMSSANGSIOS	[3D49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113D, 0x0061 };
    uint32_t const ces[9] = { 0x3D49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_109)
{
    // 113D 0041;	
    // (ᄽ) HANGUL CHOSEONG CHITUEUMSSANGSIOS	[3D49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113D, 0x0041 };
    uint32_t const ces[9] = { 0x3D49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_110)
{
    // 113D 0062;	
    // (ᄽ) HANGUL CHOSEONG CHITUEUMSSANGSIOS	[3D49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113D, 0x0062 };
    uint32_t const ces[9] = { 0x3D49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_111)
{
    // 113E 0021;	
    // (ᄾ) HANGUL CHOSEONG CEONGCHIEUMSIOS	[3D4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113E, 0x0021 };
    uint32_t const ces[9] = { 0x3D4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_112)
{
    // 113E 003F;	
    // (ᄾ) HANGUL CHOSEONG CEONGCHIEUMSIOS	[3D4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113E, 0x003F };
    uint32_t const ces[9] = { 0x3D4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_113)
{
    // 113E 0061;	
    // (ᄾ) HANGUL CHOSEONG CEONGCHIEUMSIOS	[3D4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113E, 0x0061 };
    uint32_t const ces[9] = { 0x3D4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_114)
{
    // 113E 0041;	
    // (ᄾ) HANGUL CHOSEONG CEONGCHIEUMSIOS	[3D4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113E, 0x0041 };
    uint32_t const ces[9] = { 0x3D4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_115)
{
    // 113E 0062;	
    // (ᄾ) HANGUL CHOSEONG CEONGCHIEUMSIOS	[3D4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113E, 0x0062 };
    uint32_t const ces[9] = { 0x3D4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_116)
{
    // 113F 0021;	
    // (ᄿ) HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS	[3D4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113F, 0x0021 };
    uint32_t const ces[9] = { 0x3D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_117)
{
    // 113F 003F;	
    // (ᄿ) HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS	[3D4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113F, 0x003F };
    uint32_t const ces[9] = { 0x3D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_118)
{
    // 113F 0061;	
    // (ᄿ) HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS	[3D4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113F, 0x0061 };
    uint32_t const ces[9] = { 0x3D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_119)
{
    // 113F 0041;	
    // (ᄿ) HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS	[3D4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x113F, 0x0041 };
    uint32_t const ces[9] = { 0x3D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_120)
{
    // 113F 0062;	
    // (ᄿ) HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS	[3D4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x113F, 0x0062 };
    uint32_t const ces[9] = { 0x3D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_121)
{
    // 1140 0021;	
    // (ᅀ) HANGUL CHOSEONG PANSIOS	[3D4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140, 0x0021 };
    uint32_t const ces[9] = { 0x3D4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_122)
{
    // 317F 0021;	
    // (ㅿ) HANGUL LETTER PANSIOS	[3D4C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317F, 0x0021 };
    uint32_t const ces[9] = { 0x3D4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_123)
{
    // 1140 003F;	
    // (ᅀ) HANGUL CHOSEONG PANSIOS	[3D4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140, 0x003F };
    uint32_t const ces[9] = { 0x3D4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_124)
{
    // 317F 003F;	
    // (ㅿ) HANGUL LETTER PANSIOS	[3D4C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317F, 0x003F };
    uint32_t const ces[9] = { 0x3D4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_125)
{
    // 1140 0061;	
    // (ᅀ) HANGUL CHOSEONG PANSIOS	[3D4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140, 0x0061 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_126)
{
    // 1140 0041;	
    // (ᅀ) HANGUL CHOSEONG PANSIOS	[3D4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1140, 0x0041 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_127)
{
    // 317F 0061;	
    // (ㅿ) HANGUL LETTER PANSIOS	[3D4C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317F, 0x0061 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_128)
{
    // 317F 0041;	
    // (ㅿ) HANGUL LETTER PANSIOS	[3D4C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x317F, 0x0041 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_129)
{
    // 1140 0062;	
    // (ᅀ) HANGUL CHOSEONG PANSIOS	[3D4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1140, 0x0062 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_130)
{
    // 317F 0062;	
    // (ㅿ) HANGUL LETTER PANSIOS	[3D4C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x317F, 0x0062 };
    uint32_t const ces[9] = { 0x3D4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_131)
{
    // 1141 0021;	
    // (ᅁ) HANGUL CHOSEONG IEUNG-KIYEOK	[3D4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141, 0x0021 };
    uint32_t const ces[9] = { 0x3D4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_132)
{
    // 1141 003F;	
    // (ᅁ) HANGUL CHOSEONG IEUNG-KIYEOK	[3D4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141, 0x003F };
    uint32_t const ces[9] = { 0x3D4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_133)
{
    // 1141 0061;	
    // (ᅁ) HANGUL CHOSEONG IEUNG-KIYEOK	[3D4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141, 0x0061 };
    uint32_t const ces[9] = { 0x3D4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_134)
{
    // 1141 0041;	
    // (ᅁ) HANGUL CHOSEONG IEUNG-KIYEOK	[3D4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1141, 0x0041 };
    uint32_t const ces[9] = { 0x3D4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_135)
{
    // 1141 0062;	
    // (ᅁ) HANGUL CHOSEONG IEUNG-KIYEOK	[3D4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1141, 0x0062 };
    uint32_t const ces[9] = { 0x3D4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_136)
{
    // 1142 0021;	
    // (ᅂ) HANGUL CHOSEONG IEUNG-TIKEUT	[3D4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142, 0x0021 };
    uint32_t const ces[9] = { 0x3D4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_137)
{
    // 1142 003F;	
    // (ᅂ) HANGUL CHOSEONG IEUNG-TIKEUT	[3D4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142, 0x003F };
    uint32_t const ces[9] = { 0x3D4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_138)
{
    // 1142 0061;	
    // (ᅂ) HANGUL CHOSEONG IEUNG-TIKEUT	[3D4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142, 0x0061 };
    uint32_t const ces[9] = { 0x3D4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_139)
{
    // 1142 0041;	
    // (ᅂ) HANGUL CHOSEONG IEUNG-TIKEUT	[3D4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1142, 0x0041 };
    uint32_t const ces[9] = { 0x3D4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_140)
{
    // 1142 0062;	
    // (ᅂ) HANGUL CHOSEONG IEUNG-TIKEUT	[3D4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1142, 0x0062 };
    uint32_t const ces[9] = { 0x3D4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_141)
{
    // 1143 0021;	
    // (ᅃ) HANGUL CHOSEONG IEUNG-MIEUM	[3D4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143, 0x0021 };
    uint32_t const ces[9] = { 0x3D4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_142)
{
    // 1143 003F;	
    // (ᅃ) HANGUL CHOSEONG IEUNG-MIEUM	[3D4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143, 0x003F };
    uint32_t const ces[9] = { 0x3D4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_143)
{
    // 1143 0061;	
    // (ᅃ) HANGUL CHOSEONG IEUNG-MIEUM	[3D4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143, 0x0061 };
    uint32_t const ces[9] = { 0x3D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_144)
{
    // 1143 0041;	
    // (ᅃ) HANGUL CHOSEONG IEUNG-MIEUM	[3D4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143, 0x0041 };
    uint32_t const ces[9] = { 0x3D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_145)
{
    // 1143 0062;	
    // (ᅃ) HANGUL CHOSEONG IEUNG-MIEUM	[3D4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143, 0x0062 };
    uint32_t const ces[9] = { 0x3D4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_146)
{
    // 1144 0021;	
    // (ᅄ) HANGUL CHOSEONG IEUNG-PIEUP	[3D50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144, 0x0021 };
    uint32_t const ces[9] = { 0x3D50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_147)
{
    // 1144 003F;	
    // (ᅄ) HANGUL CHOSEONG IEUNG-PIEUP	[3D50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144, 0x003F };
    uint32_t const ces[9] = { 0x3D50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_148)
{
    // 1144 0061;	
    // (ᅄ) HANGUL CHOSEONG IEUNG-PIEUP	[3D50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144, 0x0061 };
    uint32_t const ces[9] = { 0x3D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_149)
{
    // 1144 0041;	
    // (ᅄ) HANGUL CHOSEONG IEUNG-PIEUP	[3D50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1144, 0x0041 };
    uint32_t const ces[9] = { 0x3D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_150)
{
    // 1144 0062;	
    // (ᅄ) HANGUL CHOSEONG IEUNG-PIEUP	[3D50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144, 0x0062 };
    uint32_t const ces[9] = { 0x3D50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_151)
{
    // 1145 0021;	
    // (ᅅ) HANGUL CHOSEONG IEUNG-SIOS	[3D51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145, 0x0021 };
    uint32_t const ces[9] = { 0x3D51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_152)
{
    // 1145 003F;	
    // (ᅅ) HANGUL CHOSEONG IEUNG-SIOS	[3D51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145, 0x003F };
    uint32_t const ces[9] = { 0x3D51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_153)
{
    // 1145 0061;	
    // (ᅅ) HANGUL CHOSEONG IEUNG-SIOS	[3D51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145, 0x0061 };
    uint32_t const ces[9] = { 0x3D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_154)
{
    // 1145 0041;	
    // (ᅅ) HANGUL CHOSEONG IEUNG-SIOS	[3D51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1145, 0x0041 };
    uint32_t const ces[9] = { 0x3D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_155)
{
    // 1145 0062;	
    // (ᅅ) HANGUL CHOSEONG IEUNG-SIOS	[3D51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145, 0x0062 };
    uint32_t const ces[9] = { 0x3D51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_156)
{
    // 1146 0021;	
    // (ᅆ) HANGUL CHOSEONG IEUNG-PANSIOS	[3D52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1146, 0x0021 };
    uint32_t const ces[9] = { 0x3D52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_157)
{
    // 1146 003F;	
    // (ᅆ) HANGUL CHOSEONG IEUNG-PANSIOS	[3D52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1146, 0x003F };
    uint32_t const ces[9] = { 0x3D52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_158)
{
    // 1146 0061;	
    // (ᅆ) HANGUL CHOSEONG IEUNG-PANSIOS	[3D52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1146, 0x0061 };
    uint32_t const ces[9] = { 0x3D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_159)
{
    // 1146 0041;	
    // (ᅆ) HANGUL CHOSEONG IEUNG-PANSIOS	[3D52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1146, 0x0041 };
    uint32_t const ces[9] = { 0x3D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_160)
{
    // 1146 0062;	
    // (ᅆ) HANGUL CHOSEONG IEUNG-PANSIOS	[3D52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1146, 0x0062 };
    uint32_t const ces[9] = { 0x3D52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_161)
{
    // 1147 0021;	
    // (ᅇ) HANGUL CHOSEONG SSANGIEUNG	[3D53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1147, 0x0021 };
    uint32_t const ces[9] = { 0x3D53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_162)
{
    // 3180 0021;	
    // (ㆀ) HANGUL LETTER SSANGIEUNG	[3D53 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3180, 0x0021 };
    uint32_t const ces[9] = { 0x3D53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_163)
{
    // 1147 003F;	
    // (ᅇ) HANGUL CHOSEONG SSANGIEUNG	[3D53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1147, 0x003F };
    uint32_t const ces[9] = { 0x3D53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_164)
{
    // 3180 003F;	
    // (ㆀ) HANGUL LETTER SSANGIEUNG	[3D53 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3180, 0x003F };
    uint32_t const ces[9] = { 0x3D53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_165)
{
    // 1147 0061;	
    // (ᅇ) HANGUL CHOSEONG SSANGIEUNG	[3D53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1147, 0x0061 };
    uint32_t const ces[9] = { 0x3D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_166)
{
    // 1147 0041;	
    // (ᅇ) HANGUL CHOSEONG SSANGIEUNG	[3D53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1147, 0x0041 };
    uint32_t const ces[9] = { 0x3D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_167)
{
    // 3180 0061;	
    // (ㆀ) HANGUL LETTER SSANGIEUNG	[3D53 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3180, 0x0061 };
    uint32_t const ces[9] = { 0x3D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_168)
{
    // 3180 0041;	
    // (ㆀ) HANGUL LETTER SSANGIEUNG	[3D53 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3180, 0x0041 };
    uint32_t const ces[9] = { 0x3D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_169)
{
    // 1147 0062;	
    // (ᅇ) HANGUL CHOSEONG SSANGIEUNG	[3D53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1147, 0x0062 };
    uint32_t const ces[9] = { 0x3D53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_170)
{
    // 3180 0062;	
    // (ㆀ) HANGUL LETTER SSANGIEUNG	[3D53 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3180, 0x0062 };
    uint32_t const ces[9] = { 0x3D53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_171)
{
    // 1148 0021;	
    // (ᅈ) HANGUL CHOSEONG IEUNG-CIEUC	[3D54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148, 0x0021 };
    uint32_t const ces[9] = { 0x3D54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_172)
{
    // 1148 003F;	
    // (ᅈ) HANGUL CHOSEONG IEUNG-CIEUC	[3D54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148, 0x003F };
    uint32_t const ces[9] = { 0x3D54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_173)
{
    // 1148 0061;	
    // (ᅈ) HANGUL CHOSEONG IEUNG-CIEUC	[3D54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148, 0x0061 };
    uint32_t const ces[9] = { 0x3D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_174)
{
    // 1148 0041;	
    // (ᅈ) HANGUL CHOSEONG IEUNG-CIEUC	[3D54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148, 0x0041 };
    uint32_t const ces[9] = { 0x3D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_175)
{
    // 1148 0062;	
    // (ᅈ) HANGUL CHOSEONG IEUNG-CIEUC	[3D54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148, 0x0062 };
    uint32_t const ces[9] = { 0x3D54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_176)
{
    // 1149 0021;	
    // (ᅉ) HANGUL CHOSEONG IEUNG-CHIEUCH	[3D55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149, 0x0021 };
    uint32_t const ces[9] = { 0x3D55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_177)
{
    // 1149 003F;	
    // (ᅉ) HANGUL CHOSEONG IEUNG-CHIEUCH	[3D55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149, 0x003F };
    uint32_t const ces[9] = { 0x3D55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_178)
{
    // 1149 0061;	
    // (ᅉ) HANGUL CHOSEONG IEUNG-CHIEUCH	[3D55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149, 0x0061 };
    uint32_t const ces[9] = { 0x3D55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_179)
{
    // 1149 0041;	
    // (ᅉ) HANGUL CHOSEONG IEUNG-CHIEUCH	[3D55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149, 0x0041 };
    uint32_t const ces[9] = { 0x3D55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_180)
{
    // 1149 0062;	
    // (ᅉ) HANGUL CHOSEONG IEUNG-CHIEUCH	[3D55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149, 0x0062 };
    uint32_t const ces[9] = { 0x3D55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_181)
{
    // 114A 0021;	
    // (ᅊ) HANGUL CHOSEONG IEUNG-THIEUTH	[3D56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A, 0x0021 };
    uint32_t const ces[9] = { 0x3D56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_182)
{
    // 114A 003F;	
    // (ᅊ) HANGUL CHOSEONG IEUNG-THIEUTH	[3D56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A, 0x003F };
    uint32_t const ces[9] = { 0x3D56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_183)
{
    // 114A 0061;	
    // (ᅊ) HANGUL CHOSEONG IEUNG-THIEUTH	[3D56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A, 0x0061 };
    uint32_t const ces[9] = { 0x3D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_184)
{
    // 114A 0041;	
    // (ᅊ) HANGUL CHOSEONG IEUNG-THIEUTH	[3D56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A, 0x0041 };
    uint32_t const ces[9] = { 0x3D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_185)
{
    // 114A 0062;	
    // (ᅊ) HANGUL CHOSEONG IEUNG-THIEUTH	[3D56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A, 0x0062 };
    uint32_t const ces[9] = { 0x3D56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_186)
{
    // 114B 0021;	
    // (ᅋ) HANGUL CHOSEONG IEUNG-PHIEUPH	[3D57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B, 0x0021 };
    uint32_t const ces[9] = { 0x3D57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_187)
{
    // 114B 003F;	
    // (ᅋ) HANGUL CHOSEONG IEUNG-PHIEUPH	[3D57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B, 0x003F };
    uint32_t const ces[9] = { 0x3D57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_188)
{
    // 114B 0061;	
    // (ᅋ) HANGUL CHOSEONG IEUNG-PHIEUPH	[3D57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B, 0x0061 };
    uint32_t const ces[9] = { 0x3D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_189)
{
    // 114B 0041;	
    // (ᅋ) HANGUL CHOSEONG IEUNG-PHIEUPH	[3D57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B, 0x0041 };
    uint32_t const ces[9] = { 0x3D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_190)
{
    // 114B 0062;	
    // (ᅋ) HANGUL CHOSEONG IEUNG-PHIEUPH	[3D57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B, 0x0062 };
    uint32_t const ces[9] = { 0x3D57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_191)
{
    // 114C 0021;	
    // (ᅌ) HANGUL CHOSEONG YESIEUNG	[3D58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C, 0x0021 };
    uint32_t const ces[9] = { 0x3D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_192)
{
    // 3181 0021;	
    // (ㆁ) HANGUL LETTER YESIEUNG	[3D58 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3181, 0x0021 };
    uint32_t const ces[9] = { 0x3D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_193)
{
    // 114C 003F;	
    // (ᅌ) HANGUL CHOSEONG YESIEUNG	[3D58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C, 0x003F };
    uint32_t const ces[9] = { 0x3D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_194)
{
    // 3181 003F;	
    // (ㆁ) HANGUL LETTER YESIEUNG	[3D58 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3181, 0x003F };
    uint32_t const ces[9] = { 0x3D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_195)
{
    // 114C 0061;	
    // (ᅌ) HANGUL CHOSEONG YESIEUNG	[3D58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C, 0x0061 };
    uint32_t const ces[9] = { 0x3D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_196)
{
    // 114C 0041;	
    // (ᅌ) HANGUL CHOSEONG YESIEUNG	[3D58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C, 0x0041 };
    uint32_t const ces[9] = { 0x3D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_197)
{
    // 3181 0061;	
    // (ㆁ) HANGUL LETTER YESIEUNG	[3D58 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3181, 0x0061 };
    uint32_t const ces[9] = { 0x3D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_198)
{
    // 3181 0041;	
    // (ㆁ) HANGUL LETTER YESIEUNG	[3D58 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3181, 0x0041 };
    uint32_t const ces[9] = { 0x3D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_199)
{
    // 114C 0062;	
    // (ᅌ) HANGUL CHOSEONG YESIEUNG	[3D58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C, 0x0062 };
    uint32_t const ces[9] = { 0x3D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_200)
{
    // 3181 0062;	
    // (ㆁ) HANGUL LETTER YESIEUNG	[3D58 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3181, 0x0062 };
    uint32_t const ces[9] = { 0x3D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_201)
{
    // 114D 0021;	
    // (ᅍ) HANGUL CHOSEONG CIEUC-IEUNG	[3D59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D, 0x0021 };
    uint32_t const ces[9] = { 0x3D59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_202)
{
    // 114D 003F;	
    // (ᅍ) HANGUL CHOSEONG CIEUC-IEUNG	[3D59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D, 0x003F };
    uint32_t const ces[9] = { 0x3D59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_203)
{
    // 114D 0061;	
    // (ᅍ) HANGUL CHOSEONG CIEUC-IEUNG	[3D59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D, 0x0061 };
    uint32_t const ces[9] = { 0x3D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_204)
{
    // 114D 0041;	
    // (ᅍ) HANGUL CHOSEONG CIEUC-IEUNG	[3D59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D, 0x0041 };
    uint32_t const ces[9] = { 0x3D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_205)
{
    // 114D 0062;	
    // (ᅍ) HANGUL CHOSEONG CIEUC-IEUNG	[3D59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D, 0x0062 };
    uint32_t const ces[9] = { 0x3D59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_206)
{
    // 114E 0021;	
    // (ᅎ) HANGUL CHOSEONG CHITUEUMCIEUC	[3D5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114E, 0x0021 };
    uint32_t const ces[9] = { 0x3D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_207)
{
    // 114E 003F;	
    // (ᅎ) HANGUL CHOSEONG CHITUEUMCIEUC	[3D5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114E, 0x003F };
    uint32_t const ces[9] = { 0x3D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_208)
{
    // 114E 0061;	
    // (ᅎ) HANGUL CHOSEONG CHITUEUMCIEUC	[3D5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114E, 0x0061 };
    uint32_t const ces[9] = { 0x3D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_209)
{
    // 114E 0041;	
    // (ᅎ) HANGUL CHOSEONG CHITUEUMCIEUC	[3D5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114E, 0x0041 };
    uint32_t const ces[9] = { 0x3D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_210)
{
    // 114E 0062;	
    // (ᅎ) HANGUL CHOSEONG CHITUEUMCIEUC	[3D5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114E, 0x0062 };
    uint32_t const ces[9] = { 0x3D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_211)
{
    // 114F 0021;	
    // (ᅏ) HANGUL CHOSEONG CHITUEUMSSANGCIEUC	[3D5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114F, 0x0021 };
    uint32_t const ces[9] = { 0x3D5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_212)
{
    // 114F 003F;	
    // (ᅏ) HANGUL CHOSEONG CHITUEUMSSANGCIEUC	[3D5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114F, 0x003F };
    uint32_t const ces[9] = { 0x3D5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_213)
{
    // 114F 0061;	
    // (ᅏ) HANGUL CHOSEONG CHITUEUMSSANGCIEUC	[3D5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114F, 0x0061 };
    uint32_t const ces[9] = { 0x3D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_214)
{
    // 114F 0041;	
    // (ᅏ) HANGUL CHOSEONG CHITUEUMSSANGCIEUC	[3D5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114F, 0x0041 };
    uint32_t const ces[9] = { 0x3D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_215)
{
    // 114F 0062;	
    // (ᅏ) HANGUL CHOSEONG CHITUEUMSSANGCIEUC	[3D5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114F, 0x0062 };
    uint32_t const ces[9] = { 0x3D5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_216)
{
    // 1150 0021;	
    // (ᅐ) HANGUL CHOSEONG CEONGCHIEUMCIEUC	[3D5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1150, 0x0021 };
    uint32_t const ces[9] = { 0x3D5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_217)
{
    // 1150 003F;	
    // (ᅐ) HANGUL CHOSEONG CEONGCHIEUMCIEUC	[3D5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1150, 0x003F };
    uint32_t const ces[9] = { 0x3D5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_218)
{
    // 1150 0061;	
    // (ᅐ) HANGUL CHOSEONG CEONGCHIEUMCIEUC	[3D5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1150, 0x0061 };
    uint32_t const ces[9] = { 0x3D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_219)
{
    // 1150 0041;	
    // (ᅐ) HANGUL CHOSEONG CEONGCHIEUMCIEUC	[3D5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1150, 0x0041 };
    uint32_t const ces[9] = { 0x3D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_220)
{
    // 1150 0062;	
    // (ᅐ) HANGUL CHOSEONG CEONGCHIEUMCIEUC	[3D5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1150, 0x0062 };
    uint32_t const ces[9] = { 0x3D5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_221)
{
    // 1151 0021;	
    // (ᅑ) HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC	[3D5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1151, 0x0021 };
    uint32_t const ces[9] = { 0x3D5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_222)
{
    // 1151 003F;	
    // (ᅑ) HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC	[3D5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1151, 0x003F };
    uint32_t const ces[9] = { 0x3D5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_223)
{
    // 1151 0061;	
    // (ᅑ) HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC	[3D5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1151, 0x0061 };
    uint32_t const ces[9] = { 0x3D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_224)
{
    // 1151 0041;	
    // (ᅑ) HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC	[3D5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1151, 0x0041 };
    uint32_t const ces[9] = { 0x3D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_225)
{
    // 1151 0062;	
    // (ᅑ) HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC	[3D5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1151, 0x0062 };
    uint32_t const ces[9] = { 0x3D5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_226)
{
    // 1152 0021;	
    // (ᅒ) HANGUL CHOSEONG CHIEUCH-KHIEUKH	[3D5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1152, 0x0021 };
    uint32_t const ces[9] = { 0x3D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_227)
{
    // 1152 003F;	
    // (ᅒ) HANGUL CHOSEONG CHIEUCH-KHIEUKH	[3D5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1152, 0x003F };
    uint32_t const ces[9] = { 0x3D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_228)
{
    // 1152 0061;	
    // (ᅒ) HANGUL CHOSEONG CHIEUCH-KHIEUKH	[3D5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1152, 0x0061 };
    uint32_t const ces[9] = { 0x3D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_229)
{
    // 1152 0041;	
    // (ᅒ) HANGUL CHOSEONG CHIEUCH-KHIEUKH	[3D5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1152, 0x0041 };
    uint32_t const ces[9] = { 0x3D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_230)
{
    // 1152 0062;	
    // (ᅒ) HANGUL CHOSEONG CHIEUCH-KHIEUKH	[3D5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1152, 0x0062 };
    uint32_t const ces[9] = { 0x3D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_231)
{
    // 1153 0021;	
    // (ᅓ) HANGUL CHOSEONG CHIEUCH-HIEUH	[3D5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1153, 0x0021 };
    uint32_t const ces[9] = { 0x3D5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_232)
{
    // 1153 003F;	
    // (ᅓ) HANGUL CHOSEONG CHIEUCH-HIEUH	[3D5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1153, 0x003F };
    uint32_t const ces[9] = { 0x3D5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_233)
{
    // 1153 0061;	
    // (ᅓ) HANGUL CHOSEONG CHIEUCH-HIEUH	[3D5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1153, 0x0061 };
    uint32_t const ces[9] = { 0x3D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_234)
{
    // 1153 0041;	
    // (ᅓ) HANGUL CHOSEONG CHIEUCH-HIEUH	[3D5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1153, 0x0041 };
    uint32_t const ces[9] = { 0x3D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_235)
{
    // 1153 0062;	
    // (ᅓ) HANGUL CHOSEONG CHIEUCH-HIEUH	[3D5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1153, 0x0062 };
    uint32_t const ces[9] = { 0x3D5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_236)
{
    // 1154 0021;	
    // (ᅔ) HANGUL CHOSEONG CHITUEUMCHIEUCH	[3D60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1154, 0x0021 };
    uint32_t const ces[9] = { 0x3D60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_237)
{
    // 1154 003F;	
    // (ᅔ) HANGUL CHOSEONG CHITUEUMCHIEUCH	[3D60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1154, 0x003F };
    uint32_t const ces[9] = { 0x3D60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_238)
{
    // 1154 0061;	
    // (ᅔ) HANGUL CHOSEONG CHITUEUMCHIEUCH	[3D60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1154, 0x0061 };
    uint32_t const ces[9] = { 0x3D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_239)
{
    // 1154 0041;	
    // (ᅔ) HANGUL CHOSEONG CHITUEUMCHIEUCH	[3D60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1154, 0x0041 };
    uint32_t const ces[9] = { 0x3D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_240)
{
    // 1154 0062;	
    // (ᅔ) HANGUL CHOSEONG CHITUEUMCHIEUCH	[3D60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1154, 0x0062 };
    uint32_t const ces[9] = { 0x3D60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_241)
{
    // 1155 0021;	
    // (ᅕ) HANGUL CHOSEONG CEONGCHIEUMCHIEUCH	[3D61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1155, 0x0021 };
    uint32_t const ces[9] = { 0x3D61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_242)
{
    // 1155 003F;	
    // (ᅕ) HANGUL CHOSEONG CEONGCHIEUMCHIEUCH	[3D61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1155, 0x003F };
    uint32_t const ces[9] = { 0x3D61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_243)
{
    // 1155 0061;	
    // (ᅕ) HANGUL CHOSEONG CEONGCHIEUMCHIEUCH	[3D61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1155, 0x0061 };
    uint32_t const ces[9] = { 0x3D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_244)
{
    // 1155 0041;	
    // (ᅕ) HANGUL CHOSEONG CEONGCHIEUMCHIEUCH	[3D61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1155, 0x0041 };
    uint32_t const ces[9] = { 0x3D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_245)
{
    // 1155 0062;	
    // (ᅕ) HANGUL CHOSEONG CEONGCHIEUMCHIEUCH	[3D61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1155, 0x0062 };
    uint32_t const ces[9] = { 0x3D61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_246)
{
    // 1156 0021;	
    // (ᅖ) HANGUL CHOSEONG PHIEUPH-PIEUP	[3D62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1156, 0x0021 };
    uint32_t const ces[9] = { 0x3D62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_247)
{
    // 1156 003F;	
    // (ᅖ) HANGUL CHOSEONG PHIEUPH-PIEUP	[3D62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1156, 0x003F };
    uint32_t const ces[9] = { 0x3D62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_248)
{
    // 1156 0061;	
    // (ᅖ) HANGUL CHOSEONG PHIEUPH-PIEUP	[3D62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1156, 0x0061 };
    uint32_t const ces[9] = { 0x3D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_249)
{
    // 1156 0041;	
    // (ᅖ) HANGUL CHOSEONG PHIEUPH-PIEUP	[3D62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1156, 0x0041 };
    uint32_t const ces[9] = { 0x3D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_250)
{
    // 1156 0062;	
    // (ᅖ) HANGUL CHOSEONG PHIEUPH-PIEUP	[3D62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1156, 0x0062 };
    uint32_t const ces[9] = { 0x3D62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_251)
{
    // 1157 0021;	
    // (ᅗ) HANGUL CHOSEONG KAPYEOUNPHIEUPH	[3D63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1157, 0x0021 };
    uint32_t const ces[9] = { 0x3D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_252)
{
    // 3184 0021;	
    // (ㆄ) HANGUL LETTER KAPYEOUNPHIEUPH	[3D63 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3184, 0x0021 };
    uint32_t const ces[9] = { 0x3D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_253)
{
    // 1157 003F;	
    // (ᅗ) HANGUL CHOSEONG KAPYEOUNPHIEUPH	[3D63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1157, 0x003F };
    uint32_t const ces[9] = { 0x3D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_254)
{
    // 3184 003F;	
    // (ㆄ) HANGUL LETTER KAPYEOUNPHIEUPH	[3D63 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3184, 0x003F };
    uint32_t const ces[9] = { 0x3D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_255)
{
    // 1157 0061;	
    // (ᅗ) HANGUL CHOSEONG KAPYEOUNPHIEUPH	[3D63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1157, 0x0061 };
    uint32_t const ces[9] = { 0x3D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_256)
{
    // 1157 0041;	
    // (ᅗ) HANGUL CHOSEONG KAPYEOUNPHIEUPH	[3D63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1157, 0x0041 };
    uint32_t const ces[9] = { 0x3D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_257)
{
    // 3184 0061;	
    // (ㆄ) HANGUL LETTER KAPYEOUNPHIEUPH	[3D63 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3184, 0x0061 };
    uint32_t const ces[9] = { 0x3D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_258)
{
    // 3184 0041;	
    // (ㆄ) HANGUL LETTER KAPYEOUNPHIEUPH	[3D63 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3184, 0x0041 };
    uint32_t const ces[9] = { 0x3D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_259)
{
    // 1157 0062;	
    // (ᅗ) HANGUL CHOSEONG KAPYEOUNPHIEUPH	[3D63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1157, 0x0062 };
    uint32_t const ces[9] = { 0x3D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_260)
{
    // 3184 0062;	
    // (ㆄ) HANGUL LETTER KAPYEOUNPHIEUPH	[3D63 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3184, 0x0062 };
    uint32_t const ces[9] = { 0x3D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_261)
{
    // 1158 0021;	
    // (ᅘ) HANGUL CHOSEONG SSANGHIEUH	[3D64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158, 0x0021 };
    uint32_t const ces[9] = { 0x3D64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_262)
{
    // 3185 0021;	
    // (ㆅ) HANGUL LETTER SSANGHIEUH	[3D64 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3185, 0x0021 };
    uint32_t const ces[9] = { 0x3D64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_263)
{
    // 1158 003F;	
    // (ᅘ) HANGUL CHOSEONG SSANGHIEUH	[3D64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158, 0x003F };
    uint32_t const ces[9] = { 0x3D64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_264)
{
    // 3185 003F;	
    // (ㆅ) HANGUL LETTER SSANGHIEUH	[3D64 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3185, 0x003F };
    uint32_t const ces[9] = { 0x3D64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_265)
{
    // 1158 0061;	
    // (ᅘ) HANGUL CHOSEONG SSANGHIEUH	[3D64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158, 0x0061 };
    uint32_t const ces[9] = { 0x3D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_266)
{
    // 1158 0041;	
    // (ᅘ) HANGUL CHOSEONG SSANGHIEUH	[3D64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158, 0x0041 };
    uint32_t const ces[9] = { 0x3D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_267)
{
    // 3185 0061;	
    // (ㆅ) HANGUL LETTER SSANGHIEUH	[3D64 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3185, 0x0061 };
    uint32_t const ces[9] = { 0x3D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_268)
{
    // 3185 0041;	
    // (ㆅ) HANGUL LETTER SSANGHIEUH	[3D64 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3185, 0x0041 };
    uint32_t const ces[9] = { 0x3D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_269)
{
    // 1158 0062;	
    // (ᅘ) HANGUL CHOSEONG SSANGHIEUH	[3D64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158, 0x0062 };
    uint32_t const ces[9] = { 0x3D64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_270)
{
    // 3185 0062;	
    // (ㆅ) HANGUL LETTER SSANGHIEUH	[3D64 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3185, 0x0062 };
    uint32_t const ces[9] = { 0x3D64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_271)
{
    // 1159 0021;	
    // (ᅙ) HANGUL CHOSEONG YEORINHIEUH	[3D65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159, 0x0021 };
    uint32_t const ces[9] = { 0x3D65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_272)
{
    // 3186 0021;	
    // (ㆆ) HANGUL LETTER YEORINHIEUH	[3D65 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3186, 0x0021 };
    uint32_t const ces[9] = { 0x3D65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_273)
{
    // 1159 003F;	
    // (ᅙ) HANGUL CHOSEONG YEORINHIEUH	[3D65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159, 0x003F };
    uint32_t const ces[9] = { 0x3D65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_274)
{
    // 3186 003F;	
    // (ㆆ) HANGUL LETTER YEORINHIEUH	[3D65 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3186, 0x003F };
    uint32_t const ces[9] = { 0x3D65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_275)
{
    // 1159 0061;	
    // (ᅙ) HANGUL CHOSEONG YEORINHIEUH	[3D65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159, 0x0061 };
    uint32_t const ces[9] = { 0x3D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_276)
{
    // 1159 0041;	
    // (ᅙ) HANGUL CHOSEONG YEORINHIEUH	[3D65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159, 0x0041 };
    uint32_t const ces[9] = { 0x3D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_277)
{
    // 3186 0061;	
    // (ㆆ) HANGUL LETTER YEORINHIEUH	[3D65 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3186, 0x0061 };
    uint32_t const ces[9] = { 0x3D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_278)
{
    // 3186 0041;	
    // (ㆆ) HANGUL LETTER YEORINHIEUH	[3D65 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3186, 0x0041 };
    uint32_t const ces[9] = { 0x3D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_279)
{
    // 1159 0062;	
    // (ᅙ) HANGUL CHOSEONG YEORINHIEUH	[3D65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159, 0x0062 };
    uint32_t const ces[9] = { 0x3D65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_280)
{
    // 3186 0062;	
    // (ㆆ) HANGUL LETTER YEORINHIEUH	[3D65 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3186, 0x0062 };
    uint32_t const ces[9] = { 0x3D65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_281)
{
    // 115A 0021;	
    // (ᅚ) HANGUL CHOSEONG KIYEOK-TIKEUT	[3D66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A, 0x0021 };
    uint32_t const ces[9] = { 0x3D66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_282)
{
    // 115A 003F;	
    // (ᅚ) HANGUL CHOSEONG KIYEOK-TIKEUT	[3D66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A, 0x003F };
    uint32_t const ces[9] = { 0x3D66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_283)
{
    // 115A 0061;	
    // (ᅚ) HANGUL CHOSEONG KIYEOK-TIKEUT	[3D66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A, 0x0061 };
    uint32_t const ces[9] = { 0x3D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_284)
{
    // 115A 0041;	
    // (ᅚ) HANGUL CHOSEONG KIYEOK-TIKEUT	[3D66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A, 0x0041 };
    uint32_t const ces[9] = { 0x3D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_285)
{
    // 115A 0062;	
    // (ᅚ) HANGUL CHOSEONG KIYEOK-TIKEUT	[3D66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A, 0x0062 };
    uint32_t const ces[9] = { 0x3D66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_286)
{
    // 115B 0021;	
    // (ᅛ) HANGUL CHOSEONG NIEUN-SIOS	[3D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B, 0x0021 };
    uint32_t const ces[9] = { 0x3D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_287)
{
    // 115B 003F;	
    // (ᅛ) HANGUL CHOSEONG NIEUN-SIOS	[3D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B, 0x003F };
    uint32_t const ces[9] = { 0x3D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_288)
{
    // 115B 0061;	
    // (ᅛ) HANGUL CHOSEONG NIEUN-SIOS	[3D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B, 0x0061 };
    uint32_t const ces[9] = { 0x3D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_289)
{
    // 115B 0041;	
    // (ᅛ) HANGUL CHOSEONG NIEUN-SIOS	[3D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B, 0x0041 };
    uint32_t const ces[9] = { 0x3D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_290)
{
    // 115B 0062;	
    // (ᅛ) HANGUL CHOSEONG NIEUN-SIOS	[3D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B, 0x0062 };
    uint32_t const ces[9] = { 0x3D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_291)
{
    // 115C 0021;	
    // (ᅜ) HANGUL CHOSEONG NIEUN-CIEUC	[3D68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C, 0x0021 };
    uint32_t const ces[9] = { 0x3D68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_292)
{
    // 115C 003F;	
    // (ᅜ) HANGUL CHOSEONG NIEUN-CIEUC	[3D68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C, 0x003F };
    uint32_t const ces[9] = { 0x3D68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_293)
{
    // 115C 0061;	
    // (ᅜ) HANGUL CHOSEONG NIEUN-CIEUC	[3D68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C, 0x0061 };
    uint32_t const ces[9] = { 0x3D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_294)
{
    // 115C 0041;	
    // (ᅜ) HANGUL CHOSEONG NIEUN-CIEUC	[3D68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C, 0x0041 };
    uint32_t const ces[9] = { 0x3D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_295)
{
    // 115C 0062;	
    // (ᅜ) HANGUL CHOSEONG NIEUN-CIEUC	[3D68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C, 0x0062 };
    uint32_t const ces[9] = { 0x3D68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_296)
{
    // 115D 0021;	
    // (ᅝ) HANGUL CHOSEONG NIEUN-HIEUH	[3D69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D, 0x0021 };
    uint32_t const ces[9] = { 0x3D69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_297)
{
    // 115D 003F;	
    // (ᅝ) HANGUL CHOSEONG NIEUN-HIEUH	[3D69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D, 0x003F };
    uint32_t const ces[9] = { 0x3D69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_298)
{
    // 115D 0061;	
    // (ᅝ) HANGUL CHOSEONG NIEUN-HIEUH	[3D69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D, 0x0061 };
    uint32_t const ces[9] = { 0x3D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_299)
{
    // 115D 0041;	
    // (ᅝ) HANGUL CHOSEONG NIEUN-HIEUH	[3D69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D, 0x0041 };
    uint32_t const ces[9] = { 0x3D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_300)
{
    // 115D 0062;	
    // (ᅝ) HANGUL CHOSEONG NIEUN-HIEUH	[3D69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D, 0x0062 };
    uint32_t const ces[9] = { 0x3D69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_301)
{
    // 115E 0021;	
    // (ᅞ) HANGUL CHOSEONG TIKEUT-RIEUL	[3D6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115E, 0x0021 };
    uint32_t const ces[9] = { 0x3D6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_302)
{
    // 115E 003F;	
    // (ᅞ) HANGUL CHOSEONG TIKEUT-RIEUL	[3D6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115E, 0x003F };
    uint32_t const ces[9] = { 0x3D6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_303)
{
    // 115E 0061;	
    // (ᅞ) HANGUL CHOSEONG TIKEUT-RIEUL	[3D6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115E, 0x0061 };
    uint32_t const ces[9] = { 0x3D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_304)
{
    // 115E 0041;	
    // (ᅞ) HANGUL CHOSEONG TIKEUT-RIEUL	[3D6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115E, 0x0041 };
    uint32_t const ces[9] = { 0x3D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_305)
{
    // 115E 0062;	
    // (ᅞ) HANGUL CHOSEONG TIKEUT-RIEUL	[3D6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115E, 0x0062 };
    uint32_t const ces[9] = { 0x3D6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_306)
{
    // A960 0021;	
    // (ꥠ) HANGUL CHOSEONG TIKEUT-MIEUM	[3D6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA960, 0x0021 };
    uint32_t const ces[9] = { 0x3D6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_307)
{
    // A960 003F;	
    // (ꥠ) HANGUL CHOSEONG TIKEUT-MIEUM	[3D6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA960, 0x003F };
    uint32_t const ces[9] = { 0x3D6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_308)
{
    // A960 0061;	
    // (ꥠ) HANGUL CHOSEONG TIKEUT-MIEUM	[3D6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA960, 0x0061 };
    uint32_t const ces[9] = { 0x3D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_309)
{
    // A960 0041;	
    // (ꥠ) HANGUL CHOSEONG TIKEUT-MIEUM	[3D6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA960, 0x0041 };
    uint32_t const ces[9] = { 0x3D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_310)
{
    // A960 0062;	
    // (ꥠ) HANGUL CHOSEONG TIKEUT-MIEUM	[3D6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA960, 0x0062 };
    uint32_t const ces[9] = { 0x3D6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_311)
{
    // A961 0021;	
    // (ꥡ) HANGUL CHOSEONG TIKEUT-PIEUP	[3D6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA961, 0x0021 };
    uint32_t const ces[9] = { 0x3D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_312)
{
    // A961 003F;	
    // (ꥡ) HANGUL CHOSEONG TIKEUT-PIEUP	[3D6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA961, 0x003F };
    uint32_t const ces[9] = { 0x3D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_313)
{
    // A961 0061;	
    // (ꥡ) HANGUL CHOSEONG TIKEUT-PIEUP	[3D6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA961, 0x0061 };
    uint32_t const ces[9] = { 0x3D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_314)
{
    // A961 0041;	
    // (ꥡ) HANGUL CHOSEONG TIKEUT-PIEUP	[3D6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA961, 0x0041 };
    uint32_t const ces[9] = { 0x3D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_315)
{
    // A961 0062;	
    // (ꥡ) HANGUL CHOSEONG TIKEUT-PIEUP	[3D6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA961, 0x0062 };
    uint32_t const ces[9] = { 0x3D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_316)
{
    // A962 0021;	
    // (ꥢ) HANGUL CHOSEONG TIKEUT-SIOS	[3D6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA962, 0x0021 };
    uint32_t const ces[9] = { 0x3D6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_317)
{
    // A962 003F;	
    // (ꥢ) HANGUL CHOSEONG TIKEUT-SIOS	[3D6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA962, 0x003F };
    uint32_t const ces[9] = { 0x3D6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_318)
{
    // A962 0061;	
    // (ꥢ) HANGUL CHOSEONG TIKEUT-SIOS	[3D6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA962, 0x0061 };
    uint32_t const ces[9] = { 0x3D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_319)
{
    // A962 0041;	
    // (ꥢ) HANGUL CHOSEONG TIKEUT-SIOS	[3D6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA962, 0x0041 };
    uint32_t const ces[9] = { 0x3D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_320)
{
    // A962 0062;	
    // (ꥢ) HANGUL CHOSEONG TIKEUT-SIOS	[3D6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA962, 0x0062 };
    uint32_t const ces[9] = { 0x3D6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_321)
{
    // A963 0021;	
    // (ꥣ) HANGUL CHOSEONG TIKEUT-CIEUC	[3D6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA963, 0x0021 };
    uint32_t const ces[9] = { 0x3D6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_322)
{
    // A963 003F;	
    // (ꥣ) HANGUL CHOSEONG TIKEUT-CIEUC	[3D6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA963, 0x003F };
    uint32_t const ces[9] = { 0x3D6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_323)
{
    // A963 0061;	
    // (ꥣ) HANGUL CHOSEONG TIKEUT-CIEUC	[3D6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA963, 0x0061 };
    uint32_t const ces[9] = { 0x3D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_324)
{
    // A963 0041;	
    // (ꥣ) HANGUL CHOSEONG TIKEUT-CIEUC	[3D6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA963, 0x0041 };
    uint32_t const ces[9] = { 0x3D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_325)
{
    // A963 0062;	
    // (ꥣ) HANGUL CHOSEONG TIKEUT-CIEUC	[3D6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA963, 0x0062 };
    uint32_t const ces[9] = { 0x3D6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_326)
{
    // A964 0021;	
    // (ꥤ) HANGUL CHOSEONG RIEUL-KIYEOK	[3D6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA964, 0x0021 };
    uint32_t const ces[9] = { 0x3D6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_327)
{
    // A964 003F;	
    // (ꥤ) HANGUL CHOSEONG RIEUL-KIYEOK	[3D6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA964, 0x003F };
    uint32_t const ces[9] = { 0x3D6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_328)
{
    // A964 0061;	
    // (ꥤ) HANGUL CHOSEONG RIEUL-KIYEOK	[3D6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA964, 0x0061 };
    uint32_t const ces[9] = { 0x3D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_329)
{
    // A964 0041;	
    // (ꥤ) HANGUL CHOSEONG RIEUL-KIYEOK	[3D6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA964, 0x0041 };
    uint32_t const ces[9] = { 0x3D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_330)
{
    // A964 0062;	
    // (ꥤ) HANGUL CHOSEONG RIEUL-KIYEOK	[3D6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA964, 0x0062 };
    uint32_t const ces[9] = { 0x3D6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_331)
{
    // A965 0021;	
    // (ꥥ) HANGUL CHOSEONG RIEUL-SSANGKIYEOK	[3D70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA965, 0x0021 };
    uint32_t const ces[9] = { 0x3D70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_332)
{
    // A965 003F;	
    // (ꥥ) HANGUL CHOSEONG RIEUL-SSANGKIYEOK	[3D70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA965, 0x003F };
    uint32_t const ces[9] = { 0x3D70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_333)
{
    // A965 0061;	
    // (ꥥ) HANGUL CHOSEONG RIEUL-SSANGKIYEOK	[3D70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA965, 0x0061 };
    uint32_t const ces[9] = { 0x3D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_334)
{
    // A965 0041;	
    // (ꥥ) HANGUL CHOSEONG RIEUL-SSANGKIYEOK	[3D70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA965, 0x0041 };
    uint32_t const ces[9] = { 0x3D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_335)
{
    // A965 0062;	
    // (ꥥ) HANGUL CHOSEONG RIEUL-SSANGKIYEOK	[3D70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA965, 0x0062 };
    uint32_t const ces[9] = { 0x3D70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_336)
{
    // A966 0021;	
    // (ꥦ) HANGUL CHOSEONG RIEUL-TIKEUT	[3D71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA966, 0x0021 };
    uint32_t const ces[9] = { 0x3D71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_337)
{
    // A966 003F;	
    // (ꥦ) HANGUL CHOSEONG RIEUL-TIKEUT	[3D71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA966, 0x003F };
    uint32_t const ces[9] = { 0x3D71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_338)
{
    // A966 0061;	
    // (ꥦ) HANGUL CHOSEONG RIEUL-TIKEUT	[3D71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA966, 0x0061 };
    uint32_t const ces[9] = { 0x3D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_339)
{
    // A966 0041;	
    // (ꥦ) HANGUL CHOSEONG RIEUL-TIKEUT	[3D71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA966, 0x0041 };
    uint32_t const ces[9] = { 0x3D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_340)
{
    // A966 0062;	
    // (ꥦ) HANGUL CHOSEONG RIEUL-TIKEUT	[3D71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA966, 0x0062 };
    uint32_t const ces[9] = { 0x3D71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_341)
{
    // A967 0021;	
    // (ꥧ) HANGUL CHOSEONG RIEUL-SSANGTIKEUT	[3D72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA967, 0x0021 };
    uint32_t const ces[9] = { 0x3D72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_342)
{
    // A967 003F;	
    // (ꥧ) HANGUL CHOSEONG RIEUL-SSANGTIKEUT	[3D72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA967, 0x003F };
    uint32_t const ces[9] = { 0x3D72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_343)
{
    // A967 0061;	
    // (ꥧ) HANGUL CHOSEONG RIEUL-SSANGTIKEUT	[3D72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA967, 0x0061 };
    uint32_t const ces[9] = { 0x3D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_344)
{
    // A967 0041;	
    // (ꥧ) HANGUL CHOSEONG RIEUL-SSANGTIKEUT	[3D72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA967, 0x0041 };
    uint32_t const ces[9] = { 0x3D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_345)
{
    // A967 0062;	
    // (ꥧ) HANGUL CHOSEONG RIEUL-SSANGTIKEUT	[3D72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA967, 0x0062 };
    uint32_t const ces[9] = { 0x3D72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_346)
{
    // A968 0021;	
    // (ꥨ) HANGUL CHOSEONG RIEUL-MIEUM	[3D73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA968, 0x0021 };
    uint32_t const ces[9] = { 0x3D73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_347)
{
    // A968 003F;	
    // (ꥨ) HANGUL CHOSEONG RIEUL-MIEUM	[3D73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA968, 0x003F };
    uint32_t const ces[9] = { 0x3D73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_348)
{
    // A968 0061;	
    // (ꥨ) HANGUL CHOSEONG RIEUL-MIEUM	[3D73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA968, 0x0061 };
    uint32_t const ces[9] = { 0x3D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_349)
{
    // A968 0041;	
    // (ꥨ) HANGUL CHOSEONG RIEUL-MIEUM	[3D73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA968, 0x0041 };
    uint32_t const ces[9] = { 0x3D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_350)
{
    // A968 0062;	
    // (ꥨ) HANGUL CHOSEONG RIEUL-MIEUM	[3D73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA968, 0x0062 };
    uint32_t const ces[9] = { 0x3D73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_351)
{
    // A969 0021;	
    // (ꥩ) HANGUL CHOSEONG RIEUL-PIEUP	[3D74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA969, 0x0021 };
    uint32_t const ces[9] = { 0x3D74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_352)
{
    // A969 003F;	
    // (ꥩ) HANGUL CHOSEONG RIEUL-PIEUP	[3D74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA969, 0x003F };
    uint32_t const ces[9] = { 0x3D74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_353)
{
    // A969 0061;	
    // (ꥩ) HANGUL CHOSEONG RIEUL-PIEUP	[3D74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA969, 0x0061 };
    uint32_t const ces[9] = { 0x3D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_354)
{
    // A969 0041;	
    // (ꥩ) HANGUL CHOSEONG RIEUL-PIEUP	[3D74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA969, 0x0041 };
    uint32_t const ces[9] = { 0x3D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_355)
{
    // A969 0062;	
    // (ꥩ) HANGUL CHOSEONG RIEUL-PIEUP	[3D74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA969, 0x0062 };
    uint32_t const ces[9] = { 0x3D74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_356)
{
    // A96A 0021;	
    // (ꥪ) HANGUL CHOSEONG RIEUL-SSANGPIEUP	[3D75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96A, 0x0021 };
    uint32_t const ces[9] = { 0x3D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_357)
{
    // A96A 003F;	
    // (ꥪ) HANGUL CHOSEONG RIEUL-SSANGPIEUP	[3D75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96A, 0x003F };
    uint32_t const ces[9] = { 0x3D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_358)
{
    // A96A 0061;	
    // (ꥪ) HANGUL CHOSEONG RIEUL-SSANGPIEUP	[3D75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96A, 0x0061 };
    uint32_t const ces[9] = { 0x3D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_359)
{
    // A96A 0041;	
    // (ꥪ) HANGUL CHOSEONG RIEUL-SSANGPIEUP	[3D75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96A, 0x0041 };
    uint32_t const ces[9] = { 0x3D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_360)
{
    // A96A 0062;	
    // (ꥪ) HANGUL CHOSEONG RIEUL-SSANGPIEUP	[3D75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96A, 0x0062 };
    uint32_t const ces[9] = { 0x3D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_361)
{
    // A96B 0021;	
    // (ꥫ) HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP	[3D76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96B, 0x0021 };
    uint32_t const ces[9] = { 0x3D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_362)
{
    // A96B 003F;	
    // (ꥫ) HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP	[3D76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96B, 0x003F };
    uint32_t const ces[9] = { 0x3D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_363)
{
    // A96B 0061;	
    // (ꥫ) HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP	[3D76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96B, 0x0061 };
    uint32_t const ces[9] = { 0x3D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_364)
{
    // A96B 0041;	
    // (ꥫ) HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP	[3D76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96B, 0x0041 };
    uint32_t const ces[9] = { 0x3D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_365)
{
    // A96B 0062;	
    // (ꥫ) HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP	[3D76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96B, 0x0062 };
    uint32_t const ces[9] = { 0x3D76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_366)
{
    // A96C 0021;	
    // (ꥬ) HANGUL CHOSEONG RIEUL-SIOS	[3D77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96C, 0x0021 };
    uint32_t const ces[9] = { 0x3D77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_367)
{
    // A96C 003F;	
    // (ꥬ) HANGUL CHOSEONG RIEUL-SIOS	[3D77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96C, 0x003F };
    uint32_t const ces[9] = { 0x3D77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_368)
{
    // A96C 0061;	
    // (ꥬ) HANGUL CHOSEONG RIEUL-SIOS	[3D77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96C, 0x0061 };
    uint32_t const ces[9] = { 0x3D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_369)
{
    // A96C 0041;	
    // (ꥬ) HANGUL CHOSEONG RIEUL-SIOS	[3D77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96C, 0x0041 };
    uint32_t const ces[9] = { 0x3D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_370)
{
    // A96C 0062;	
    // (ꥬ) HANGUL CHOSEONG RIEUL-SIOS	[3D77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96C, 0x0062 };
    uint32_t const ces[9] = { 0x3D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_371)
{
    // A96D 0021;	
    // (ꥭ) HANGUL CHOSEONG RIEUL-CIEUC	[3D78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96D, 0x0021 };
    uint32_t const ces[9] = { 0x3D78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_372)
{
    // A96D 003F;	
    // (ꥭ) HANGUL CHOSEONG RIEUL-CIEUC	[3D78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96D, 0x003F };
    uint32_t const ces[9] = { 0x3D78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_373)
{
    // A96D 0061;	
    // (ꥭ) HANGUL CHOSEONG RIEUL-CIEUC	[3D78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96D, 0x0061 };
    uint32_t const ces[9] = { 0x3D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_374)
{
    // A96D 0041;	
    // (ꥭ) HANGUL CHOSEONG RIEUL-CIEUC	[3D78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96D, 0x0041 };
    uint32_t const ces[9] = { 0x3D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_375)
{
    // A96D 0062;	
    // (ꥭ) HANGUL CHOSEONG RIEUL-CIEUC	[3D78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96D, 0x0062 };
    uint32_t const ces[9] = { 0x3D78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_376)
{
    // A96E 0021;	
    // (ꥮ) HANGUL CHOSEONG RIEUL-KHIEUKH	[3D79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96E, 0x0021 };
    uint32_t const ces[9] = { 0x3D79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_377)
{
    // A96E 003F;	
    // (ꥮ) HANGUL CHOSEONG RIEUL-KHIEUKH	[3D79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96E, 0x003F };
    uint32_t const ces[9] = { 0x3D79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_378)
{
    // A96E 0061;	
    // (ꥮ) HANGUL CHOSEONG RIEUL-KHIEUKH	[3D79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96E, 0x0061 };
    uint32_t const ces[9] = { 0x3D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_379)
{
    // A96E 0041;	
    // (ꥮ) HANGUL CHOSEONG RIEUL-KHIEUKH	[3D79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96E, 0x0041 };
    uint32_t const ces[9] = { 0x3D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_380)
{
    // A96E 0062;	
    // (ꥮ) HANGUL CHOSEONG RIEUL-KHIEUKH	[3D79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96E, 0x0062 };
    uint32_t const ces[9] = { 0x3D79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_381)
{
    // A96F 0021;	
    // (ꥯ) HANGUL CHOSEONG MIEUM-KIYEOK	[3D7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96F, 0x0021 };
    uint32_t const ces[9] = { 0x3D7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_382)
{
    // A96F 003F;	
    // (ꥯ) HANGUL CHOSEONG MIEUM-KIYEOK	[3D7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96F, 0x003F };
    uint32_t const ces[9] = { 0x3D7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_383)
{
    // A96F 0061;	
    // (ꥯ) HANGUL CHOSEONG MIEUM-KIYEOK	[3D7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96F, 0x0061 };
    uint32_t const ces[9] = { 0x3D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_384)
{
    // A96F 0041;	
    // (ꥯ) HANGUL CHOSEONG MIEUM-KIYEOK	[3D7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA96F, 0x0041 };
    uint32_t const ces[9] = { 0x3D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_385)
{
    // A96F 0062;	
    // (ꥯ) HANGUL CHOSEONG MIEUM-KIYEOK	[3D7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA96F, 0x0062 };
    uint32_t const ces[9] = { 0x3D7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_386)
{
    // A970 0021;	
    // (ꥰ) HANGUL CHOSEONG MIEUM-TIKEUT	[3D7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA970, 0x0021 };
    uint32_t const ces[9] = { 0x3D7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_387)
{
    // A970 003F;	
    // (ꥰ) HANGUL CHOSEONG MIEUM-TIKEUT	[3D7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA970, 0x003F };
    uint32_t const ces[9] = { 0x3D7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_388)
{
    // A970 0061;	
    // (ꥰ) HANGUL CHOSEONG MIEUM-TIKEUT	[3D7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA970, 0x0061 };
    uint32_t const ces[9] = { 0x3D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_389)
{
    // A970 0041;	
    // (ꥰ) HANGUL CHOSEONG MIEUM-TIKEUT	[3D7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA970, 0x0041 };
    uint32_t const ces[9] = { 0x3D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_390)
{
    // A970 0062;	
    // (ꥰ) HANGUL CHOSEONG MIEUM-TIKEUT	[3D7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA970, 0x0062 };
    uint32_t const ces[9] = { 0x3D7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_391)
{
    // A971 0021;	
    // (ꥱ) HANGUL CHOSEONG MIEUM-SIOS	[3D7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA971, 0x0021 };
    uint32_t const ces[9] = { 0x3D7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_392)
{
    // A971 003F;	
    // (ꥱ) HANGUL CHOSEONG MIEUM-SIOS	[3D7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA971, 0x003F };
    uint32_t const ces[9] = { 0x3D7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_393)
{
    // A971 0061;	
    // (ꥱ) HANGUL CHOSEONG MIEUM-SIOS	[3D7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA971, 0x0061 };
    uint32_t const ces[9] = { 0x3D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_394)
{
    // A971 0041;	
    // (ꥱ) HANGUL CHOSEONG MIEUM-SIOS	[3D7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA971, 0x0041 };
    uint32_t const ces[9] = { 0x3D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_395)
{
    // A971 0062;	
    // (ꥱ) HANGUL CHOSEONG MIEUM-SIOS	[3D7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA971, 0x0062 };
    uint32_t const ces[9] = { 0x3D7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_396)
{
    // A972 0021;	
    // (ꥲ) HANGUL CHOSEONG PIEUP-SIOS-THIEUTH	[3D7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA972, 0x0021 };
    uint32_t const ces[9] = { 0x3D7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_397)
{
    // A972 003F;	
    // (ꥲ) HANGUL CHOSEONG PIEUP-SIOS-THIEUTH	[3D7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA972, 0x003F };
    uint32_t const ces[9] = { 0x3D7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_398)
{
    // A972 0061;	
    // (ꥲ) HANGUL CHOSEONG PIEUP-SIOS-THIEUTH	[3D7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA972, 0x0061 };
    uint32_t const ces[9] = { 0x3D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_399)
{
    // A972 0041;	
    // (ꥲ) HANGUL CHOSEONG PIEUP-SIOS-THIEUTH	[3D7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA972, 0x0041 };
    uint32_t const ces[9] = { 0x3D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_400)
{
    // A972 0062;	
    // (ꥲ) HANGUL CHOSEONG PIEUP-SIOS-THIEUTH	[3D7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA972, 0x0062 };
    uint32_t const ces[9] = { 0x3D7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_401)
{
    // A973 0021;	
    // (ꥳ) HANGUL CHOSEONG PIEUP-KHIEUKH	[3D7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA973, 0x0021 };
    uint32_t const ces[9] = { 0x3D7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_402)
{
    // A973 003F;	
    // (ꥳ) HANGUL CHOSEONG PIEUP-KHIEUKH	[3D7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA973, 0x003F };
    uint32_t const ces[9] = { 0x3D7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_403)
{
    // A973 0061;	
    // (ꥳ) HANGUL CHOSEONG PIEUP-KHIEUKH	[3D7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA973, 0x0061 };
    uint32_t const ces[9] = { 0x3D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_404)
{
    // A973 0041;	
    // (ꥳ) HANGUL CHOSEONG PIEUP-KHIEUKH	[3D7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA973, 0x0041 };
    uint32_t const ces[9] = { 0x3D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_405)
{
    // A973 0062;	
    // (ꥳ) HANGUL CHOSEONG PIEUP-KHIEUKH	[3D7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA973, 0x0062 };
    uint32_t const ces[9] = { 0x3D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_406)
{
    // A974 0021;	
    // (ꥴ) HANGUL CHOSEONG PIEUP-HIEUH	[3D7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA974, 0x0021 };
    uint32_t const ces[9] = { 0x3D7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_407)
{
    // A974 003F;	
    // (ꥴ) HANGUL CHOSEONG PIEUP-HIEUH	[3D7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA974, 0x003F };
    uint32_t const ces[9] = { 0x3D7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_408)
{
    // A974 0061;	
    // (ꥴ) HANGUL CHOSEONG PIEUP-HIEUH	[3D7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA974, 0x0061 };
    uint32_t const ces[9] = { 0x3D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_409)
{
    // A974 0041;	
    // (ꥴ) HANGUL CHOSEONG PIEUP-HIEUH	[3D7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA974, 0x0041 };
    uint32_t const ces[9] = { 0x3D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_410)
{
    // A974 0062;	
    // (ꥴ) HANGUL CHOSEONG PIEUP-HIEUH	[3D7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA974, 0x0062 };
    uint32_t const ces[9] = { 0x3D7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_411)
{
    // A975 0021;	
    // (ꥵ) HANGUL CHOSEONG SSANGSIOS-PIEUP	[3D80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA975, 0x0021 };
    uint32_t const ces[9] = { 0x3D80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_412)
{
    // A975 003F;	
    // (ꥵ) HANGUL CHOSEONG SSANGSIOS-PIEUP	[3D80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA975, 0x003F };
    uint32_t const ces[9] = { 0x3D80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_413)
{
    // A975 0061;	
    // (ꥵ) HANGUL CHOSEONG SSANGSIOS-PIEUP	[3D80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA975, 0x0061 };
    uint32_t const ces[9] = { 0x3D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_414)
{
    // A975 0041;	
    // (ꥵ) HANGUL CHOSEONG SSANGSIOS-PIEUP	[3D80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA975, 0x0041 };
    uint32_t const ces[9] = { 0x3D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_415)
{
    // A975 0062;	
    // (ꥵ) HANGUL CHOSEONG SSANGSIOS-PIEUP	[3D80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA975, 0x0062 };
    uint32_t const ces[9] = { 0x3D80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_416)
{
    // A976 0021;	
    // (ꥶ) HANGUL CHOSEONG IEUNG-RIEUL	[3D81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA976, 0x0021 };
    uint32_t const ces[9] = { 0x3D81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_417)
{
    // A976 003F;	
    // (ꥶ) HANGUL CHOSEONG IEUNG-RIEUL	[3D81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA976, 0x003F };
    uint32_t const ces[9] = { 0x3D81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_418)
{
    // A976 0061;	
    // (ꥶ) HANGUL CHOSEONG IEUNG-RIEUL	[3D81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA976, 0x0061 };
    uint32_t const ces[9] = { 0x3D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_419)
{
    // A976 0041;	
    // (ꥶ) HANGUL CHOSEONG IEUNG-RIEUL	[3D81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA976, 0x0041 };
    uint32_t const ces[9] = { 0x3D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_420)
{
    // A976 0062;	
    // (ꥶ) HANGUL CHOSEONG IEUNG-RIEUL	[3D81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA976, 0x0062 };
    uint32_t const ces[9] = { 0x3D81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_421)
{
    // A977 0021;	
    // (ꥷ) HANGUL CHOSEONG IEUNG-HIEUH	[3D82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA977, 0x0021 };
    uint32_t const ces[9] = { 0x3D82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_422)
{
    // A977 003F;	
    // (ꥷ) HANGUL CHOSEONG IEUNG-HIEUH	[3D82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA977, 0x003F };
    uint32_t const ces[9] = { 0x3D82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_423)
{
    // A977 0061;	
    // (ꥷ) HANGUL CHOSEONG IEUNG-HIEUH	[3D82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA977, 0x0061 };
    uint32_t const ces[9] = { 0x3D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_424)
{
    // A977 0041;	
    // (ꥷ) HANGUL CHOSEONG IEUNG-HIEUH	[3D82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA977, 0x0041 };
    uint32_t const ces[9] = { 0x3D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_425)
{
    // A977 0062;	
    // (ꥷ) HANGUL CHOSEONG IEUNG-HIEUH	[3D82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA977, 0x0062 };
    uint32_t const ces[9] = { 0x3D82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_426)
{
    // A978 0021;	
    // (ꥸ) HANGUL CHOSEONG SSANGCIEUC-HIEUH	[3D83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA978, 0x0021 };
    uint32_t const ces[9] = { 0x3D83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_427)
{
    // A978 003F;	
    // (ꥸ) HANGUL CHOSEONG SSANGCIEUC-HIEUH	[3D83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA978, 0x003F };
    uint32_t const ces[9] = { 0x3D83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_428)
{
    // A978 0061;	
    // (ꥸ) HANGUL CHOSEONG SSANGCIEUC-HIEUH	[3D83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA978, 0x0061 };
    uint32_t const ces[9] = { 0x3D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_429)
{
    // A978 0041;	
    // (ꥸ) HANGUL CHOSEONG SSANGCIEUC-HIEUH	[3D83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA978, 0x0041 };
    uint32_t const ces[9] = { 0x3D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_430)
{
    // A978 0062;	
    // (ꥸ) HANGUL CHOSEONG SSANGCIEUC-HIEUH	[3D83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA978, 0x0062 };
    uint32_t const ces[9] = { 0x3D83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_431)
{
    // A979 0021;	
    // (ꥹ) HANGUL CHOSEONG SSANGTHIEUTH	[3D84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA979, 0x0021 };
    uint32_t const ces[9] = { 0x3D84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_432)
{
    // A979 003F;	
    // (ꥹ) HANGUL CHOSEONG SSANGTHIEUTH	[3D84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA979, 0x003F };
    uint32_t const ces[9] = { 0x3D84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_433)
{
    // A979 0061;	
    // (ꥹ) HANGUL CHOSEONG SSANGTHIEUTH	[3D84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA979, 0x0061 };
    uint32_t const ces[9] = { 0x3D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_434)
{
    // A979 0041;	
    // (ꥹ) HANGUL CHOSEONG SSANGTHIEUTH	[3D84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA979, 0x0041 };
    uint32_t const ces[9] = { 0x3D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_435)
{
    // A979 0062;	
    // (ꥹ) HANGUL CHOSEONG SSANGTHIEUTH	[3D84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA979, 0x0062 };
    uint32_t const ces[9] = { 0x3D84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_436)
{
    // A97A 0021;	
    // (ꥺ) HANGUL CHOSEONG PHIEUPH-HIEUH	[3D85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97A, 0x0021 };
    uint32_t const ces[9] = { 0x3D85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_437)
{
    // A97A 003F;	
    // (ꥺ) HANGUL CHOSEONG PHIEUPH-HIEUH	[3D85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97A, 0x003F };
    uint32_t const ces[9] = { 0x3D85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_438)
{
    // A97A 0061;	
    // (ꥺ) HANGUL CHOSEONG PHIEUPH-HIEUH	[3D85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97A, 0x0061 };
    uint32_t const ces[9] = { 0x3D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_439)
{
    // A97A 0041;	
    // (ꥺ) HANGUL CHOSEONG PHIEUPH-HIEUH	[3D85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA97A, 0x0041 };
    uint32_t const ces[9] = { 0x3D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_440)
{
    // A97A 0062;	
    // (ꥺ) HANGUL CHOSEONG PHIEUPH-HIEUH	[3D85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97A, 0x0062 };
    uint32_t const ces[9] = { 0x3D85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_441)
{
    // A97B 0021;	
    // (ꥻ) HANGUL CHOSEONG HIEUH-SIOS	[3D86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97B, 0x0021 };
    uint32_t const ces[9] = { 0x3D86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_442)
{
    // A97B 003F;	
    // (ꥻ) HANGUL CHOSEONG HIEUH-SIOS	[3D86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97B, 0x003F };
    uint32_t const ces[9] = { 0x3D86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_443)
{
    // A97B 0061;	
    // (ꥻ) HANGUL CHOSEONG HIEUH-SIOS	[3D86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97B, 0x0061 };
    uint32_t const ces[9] = { 0x3D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_444)
{
    // A97B 0041;	
    // (ꥻ) HANGUL CHOSEONG HIEUH-SIOS	[3D86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA97B, 0x0041 };
    uint32_t const ces[9] = { 0x3D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_445)
{
    // A97B 0062;	
    // (ꥻ) HANGUL CHOSEONG HIEUH-SIOS	[3D86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97B, 0x0062 };
    uint32_t const ces[9] = { 0x3D86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_446)
{
    // A97C 0021;	
    // (ꥼ) HANGUL CHOSEONG SSANGYEORINHIEUH	[3D87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97C, 0x0021 };
    uint32_t const ces[9] = { 0x3D87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_447)
{
    // A97C 003F;	
    // (ꥼ) HANGUL CHOSEONG SSANGYEORINHIEUH	[3D87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97C, 0x003F };
    uint32_t const ces[9] = { 0x3D87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_448)
{
    // A97C 0061;	
    // (ꥼ) HANGUL CHOSEONG SSANGYEORINHIEUH	[3D87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97C, 0x0061 };
    uint32_t const ces[9] = { 0x3D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_449)
{
    // A97C 0041;	
    // (ꥼ) HANGUL CHOSEONG SSANGYEORINHIEUH	[3D87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA97C, 0x0041 };
    uint32_t const ces[9] = { 0x3D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_450)
{
    // A97C 0062;	
    // (ꥼ) HANGUL CHOSEONG SSANGYEORINHIEUH	[3D87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA97C, 0x0062 };
    uint32_t const ces[9] = { 0x3D87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_451)
{
    // 115F 0021;	
    // (ᅟ) HANGUL CHOSEONG FILLER	[3D88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115F, 0x0021 };
    uint32_t const ces[9] = { 0x3D88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_452)
{
    // 115F 003F;	
    // (ᅟ) HANGUL CHOSEONG FILLER	[3D88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115F, 0x003F };
    uint32_t const ces[9] = { 0x3D88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_453)
{
    // 115F 0061;	
    // (ᅟ) HANGUL CHOSEONG FILLER	[3D88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115F, 0x0061 };
    uint32_t const ces[9] = { 0x3D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_454)
{
    // 115F 0041;	
    // (ᅟ) HANGUL CHOSEONG FILLER	[3D88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115F, 0x0041 };
    uint32_t const ces[9] = { 0x3D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_455)
{
    // 115F 0062;	
    // (ᅟ) HANGUL CHOSEONG FILLER	[3D88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115F, 0x0062 };
    uint32_t const ces[9] = { 0x3D88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_456)
{
    // 1160 0021;	
    // (ᅠ) HANGUL JUNGSEONG FILLER	[3D89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160, 0x0021 };
    uint32_t const ces[9] = { 0x3D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_457)
{
    // 3164 0021;	
    // (ㅤ) HANGUL FILLER	[3D89 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3164, 0x0021 };
    uint32_t const ces[9] = { 0x3D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_458)
{
    // FFA0 0021;	
    // (ﾠ) HALFWIDTH HANGUL FILLER	[3D89 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFA0, 0x0021 };
    uint32_t const ces[9] = { 0x3D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_459)
{
    // 1160 003F;	
    // (ᅠ) HANGUL JUNGSEONG FILLER	[3D89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160, 0x003F };
    uint32_t const ces[9] = { 0x3D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_460)
{
    // 3164 003F;	
    // (ㅤ) HANGUL FILLER	[3D89 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3164, 0x003F };
    uint32_t const ces[9] = { 0x3D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_461)
{
    // FFA0 003F;	
    // (ﾠ) HALFWIDTH HANGUL FILLER	[3D89 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFA0, 0x003F };
    uint32_t const ces[9] = { 0x3D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_462)
{
    // 1160 0061;	
    // (ᅠ) HANGUL JUNGSEONG FILLER	[3D89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160, 0x0061 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_463)
{
    // 1160 0041;	
    // (ᅠ) HANGUL JUNGSEONG FILLER	[3D89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160, 0x0041 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_464)
{
    // 3164 0061;	
    // (ㅤ) HANGUL FILLER	[3D89 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3164, 0x0061 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_465)
{
    // 3164 0041;	
    // (ㅤ) HANGUL FILLER	[3D89 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3164, 0x0041 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_466)
{
    // FFA0 0061;	
    // (ﾠ) HALFWIDTH HANGUL FILLER	[3D89 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFA0, 0x0061 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_467)
{
    // FFA0 0041;	
    // (ﾠ) HALFWIDTH HANGUL FILLER	[3D89 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFA0, 0x0041 };
    uint32_t const ces[9] = { 0x3D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_468)
{
    // 1160 0062;	
    // (ᅠ) HANGUL JUNGSEONG FILLER	[3D89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160, 0x0062 };
    uint32_t const ces[9] = { 0x3D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_469)
{
    // 3164 0062;	
    // (ㅤ) HANGUL FILLER	[3D89 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3164, 0x0062 };
    uint32_t const ces[9] = { 0x3D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_470)
{
    // FFA0 0062;	
    // (ﾠ) HALFWIDTH HANGUL FILLER	[3D89 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFA0, 0x0062 };
    uint32_t const ces[9] = { 0x3D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_471)
{
    // 1161 0021;	
    // (ᅡ) HANGUL JUNGSEONG A	[3D8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161, 0x0021 };
    uint32_t const ces[9] = { 0x3D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_472)
{
    // 314F 0021;	
    // (ㅏ) HANGUL LETTER A	[3D8A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x314F, 0x0021 };
    uint32_t const ces[9] = { 0x3D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_473)
{
    // FFC2 0021;	
    // (ￂ) HALFWIDTH HANGUL LETTER A	[3D8A 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC2, 0x0021 };
    uint32_t const ces[9] = { 0x3D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_474)
{
    // 1161 003F;	
    // (ᅡ) HANGUL JUNGSEONG A	[3D8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161, 0x003F };
    uint32_t const ces[9] = { 0x3D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_475)
{
    // 314F 003F;	
    // (ㅏ) HANGUL LETTER A	[3D8A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x314F, 0x003F };
    uint32_t const ces[9] = { 0x3D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_476)
{
    // FFC2 003F;	
    // (ￂ) HALFWIDTH HANGUL LETTER A	[3D8A 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC2, 0x003F };
    uint32_t const ces[9] = { 0x3D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_477)
{
    // 1161 0061;	
    // (ᅡ) HANGUL JUNGSEONG A	[3D8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161, 0x0061 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_478)
{
    // 1161 0041;	
    // (ᅡ) HANGUL JUNGSEONG A	[3D8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161, 0x0041 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_479)
{
    // 314F 0061;	
    // (ㅏ) HANGUL LETTER A	[3D8A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x314F, 0x0061 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_480)
{
    // 314F 0041;	
    // (ㅏ) HANGUL LETTER A	[3D8A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x314F, 0x0041 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_481)
{
    // FFC2 0061;	
    // (ￂ) HALFWIDTH HANGUL LETTER A	[3D8A 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC2, 0x0061 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_482)
{
    // FFC2 0041;	
    // (ￂ) HALFWIDTH HANGUL LETTER A	[3D8A 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFC2, 0x0041 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_483)
{
    // 1161 0062;	
    // (ᅡ) HANGUL JUNGSEONG A	[3D8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161, 0x0062 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_484)
{
    // 314F 0062;	
    // (ㅏ) HANGUL LETTER A	[3D8A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x314F, 0x0062 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_485)
{
    // FFC2 0062;	
    // (ￂ) HALFWIDTH HANGUL LETTER A	[3D8A 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC2, 0x0062 };
    uint32_t const ces[9] = { 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_486)
{
    // 1162 0021;	
    // (ᅢ) HANGUL JUNGSEONG AE	[3D8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162, 0x0021 };
    uint32_t const ces[9] = { 0x3D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_487)
{
    // 3150 0021;	
    // (ㅐ) HANGUL LETTER AE	[3D8B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3150, 0x0021 };
    uint32_t const ces[9] = { 0x3D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_488)
{
    // FFC3 0021;	
    // (ￃ) HALFWIDTH HANGUL LETTER AE	[3D8B 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC3, 0x0021 };
    uint32_t const ces[9] = { 0x3D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_489)
{
    // 1162 003F;	
    // (ᅢ) HANGUL JUNGSEONG AE	[3D8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162, 0x003F };
    uint32_t const ces[9] = { 0x3D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_490)
{
    // 3150 003F;	
    // (ㅐ) HANGUL LETTER AE	[3D8B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3150, 0x003F };
    uint32_t const ces[9] = { 0x3D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_491)
{
    // FFC3 003F;	
    // (ￃ) HALFWIDTH HANGUL LETTER AE	[3D8B 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC3, 0x003F };
    uint32_t const ces[9] = { 0x3D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_492)
{
    // 1162 0061;	
    // (ᅢ) HANGUL JUNGSEONG AE	[3D8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162, 0x0061 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_493)
{
    // 1162 0041;	
    // (ᅢ) HANGUL JUNGSEONG AE	[3D8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162, 0x0041 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_494)
{
    // 3150 0061;	
    // (ㅐ) HANGUL LETTER AE	[3D8B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3150, 0x0061 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_495)
{
    // 3150 0041;	
    // (ㅐ) HANGUL LETTER AE	[3D8B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3150, 0x0041 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_496)
{
    // FFC3 0061;	
    // (ￃ) HALFWIDTH HANGUL LETTER AE	[3D8B 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFC3, 0x0061 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_497)
{
    // FFC3 0041;	
    // (ￃ) HALFWIDTH HANGUL LETTER AE	[3D8B 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFC3, 0x0041 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_498)
{
    // 1162 0062;	
    // (ᅢ) HANGUL JUNGSEONG AE	[3D8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162, 0x0062 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_242_499)
{
    // 3150 0062;	
    // (ㅐ) HANGUL LETTER AE	[3D8B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3150, 0x0062 };
    uint32_t const ces[9] = { 0x3D8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

