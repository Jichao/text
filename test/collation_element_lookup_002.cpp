// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_002_000)
{
    // 0128  ; [.1D98.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER I WITH TILDE

    uint32_t const cps[1] = { 0x128 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_001)
{
    // 0129  ; [.1D98.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER I WITH TILDE

    uint32_t const cps[1] = { 0x129 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_002)
{
    // 012A  ; [.1D98.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER I WITH MACRON

    uint32_t const cps[1] = { 0x12a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_003)
{
    // 012B  ; [.1D98.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER I WITH MACRON

    uint32_t const cps[1] = { 0x12b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_004)
{
    // 012C  ; [.1D98.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER I WITH BREVE

    uint32_t const cps[1] = { 0x12c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_005)
{
    // 012D  ; [.1D98.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER I WITH BREVE

    uint32_t const cps[1] = { 0x12d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_006)
{
    // 012E  ; [.1D98.0020.0008][.0000.0031.0002] 
    // LATIN CAPITAL LETTER I WITH OGONEK

    uint32_t const cps[1] = { 0x12e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_007)
{
    // 012F  ; [.1D98.0020.0002][.0000.0031.0002] 
    // LATIN SMALL LETTER I WITH OGONEK

    uint32_t const cps[1] = { 0x12f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_008)
{
    // 0130  ; [.1D98.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER I WITH DOT ABOVE

    uint32_t const cps[1] = { 0x130 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_009)
{
    // 0131  ; [.1D9C.0020.0002] 
    // LATIN SMALL LETTER DOTLESS I

    uint32_t const cps[1] = { 0x131 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_010)
{
    // 0132  ; [.1D98.0020.000A][.1DB2.0020.000A] 
    // LATIN CAPITAL LIGATURE IJ

    uint32_t const cps[1] = { 0x132 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_011)
{
    // 0133  ; [.1D98.0020.0004][.1DB2.0020.0004] 
    // LATIN SMALL LIGATURE IJ

    uint32_t const cps[1] = { 0x133 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_012)
{
    // 0134  ; [.1DB2.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER J WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x134 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_013)
{
    // 0135  ; [.1DB2.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER J WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x135 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_014)
{
    // 0136  ; [.1DCB.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER K WITH CEDILLA

    uint32_t const cps[1] = { 0x136 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_015)
{
    // 0137  ; [.1DCB.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER K WITH CEDILLA

    uint32_t const cps[1] = { 0x137 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_016)
{
    // 0138  ; [.1E95.0020.0002] 
    // LATIN SMALL LETTER KRA

    uint32_t const cps[1] = { 0x138 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_017)
{
    // 0139  ; [.1DDD.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER L WITH ACUTE

    uint32_t const cps[1] = { 0x139 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_018)
{
    // 013A  ; [.1DDD.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER L WITH ACUTE

    uint32_t const cps[1] = { 0x13a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_019)
{
    // 013B  ; [.1DDD.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER L WITH CEDILLA

    uint32_t const cps[1] = { 0x13b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_020)
{
    // 013C  ; [.1DDD.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER L WITH CEDILLA

    uint32_t const cps[1] = { 0x13c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_021)
{
    // 013D  ; [.1DDD.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER L WITH CARON

    uint32_t const cps[1] = { 0x13d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_022)
{
    // 013E  ; [.1DDD.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER L WITH CARON

    uint32_t const cps[1] = { 0x13e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_023)
{
    // 013F  ; [.1DDD.0020.0008][.0000.0111.0002] 
    // LATIN CAPITAL LETTER L WITH MIDDLE DOT

    uint32_t const cps[1] = { 0x13f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_024)
{
    // 0140  ; [.1DDD.0020.0002][.0000.0111.0002] 
    // LATIN SMALL LETTER L WITH MIDDLE DOT

    uint32_t const cps[1] = { 0x140 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_025)
{
    // 0141  ; [.1DDD.0020.0008][.0000.0039.0002] 
    // LATIN CAPITAL LETTER L WITH STROKE

    uint32_t const cps[1] = { 0x141 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_026)
{
    // 0142  ; [.1DDD.0020.0002][.0000.0039.0002] 
    // LATIN SMALL LETTER L WITH STROKE

    uint32_t const cps[1] = { 0x142 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_027)
{
    // 0143  ; [.1E1F.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER N WITH ACUTE

    uint32_t const cps[1] = { 0x143 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_028)
{
    // 0144  ; [.1E1F.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER N WITH ACUTE

    uint32_t const cps[1] = { 0x144 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_029)
{
    // 0145  ; [.1E1F.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER N WITH CEDILLA

    uint32_t const cps[1] = { 0x145 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_030)
{
    // 0146  ; [.1E1F.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER N WITH CEDILLA

    uint32_t const cps[1] = { 0x146 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_031)
{
    // 0147  ; [.1E1F.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER N WITH CARON

    uint32_t const cps[1] = { 0x147 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_032)
{
    // 0148  ; [.1E1F.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER N WITH CARON

    uint32_t const cps[1] = { 0x148 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_033)
{
    // 0149  ; [.1FE4.0020.0004][.1E1F.0020.0004] 
    // LATIN SMALL LETTER N PRECEDED BY APOSTROPHE

    uint32_t const cps[1] = { 0x149 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1fe4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_034)
{
    // 014A  ; [.1E3E.0020.0008] 
    // LATIN CAPITAL LETTER ENG

    uint32_t const cps[1] = { 0x14a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e3e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_035)
{
    // 014B  ; [.1E3E.0020.0002] 
    // LATIN SMALL LETTER ENG

    uint32_t const cps[1] = { 0x14b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_036)
{
    // 014C  ; [.1E43.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER O WITH MACRON

    uint32_t const cps[1] = { 0x14c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_037)
{
    // 014D  ; [.1E43.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER O WITH MACRON

    uint32_t const cps[1] = { 0x14d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_038)
{
    // 014E  ; [.1E43.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER O WITH BREVE

    uint32_t const cps[1] = { 0x14e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_039)
{
    // 014F  ; [.1E43.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER O WITH BREVE

    uint32_t const cps[1] = { 0x14f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_040)
{
    // 0150  ; [.1E43.0020.0008][.0000.002C.0002] 
    // LATIN CAPITAL LETTER O WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x150 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_041)
{
    // 0151  ; [.1E43.0020.0002][.0000.002C.0002] 
    // LATIN SMALL LETTER O WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x151 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_042)
{
    // 0152  ; [.1E43.0020.000A][.0000.0111.0004][.1D10.0020.000A] 
    // LATIN CAPITAL LIGATURE OE

    uint32_t const cps[1] = { 0x152 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_002_043)
{
    // 0153  ; [.1E43.0020.0004][.0000.0111.0004][.1D10.0020.0004] 
    // LATIN SMALL LIGATURE OE

    uint32_t const cps[1] = { 0x153 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_002_044)
{
    // 0154  ; [.1E99.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER R WITH ACUTE

    uint32_t const cps[1] = { 0x154 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_045)
{
    // 0155  ; [.1E99.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER R WITH ACUTE

    uint32_t const cps[1] = { 0x155 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_046)
{
    // 0156  ; [.1E99.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER R WITH CEDILLA

    uint32_t const cps[1] = { 0x156 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_047)
{
    // 0157  ; [.1E99.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER R WITH CEDILLA

    uint32_t const cps[1] = { 0x157 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_048)
{
    // 0158  ; [.1E99.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER R WITH CARON

    uint32_t const cps[1] = { 0x158 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_049)
{
    // 0159  ; [.1E99.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER R WITH CARON

    uint32_t const cps[1] = { 0x159 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_050)
{
    // 015A  ; [.1ED7.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER S WITH ACUTE

    uint32_t const cps[1] = { 0x15a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_051)
{
    // 015B  ; [.1ED7.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER S WITH ACUTE

    uint32_t const cps[1] = { 0x15b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_052)
{
    // 015C  ; [.1ED7.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER S WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x15c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_053)
{
    // 015D  ; [.1ED7.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER S WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x15d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_054)
{
    // 015E  ; [.1ED7.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER S WITH CEDILLA

    uint32_t const cps[1] = { 0x15e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_055)
{
    // 015F  ; [.1ED7.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER S WITH CEDILLA

    uint32_t const cps[1] = { 0x15f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_056)
{
    // 0160  ; [.1ED7.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER S WITH CARON

    uint32_t const cps[1] = { 0x160 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_057)
{
    // 0161  ; [.1ED7.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER S WITH CARON

    uint32_t const cps[1] = { 0x161 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_058)
{
    // 0162  ; [.1EFB.0020.0008][.0000.0030.0002] 
    // LATIN CAPITAL LETTER T WITH CEDILLA

    uint32_t const cps[1] = { 0x162 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_059)
{
    // 0163  ; [.1EFB.0020.0002][.0000.0030.0002] 
    // LATIN SMALL LETTER T WITH CEDILLA

    uint32_t const cps[1] = { 0x163 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_060)
{
    // 0164  ; [.1EFB.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER T WITH CARON

    uint32_t const cps[1] = { 0x164 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_061)
{
    // 0165  ; [.1EFB.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER T WITH CARON

    uint32_t const cps[1] = { 0x165 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_062)
{
    // 0166  ; [.1F00.0020.0008] 
    // LATIN CAPITAL LETTER T WITH STROKE

    uint32_t const cps[1] = { 0x166 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f00), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_063)
{
    // 0167  ; [.1F00.0020.0002] 
    // LATIN SMALL LETTER T WITH STROKE

    uint32_t const cps[1] = { 0x167 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_064)
{
    // 0168  ; [.1F1B.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER U WITH TILDE

    uint32_t const cps[1] = { 0x168 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_065)
{
    // 0169  ; [.1F1B.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER U WITH TILDE

    uint32_t const cps[1] = { 0x169 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_066)
{
    // 016A  ; [.1F1B.0020.0008][.0000.0032.0002] 
    // LATIN CAPITAL LETTER U WITH MACRON

    uint32_t const cps[1] = { 0x16a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_067)
{
    // 016B  ; [.1F1B.0020.0002][.0000.0032.0002] 
    // LATIN SMALL LETTER U WITH MACRON

    uint32_t const cps[1] = { 0x16b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_068)
{
    // 016C  ; [.1F1B.0020.0008][.0000.0026.0002] 
    // LATIN CAPITAL LETTER U WITH BREVE

    uint32_t const cps[1] = { 0x16c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_069)
{
    // 016D  ; [.1F1B.0020.0002][.0000.0026.0002] 
    // LATIN SMALL LETTER U WITH BREVE

    uint32_t const cps[1] = { 0x16d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_070)
{
    // 016E  ; [.1F1B.0020.0008][.0000.0029.0002] 
    // LATIN CAPITAL LETTER U WITH RING ABOVE

    uint32_t const cps[1] = { 0x16e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_071)
{
    // 016F  ; [.1F1B.0020.0002][.0000.0029.0002] 
    // LATIN SMALL LETTER U WITH RING ABOVE

    uint32_t const cps[1] = { 0x16f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_072)
{
    // 0170  ; [.1F1B.0020.0008][.0000.002C.0002] 
    // LATIN CAPITAL LETTER U WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x170 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_073)
{
    // 0171  ; [.1F1B.0020.0002][.0000.002C.0002] 
    // LATIN SMALL LETTER U WITH DOUBLE ACUTE

    uint32_t const cps[1] = { 0x171 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_074)
{
    // 0172  ; [.1F1B.0020.0008][.0000.0031.0002] 
    // LATIN CAPITAL LETTER U WITH OGONEK

    uint32_t const cps[1] = { 0x172 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_075)
{
    // 0173  ; [.1F1B.0020.0002][.0000.0031.0002] 
    // LATIN SMALL LETTER U WITH OGONEK

    uint32_t const cps[1] = { 0x173 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_076)
{
    // 0174  ; [.1F5B.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER W WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x174 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_077)
{
    // 0175  ; [.1F5B.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER W WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x175 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_078)
{
    // 0176  ; [.1F71.0020.0008][.0000.0027.0002] 
    // LATIN CAPITAL LETTER Y WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x176 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_079)
{
    // 0177  ; [.1F71.0020.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER Y WITH CIRCUMFLEX

    uint32_t const cps[1] = { 0x177 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_080)
{
    // 0178  ; [.1F71.0020.0008][.0000.002B.0002] 
    // LATIN CAPITAL LETTER Y WITH DIAERESIS

    uint32_t const cps[1] = { 0x178 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_081)
{
    // 0179  ; [.1F87.0020.0008][.0000.0024.0002] 
    // LATIN CAPITAL LETTER Z WITH ACUTE

    uint32_t const cps[1] = { 0x179 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_082)
{
    // 017A  ; [.1F87.0020.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER Z WITH ACUTE

    uint32_t const cps[1] = { 0x17a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_083)
{
    // 017B  ; [.1F87.0020.0008][.0000.002E.0002] 
    // LATIN CAPITAL LETTER Z WITH DOT ABOVE

    uint32_t const cps[1] = { 0x17b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_084)
{
    // 017C  ; [.1F87.0020.0002][.0000.002E.0002] 
    // LATIN SMALL LETTER Z WITH DOT ABOVE

    uint32_t const cps[1] = { 0x17c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_085)
{
    // 017D  ; [.1F87.0020.0008][.0000.0028.0002] 
    // LATIN CAPITAL LETTER Z WITH CARON

    uint32_t const cps[1] = { 0x17d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_086)
{
    // 017E  ; [.1F87.0020.0002][.0000.0028.0002] 
    // LATIN SMALL LETTER Z WITH CARON

    uint32_t const cps[1] = { 0x17e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_087)
{
    // 017F  ; [.1ED7.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER LONG S

    uint32_t const cps[1] = { 0x17f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_088)
{
    // 0180  ; [.1CCE.0020.0002] 
    // LATIN SMALL LETTER B WITH STROKE

    uint32_t const cps[1] = { 0x180 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_089)
{
    // 0181  ; [.1CD7.0020.0008] 
    // LATIN CAPITAL LETTER B WITH HOOK

    uint32_t const cps[1] = { 0x181 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cd7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_090)
{
    // 0182  ; [.1CDB.0020.0008] 
    // LATIN CAPITAL LETTER B WITH TOPBAR

    uint32_t const cps[1] = { 0x182 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cdb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_091)
{
    // 0183  ; [.1CDB.0020.0002] 
    // LATIN SMALL LETTER B WITH TOPBAR

    uint32_t const cps[1] = { 0x183 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_092)
{
    // 0184  ; [.1FD7.0020.0008] 
    // LATIN CAPITAL LETTER TONE SIX

    uint32_t const cps[1] = { 0x184 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fd7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_093)
{
    // 0185  ; [.1FD7.0020.0002] 
    // LATIN SMALL LETTER TONE SIX

    uint32_t const cps[1] = { 0x185 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_094)
{
    // 0186  ; [.1E56.0020.0008] 
    // LATIN CAPITAL LETTER OPEN O

    uint32_t const cps[1] = { 0x186 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e56), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_095)
{
    // 0187  ; [.1CEB.0020.0008] 
    // LATIN CAPITAL LETTER C WITH HOOK

    uint32_t const cps[1] = { 0x187 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ceb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_096)
{
    // 0188  ; [.1CEB.0020.0002] 
    // LATIN SMALL LETTER C WITH HOOK

    uint32_t const cps[1] = { 0x188 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ceb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_097)
{
    // 0189  ; [.1CFD.0020.0008] 
    // LATIN CAPITAL LETTER AFRICAN D

    uint32_t const cps[1] = { 0x189 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cfd), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_098)
{
    // 018A  ; [.1D01.0020.0008] 
    // LATIN CAPITAL LETTER D WITH HOOK

    uint32_t const cps[1] = { 0x18a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d01), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_099)
{
    // 018B  ; [.1D06.0020.0008] 
    // LATIN CAPITAL LETTER D WITH TOPBAR

    uint32_t const cps[1] = { 0x18b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d06), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_100)
{
    // 018C  ; [.1D06.0020.0002] 
    // LATIN SMALL LETTER D WITH TOPBAR

    uint32_t const cps[1] = { 0x18c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_101)
{
    // 018D  ; [.1F87.0020.0004][.1F5B.0020.0004] 
    // LATIN SMALL LETTER TURNED DELTA

    uint32_t const cps[1] = { 0x18d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_102)
{
    // 018E  ; [.1D1E.0020.0008] 
    // LATIN CAPITAL LETTER REVERSED E

    uint32_t const cps[1] = { 0x18e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d1e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_103)
{
    // 018F  ; [.1D23.0020.0008] 
    // LATIN CAPITAL LETTER SCHWA

    uint32_t const cps[1] = { 0x18f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d23), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_104)
{
    // 0190  ; [.1D28.0020.0008] 
    // LATIN CAPITAL LETTER OPEN E

    uint32_t const cps[1] = { 0x190 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d28), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_105)
{
    // 0191  ; [.1D54.0020.0008] 
    // LATIN CAPITAL LETTER F WITH HOOK

    uint32_t const cps[1] = { 0x191 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d54), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_106)
{
    // 0192  ; [.1D54.0020.0002] 
    // LATIN SMALL LETTER F WITH HOOK

    uint32_t const cps[1] = { 0x192 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_107)
{
    // 0193  ; [.1D6C.0020.0008] 
    // LATIN CAPITAL LETTER G WITH HOOK

    uint32_t const cps[1] = { 0x193 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d6c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_108)
{
    // 0194  ; [.1D76.0020.0008] 
    // LATIN CAPITAL LETTER GAMMA

    uint32_t const cps[1] = { 0x194 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d76), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_109)
{
    // 0195  ; [.1D86.0020.0002] 
    // LATIN SMALL LETTER HV

    uint32_t const cps[1] = { 0x195 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_110)
{
    // 0196  ; [.1DAD.0020.0008] 
    // LATIN CAPITAL LETTER IOTA

    uint32_t const cps[1] = { 0x196 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dad), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_111)
{
    // 0197  ; [.1DA7.0020.0008] 
    // LATIN CAPITAL LETTER I WITH STROKE

    uint32_t const cps[1] = { 0x197 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_112)
{
    // 0198  ; [.1DD1.0020.0008] 
    // LATIN CAPITAL LETTER K WITH HOOK

    uint32_t const cps[1] = { 0x198 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd1), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_113)
{
    // 0199  ; [.1DD1.0020.0002] 
    // LATIN SMALL LETTER K WITH HOOK

    uint32_t const cps[1] = { 0x199 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_114)
{
    // 019A  ; [.1DE8.0020.0002] 
    // LATIN SMALL LETTER L WITH BAR

    uint32_t const cps[1] = { 0x19a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_115)
{
    // 019B  ; [.1E08.0020.0002] 
    // LATIN SMALL LETTER LAMBDA WITH STROKE

    uint32_t const cps[1] = { 0x19b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_116)
{
    // 019C  ; [.1F3A.0020.0008] 
    // LATIN CAPITAL LETTER TURNED M

    uint32_t const cps[1] = { 0x19c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f3a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_117)
{
    // 019D  ; [.1E2A.0020.0008] 
    // LATIN CAPITAL LETTER N WITH LEFT HOOK

    uint32_t const cps[1] = { 0x19d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e2a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_118)
{
    // 019E  ; [.1E2E.0020.0002] 
    // LATIN SMALL LETTER N WITH LONG RIGHT LEG

    uint32_t const cps[1] = { 0x19e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_119)
{
    // 019F  ; [.1E63.0020.0008] 
    // LATIN CAPITAL LETTER O WITH MIDDLE TILDE

    uint32_t const cps[1] = { 0x19f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e63), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_120)
{
    // 01A0  ; [.1E43.0020.0008][.0000.003F.0002] 
    // LATIN CAPITAL LETTER O WITH HORN

    uint32_t const cps[1] = { 0x1a0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_121)
{
    // 01A1  ; [.1E43.0020.0002][.0000.003F.0002] 
    // LATIN SMALL LETTER O WITH HORN

    uint32_t const cps[1] = { 0x1a1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_122)
{
    // 01A2  ; [.1D7A.0020.0008] 
    // LATIN CAPITAL LETTER OI

    uint32_t const cps[1] = { 0x1a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_123)
{
    // 01A3  ; [.1D7A.0020.0002] 
    // LATIN SMALL LETTER OI

    uint32_t const cps[1] = { 0x1a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_124)
{
    // 01A4  ; [.1E7B.0020.0008] 
    // LATIN CAPITAL LETTER P WITH HOOK

    uint32_t const cps[1] = { 0x1a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e7b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_125)
{
    // 01A5  ; [.1E7B.0020.0002] 
    // LATIN SMALL LETTER P WITH HOOK

    uint32_t const cps[1] = { 0x1a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_126)
{
    // 01A6  ; [.1E9E.0020.0008] 
    // LATIN LETTER YR

    uint32_t const cps[1] = { 0x1a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e9e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_127)
{
    // 01A7  ; [.1FCF.0020.0008] 
    // LATIN CAPITAL LETTER TONE TWO

    uint32_t const cps[1] = { 0x1a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcf), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_128)
{
    // 01A8  ; [.1FCF.0020.0002] 
    // LATIN SMALL LETTER TONE TWO

    uint32_t const cps[1] = { 0x1a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_129)
{
    // 01A9  ; [.1EE8.0020.0008] 
    // LATIN CAPITAL LETTER ESH

    uint32_t const cps[1] = { 0x1a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ee8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_130)
{
    // 01AA  ; [.1EEE.0020.0002] 
    // LATIN LETTER REVERSED ESH LOOP

    uint32_t const cps[1] = { 0x1aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1eee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_131)
{
    // 01AB  ; [.1F06.0020.0002] 
    // LATIN SMALL LETTER T WITH PALATAL HOOK

    uint32_t const cps[1] = { 0x1ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_132)
{
    // 01AC  ; [.1F0A.0020.0008] 
    // LATIN CAPITAL LETTER T WITH HOOK

    uint32_t const cps[1] = { 0x1ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f0a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_133)
{
    // 01AD  ; [.1F0A.0020.0002] 
    // LATIN SMALL LETTER T WITH HOOK

    uint32_t const cps[1] = { 0x1ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_134)
{
    // 01AE  ; [.1F0E.0020.0008] 
    // LATIN CAPITAL LETTER T WITH RETROFLEX HOOK

    uint32_t const cps[1] = { 0x1ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f0e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_135)
{
    // 01AF  ; [.1F1B.0020.0008][.0000.003F.0002] 
    // LATIN CAPITAL LETTER U WITH HORN

    uint32_t const cps[1] = { 0x1af };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_136)
{
    // 01B0  ; [.1F1B.0020.0002][.0000.003F.0002] 
    // LATIN SMALL LETTER U WITH HORN

    uint32_t const cps[1] = { 0x1b0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_002_137)
{
    // 01B1  ; [.1F44.0020.0008] 
    // LATIN CAPITAL LETTER UPSILON

    uint32_t const cps[1] = { 0x1b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f44), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_138)
{
    // 01B2  ; [.1F50.0020.0008] 
    // LATIN CAPITAL LETTER V WITH HOOK

    uint32_t const cps[1] = { 0x1b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f50), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_139)
{
    // 01B3  ; [.1F7D.0020.0008] 
    // LATIN CAPITAL LETTER Y WITH HOOK

    uint32_t const cps[1] = { 0x1b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f7d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_140)
{
    // 01B4  ; [.1F7D.0020.0002] 
    // LATIN SMALL LETTER Y WITH HOOK

    uint32_t const cps[1] = { 0x1b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_141)
{
    // 01B5  ; [.1F8C.0020.0008] 
    // LATIN CAPITAL LETTER Z WITH STROKE

    uint32_t const cps[1] = { 0x1b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f8c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_142)
{
    // 01B6  ; [.1F8C.0020.0002] 
    // LATIN SMALL LETTER Z WITH STROKE

    uint32_t const cps[1] = { 0x1b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_143)
{
    // 01B7  ; [.1FA4.0020.0008] 
    // LATIN CAPITAL LETTER EZH

    uint32_t const cps[1] = { 0x1b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_144)
{
    // 01B8  ; [.1FA9.0020.0008] 
    // LATIN CAPITAL LETTER EZH REVERSED

    uint32_t const cps[1] = { 0x1b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_145)
{
    // 01B9  ; [.1FA9.0020.0002] 
    // LATIN SMALL LETTER EZH REVERSED

    uint32_t const cps[1] = { 0x1b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_146)
{
    // 01BA  ; [.1FAE.0020.0002] 
    // LATIN SMALL LETTER EZH WITH TAIL

    uint32_t const cps[1] = { 0x1ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_147)
{
    // 01BB  ; [.1FC8.0020.0002] 
    // LATIN LETTER TWO WITH STROKE

    uint32_t const cps[1] = { 0x1bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_148)
{
    // 01BC  ; [.1FD3.0020.0008] 
    // LATIN CAPITAL LETTER TONE FIVE

    uint32_t const cps[1] = { 0x1bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fd3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_002_149)
{
    // 01BD  ; [.1FD3.0020.0002] 
    // LATIN SMALL LETTER TONE FIVE

    uint32_t const cps[1] = { 0x1bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

