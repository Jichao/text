// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_315_000)
{
    // 2E89 003F;	
    // (⺉) CJK RADICAL KNIFE TWO	[FB40 D202 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E89, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_001)
{
    // 2E89 0061;	
    // (⺉) CJK RADICAL KNIFE TWO	[FB40 D202 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E89, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_002)
{
    // 2E89 0041;	
    // (⺉) CJK RADICAL KNIFE TWO	[FB40 D202 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E89, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_003)
{
    // 2E89 0062;	
    // (⺉) CJK RADICAL KNIFE TWO	[FB40 D202 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E89, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_004)
{
    // 2F81E 0021;	
    // (刃) CJK COMPATIBILITY IDEOGRAPH-2F81E	[FB40 D203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_005)
{
    // 2F81E 003F;	
    // (刃) CJK COMPATIBILITY IDEOGRAPH-2F81E	[FB40 D203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_006)
{
    // 2F81E 0061;	
    // (刃) CJK COMPATIBILITY IDEOGRAPH-2F81E	[FB40 D203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_007)
{
    // 2F81E 0041;	
    // (刃) CJK COMPATIBILITY IDEOGRAPH-2F81E	[FB40 D203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F81E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_008)
{
    // 2F81E 0062;	
    // (刃) CJK COMPATIBILITY IDEOGRAPH-2F81E	[FB40 D203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_009)
{
    // FA00 0021;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-FA00	[FB40 D207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA00, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_010)
{
    // 2F850 0021;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-2F850	[FB40 D207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F850, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_011)
{
    // FA00 003F;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-FA00	[FB40 D207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA00, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_012)
{
    // 2F850 003F;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-2F850	[FB40 D207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F850, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_013)
{
    // FA00 0061;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-FA00	[FB40 D207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA00, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_014)
{
    // 2F850 0061;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-2F850	[FB40 D207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F850, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_015)
{
    // FA00 0041;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-FA00	[FB40 D207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA00, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_016)
{
    // 2F850 0041;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-2F850	[FB40 D207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F850, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_017)
{
    // FA00 0062;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-FA00	[FB40 D207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA00, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_018)
{
    // 2F850 0062;	
    // (切) CJK COMPATIBILITY IDEOGRAPH-2F850	[FB40 D207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F850, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_019)
{
    // F99C 0021;	
    // (列) CJK COMPATIBILITY IDEOGRAPH-F99C	[FB40 D217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_020)
{
    // F99C 003F;	
    // (列) CJK COMPATIBILITY IDEOGRAPH-F99C	[FB40 D217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_021)
{
    // F99C 0061;	
    // (列) CJK COMPATIBILITY IDEOGRAPH-F99C	[FB40 D217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_022)
{
    // F99C 0041;	
    // (列) CJK COMPATIBILITY IDEOGRAPH-F99C	[FB40 D217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF99C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_023)
{
    // F99C 0062;	
    // (列) CJK COMPATIBILITY IDEOGRAPH-F99C	[FB40 D217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_024)
{
    // 1F220 0021;	
    // (🈠) SQUARED CJK UNIFIED IDEOGRAPH-521D	[FB40 D21D 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F220, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD21D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_025)
{
    // 1F220 003F;	
    // (🈠) SQUARED CJK UNIFIED IDEOGRAPH-521D	[FB40 D21D 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F220, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD21D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_026)
{
    // 1F220 0061;	
    // (🈠) SQUARED CJK UNIFIED IDEOGRAPH-521D	[FB40 D21D 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F220, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD21D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_027)
{
    // 1F220 0041;	
    // (🈠) SQUARED CJK UNIFIED IDEOGRAPH-521D	[FB40 D21D 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F220, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD21D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_028)
{
    // 1F220 0062;	
    // (🈠) SQUARED CJK UNIFIED IDEOGRAPH-521D	[FB40 D21D 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F220, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD21D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_029)
{
    // F9DD 0021;	
    // (利) CJK COMPATIBILITY IDEOGRAPH-F9DD	[FB40 D229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_030)
{
    // F9DD 003F;	
    // (利) CJK COMPATIBILITY IDEOGRAPH-F9DD	[FB40 D229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_031)
{
    // F9DD 0061;	
    // (利) CJK COMPATIBILITY IDEOGRAPH-F9DD	[FB40 D229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_032)
{
    // F9DD 0041;	
    // (利) CJK COMPATIBILITY IDEOGRAPH-F9DD	[FB40 D229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_033)
{
    // F9DD 0062;	
    // (利) CJK COMPATIBILITY IDEOGRAPH-F9DD	[FB40 D229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_034)
{
    // F9FF 0021;	
    // (刺) CJK COMPATIBILITY IDEOGRAPH-F9FF	[FB40 D23A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD23A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_035)
{
    // F9FF 003F;	
    // (刺) CJK COMPATIBILITY IDEOGRAPH-F9FF	[FB40 D23A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD23A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_036)
{
    // F9FF 0061;	
    // (刺) CJK COMPATIBILITY IDEOGRAPH-F9FF	[FB40 D23A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD23A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_037)
{
    // F9FF 0041;	
    // (刺) CJK COMPATIBILITY IDEOGRAPH-F9FF	[FB40 D23A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD23A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_038)
{
    // F9FF 0062;	
    // (刺) CJK COMPATIBILITY IDEOGRAPH-F9FF	[FB40 D23A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD23A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_039)
{
    // 2F820 0021;	
    // (刻) CJK COMPATIBILITY IDEOGRAPH-2F820	[FB40 D23B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F820, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD23B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_040)
{
    // 2F820 003F;	
    // (刻) CJK COMPATIBILITY IDEOGRAPH-2F820	[FB40 D23B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F820, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD23B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_041)
{
    // 2F820 0061;	
    // (刻) CJK COMPATIBILITY IDEOGRAPH-2F820	[FB40 D23B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F820, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_042)
{
    // 2F820 0041;	
    // (刻) CJK COMPATIBILITY IDEOGRAPH-2F820	[FB40 D23B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F820, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_043)
{
    // 2F820 0062;	
    // (刻) CJK COMPATIBILITY IDEOGRAPH-2F820	[FB40 D23B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F820, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD23B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_044)
{
    // 2F821 0021;	
    // (剆) CJK COMPATIBILITY IDEOGRAPH-2F821	[FB40 D246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F821, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_045)
{
    // 2F821 003F;	
    // (剆) CJK COMPATIBILITY IDEOGRAPH-2F821	[FB40 D246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F821, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_046)
{
    // 2F821 0061;	
    // (剆) CJK COMPATIBILITY IDEOGRAPH-2F821	[FB40 D246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F821, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_047)
{
    // 2F821 0041;	
    // (剆) CJK COMPATIBILITY IDEOGRAPH-2F821	[FB40 D246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F821, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_048)
{
    // 2F821 0062;	
    // (剆) CJK COMPATIBILITY IDEOGRAPH-2F821	[FB40 D246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F821, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_049)
{
    // 1F21C 0021;	
    // (🈜) SQUARED CJK UNIFIED IDEOGRAPH-524D	[FB40 D24D 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD24D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_050)
{
    // 1F21C 003F;	
    // (🈜) SQUARED CJK UNIFIED IDEOGRAPH-524D	[FB40 D24D 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD24D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_051)
{
    // 1F21C 0061;	
    // (🈜) SQUARED CJK UNIFIED IDEOGRAPH-524D	[FB40 D24D 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD24D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_052)
{
    // 1F21C 0041;	
    // (🈜) SQUARED CJK UNIFIED IDEOGRAPH-524D	[FB40 D24D 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD24D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_053)
{
    // 1F21C 0062;	
    // (🈜) SQUARED CJK UNIFIED IDEOGRAPH-524D	[FB40 D24D 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD24D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_054)
{
    // 2F822 0021;	
    // (割) CJK COMPATIBILITY IDEOGRAPH-2F822	[FB40 D272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F822, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_055)
{
    // 1F239 0021;	
    // (🈹) SQUARED CJK UNIFIED IDEOGRAPH-5272	[FB40 D272 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F239, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_056)
{
    // 2F822 003F;	
    // (割) CJK COMPATIBILITY IDEOGRAPH-2F822	[FB40 D272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F822, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_057)
{
    // 1F239 003F;	
    // (🈹) SQUARED CJK UNIFIED IDEOGRAPH-5272	[FB40 D272 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F239, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_058)
{
    // 2F822 0061;	
    // (割) CJK COMPATIBILITY IDEOGRAPH-2F822	[FB40 D272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F822, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_059)
{
    // 2F822 0041;	
    // (割) CJK COMPATIBILITY IDEOGRAPH-2F822	[FB40 D272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F822, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_060)
{
    // 1F239 0061;	
    // (🈹) SQUARED CJK UNIFIED IDEOGRAPH-5272	[FB40 D272 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F239, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_061)
{
    // 1F239 0041;	
    // (🈹) SQUARED CJK UNIFIED IDEOGRAPH-5272	[FB40 D272 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F239, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_062)
{
    // 2F822 0062;	
    // (割) CJK COMPATIBILITY IDEOGRAPH-2F822	[FB40 D272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F822, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_063)
{
    // 1F239 0062;	
    // (🈹) SQUARED CJK UNIFIED IDEOGRAPH-5272	[FB40 D272 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F239, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_064)
{
    // 2F823 0021;	
    // (剷) CJK COMPATIBILITY IDEOGRAPH-2F823	[FB40 D277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F823, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_065)
{
    // 2F823 003F;	
    // (剷) CJK COMPATIBILITY IDEOGRAPH-2F823	[FB40 D277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F823, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_066)
{
    // 2F823 0061;	
    // (剷) CJK COMPATIBILITY IDEOGRAPH-2F823	[FB40 D277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F823, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_067)
{
    // 2F823 0041;	
    // (剷) CJK COMPATIBILITY IDEOGRAPH-2F823	[FB40 D277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F823, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_068)
{
    // 2F823 0062;	
    // (剷) CJK COMPATIBILITY IDEOGRAPH-2F823	[FB40 D277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F823, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_069)
{
    // F9C7 0021;	
    // (劉) CJK COMPATIBILITY IDEOGRAPH-F9C7	[FB40 D289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_070)
{
    // F9C7 003F;	
    // (劉) CJK COMPATIBILITY IDEOGRAPH-F9C7	[FB40 D289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C7, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_071)
{
    // F9C7 0061;	
    // (劉) CJK COMPATIBILITY IDEOGRAPH-F9C7	[FB40 D289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_072)
{
    // F9C7 0041;	
    // (劉) CJK COMPATIBILITY IDEOGRAPH-F9C7	[FB40 D289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_073)
{
    // F9C7 0062;	
    // (劉) CJK COMPATIBILITY IDEOGRAPH-F9C7	[FB40 D289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_074)
{
    // F98A 0021;	
    // (力) CJK COMPATIBILITY IDEOGRAPH-F98A	[FB40 D29B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_075)
{
    // 2F12 0021;	
    // (⼒) KANGXI RADICAL POWER	[FB40 D29B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F12, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_076)
{
    // F98A 003F;	
    // (力) CJK COMPATIBILITY IDEOGRAPH-F98A	[FB40 D29B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_077)
{
    // 2F12 003F;	
    // (⼒) KANGXI RADICAL POWER	[FB40 D29B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F12, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_078)
{
    // F98A 0061;	
    // (力) CJK COMPATIBILITY IDEOGRAPH-F98A	[FB40 D29B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_079)
{
    // F98A 0041;	
    // (力) CJK COMPATIBILITY IDEOGRAPH-F98A	[FB40 D29B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF98A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_080)
{
    // 2F12 0061;	
    // (⼒) KANGXI RADICAL POWER	[FB40 D29B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F12, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_081)
{
    // 2F12 0041;	
    // (⼒) KANGXI RADICAL POWER	[FB40 D29B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F12, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_082)
{
    // F98A 0062;	
    // (力) CJK COMPATIBILITY IDEOGRAPH-F98A	[FB40 D29B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_083)
{
    // 2F12 0062;	
    // (⼒) KANGXI RADICAL POWER	[FB40 D29B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F12, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD29B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_084)
{
    // F99D 0021;	
    // (劣) CJK COMPATIBILITY IDEOGRAPH-F99D	[FB40 D2A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_085)
{
    // F99D 003F;	
    // (劣) CJK COMPATIBILITY IDEOGRAPH-F99D	[FB40 D2A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_086)
{
    // F99D 0061;	
    // (劣) CJK COMPATIBILITY IDEOGRAPH-F99D	[FB40 D2A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_087)
{
    // F99D 0041;	
    // (劣) CJK COMPATIBILITY IDEOGRAPH-F99D	[FB40 D2A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF99D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_088)
{
    // F99D 0062;	
    // (劣) CJK COMPATIBILITY IDEOGRAPH-F99D	[FB40 D2A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_089)
{
    // 2F992 0021;	
    // (劳) CJK COMPATIBILITY IDEOGRAPH-2F992	[FB40 D2B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F992, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_090)
{
    // 2F992 003F;	
    // (劳) CJK COMPATIBILITY IDEOGRAPH-2F992	[FB40 D2B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F992, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_091)
{
    // 2F992 0061;	
    // (劳) CJK COMPATIBILITY IDEOGRAPH-2F992	[FB40 D2B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F992, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_092)
{
    // 2F992 0041;	
    // (劳) CJK COMPATIBILITY IDEOGRAPH-2F992	[FB40 D2B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F992, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_093)
{
    // 2F992 0062;	
    // (劳) CJK COMPATIBILITY IDEOGRAPH-2F992	[FB40 D2B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F992, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_094)
{
    // 3298 0021;	
    // (㊘) CIRCLED IDEOGRAPH LABOR	[FB40 D2B4 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3298, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_095)
{
    // 3298 003F;	
    // (㊘) CIRCLED IDEOGRAPH LABOR	[FB40 D2B4 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3298, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_096)
{
    // 3298 0061;	
    // (㊘) CIRCLED IDEOGRAPH LABOR	[FB40 D2B4 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3298, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_097)
{
    // 3298 0041;	
    // (㊘) CIRCLED IDEOGRAPH LABOR	[FB40 D2B4 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3298, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_098)
{
    // 3298 0062;	
    // (㊘) CIRCLED IDEOGRAPH LABOR	[FB40 D2B4 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3298, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_099)
{
    // FA76 0021;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-FA76	[FB40 D2C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA76, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_100)
{
    // 2F825 0021;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-2F825	[FB40 D2C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F825, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_101)
{
    // FA76 003F;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-FA76	[FB40 D2C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA76, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_102)
{
    // 2F825 003F;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-2F825	[FB40 D2C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F825, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_103)
{
    // FA76 0061;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-FA76	[FB40 D2C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA76, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_104)
{
    // 2F825 0061;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-2F825	[FB40 D2C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F825, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_105)
{
    // FA76 0041;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-FA76	[FB40 D2C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA76, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_106)
{
    // 2F825 0041;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-2F825	[FB40 D2C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F825, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_107)
{
    // FA76 0062;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-FA76	[FB40 D2C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA76, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_108)
{
    // 2F825 0062;	
    // (勇) CJK COMPATIBILITY IDEOGRAPH-2F825	[FB40 D2C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F825, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_109)
{
    // FA33 0021;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-FA33	[FB40 D2C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA33, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_110)
{
    // 2F826 0021;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-2F826	[FB40 D2C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F826, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_111)
{
    // FA33 003F;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-FA33	[FB40 D2C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA33, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_112)
{
    // 2F826 003F;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-2F826	[FB40 D2C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F826, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_113)
{
    // FA33 0061;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-FA33	[FB40 D2C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA33, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_114)
{
    // 2F826 0061;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-2F826	[FB40 D2C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F826, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_115)
{
    // FA33 0041;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-FA33	[FB40 D2C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA33, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_116)
{
    // 2F826 0041;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-2F826	[FB40 D2C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F826, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_117)
{
    // FA33 0062;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-FA33	[FB40 D2C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA33, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_118)
{
    // 2F826 0062;	
    // (勉) CJK COMPATIBILITY IDEOGRAPH-2F826	[FB40 D2C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F826, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_119)
{
    // F952 0021;	
    // (勒) CJK COMPATIBILITY IDEOGRAPH-F952	[FB40 D2D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF952, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_120)
{
    // F952 003F;	
    // (勒) CJK COMPATIBILITY IDEOGRAPH-F952	[FB40 D2D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF952, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_121)
{
    // F952 0061;	
    // (勒) CJK COMPATIBILITY IDEOGRAPH-F952	[FB40 D2D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF952, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_122)
{
    // F952 0041;	
    // (勒) CJK COMPATIBILITY IDEOGRAPH-F952	[FB40 D2D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF952, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_123)
{
    // F952 0062;	
    // (勒) CJK COMPATIBILITY IDEOGRAPH-F952	[FB40 D2D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF952, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_124)
{
    // F92F 0021;	
    // (勞) CJK COMPATIBILITY IDEOGRAPH-F92F	[FB40 D2DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_125)
{
    // F92F 003F;	
    // (勞) CJK COMPATIBILITY IDEOGRAPH-F92F	[FB40 D2DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_126)
{
    // F92F 0061;	
    // (勞) CJK COMPATIBILITY IDEOGRAPH-F92F	[FB40 D2DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_127)
{
    // F92F 0041;	
    // (勞) CJK COMPATIBILITY IDEOGRAPH-F92F	[FB40 D2DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF92F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_128)
{
    // F92F 0062;	
    // (勞) CJK COMPATIBILITY IDEOGRAPH-F92F	[FB40 D2DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_129)
{
    // FA34 0021;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-FA34	[FB40 D2E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA34, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_130)
{
    // 2F827 0021;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-2F827	[FB40 D2E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F827, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_131)
{
    // FA34 003F;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-FA34	[FB40 D2E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA34, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_132)
{
    // 2F827 003F;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-2F827	[FB40 D2E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F827, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_133)
{
    // FA34 0061;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-FA34	[FB40 D2E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA34, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_134)
{
    // 2F827 0061;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-2F827	[FB40 D2E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F827, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_135)
{
    // FA34 0041;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-FA34	[FB40 D2E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA34, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_136)
{
    // 2F827 0041;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-2F827	[FB40 D2E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F827, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_137)
{
    // FA34 0062;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-FA34	[FB40 D2E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA34, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_138)
{
    // 2F827 0062;	
    // (勤) CJK COMPATIBILITY IDEOGRAPH-2F827	[FB40 D2E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F827, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_139)
{
    // F97F 0021;	
    // (勵) CJK COMPATIBILITY IDEOGRAPH-F97F	[FB40 D2F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_140)
{
    // F97F 003F;	
    // (勵) CJK COMPATIBILITY IDEOGRAPH-F97F	[FB40 D2F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_141)
{
    // F97F 0061;	
    // (勵) CJK COMPATIBILITY IDEOGRAPH-F97F	[FB40 D2F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_142)
{
    // F97F 0041;	
    // (勵) CJK COMPATIBILITY IDEOGRAPH-F97F	[FB40 D2F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF97F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_143)
{
    // F97F 0062;	
    // (勵) CJK COMPATIBILITY IDEOGRAPH-F97F	[FB40 D2F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_144)
{
    // 2F13 0021;	
    // (⼓) KANGXI RADICAL WRAP	[FB40 D2F9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F13, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_145)
{
    // 2F13 003F;	
    // (⼓) KANGXI RADICAL WRAP	[FB40 D2F9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F13, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_146)
{
    // 2F13 0061;	
    // (⼓) KANGXI RADICAL WRAP	[FB40 D2F9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F13, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_147)
{
    // 2F13 0041;	
    // (⼓) KANGXI RADICAL WRAP	[FB40 D2F9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F13, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_148)
{
    // 2F13 0062;	
    // (⼓) KANGXI RADICAL WRAP	[FB40 D2F9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F13, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_149)
{
    // FA77 0021;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-FA77	[FB40 D2FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA77, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_150)
{
    // 2F828 0021;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-2F828	[FB40 D2FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F828, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_151)
{
    // FA77 003F;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-FA77	[FB40 D2FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA77, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_152)
{
    // 2F828 003F;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-2F828	[FB40 D2FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F828, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_153)
{
    // FA77 0061;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-FA77	[FB40 D2FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA77, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_154)
{
    // 2F828 0061;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-2F828	[FB40 D2FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F828, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_155)
{
    // FA77 0041;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-FA77	[FB40 D2FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA77, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_156)
{
    // 2F828 0041;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-2F828	[FB40 D2FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F828, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_157)
{
    // FA77 0062;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-FA77	[FB40 D2FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA77, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_158)
{
    // 2F828 0062;	
    // (勺) CJK COMPATIBILITY IDEOGRAPH-2F828	[FB40 D2FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F828, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD2FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_159)
{
    // 2F829 0021;	
    // (包) CJK COMPATIBILITY IDEOGRAPH-2F829	[FB40 D305 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F829, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD305, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_160)
{
    // 2F829 003F;	
    // (包) CJK COMPATIBILITY IDEOGRAPH-2F829	[FB40 D305 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F829, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD305, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_161)
{
    // 2F829 0061;	
    // (包) CJK COMPATIBILITY IDEOGRAPH-2F829	[FB40 D305 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F829, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_162)
{
    // 2F829 0041;	
    // (包) CJK COMPATIBILITY IDEOGRAPH-2F829	[FB40 D305 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F829, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_163)
{
    // 2F829 0062;	
    // (包) CJK COMPATIBILITY IDEOGRAPH-2F829	[FB40 D305 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F829, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD305, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_164)
{
    // 2F82A 0021;	
    // (匆) CJK COMPATIBILITY IDEOGRAPH-2F82A	[FB40 D306 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_165)
{
    // 2F82A 003F;	
    // (匆) CJK COMPATIBILITY IDEOGRAPH-2F82A	[FB40 D306 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_166)
{
    // 2F82A 0061;	
    // (匆) CJK COMPATIBILITY IDEOGRAPH-2F82A	[FB40 D306 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_167)
{
    // 2F82A 0041;	
    // (匆) CJK COMPATIBILITY IDEOGRAPH-2F82A	[FB40 D306 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_168)
{
    // 2F82A 0062;	
    // (匆) CJK COMPATIBILITY IDEOGRAPH-2F82A	[FB40 D306 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_169)
{
    // 2F14 0021;	
    // (⼔) KANGXI RADICAL SPOON	[FB40 D315 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F14, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD315, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_170)
{
    // 2F14 003F;	
    // (⼔) KANGXI RADICAL SPOON	[FB40 D315 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F14, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD315, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_171)
{
    // 2F14 0061;	
    // (⼔) KANGXI RADICAL SPOON	[FB40 D315 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F14, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_172)
{
    // 2F14 0041;	
    // (⼔) KANGXI RADICAL SPOON	[FB40 D315 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F14, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_173)
{
    // 2F14 0062;	
    // (⼔) KANGXI RADICAL SPOON	[FB40 D315 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F14, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD315, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_174)
{
    // F963 0021;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-F963	[FB40 D317 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF963, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_175)
{
    // 2F82B 0021;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-2F82B	[FB40 D317 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_176)
{
    // F963 003F;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-F963	[FB40 D317 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF963, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_177)
{
    // 2F82B 003F;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-2F82B	[FB40 D317 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_178)
{
    // F963 0061;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-F963	[FB40 D317 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF963, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_179)
{
    // 2F82B 0061;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-2F82B	[FB40 D317 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_180)
{
    // F963 0041;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-F963	[FB40 D317 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF963, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_181)
{
    // 2F82B 0041;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-2F82B	[FB40 D317 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_182)
{
    // F963 0062;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-F963	[FB40 D317 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF963, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_183)
{
    // 2F82B 0062;	
    // (北) CJK COMPATIBILITY IDEOGRAPH-2F82B	[FB40 D317 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_184)
{
    // 2F15 0021;	
    // (⼕) KANGXI RADICAL RIGHT OPEN BOX	[FB40 D31A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F15, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD31A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_185)
{
    // 2F15 003F;	
    // (⼕) KANGXI RADICAL RIGHT OPEN BOX	[FB40 D31A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F15, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD31A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_186)
{
    // 2F15 0061;	
    // (⼕) KANGXI RADICAL RIGHT OPEN BOX	[FB40 D31A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F15, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD31A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_187)
{
    // 2F15 0041;	
    // (⼕) KANGXI RADICAL RIGHT OPEN BOX	[FB40 D31A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F15, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD31A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_188)
{
    // 2F15 0062;	
    // (⼕) KANGXI RADICAL RIGHT OPEN BOX	[FB40 D31A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F15, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD31A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_189)
{
    // 2F16 0021;	
    // (⼖) KANGXI RADICAL HIDING ENCLOSURE	[FB40 D338 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F16, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_190)
{
    // 2F16 003F;	
    // (⼖) KANGXI RADICAL HIDING ENCLOSURE	[FB40 D338 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F16, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_191)
{
    // 2F16 0061;	
    // (⼖) KANGXI RADICAL HIDING ENCLOSURE	[FB40 D338 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F16, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_192)
{
    // 2F16 0041;	
    // (⼖) KANGXI RADICAL HIDING ENCLOSURE	[FB40 D338 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F16, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_193)
{
    // 2F16 0062;	
    // (⼖) KANGXI RADICAL HIDING ENCLOSURE	[FB40 D338 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F16, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_194)
{
    // 32A9 0021;	
    // (㊩) CIRCLED IDEOGRAPH MEDICINE	[FB40 D33B 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD33B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_195)
{
    // 32A9 003F;	
    // (㊩) CIRCLED IDEOGRAPH MEDICINE	[FB40 D33B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD33B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_196)
{
    // 32A9 0061;	
    // (㊩) CIRCLED IDEOGRAPH MEDICINE	[FB40 D33B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD33B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_197)
{
    // 32A9 0041;	
    // (㊩) CIRCLED IDEOGRAPH MEDICINE	[FB40 D33B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD33B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_198)
{
    // 32A9 0062;	
    // (㊩) CIRCLED IDEOGRAPH MEDICINE	[FB40 D33B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD33B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_199)
{
    // F9EB 0021;	
    // (匿) CJK COMPATIBILITY IDEOGRAPH-F9EB	[FB40 D33F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD33F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_200)
{
    // F9EB 003F;	
    // (匿) CJK COMPATIBILITY IDEOGRAPH-F9EB	[FB40 D33F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD33F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_201)
{
    // F9EB 0061;	
    // (匿) CJK COMPATIBILITY IDEOGRAPH-F9EB	[FB40 D33F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD33F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_202)
{
    // F9EB 0041;	
    // (匿) CJK COMPATIBILITY IDEOGRAPH-F9EB	[FB40 D33F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD33F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_203)
{
    // F9EB 0062;	
    // (匿) CJK COMPATIBILITY IDEOGRAPH-F9EB	[FB40 D33F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD33F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_204)
{
    // 2F17 0021;	
    // (⼗) KANGXI RADICAL TEN	[FB40 D341 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F17, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_205)
{
    // 3038 0021;	
    // (〸) HANGZHOU NUMERAL TEN	[FB40 D341 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3038, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_206)
{
    // 3289 0021;	
    // (㊉) CIRCLED IDEOGRAPH TEN	[FB40 D341 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3289, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_207)
{
    // 2F17 003F;	
    // (⼗) KANGXI RADICAL TEN	[FB40 D341 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F17, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_208)
{
    // 3038 003F;	
    // (〸) HANGZHOU NUMERAL TEN	[FB40 D341 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3038, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_209)
{
    // 3289 003F;	
    // (㊉) CIRCLED IDEOGRAPH TEN	[FB40 D341 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3289, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_210)
{
    // 2F17 0061;	
    // (⼗) KANGXI RADICAL TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F17, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_211)
{
    // 3038 0061;	
    // (〸) HANGZHOU NUMERAL TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3038, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_212)
{
    // 2F17 0041;	
    // (⼗) KANGXI RADICAL TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F17, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_213)
{
    // 3038 0041;	
    // (〸) HANGZHOU NUMERAL TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3038, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_214)
{
    // 3289 0061;	
    // (㊉) CIRCLED IDEOGRAPH TEN	[FB40 D341 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3289, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_215)
{
    // 3289 0041;	
    // (㊉) CIRCLED IDEOGRAPH TEN	[FB40 D341 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3289, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_216)
{
    // 2F17 0062;	
    // (⼗) KANGXI RADICAL TEN	[FB40 D341 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F17, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_217)
{
    // 3038 0062;	
    // (〸) HANGZHOU NUMERAL TEN	[FB40 D341 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3038, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_218)
{
    // 3289 0062;	
    // (㊉) CIRCLED IDEOGRAPH TEN	[FB40 D341 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3289, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_219)
{
    // 3039 0021;	
    // (〹) HANGZHOU NUMERAL TWENTY	[FB40 D344 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3039, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_220)
{
    // 3039 003F;	
    // (〹) HANGZHOU NUMERAL TWENTY	[FB40 D344 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3039, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_221)
{
    // 3039 0061;	
    // (〹) HANGZHOU NUMERAL TWENTY	[FB40 D344 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3039, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_222)
{
    // 3039 0041;	
    // (〹) HANGZHOU NUMERAL TWENTY	[FB40 D344 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3039, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_223)
{
    // 3039 0062;	
    // (〹) HANGZHOU NUMERAL TWENTY	[FB40 D344 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3039, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_224)
{
    // 303A 0021;	
    // (〺) HANGZHOU NUMERAL THIRTY	[FB40 D345 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x303A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_225)
{
    // 303A 003F;	
    // (〺) HANGZHOU NUMERAL THIRTY	[FB40 D345 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x303A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_226)
{
    // 303A 0061;	
    // (〺) HANGZHOU NUMERAL THIRTY	[FB40 D345 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x303A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_227)
{
    // 303A 0041;	
    // (〺) HANGZHOU NUMERAL THIRTY	[FB40 D345 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x303A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_228)
{
    // 303A 0062;	
    // (〺) HANGZHOU NUMERAL THIRTY	[FB40 D345 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x303A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_229)
{
    // 2F82C 0021;	
    // (卉) CJK COMPATIBILITY IDEOGRAPH-2F82C	[FB40 D349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_230)
{
    // 2F82C 003F;	
    // (卉) CJK COMPATIBILITY IDEOGRAPH-2F82C	[FB40 D349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_231)
{
    // 2F82C 0061;	
    // (卉) CJK COMPATIBILITY IDEOGRAPH-2F82C	[FB40 D349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_232)
{
    // 2F82C 0041;	
    // (卉) CJK COMPATIBILITY IDEOGRAPH-2F82C	[FB40 D349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_233)
{
    // 2F82C 0062;	
    // (卉) CJK COMPATIBILITY IDEOGRAPH-2F82C	[FB40 D349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_234)
{
    // FA35 0021;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-FA35	[FB40 D351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA35, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_235)
{
    // 2F82D 0021;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-2F82D	[FB40 D351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_236)
{
    // FA35 003F;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-FA35	[FB40 D351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA35, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_237)
{
    // 2F82D 003F;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-2F82D	[FB40 D351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_238)
{
    // FA35 0061;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-FA35	[FB40 D351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA35, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_239)
{
    // 2F82D 0061;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-2F82D	[FB40 D351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_240)
{
    // FA35 0041;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-FA35	[FB40 D351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA35, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_241)
{
    // 2F82D 0041;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-2F82D	[FB40 D351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_242)
{
    // FA35 0062;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-FA35	[FB40 D351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA35, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_243)
{
    // 2F82D 0062;	
    // (卑) CJK COMPATIBILITY IDEOGRAPH-2F82D	[FB40 D351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_244)
{
    // 32AF 0021;	
    // (㊯) CIRCLED IDEOGRAPH ALLIANCE	[FB40 D354 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_245)
{
    // 32AF 003F;	
    // (㊯) CIRCLED IDEOGRAPH ALLIANCE	[FB40 D354 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_246)
{
    // 32AF 0061;	
    // (㊯) CIRCLED IDEOGRAPH ALLIANCE	[FB40 D354 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_247)
{
    // 32AF 0041;	
    // (㊯) CIRCLED IDEOGRAPH ALLIANCE	[FB40 D354 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_248)
{
    // 32AF 0062;	
    // (㊯) CIRCLED IDEOGRAPH ALLIANCE	[FB40 D354 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_249)
{
    // 2F82E 0021;	
    // (博) CJK COMPATIBILITY IDEOGRAPH-2F82E	[FB40 D35A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD35A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_250)
{
    // 2F82E 003F;	
    // (博) CJK COMPATIBILITY IDEOGRAPH-2F82E	[FB40 D35A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD35A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_251)
{
    // 2F82E 0061;	
    // (博) CJK COMPATIBILITY IDEOGRAPH-2F82E	[FB40 D35A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD35A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_252)
{
    // 2F82E 0041;	
    // (博) CJK COMPATIBILITY IDEOGRAPH-2F82E	[FB40 D35A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD35A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_253)
{
    // 2F82E 0062;	
    // (博) CJK COMPATIBILITY IDEOGRAPH-2F82E	[FB40 D35A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD35A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_254)
{
    // 2F18 0021;	
    // (⼘) KANGXI RADICAL DIVINATION	[FB40 D35C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F18, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD35C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_255)
{
    // 2E8A 0021;	
    // (⺊) CJK RADICAL DIVINATION	[FB40 D35C 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8A, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD35C, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_256)
{
    // 2F18 003F;	
    // (⼘) KANGXI RADICAL DIVINATION	[FB40 D35C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F18, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD35C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_257)
{
    // 2E8A 003F;	
    // (⺊) CJK RADICAL DIVINATION	[FB40 D35C 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8A, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD35C, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_258)
{
    // 2F18 0061;	
    // (⼘) KANGXI RADICAL DIVINATION	[FB40 D35C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F18, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD35C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_259)
{
    // 2F18 0041;	
    // (⼘) KANGXI RADICAL DIVINATION	[FB40 D35C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F18, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD35C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_260)
{
    // 2E8A 0061;	
    // (⺊) CJK RADICAL DIVINATION	[FB40 D35C 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8A, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD35C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_261)
{
    // 2E8A 0041;	
    // (⺊) CJK RADICAL DIVINATION	[FB40 D35C 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E8A, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD35C, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_262)
{
    // 2F18 0062;	
    // (⼘) KANGXI RADICAL DIVINATION	[FB40 D35C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F18, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD35C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_263)
{
    // 2E8A 0062;	
    // (⺊) CJK RADICAL DIVINATION	[FB40 D35C 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8A, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD35C, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_264)
{
    // 2F19 0021;	
    // (⼙) KANGXI RADICAL SEAL	[FB40 D369 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F19, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_265)
{
    // 2E8B 0021;	
    // (⺋) CJK RADICAL SEAL	[FB40 D369 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8B, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD369, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_266)
{
    // 2F19 003F;	
    // (⼙) KANGXI RADICAL SEAL	[FB40 D369 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F19, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_267)
{
    // 2E8B 003F;	
    // (⺋) CJK RADICAL SEAL	[FB40 D369 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8B, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD369, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_268)
{
    // 2F19 0061;	
    // (⼙) KANGXI RADICAL SEAL	[FB40 D369 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F19, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_269)
{
    // 2F19 0041;	
    // (⼙) KANGXI RADICAL SEAL	[FB40 D369 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F19, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_270)
{
    // 2E8B 0061;	
    // (⺋) CJK RADICAL SEAL	[FB40 D369 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8B, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD369, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_271)
{
    // 2E8B 0041;	
    // (⺋) CJK RADICAL SEAL	[FB40 D369 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E8B, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD369, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_272)
{
    // 2F19 0062;	
    // (⼙) KANGXI RADICAL SEAL	[FB40 D369 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F19, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_273)
{
    // 2E8B 0062;	
    // (⺋) CJK RADICAL SEAL	[FB40 D369 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8B, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD369, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_274)
{
    // 329E 0021;	
    // (㊞) CIRCLED IDEOGRAPH PRINT	[FB40 D370 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_275)
{
    // 329E 003F;	
    // (㊞) CIRCLED IDEOGRAPH PRINT	[FB40 D370 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_276)
{
    // 329E 0061;	
    // (㊞) CIRCLED IDEOGRAPH PRINT	[FB40 D370 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_277)
{
    // 329E 0041;	
    // (㊞) CIRCLED IDEOGRAPH PRINT	[FB40 D370 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x329E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_278)
{
    // 329E 0062;	
    // (㊞) CIRCLED IDEOGRAPH PRINT	[FB40 D370 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_279)
{
    // 2F82F 0021;	
    // (即) CJK COMPATIBILITY IDEOGRAPH-2F82F	[FB40 D373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_280)
{
    // 2F82F 003F;	
    // (即) CJK COMPATIBILITY IDEOGRAPH-2F82F	[FB40 D373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_281)
{
    // 2F82F 0061;	
    // (即) CJK COMPATIBILITY IDEOGRAPH-2F82F	[FB40 D373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_282)
{
    // 2F82F 0041;	
    // (即) CJK COMPATIBILITY IDEOGRAPH-2F82F	[FB40 D373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F82F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_283)
{
    // 2F82F 0062;	
    // (即) CJK COMPATIBILITY IDEOGRAPH-2F82F	[FB40 D373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F82F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_284)
{
    // F91C 0021;	
    // (卵) CJK COMPATIBILITY IDEOGRAPH-F91C	[FB40 D375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_285)
{
    // F91C 003F;	
    // (卵) CJK COMPATIBILITY IDEOGRAPH-F91C	[FB40 D375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_286)
{
    // F91C 0061;	
    // (卵) CJK COMPATIBILITY IDEOGRAPH-F91C	[FB40 D375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_287)
{
    // F91C 0041;	
    // (卵) CJK COMPATIBILITY IDEOGRAPH-F91C	[FB40 D375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF91C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_288)
{
    // F91C 0062;	
    // (卵) CJK COMPATIBILITY IDEOGRAPH-F91C	[FB40 D375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_289)
{
    // 2F830 0021;	
    // (卽) CJK COMPATIBILITY IDEOGRAPH-2F830	[FB40 D37D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F830, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD37D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_290)
{
    // 2F830 003F;	
    // (卽) CJK COMPATIBILITY IDEOGRAPH-2F830	[FB40 D37D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F830, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD37D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_291)
{
    // 2F830 0061;	
    // (卽) CJK COMPATIBILITY IDEOGRAPH-2F830	[FB40 D37D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F830, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD37D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_292)
{
    // 2F830 0041;	
    // (卽) CJK COMPATIBILITY IDEOGRAPH-2F830	[FB40 D37D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F830, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD37D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_293)
{
    // 2F830 0062;	
    // (卽) CJK COMPATIBILITY IDEOGRAPH-2F830	[FB40 D37D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F830, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD37D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_294)
{
    // 2F831 0021;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F831	[FB40 D37F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F831, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_295)
{
    // 2F832 0021;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F832	[FB40 D37F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F832, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_296)
{
    // 2F833 0021;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F833	[FB40 D37F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F833, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_297)
{
    // 2F831 003F;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F831	[FB40 D37F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F831, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_298)
{
    // 2F832 003F;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F832	[FB40 D37F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F832, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_299)
{
    // 2F833 003F;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F833	[FB40 D37F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F833, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_300)
{
    // 2F831 0061;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F831	[FB40 D37F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F831, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_301)
{
    // 2F832 0061;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F832	[FB40 D37F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F832, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_302)
{
    // 2F833 0061;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F833	[FB40 D37F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F833, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_303)
{
    // 2F831 0041;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F831	[FB40 D37F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F831, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_304)
{
    // 2F832 0041;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F832	[FB40 D37F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F832, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_305)
{
    // 2F833 0041;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F833	[FB40 D37F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F833, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_306)
{
    // 2F831 0062;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F831	[FB40 D37F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F831, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_307)
{
    // 2F832 0062;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F832	[FB40 D37F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F832, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_308)
{
    // 2F833 0062;	
    // (卿) CJK COMPATIBILITY IDEOGRAPH-2F833	[FB40 D37F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F833, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD37F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_309)
{
    // 2F1A 0021;	
    // (⼚) KANGXI RADICAL CLIFF	[FB40 D382 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_310)
{
    // 2E81 0021;	
    // (⺁) CJK RADICAL CLIFF	[FB40 D382 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E81, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD382, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_311)
{
    // 2F1A 003F;	
    // (⼚) KANGXI RADICAL CLIFF	[FB40 D382 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_312)
{
    // 2E81 003F;	
    // (⺁) CJK RADICAL CLIFF	[FB40 D382 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E81, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD382, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_313)
{
    // 2F1A 0061;	
    // (⼚) KANGXI RADICAL CLIFF	[FB40 D382 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_314)
{
    // 2F1A 0041;	
    // (⼚) KANGXI RADICAL CLIFF	[FB40 D382 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_315)
{
    // 2E81 0061;	
    // (⺁) CJK RADICAL CLIFF	[FB40 D382 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E81, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD382, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_316)
{
    // 2E81 0041;	
    // (⺁) CJK RADICAL CLIFF	[FB40 D382 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E81, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD382, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_317)
{
    // 2F1A 0062;	
    // (⼚) KANGXI RADICAL CLIFF	[FB40 D382 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_318)
{
    // 2E81 0062;	
    // (⺁) CJK RADICAL CLIFF	[FB40 D382 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E81, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD382, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_319)
{
    // 2F1B 0021;	
    // (⼛) KANGXI RADICAL PRIVATE	[FB40 D3B6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_320)
{
    // 2F1B 003F;	
    // (⼛) KANGXI RADICAL PRIVATE	[FB40 D3B6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_321)
{
    // 2F1B 0061;	
    // (⼛) KANGXI RADICAL PRIVATE	[FB40 D3B6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_322)
{
    // 2F1B 0041;	
    // (⼛) KANGXI RADICAL PRIVATE	[FB40 D3B6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_323)
{
    // 2F1B 0062;	
    // (⼛) KANGXI RADICAL PRIVATE	[FB40 D3B6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_324)
{
    // F96B 0021;	
    // (參) CJK COMPATIBILITY IDEOGRAPH-F96B	[FB40 D3C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_325)
{
    // F96B 003F;	
    // (參) CJK COMPATIBILITY IDEOGRAPH-F96B	[FB40 D3C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_326)
{
    // F96B 0061;	
    // (參) CJK COMPATIBILITY IDEOGRAPH-F96B	[FB40 D3C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_327)
{
    // F96B 0041;	
    // (參) CJK COMPATIBILITY IDEOGRAPH-F96B	[FB40 D3C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF96B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_328)
{
    // F96B 0062;	
    // (參) CJK COMPATIBILITY IDEOGRAPH-F96B	[FB40 D3C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_329)
{
    // 2F1C 0021;	
    // (⼜) KANGXI RADICAL AGAIN	[FB40 D3C8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_330)
{
    // 2F1C 003F;	
    // (⼜) KANGXI RADICAL AGAIN	[FB40 D3C8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_331)
{
    // 2F1C 0061;	
    // (⼜) KANGXI RADICAL AGAIN	[FB40 D3C8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_332)
{
    // 2F1C 0041;	
    // (⼜) KANGXI RADICAL AGAIN	[FB40 D3C8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_333)
{
    // 2F1C 0062;	
    // (⼜) KANGXI RADICAL AGAIN	[FB40 D3C8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_334)
{
    // 2F836 0021;	
    // (及) CJK COMPATIBILITY IDEOGRAPH-2F836	[FB40 D3CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F836, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_335)
{
    // 2F836 003F;	
    // (及) CJK COMPATIBILITY IDEOGRAPH-2F836	[FB40 D3CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F836, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_336)
{
    // 2F836 0061;	
    // (及) CJK COMPATIBILITY IDEOGRAPH-2F836	[FB40 D3CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F836, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_337)
{
    // 2F836 0041;	
    // (及) CJK COMPATIBILITY IDEOGRAPH-2F836	[FB40 D3CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F836, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_338)
{
    // 2F836 0062;	
    // (及) CJK COMPATIBILITY IDEOGRAPH-2F836	[FB40 D3CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F836, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_339)
{
    // 1F212 0021;	
    // (🈒) SQUARED CJK UNIFIED IDEOGRAPH-53CC	[FB40 D3CC 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F212, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_340)
{
    // 1F212 003F;	
    // (🈒) SQUARED CJK UNIFIED IDEOGRAPH-53CC	[FB40 D3CC 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F212, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_341)
{
    // 1F212 0061;	
    // (🈒) SQUARED CJK UNIFIED IDEOGRAPH-53CC	[FB40 D3CC 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F212, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_342)
{
    // 1F212 0041;	
    // (🈒) SQUARED CJK UNIFIED IDEOGRAPH-53CC	[FB40 D3CC 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F212, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_343)
{
    // 1F212 0062;	
    // (🈒) SQUARED CJK UNIFIED IDEOGRAPH-53CC	[FB40 D3CC 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F212, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_344)
{
    // 2F837 0021;	
    // (叟) CJK COMPATIBILITY IDEOGRAPH-2F837	[FB40 D3DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F837, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_345)
{
    // 2F837 003F;	
    // (叟) CJK COMPATIBILITY IDEOGRAPH-2F837	[FB40 D3DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F837, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_346)
{
    // 2F837 0061;	
    // (叟) CJK COMPATIBILITY IDEOGRAPH-2F837	[FB40 D3DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F837, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_347)
{
    // 2F837 0041;	
    // (叟) CJK COMPATIBILITY IDEOGRAPH-2F837	[FB40 D3DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F837, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_348)
{
    // 2F837 0062;	
    // (叟) CJK COMPATIBILITY IDEOGRAPH-2F837	[FB40 D3DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F837, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_349)
{
    // 2F1D 0021;	
    // (⼝) KANGXI RADICAL MOUTH	[FB40 D3E3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_350)
{
    // 2F1D 003F;	
    // (⼝) KANGXI RADICAL MOUTH	[FB40 D3E3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_351)
{
    // 2F1D 0061;	
    // (⼝) KANGXI RADICAL MOUTH	[FB40 D3E3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_352)
{
    // 2F1D 0041;	
    // (⼝) KANGXI RADICAL MOUTH	[FB40 D3E3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_353)
{
    // 2F1D 0062;	
    // (⼝) KANGXI RADICAL MOUTH	[FB40 D3E3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_354)
{
    // F906 0021;	
    // (句) CJK COMPATIBILITY IDEOGRAPH-F906	[FB40 D3E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF906, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_355)
{
    // F906 003F;	
    // (句) CJK COMPATIBILITY IDEOGRAPH-F906	[FB40 D3E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF906, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_356)
{
    // F906 0061;	
    // (句) CJK COMPATIBILITY IDEOGRAPH-F906	[FB40 D3E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF906, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_357)
{
    // F906 0041;	
    // (句) CJK COMPATIBILITY IDEOGRAPH-F906	[FB40 D3E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF906, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_358)
{
    // F906 0062;	
    // (句) CJK COMPATIBILITY IDEOGRAPH-F906	[FB40 D3E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF906, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_359)
{
    // 2F839 0021;	
    // (叫) CJK COMPATIBILITY IDEOGRAPH-2F839	[FB40 D3EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F839, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_360)
{
    // 2F839 003F;	
    // (叫) CJK COMPATIBILITY IDEOGRAPH-2F839	[FB40 D3EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F839, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_361)
{
    // 2F839 0061;	
    // (叫) CJK COMPATIBILITY IDEOGRAPH-2F839	[FB40 D3EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F839, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_362)
{
    // 2F839 0041;	
    // (叫) CJK COMPATIBILITY IDEOGRAPH-2F839	[FB40 D3EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F839, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_363)
{
    // 2F839 0062;	
    // (叫) CJK COMPATIBILITY IDEOGRAPH-2F839	[FB40 D3EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F839, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_364)
{
    // 1F251 0021;	
    // (🉑) CIRCLED IDEOGRAPH ACCEPT	[FB40 D3EF 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F251, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_365)
{
    // 1F251 003F;	
    // (🉑) CIRCLED IDEOGRAPH ACCEPT	[FB40 D3EF 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F251, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_366)
{
    // 1F251 0061;	
    // (🉑) CIRCLED IDEOGRAPH ACCEPT	[FB40 D3EF 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F251, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_367)
{
    // 1F251 0041;	
    // (🉑) CIRCLED IDEOGRAPH ACCEPT	[FB40 D3EF 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x1F251, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_368)
{
    // 1F251 0062;	
    // (🉑) CIRCLED IDEOGRAPH ACCEPT	[FB40 D3EF 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F251, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_369)
{
    // 2F83A 0021;	
    // (叱) CJK COMPATIBILITY IDEOGRAPH-2F83A	[FB40 D3F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_370)
{
    // 2F83A 003F;	
    // (叱) CJK COMPATIBILITY IDEOGRAPH-2F83A	[FB40 D3F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_371)
{
    // 2F83A 0061;	
    // (叱) CJK COMPATIBILITY IDEOGRAPH-2F83A	[FB40 D3F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_372)
{
    // 2F83A 0041;	
    // (叱) CJK COMPATIBILITY IDEOGRAPH-2F83A	[FB40 D3F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_373)
{
    // 2F83A 0062;	
    // (叱) CJK COMPATIBILITY IDEOGRAPH-2F83A	[FB40 D3F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_374)
{
    // 32A8 0021;	
    // (㊨) CIRCLED IDEOGRAPH RIGHT	[FB40 D3F3 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_375)
{
    // 1F22E 0021;	
    // (🈮) SQUARED CJK UNIFIED IDEOGRAPH-53F3	[FB40 D3F3 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_376)
{
    // 32A8 003F;	
    // (㊨) CIRCLED IDEOGRAPH RIGHT	[FB40 D3F3 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_377)
{
    // 1F22E 003F;	
    // (🈮) SQUARED CJK UNIFIED IDEOGRAPH-53F3	[FB40 D3F3 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_378)
{
    // 32A8 0061;	
    // (㊨) CIRCLED IDEOGRAPH RIGHT	[FB40 D3F3 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_379)
{
    // 32A8 0041;	
    // (㊨) CIRCLED IDEOGRAPH RIGHT	[FB40 D3F3 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_380)
{
    // 1F22E 0061;	
    // (🈮) SQUARED CJK UNIFIED IDEOGRAPH-53F3	[FB40 D3F3 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_381)
{
    // 1F22E 0041;	
    // (🈮) SQUARED CJK UNIFIED IDEOGRAPH-53F3	[FB40 D3F3 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F22E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_382)
{
    // 32A8 0062;	
    // (㊨) CIRCLED IDEOGRAPH RIGHT	[FB40 D3F3 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_383)
{
    // 1F22E 0062;	
    // (🈮) SQUARED CJK UNIFIED IDEOGRAPH-53F3	[FB40 D3F3 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD3F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_384)
{
    // 2F83B 0021;	
    // (吆) CJK COMPATIBILITY IDEOGRAPH-2F83B	[FB40 D406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_385)
{
    // 2F83B 003F;	
    // (吆) CJK COMPATIBILITY IDEOGRAPH-2F83B	[FB40 D406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_386)
{
    // 2F83B 0061;	
    // (吆) CJK COMPATIBILITY IDEOGRAPH-2F83B	[FB40 D406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_387)
{
    // 2F83B 0041;	
    // (吆) CJK COMPATIBILITY IDEOGRAPH-2F83B	[FB40 D406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_388)
{
    // 2F83B 0062;	
    // (吆) CJK COMPATIBILITY IDEOGRAPH-2F83B	[FB40 D406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_389)
{
    // 1F234 0021;	
    // (🈴) SQUARED CJK UNIFIED IDEOGRAPH-5408	[FB40 D408 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F234, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_390)
{
    // 1F234 003F;	
    // (🈴) SQUARED CJK UNIFIED IDEOGRAPH-5408	[FB40 D408 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F234, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_391)
{
    // 1F234 0061;	
    // (🈴) SQUARED CJK UNIFIED IDEOGRAPH-5408	[FB40 D408 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F234, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_392)
{
    // 1F234 0041;	
    // (🈴) SQUARED CJK UNIFIED IDEOGRAPH-5408	[FB40 D408 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F234, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_393)
{
    // 1F234 0062;	
    // (🈴) SQUARED CJK UNIFIED IDEOGRAPH-5408	[FB40 D408 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F234, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_394)
{
    // 3294 0021;	
    // (㊔) CIRCLED IDEOGRAPH NAME	[FB40 D40D 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3294, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD40D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_395)
{
    // 3294 003F;	
    // (㊔) CIRCLED IDEOGRAPH NAME	[FB40 D40D 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3294, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD40D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_396)
{
    // 3294 0061;	
    // (㊔) CIRCLED IDEOGRAPH NAME	[FB40 D40D 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3294, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_397)
{
    // 3294 0041;	
    // (㊔) CIRCLED IDEOGRAPH NAME	[FB40 D40D 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3294, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_398)
{
    // 3294 0062;	
    // (㊔) CIRCLED IDEOGRAPH NAME	[FB40 D40D 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3294, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD40D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_399)
{
    // F9DE 0021;	
    // (吏) CJK COMPATIBILITY IDEOGRAPH-F9DE	[FB40 D40F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD40F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_400)
{
    // F9DE 003F;	
    // (吏) CJK COMPATIBILITY IDEOGRAPH-F9DE	[FB40 D40F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD40F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_401)
{
    // F9DE 0061;	
    // (吏) CJK COMPATIBILITY IDEOGRAPH-F9DE	[FB40 D40F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_402)
{
    // F9DE 0041;	
    // (吏) CJK COMPATIBILITY IDEOGRAPH-F9DE	[FB40 D40F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_403)
{
    // F9DE 0062;	
    // (吏) CJK COMPATIBILITY IDEOGRAPH-F9DE	[FB40 D40F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD40F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_404)
{
    // F9ED 0021;	
    // (吝) CJK COMPATIBILITY IDEOGRAPH-F9ED	[FB40 D41D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD41D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_405)
{
    // F9ED 003F;	
    // (吝) CJK COMPATIBILITY IDEOGRAPH-F9ED	[FB40 D41D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9ED, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD41D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_406)
{
    // F9ED 0061;	
    // (吝) CJK COMPATIBILITY IDEOGRAPH-F9ED	[FB40 D41D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_407)
{
    // F9ED 0041;	
    // (吝) CJK COMPATIBILITY IDEOGRAPH-F9ED	[FB40 D41D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_408)
{
    // F9ED 0062;	
    // (吝) CJK COMPATIBILITY IDEOGRAPH-F9ED	[FB40 D41D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD41D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_409)
{
    // 2F83D 0021;	
    // (吸) CJK COMPATIBILITY IDEOGRAPH-2F83D	[FB40 D438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_410)
{
    // 2F83D 003F;	
    // (吸) CJK COMPATIBILITY IDEOGRAPH-2F83D	[FB40 D438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_411)
{
    // 2F83D 0061;	
    // (吸) CJK COMPATIBILITY IDEOGRAPH-2F83D	[FB40 D438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_412)
{
    // 2F83D 0041;	
    // (吸) CJK COMPATIBILITY IDEOGRAPH-2F83D	[FB40 D438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_413)
{
    // 2F83D 0062;	
    // (吸) CJK COMPATIBILITY IDEOGRAPH-2F83D	[FB40 D438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_414)
{
    // 1F225 0021;	
    // (🈥) SQUARED CJK UNIFIED IDEOGRAPH-5439	[FB40 D439 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F225, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_415)
{
    // 1F225 003F;	
    // (🈥) SQUARED CJK UNIFIED IDEOGRAPH-5439	[FB40 D439 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F225, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_416)
{
    // 1F225 0061;	
    // (🈥) SQUARED CJK UNIFIED IDEOGRAPH-5439	[FB40 D439 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F225, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_417)
{
    // 1F225 0041;	
    // (🈥) SQUARED CJK UNIFIED IDEOGRAPH-5439	[FB40 D439 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F225, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_418)
{
    // 1F225 0062;	
    // (🈥) SQUARED CJK UNIFIED IDEOGRAPH-5439	[FB40 D439 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F225, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_419)
{
    // F980 0021;	
    // (呂) CJK COMPATIBILITY IDEOGRAPH-F980	[FB40 D442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF980, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_420)
{
    // F980 003F;	
    // (呂) CJK COMPATIBILITY IDEOGRAPH-F980	[FB40 D442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF980, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_421)
{
    // F980 0061;	
    // (呂) CJK COMPATIBILITY IDEOGRAPH-F980	[FB40 D442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF980, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_422)
{
    // F980 0041;	
    // (呂) CJK COMPATIBILITY IDEOGRAPH-F980	[FB40 D442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF980, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_423)
{
    // F980 0062;	
    // (呂) CJK COMPATIBILITY IDEOGRAPH-F980	[FB40 D442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF980, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_424)
{
    // 2F83E 0021;	
    // (呈) CJK COMPATIBILITY IDEOGRAPH-2F83E	[FB40 D448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_425)
{
    // 2F83E 003F;	
    // (呈) CJK COMPATIBILITY IDEOGRAPH-2F83E	[FB40 D448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_426)
{
    // 2F83E 0061;	
    // (呈) CJK COMPATIBILITY IDEOGRAPH-2F83E	[FB40 D448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_427)
{
    // 2F83E 0041;	
    // (呈) CJK COMPATIBILITY IDEOGRAPH-2F83E	[FB40 D448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_428)
{
    // 2F83E 0062;	
    // (呈) CJK COMPATIBILITY IDEOGRAPH-2F83E	[FB40 D448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_429)
{
    // 2F83F 0021;	
    // (周) CJK COMPATIBILITY IDEOGRAPH-2F83F	[FB40 D468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_430)
{
    // 2F83F 003F;	
    // (周) CJK COMPATIBILITY IDEOGRAPH-2F83F	[FB40 D468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_431)
{
    // 2F83F 0061;	
    // (周) CJK COMPATIBILITY IDEOGRAPH-2F83F	[FB40 D468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_432)
{
    // 2F83F 0041;	
    // (周) CJK COMPATIBILITY IDEOGRAPH-2F83F	[FB40 D468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_433)
{
    // 2F83F 0062;	
    // (周) CJK COMPATIBILITY IDEOGRAPH-2F83F	[FB40 D468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_434)
{
    // 2F83C 0021;	
    // (咞) CJK COMPATIBILITY IDEOGRAPH-2F83C	[FB40 D49E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD49E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_435)
{
    // 2F83C 003F;	
    // (咞) CJK COMPATIBILITY IDEOGRAPH-2F83C	[FB40 D49E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD49E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_436)
{
    // 2F83C 0061;	
    // (咞) CJK COMPATIBILITY IDEOGRAPH-2F83C	[FB40 D49E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_437)
{
    // 2F83C 0041;	
    // (咞) CJK COMPATIBILITY IDEOGRAPH-2F83C	[FB40 D49E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F83C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD49E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_438)
{
    // 2F83C 0062;	
    // (咞) CJK COMPATIBILITY IDEOGRAPH-2F83C	[FB40 D49E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F83C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD49E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_439)
{
    // 2F840 0021;	
    // (咢) CJK COMPATIBILITY IDEOGRAPH-2F840	[FB40 D4A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F840, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD4A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_440)
{
    // 2F840 003F;	
    // (咢) CJK COMPATIBILITY IDEOGRAPH-2F840	[FB40 D4A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F840, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD4A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_441)
{
    // 2F840 0061;	
    // (咢) CJK COMPATIBILITY IDEOGRAPH-2F840	[FB40 D4A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F840, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_442)
{
    // 2F840 0041;	
    // (咢) CJK COMPATIBILITY IDEOGRAPH-2F840	[FB40 D4A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F840, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD4A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_443)
{
    // 2F840 0062;	
    // (咢) CJK COMPATIBILITY IDEOGRAPH-2F840	[FB40 D4A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F840, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD4A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_444)
{
    // F99E 0021;	
    // (咽) CJK COMPATIBILITY IDEOGRAPH-F99E	[FB40 D4BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD4BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_445)
{
    // F99E 003F;	
    // (咽) CJK COMPATIBILITY IDEOGRAPH-F99E	[FB40 D4BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD4BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_446)
{
    // F99E 0061;	
    // (咽) CJK COMPATIBILITY IDEOGRAPH-F99E	[FB40 D4BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_447)
{
    // F99E 0041;	
    // (咽) CJK COMPATIBILITY IDEOGRAPH-F99E	[FB40 D4BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF99E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_448)
{
    // F99E 0062;	
    // (咽) CJK COMPATIBILITY IDEOGRAPH-F99E	[FB40 D4BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD4BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_449)
{
    // 2F841 0021;	
    // (哶) CJK COMPATIBILITY IDEOGRAPH-2F841	[FB40 D4F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F841, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD4F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_450)
{
    // 2F841 003F;	
    // (哶) CJK COMPATIBILITY IDEOGRAPH-2F841	[FB40 D4F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F841, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD4F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_451)
{
    // 2F841 0061;	
    // (哶) CJK COMPATIBILITY IDEOGRAPH-2F841	[FB40 D4F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F841, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_452)
{
    // 2F841 0041;	
    // (哶) CJK COMPATIBILITY IDEOGRAPH-2F841	[FB40 D4F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F841, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_453)
{
    // 2F841 0062;	
    // (哶) CJK COMPATIBILITY IDEOGRAPH-2F841	[FB40 D4F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F841, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD4F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_454)
{
    // 2F842 0021;	
    // (唐) CJK COMPATIBILITY IDEOGRAPH-2F842	[FB40 D510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F842, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_455)
{
    // 2F842 003F;	
    // (唐) CJK COMPATIBILITY IDEOGRAPH-2F842	[FB40 D510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F842, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_456)
{
    // 2F842 0061;	
    // (唐) CJK COMPATIBILITY IDEOGRAPH-2F842	[FB40 D510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F842, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_457)
{
    // 2F842 0041;	
    // (唐) CJK COMPATIBILITY IDEOGRAPH-2F842	[FB40 D510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F842, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_458)
{
    // 2F842 0062;	
    // (唐) CJK COMPATIBILITY IDEOGRAPH-2F842	[FB40 D510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F842, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_459)
{
    // 3244 0021;	
    // (㉄) CIRCLED IDEOGRAPH QUESTION	[FB40 D54F 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3244, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD54F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_460)
{
    // 3244 003F;	
    // (㉄) CIRCLED IDEOGRAPH QUESTION	[FB40 D54F 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3244, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD54F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_461)
{
    // 3244 0061;	
    // (㉄) CIRCLED IDEOGRAPH QUESTION	[FB40 D54F 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3244, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_462)
{
    // 3244 0041;	
    // (㉄) CIRCLED IDEOGRAPH QUESTION	[FB40 D54F 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3244, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_463)
{
    // 3244 0062;	
    // (㉄) CIRCLED IDEOGRAPH QUESTION	[FB40 D54F 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3244, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD54F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_464)
{
    // 2F843 0021;	
    // (啓) CJK COMPATIBILITY IDEOGRAPH-2F843	[FB40 D553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F843, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_465)
{
    // 2F843 003F;	
    // (啓) CJK COMPATIBILITY IDEOGRAPH-2F843	[FB40 D553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F843, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_466)
{
    // 2F843 0061;	
    // (啓) CJK COMPATIBILITY IDEOGRAPH-2F843	[FB40 D553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F843, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_467)
{
    // 2F843 0041;	
    // (啓) CJK COMPATIBILITY IDEOGRAPH-2F843	[FB40 D553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F843, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_468)
{
    // 2F843 0062;	
    // (啓) CJK COMPATIBILITY IDEOGRAPH-2F843	[FB40 D553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F843, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_469)
{
    // FA79 0021;	
    // (啕) CJK COMPATIBILITY IDEOGRAPH-FA79	[FB40 D555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA79, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_470)
{
    // FA79 003F;	
    // (啕) CJK COMPATIBILITY IDEOGRAPH-FA79	[FB40 D555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA79, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_471)
{
    // FA79 0061;	
    // (啕) CJK COMPATIBILITY IDEOGRAPH-FA79	[FB40 D555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA79, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_472)
{
    // FA79 0041;	
    // (啕) CJK COMPATIBILITY IDEOGRAPH-FA79	[FB40 D555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA79, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_473)
{
    // FA79 0062;	
    // (啕) CJK COMPATIBILITY IDEOGRAPH-FA79	[FB40 D555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA79, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_474)
{
    // 2F844 0021;	
    // (啣) CJK COMPATIBILITY IDEOGRAPH-2F844	[FB40 D563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F844, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_475)
{
    // 2F844 003F;	
    // (啣) CJK COMPATIBILITY IDEOGRAPH-2F844	[FB40 D563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F844, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_476)
{
    // 2F844 0061;	
    // (啣) CJK COMPATIBILITY IDEOGRAPH-2F844	[FB40 D563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F844, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_477)
{
    // 2F844 0041;	
    // (啣) CJK COMPATIBILITY IDEOGRAPH-2F844	[FB40 D563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F844, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_478)
{
    // 2F844 0062;	
    // (啣) CJK COMPATIBILITY IDEOGRAPH-2F844	[FB40 D563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F844, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_479)
{
    // 2F845 0021;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F845	[FB40 D584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F845, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_480)
{
    // 2F846 0021;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F846	[FB40 D584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F846, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_481)
{
    // 2F845 003F;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F845	[FB40 D584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F845, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_482)
{
    // 2F846 003F;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F846	[FB40 D584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F846, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_483)
{
    // 2F845 0061;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F845	[FB40 D584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F845, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_484)
{
    // 2F846 0061;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F846	[FB40 D584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F846, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_485)
{
    // 2F845 0041;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F845	[FB40 D584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F845, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_486)
{
    // 2F846 0041;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F846	[FB40 D584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F846, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_487)
{
    // 2F845 0062;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F845	[FB40 D584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F845, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_488)
{
    // 2F846 0062;	
    // (善) CJK COMPATIBILITY IDEOGRAPH-2F846	[FB40 D584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F846, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_489)
{
    // F90B 0021;	
    // (喇) CJK COMPATIBILITY IDEOGRAPH-F90B	[FB40 D587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_490)
{
    // F90B 003F;	
    // (喇) CJK COMPATIBILITY IDEOGRAPH-F90B	[FB40 D587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_491)
{
    // F90B 0061;	
    // (喇) CJK COMPATIBILITY IDEOGRAPH-F90B	[FB40 D587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_492)
{
    // F90B 0041;	
    // (喇) CJK COMPATIBILITY IDEOGRAPH-F90B	[FB40 D587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF90B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_493)
{
    // F90B 0062;	
    // (喇) CJK COMPATIBILITY IDEOGRAPH-F90B	[FB40 D587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_494)
{
    // FA7A 0021;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-FA7A	[FB40 D599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_495)
{
    // 2F847 0021;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-2F847	[FB40 D599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F847, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_496)
{
    // FA7A 003F;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-FA7A	[FB40 D599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_497)
{
    // 2F847 003F;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-2F847	[FB40 D599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F847, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_498)
{
    // FA7A 0061;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-FA7A	[FB40 D599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_315_499)
{
    // 2F847 0061;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-2F847	[FB40 D599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F847, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

