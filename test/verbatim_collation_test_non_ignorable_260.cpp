// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_260_000)
{
    // A268 003F;	
    // (ꉨ) YI SYLLABLE NGOX	[425B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA268, 0x003F };
    uint32_t const ces[9] = { 0x425B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_001)
{
    // A268 0061;	
    // (ꉨ) YI SYLLABLE NGOX	[425B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA268, 0x0061 };
    uint32_t const ces[9] = { 0x425B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_002)
{
    // A268 0041;	
    // (ꉨ) YI SYLLABLE NGOX	[425B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA268, 0x0041 };
    uint32_t const ces[9] = { 0x425B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_003)
{
    // A268 0062;	
    // (ꉨ) YI SYLLABLE NGOX	[425B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA268, 0x0062 };
    uint32_t const ces[9] = { 0x425B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_004)
{
    // A269 0021;	
    // (ꉩ) YI SYLLABLE NGO	[425C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA269, 0x0021 };
    uint32_t const ces[9] = { 0x425C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_005)
{
    // A269 003F;	
    // (ꉩ) YI SYLLABLE NGO	[425C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA269, 0x003F };
    uint32_t const ces[9] = { 0x425C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_006)
{
    // A269 0061;	
    // (ꉩ) YI SYLLABLE NGO	[425C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA269, 0x0061 };
    uint32_t const ces[9] = { 0x425C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_007)
{
    // A269 0041;	
    // (ꉩ) YI SYLLABLE NGO	[425C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA269, 0x0041 };
    uint32_t const ces[9] = { 0x425C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_008)
{
    // A269 0062;	
    // (ꉩ) YI SYLLABLE NGO	[425C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA269, 0x0062 };
    uint32_t const ces[9] = { 0x425C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_009)
{
    // A26A 0021;	
    // (ꉪ) YI SYLLABLE NGOP	[425D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26A, 0x0021 };
    uint32_t const ces[9] = { 0x425D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_010)
{
    // A26A 003F;	
    // (ꉪ) YI SYLLABLE NGOP	[425D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26A, 0x003F };
    uint32_t const ces[9] = { 0x425D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_011)
{
    // A26A 0061;	
    // (ꉪ) YI SYLLABLE NGOP	[425D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26A, 0x0061 };
    uint32_t const ces[9] = { 0x425D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_012)
{
    // A26A 0041;	
    // (ꉪ) YI SYLLABLE NGOP	[425D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26A, 0x0041 };
    uint32_t const ces[9] = { 0x425D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_013)
{
    // A26A 0062;	
    // (ꉪ) YI SYLLABLE NGOP	[425D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26A, 0x0062 };
    uint32_t const ces[9] = { 0x425D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_014)
{
    // A26B 0021;	
    // (ꉫ) YI SYLLABLE NGEX	[425E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26B, 0x0021 };
    uint32_t const ces[9] = { 0x425E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_015)
{
    // A26B 003F;	
    // (ꉫ) YI SYLLABLE NGEX	[425E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26B, 0x003F };
    uint32_t const ces[9] = { 0x425E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_016)
{
    // A26B 0061;	
    // (ꉫ) YI SYLLABLE NGEX	[425E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26B, 0x0061 };
    uint32_t const ces[9] = { 0x425E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_017)
{
    // A26B 0041;	
    // (ꉫ) YI SYLLABLE NGEX	[425E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26B, 0x0041 };
    uint32_t const ces[9] = { 0x425E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_018)
{
    // A26B 0062;	
    // (ꉫ) YI SYLLABLE NGEX	[425E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26B, 0x0062 };
    uint32_t const ces[9] = { 0x425E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_019)
{
    // A26C 0021;	
    // (ꉬ) YI SYLLABLE NGE	[425F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26C, 0x0021 };
    uint32_t const ces[9] = { 0x425F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_020)
{
    // A26C 003F;	
    // (ꉬ) YI SYLLABLE NGE	[425F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26C, 0x003F };
    uint32_t const ces[9] = { 0x425F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_021)
{
    // A26C 0061;	
    // (ꉬ) YI SYLLABLE NGE	[425F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26C, 0x0061 };
    uint32_t const ces[9] = { 0x425F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_022)
{
    // A26C 0041;	
    // (ꉬ) YI SYLLABLE NGE	[425F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26C, 0x0041 };
    uint32_t const ces[9] = { 0x425F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_023)
{
    // A26C 0062;	
    // (ꉬ) YI SYLLABLE NGE	[425F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26C, 0x0062 };
    uint32_t const ces[9] = { 0x425F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_024)
{
    // A26D 0021;	
    // (ꉭ) YI SYLLABLE NGEP	[4260 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26D, 0x0021 };
    uint32_t const ces[9] = { 0x4260, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_025)
{
    // A26D 003F;	
    // (ꉭ) YI SYLLABLE NGEP	[4260 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26D, 0x003F };
    uint32_t const ces[9] = { 0x4260, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_026)
{
    // A26D 0061;	
    // (ꉭ) YI SYLLABLE NGEP	[4260 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26D, 0x0061 };
    uint32_t const ces[9] = { 0x4260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_027)
{
    // A26D 0041;	
    // (ꉭ) YI SYLLABLE NGEP	[4260 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26D, 0x0041 };
    uint32_t const ces[9] = { 0x4260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_028)
{
    // A26D 0062;	
    // (ꉭ) YI SYLLABLE NGEP	[4260 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26D, 0x0062 };
    uint32_t const ces[9] = { 0x4260, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_029)
{
    // A26E 0021;	
    // (ꉮ) YI SYLLABLE HIT	[4261 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26E, 0x0021 };
    uint32_t const ces[9] = { 0x4261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_030)
{
    // A26E 003F;	
    // (ꉮ) YI SYLLABLE HIT	[4261 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26E, 0x003F };
    uint32_t const ces[9] = { 0x4261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_031)
{
    // A26E 0061;	
    // (ꉮ) YI SYLLABLE HIT	[4261 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26E, 0x0061 };
    uint32_t const ces[9] = { 0x4261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_032)
{
    // A26E 0041;	
    // (ꉮ) YI SYLLABLE HIT	[4261 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26E, 0x0041 };
    uint32_t const ces[9] = { 0x4261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_033)
{
    // A26E 0062;	
    // (ꉮ) YI SYLLABLE HIT	[4261 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26E, 0x0062 };
    uint32_t const ces[9] = { 0x4261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_034)
{
    // A26F 0021;	
    // (ꉯ) YI SYLLABLE HIEX	[4262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26F, 0x0021 };
    uint32_t const ces[9] = { 0x4262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_035)
{
    // A26F 003F;	
    // (ꉯ) YI SYLLABLE HIEX	[4262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26F, 0x003F };
    uint32_t const ces[9] = { 0x4262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_036)
{
    // A26F 0061;	
    // (ꉯ) YI SYLLABLE HIEX	[4262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26F, 0x0061 };
    uint32_t const ces[9] = { 0x4262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_037)
{
    // A26F 0041;	
    // (ꉯ) YI SYLLABLE HIEX	[4262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA26F, 0x0041 };
    uint32_t const ces[9] = { 0x4262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_038)
{
    // A26F 0062;	
    // (ꉯ) YI SYLLABLE HIEX	[4262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA26F, 0x0062 };
    uint32_t const ces[9] = { 0x4262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_039)
{
    // A270 0021;	
    // (ꉰ) YI SYLLABLE HIE	[4263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA270, 0x0021 };
    uint32_t const ces[9] = { 0x4263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_040)
{
    // A270 003F;	
    // (ꉰ) YI SYLLABLE HIE	[4263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA270, 0x003F };
    uint32_t const ces[9] = { 0x4263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_041)
{
    // A270 0061;	
    // (ꉰ) YI SYLLABLE HIE	[4263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA270, 0x0061 };
    uint32_t const ces[9] = { 0x4263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_042)
{
    // A270 0041;	
    // (ꉰ) YI SYLLABLE HIE	[4263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA270, 0x0041 };
    uint32_t const ces[9] = { 0x4263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_043)
{
    // A270 0062;	
    // (ꉰ) YI SYLLABLE HIE	[4263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA270, 0x0062 };
    uint32_t const ces[9] = { 0x4263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_044)
{
    // A271 0021;	
    // (ꉱ) YI SYLLABLE HAT	[4264 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA271, 0x0021 };
    uint32_t const ces[9] = { 0x4264, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_045)
{
    // A271 003F;	
    // (ꉱ) YI SYLLABLE HAT	[4264 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA271, 0x003F };
    uint32_t const ces[9] = { 0x4264, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_046)
{
    // A271 0061;	
    // (ꉱ) YI SYLLABLE HAT	[4264 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA271, 0x0061 };
    uint32_t const ces[9] = { 0x4264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_047)
{
    // A271 0041;	
    // (ꉱ) YI SYLLABLE HAT	[4264 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA271, 0x0041 };
    uint32_t const ces[9] = { 0x4264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_048)
{
    // A271 0062;	
    // (ꉱ) YI SYLLABLE HAT	[4264 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA271, 0x0062 };
    uint32_t const ces[9] = { 0x4264, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_049)
{
    // A272 0021;	
    // (ꉲ) YI SYLLABLE HAX	[4265 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA272, 0x0021 };
    uint32_t const ces[9] = { 0x4265, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_050)
{
    // A272 003F;	
    // (ꉲ) YI SYLLABLE HAX	[4265 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA272, 0x003F };
    uint32_t const ces[9] = { 0x4265, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_051)
{
    // A272 0061;	
    // (ꉲ) YI SYLLABLE HAX	[4265 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA272, 0x0061 };
    uint32_t const ces[9] = { 0x4265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_052)
{
    // A272 0041;	
    // (ꉲ) YI SYLLABLE HAX	[4265 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA272, 0x0041 };
    uint32_t const ces[9] = { 0x4265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_053)
{
    // A272 0062;	
    // (ꉲ) YI SYLLABLE HAX	[4265 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA272, 0x0062 };
    uint32_t const ces[9] = { 0x4265, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_054)
{
    // A273 0021;	
    // (ꉳ) YI SYLLABLE HA	[4266 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA273, 0x0021 };
    uint32_t const ces[9] = { 0x4266, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_055)
{
    // A273 003F;	
    // (ꉳ) YI SYLLABLE HA	[4266 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA273, 0x003F };
    uint32_t const ces[9] = { 0x4266, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_056)
{
    // A273 0061;	
    // (ꉳ) YI SYLLABLE HA	[4266 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA273, 0x0061 };
    uint32_t const ces[9] = { 0x4266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_057)
{
    // A273 0041;	
    // (ꉳ) YI SYLLABLE HA	[4266 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA273, 0x0041 };
    uint32_t const ces[9] = { 0x4266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_058)
{
    // A273 0062;	
    // (ꉳ) YI SYLLABLE HA	[4266 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA273, 0x0062 };
    uint32_t const ces[9] = { 0x4266, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_059)
{
    // A274 0021;	
    // (ꉴ) YI SYLLABLE HAP	[4267 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA274, 0x0021 };
    uint32_t const ces[9] = { 0x4267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_060)
{
    // A274 003F;	
    // (ꉴ) YI SYLLABLE HAP	[4267 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA274, 0x003F };
    uint32_t const ces[9] = { 0x4267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_061)
{
    // A274 0061;	
    // (ꉴ) YI SYLLABLE HAP	[4267 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA274, 0x0061 };
    uint32_t const ces[9] = { 0x4267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_062)
{
    // A274 0041;	
    // (ꉴ) YI SYLLABLE HAP	[4267 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA274, 0x0041 };
    uint32_t const ces[9] = { 0x4267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_063)
{
    // A274 0062;	
    // (ꉴ) YI SYLLABLE HAP	[4267 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA274, 0x0062 };
    uint32_t const ces[9] = { 0x4267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_064)
{
    // A275 0021;	
    // (ꉵ) YI SYLLABLE HUOT	[4268 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA275, 0x0021 };
    uint32_t const ces[9] = { 0x4268, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_065)
{
    // A275 003F;	
    // (ꉵ) YI SYLLABLE HUOT	[4268 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA275, 0x003F };
    uint32_t const ces[9] = { 0x4268, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_066)
{
    // A275 0061;	
    // (ꉵ) YI SYLLABLE HUOT	[4268 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA275, 0x0061 };
    uint32_t const ces[9] = { 0x4268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_067)
{
    // A275 0041;	
    // (ꉵ) YI SYLLABLE HUOT	[4268 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA275, 0x0041 };
    uint32_t const ces[9] = { 0x4268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_068)
{
    // A275 0062;	
    // (ꉵ) YI SYLLABLE HUOT	[4268 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA275, 0x0062 };
    uint32_t const ces[9] = { 0x4268, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_069)
{
    // A276 0021;	
    // (ꉶ) YI SYLLABLE HUOX	[4269 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA276, 0x0021 };
    uint32_t const ces[9] = { 0x4269, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_070)
{
    // A276 003F;	
    // (ꉶ) YI SYLLABLE HUOX	[4269 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA276, 0x003F };
    uint32_t const ces[9] = { 0x4269, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_071)
{
    // A276 0061;	
    // (ꉶ) YI SYLLABLE HUOX	[4269 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA276, 0x0061 };
    uint32_t const ces[9] = { 0x4269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_072)
{
    // A276 0041;	
    // (ꉶ) YI SYLLABLE HUOX	[4269 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA276, 0x0041 };
    uint32_t const ces[9] = { 0x4269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_073)
{
    // A276 0062;	
    // (ꉶ) YI SYLLABLE HUOX	[4269 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA276, 0x0062 };
    uint32_t const ces[9] = { 0x4269, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_074)
{
    // A277 0021;	
    // (ꉷ) YI SYLLABLE HUO	[426A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA277, 0x0021 };
    uint32_t const ces[9] = { 0x426A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_075)
{
    // A277 003F;	
    // (ꉷ) YI SYLLABLE HUO	[426A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA277, 0x003F };
    uint32_t const ces[9] = { 0x426A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_076)
{
    // A277 0061;	
    // (ꉷ) YI SYLLABLE HUO	[426A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA277, 0x0061 };
    uint32_t const ces[9] = { 0x426A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_077)
{
    // A277 0041;	
    // (ꉷ) YI SYLLABLE HUO	[426A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA277, 0x0041 };
    uint32_t const ces[9] = { 0x426A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_078)
{
    // A277 0062;	
    // (ꉷ) YI SYLLABLE HUO	[426A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA277, 0x0062 };
    uint32_t const ces[9] = { 0x426A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_079)
{
    // A278 0021;	
    // (ꉸ) YI SYLLABLE HUOP	[426B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA278, 0x0021 };
    uint32_t const ces[9] = { 0x426B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_080)
{
    // A278 003F;	
    // (ꉸ) YI SYLLABLE HUOP	[426B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA278, 0x003F };
    uint32_t const ces[9] = { 0x426B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_081)
{
    // A278 0061;	
    // (ꉸ) YI SYLLABLE HUOP	[426B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA278, 0x0061 };
    uint32_t const ces[9] = { 0x426B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_082)
{
    // A278 0041;	
    // (ꉸ) YI SYLLABLE HUOP	[426B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA278, 0x0041 };
    uint32_t const ces[9] = { 0x426B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_083)
{
    // A278 0062;	
    // (ꉸ) YI SYLLABLE HUOP	[426B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA278, 0x0062 };
    uint32_t const ces[9] = { 0x426B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_084)
{
    // A279 0021;	
    // (ꉹ) YI SYLLABLE HOT	[426C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA279, 0x0021 };
    uint32_t const ces[9] = { 0x426C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_085)
{
    // A279 003F;	
    // (ꉹ) YI SYLLABLE HOT	[426C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA279, 0x003F };
    uint32_t const ces[9] = { 0x426C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_086)
{
    // A279 0061;	
    // (ꉹ) YI SYLLABLE HOT	[426C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA279, 0x0061 };
    uint32_t const ces[9] = { 0x426C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_087)
{
    // A279 0041;	
    // (ꉹ) YI SYLLABLE HOT	[426C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA279, 0x0041 };
    uint32_t const ces[9] = { 0x426C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_088)
{
    // A279 0062;	
    // (ꉹ) YI SYLLABLE HOT	[426C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA279, 0x0062 };
    uint32_t const ces[9] = { 0x426C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_089)
{
    // A27A 0021;	
    // (ꉺ) YI SYLLABLE HOX	[426D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27A, 0x0021 };
    uint32_t const ces[9] = { 0x426D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_090)
{
    // A27A 003F;	
    // (ꉺ) YI SYLLABLE HOX	[426D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27A, 0x003F };
    uint32_t const ces[9] = { 0x426D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_091)
{
    // A27A 0061;	
    // (ꉺ) YI SYLLABLE HOX	[426D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27A, 0x0061 };
    uint32_t const ces[9] = { 0x426D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_092)
{
    // A27A 0041;	
    // (ꉺ) YI SYLLABLE HOX	[426D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27A, 0x0041 };
    uint32_t const ces[9] = { 0x426D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_093)
{
    // A27A 0062;	
    // (ꉺ) YI SYLLABLE HOX	[426D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27A, 0x0062 };
    uint32_t const ces[9] = { 0x426D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_094)
{
    // A27B 0021;	
    // (ꉻ) YI SYLLABLE HO	[426E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27B, 0x0021 };
    uint32_t const ces[9] = { 0x426E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_095)
{
    // A27B 003F;	
    // (ꉻ) YI SYLLABLE HO	[426E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27B, 0x003F };
    uint32_t const ces[9] = { 0x426E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_096)
{
    // A27B 0061;	
    // (ꉻ) YI SYLLABLE HO	[426E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27B, 0x0061 };
    uint32_t const ces[9] = { 0x426E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_097)
{
    // A27B 0041;	
    // (ꉻ) YI SYLLABLE HO	[426E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27B, 0x0041 };
    uint32_t const ces[9] = { 0x426E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_098)
{
    // A27B 0062;	
    // (ꉻ) YI SYLLABLE HO	[426E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27B, 0x0062 };
    uint32_t const ces[9] = { 0x426E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_099)
{
    // A27C 0021;	
    // (ꉼ) YI SYLLABLE HOP	[426F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27C, 0x0021 };
    uint32_t const ces[9] = { 0x426F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_100)
{
    // A27C 003F;	
    // (ꉼ) YI SYLLABLE HOP	[426F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27C, 0x003F };
    uint32_t const ces[9] = { 0x426F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_101)
{
    // A27C 0061;	
    // (ꉼ) YI SYLLABLE HOP	[426F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27C, 0x0061 };
    uint32_t const ces[9] = { 0x426F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_102)
{
    // A27C 0041;	
    // (ꉼ) YI SYLLABLE HOP	[426F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27C, 0x0041 };
    uint32_t const ces[9] = { 0x426F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_103)
{
    // A27C 0062;	
    // (ꉼ) YI SYLLABLE HOP	[426F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27C, 0x0062 };
    uint32_t const ces[9] = { 0x426F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_104)
{
    // A27D 0021;	
    // (ꉽ) YI SYLLABLE HEX	[4270 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27D, 0x0021 };
    uint32_t const ces[9] = { 0x4270, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_105)
{
    // A27D 003F;	
    // (ꉽ) YI SYLLABLE HEX	[4270 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27D, 0x003F };
    uint32_t const ces[9] = { 0x4270, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_106)
{
    // A27D 0061;	
    // (ꉽ) YI SYLLABLE HEX	[4270 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27D, 0x0061 };
    uint32_t const ces[9] = { 0x4270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_107)
{
    // A27D 0041;	
    // (ꉽ) YI SYLLABLE HEX	[4270 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27D, 0x0041 };
    uint32_t const ces[9] = { 0x4270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_108)
{
    // A27D 0062;	
    // (ꉽ) YI SYLLABLE HEX	[4270 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27D, 0x0062 };
    uint32_t const ces[9] = { 0x4270, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_109)
{
    // A27E 0021;	
    // (ꉾ) YI SYLLABLE HE	[4271 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27E, 0x0021 };
    uint32_t const ces[9] = { 0x4271, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_110)
{
    // A27E 003F;	
    // (ꉾ) YI SYLLABLE HE	[4271 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27E, 0x003F };
    uint32_t const ces[9] = { 0x4271, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_111)
{
    // A27E 0061;	
    // (ꉾ) YI SYLLABLE HE	[4271 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27E, 0x0061 };
    uint32_t const ces[9] = { 0x4271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_112)
{
    // A27E 0041;	
    // (ꉾ) YI SYLLABLE HE	[4271 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27E, 0x0041 };
    uint32_t const ces[9] = { 0x4271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_113)
{
    // A27E 0062;	
    // (ꉾ) YI SYLLABLE HE	[4271 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27E, 0x0062 };
    uint32_t const ces[9] = { 0x4271, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_114)
{
    // A27F 0021;	
    // (ꉿ) YI SYLLABLE HEP	[4272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27F, 0x0021 };
    uint32_t const ces[9] = { 0x4272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_115)
{
    // A27F 003F;	
    // (ꉿ) YI SYLLABLE HEP	[4272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27F, 0x003F };
    uint32_t const ces[9] = { 0x4272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_116)
{
    // A27F 0061;	
    // (ꉿ) YI SYLLABLE HEP	[4272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27F, 0x0061 };
    uint32_t const ces[9] = { 0x4272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_117)
{
    // A27F 0041;	
    // (ꉿ) YI SYLLABLE HEP	[4272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA27F, 0x0041 };
    uint32_t const ces[9] = { 0x4272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_118)
{
    // A27F 0062;	
    // (ꉿ) YI SYLLABLE HEP	[4272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA27F, 0x0062 };
    uint32_t const ces[9] = { 0x4272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_119)
{
    // A280 0021;	
    // (ꊀ) YI SYLLABLE WAT	[4273 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA280, 0x0021 };
    uint32_t const ces[9] = { 0x4273, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_120)
{
    // A280 003F;	
    // (ꊀ) YI SYLLABLE WAT	[4273 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA280, 0x003F };
    uint32_t const ces[9] = { 0x4273, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_121)
{
    // A280 0061;	
    // (ꊀ) YI SYLLABLE WAT	[4273 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA280, 0x0061 };
    uint32_t const ces[9] = { 0x4273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_122)
{
    // A280 0041;	
    // (ꊀ) YI SYLLABLE WAT	[4273 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA280, 0x0041 };
    uint32_t const ces[9] = { 0x4273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_123)
{
    // A280 0062;	
    // (ꊀ) YI SYLLABLE WAT	[4273 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA280, 0x0062 };
    uint32_t const ces[9] = { 0x4273, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_124)
{
    // A281 0021;	
    // (ꊁ) YI SYLLABLE WAX	[4274 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA281, 0x0021 };
    uint32_t const ces[9] = { 0x4274, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_125)
{
    // A281 003F;	
    // (ꊁ) YI SYLLABLE WAX	[4274 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA281, 0x003F };
    uint32_t const ces[9] = { 0x4274, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_126)
{
    // A281 0061;	
    // (ꊁ) YI SYLLABLE WAX	[4274 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA281, 0x0061 };
    uint32_t const ces[9] = { 0x4274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_127)
{
    // A281 0041;	
    // (ꊁ) YI SYLLABLE WAX	[4274 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA281, 0x0041 };
    uint32_t const ces[9] = { 0x4274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_128)
{
    // A281 0062;	
    // (ꊁ) YI SYLLABLE WAX	[4274 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA281, 0x0062 };
    uint32_t const ces[9] = { 0x4274, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_129)
{
    // A282 0021;	
    // (ꊂ) YI SYLLABLE WA	[4275 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA282, 0x0021 };
    uint32_t const ces[9] = { 0x4275, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_130)
{
    // A282 003F;	
    // (ꊂ) YI SYLLABLE WA	[4275 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA282, 0x003F };
    uint32_t const ces[9] = { 0x4275, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_131)
{
    // A282 0061;	
    // (ꊂ) YI SYLLABLE WA	[4275 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA282, 0x0061 };
    uint32_t const ces[9] = { 0x4275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_132)
{
    // A282 0041;	
    // (ꊂ) YI SYLLABLE WA	[4275 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA282, 0x0041 };
    uint32_t const ces[9] = { 0x4275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_133)
{
    // A282 0062;	
    // (ꊂ) YI SYLLABLE WA	[4275 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA282, 0x0062 };
    uint32_t const ces[9] = { 0x4275, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_134)
{
    // A283 0021;	
    // (ꊃ) YI SYLLABLE WAP	[4276 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA283, 0x0021 };
    uint32_t const ces[9] = { 0x4276, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_135)
{
    // A283 003F;	
    // (ꊃ) YI SYLLABLE WAP	[4276 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA283, 0x003F };
    uint32_t const ces[9] = { 0x4276, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_136)
{
    // A283 0061;	
    // (ꊃ) YI SYLLABLE WAP	[4276 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA283, 0x0061 };
    uint32_t const ces[9] = { 0x4276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_137)
{
    // A283 0041;	
    // (ꊃ) YI SYLLABLE WAP	[4276 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA283, 0x0041 };
    uint32_t const ces[9] = { 0x4276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_138)
{
    // A283 0062;	
    // (ꊃ) YI SYLLABLE WAP	[4276 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA283, 0x0062 };
    uint32_t const ces[9] = { 0x4276, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_139)
{
    // A284 0021;	
    // (ꊄ) YI SYLLABLE WUOX	[4277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA284, 0x0021 };
    uint32_t const ces[9] = { 0x4277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_140)
{
    // A284 003F;	
    // (ꊄ) YI SYLLABLE WUOX	[4277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA284, 0x003F };
    uint32_t const ces[9] = { 0x4277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_141)
{
    // A284 0061;	
    // (ꊄ) YI SYLLABLE WUOX	[4277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA284, 0x0061 };
    uint32_t const ces[9] = { 0x4277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_142)
{
    // A284 0041;	
    // (ꊄ) YI SYLLABLE WUOX	[4277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA284, 0x0041 };
    uint32_t const ces[9] = { 0x4277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_143)
{
    // A284 0062;	
    // (ꊄ) YI SYLLABLE WUOX	[4277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA284, 0x0062 };
    uint32_t const ces[9] = { 0x4277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_144)
{
    // A285 0021;	
    // (ꊅ) YI SYLLABLE WUO	[4278 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA285, 0x0021 };
    uint32_t const ces[9] = { 0x4278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_145)
{
    // A285 003F;	
    // (ꊅ) YI SYLLABLE WUO	[4278 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA285, 0x003F };
    uint32_t const ces[9] = { 0x4278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_146)
{
    // A285 0061;	
    // (ꊅ) YI SYLLABLE WUO	[4278 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA285, 0x0061 };
    uint32_t const ces[9] = { 0x4278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_147)
{
    // A285 0041;	
    // (ꊅ) YI SYLLABLE WUO	[4278 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA285, 0x0041 };
    uint32_t const ces[9] = { 0x4278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_148)
{
    // A285 0062;	
    // (ꊅ) YI SYLLABLE WUO	[4278 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA285, 0x0062 };
    uint32_t const ces[9] = { 0x4278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_149)
{
    // A286 0021;	
    // (ꊆ) YI SYLLABLE WUOP	[4279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA286, 0x0021 };
    uint32_t const ces[9] = { 0x4279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_150)
{
    // A286 003F;	
    // (ꊆ) YI SYLLABLE WUOP	[4279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA286, 0x003F };
    uint32_t const ces[9] = { 0x4279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_151)
{
    // A286 0061;	
    // (ꊆ) YI SYLLABLE WUOP	[4279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA286, 0x0061 };
    uint32_t const ces[9] = { 0x4279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_152)
{
    // A286 0041;	
    // (ꊆ) YI SYLLABLE WUOP	[4279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA286, 0x0041 };
    uint32_t const ces[9] = { 0x4279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_153)
{
    // A286 0062;	
    // (ꊆ) YI SYLLABLE WUOP	[4279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA286, 0x0062 };
    uint32_t const ces[9] = { 0x4279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_154)
{
    // A287 0021;	
    // (ꊇ) YI SYLLABLE WOX	[427A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA287, 0x0021 };
    uint32_t const ces[9] = { 0x427A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_155)
{
    // A287 003F;	
    // (ꊇ) YI SYLLABLE WOX	[427A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA287, 0x003F };
    uint32_t const ces[9] = { 0x427A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_156)
{
    // A287 0061;	
    // (ꊇ) YI SYLLABLE WOX	[427A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA287, 0x0061 };
    uint32_t const ces[9] = { 0x427A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_157)
{
    // A287 0041;	
    // (ꊇ) YI SYLLABLE WOX	[427A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA287, 0x0041 };
    uint32_t const ces[9] = { 0x427A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_158)
{
    // A287 0062;	
    // (ꊇ) YI SYLLABLE WOX	[427A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA287, 0x0062 };
    uint32_t const ces[9] = { 0x427A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_159)
{
    // A288 0021;	
    // (ꊈ) YI SYLLABLE WO	[427B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA288, 0x0021 };
    uint32_t const ces[9] = { 0x427B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_160)
{
    // A288 003F;	
    // (ꊈ) YI SYLLABLE WO	[427B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA288, 0x003F };
    uint32_t const ces[9] = { 0x427B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_161)
{
    // A288 0061;	
    // (ꊈ) YI SYLLABLE WO	[427B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA288, 0x0061 };
    uint32_t const ces[9] = { 0x427B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_162)
{
    // A288 0041;	
    // (ꊈ) YI SYLLABLE WO	[427B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA288, 0x0041 };
    uint32_t const ces[9] = { 0x427B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_163)
{
    // A288 0062;	
    // (ꊈ) YI SYLLABLE WO	[427B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA288, 0x0062 };
    uint32_t const ces[9] = { 0x427B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_164)
{
    // A289 0021;	
    // (ꊉ) YI SYLLABLE WOP	[427C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA289, 0x0021 };
    uint32_t const ces[9] = { 0x427C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_165)
{
    // A289 003F;	
    // (ꊉ) YI SYLLABLE WOP	[427C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA289, 0x003F };
    uint32_t const ces[9] = { 0x427C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_166)
{
    // A289 0061;	
    // (ꊉ) YI SYLLABLE WOP	[427C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA289, 0x0061 };
    uint32_t const ces[9] = { 0x427C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_167)
{
    // A289 0041;	
    // (ꊉ) YI SYLLABLE WOP	[427C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA289, 0x0041 };
    uint32_t const ces[9] = { 0x427C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_168)
{
    // A289 0062;	
    // (ꊉ) YI SYLLABLE WOP	[427C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA289, 0x0062 };
    uint32_t const ces[9] = { 0x427C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_169)
{
    // A28A 0021;	
    // (ꊊ) YI SYLLABLE WEX	[427D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28A, 0x0021 };
    uint32_t const ces[9] = { 0x427D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_170)
{
    // A28A 003F;	
    // (ꊊ) YI SYLLABLE WEX	[427D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28A, 0x003F };
    uint32_t const ces[9] = { 0x427D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_171)
{
    // A28A 0061;	
    // (ꊊ) YI SYLLABLE WEX	[427D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28A, 0x0061 };
    uint32_t const ces[9] = { 0x427D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_172)
{
    // A28A 0041;	
    // (ꊊ) YI SYLLABLE WEX	[427D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28A, 0x0041 };
    uint32_t const ces[9] = { 0x427D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_173)
{
    // A28A 0062;	
    // (ꊊ) YI SYLLABLE WEX	[427D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28A, 0x0062 };
    uint32_t const ces[9] = { 0x427D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_174)
{
    // A28B 0021;	
    // (ꊋ) YI SYLLABLE WE	[427E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28B, 0x0021 };
    uint32_t const ces[9] = { 0x427E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_175)
{
    // A28B 003F;	
    // (ꊋ) YI SYLLABLE WE	[427E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28B, 0x003F };
    uint32_t const ces[9] = { 0x427E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_176)
{
    // A28B 0061;	
    // (ꊋ) YI SYLLABLE WE	[427E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28B, 0x0061 };
    uint32_t const ces[9] = { 0x427E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_177)
{
    // A28B 0041;	
    // (ꊋ) YI SYLLABLE WE	[427E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28B, 0x0041 };
    uint32_t const ces[9] = { 0x427E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_178)
{
    // A28B 0062;	
    // (ꊋ) YI SYLLABLE WE	[427E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28B, 0x0062 };
    uint32_t const ces[9] = { 0x427E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_179)
{
    // A28C 0021;	
    // (ꊌ) YI SYLLABLE WEP	[427F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28C, 0x0021 };
    uint32_t const ces[9] = { 0x427F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_180)
{
    // A28C 003F;	
    // (ꊌ) YI SYLLABLE WEP	[427F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28C, 0x003F };
    uint32_t const ces[9] = { 0x427F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_181)
{
    // A28C 0061;	
    // (ꊌ) YI SYLLABLE WEP	[427F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28C, 0x0061 };
    uint32_t const ces[9] = { 0x427F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_182)
{
    // A28C 0041;	
    // (ꊌ) YI SYLLABLE WEP	[427F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28C, 0x0041 };
    uint32_t const ces[9] = { 0x427F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_183)
{
    // A28C 0062;	
    // (ꊌ) YI SYLLABLE WEP	[427F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28C, 0x0062 };
    uint32_t const ces[9] = { 0x427F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_184)
{
    // A28D 0021;	
    // (ꊍ) YI SYLLABLE ZIT	[4280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28D, 0x0021 };
    uint32_t const ces[9] = { 0x4280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_185)
{
    // A28D 003F;	
    // (ꊍ) YI SYLLABLE ZIT	[4280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28D, 0x003F };
    uint32_t const ces[9] = { 0x4280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_186)
{
    // A28D 0061;	
    // (ꊍ) YI SYLLABLE ZIT	[4280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28D, 0x0061 };
    uint32_t const ces[9] = { 0x4280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_187)
{
    // A28D 0041;	
    // (ꊍ) YI SYLLABLE ZIT	[4280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28D, 0x0041 };
    uint32_t const ces[9] = { 0x4280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_188)
{
    // A28D 0062;	
    // (ꊍ) YI SYLLABLE ZIT	[4280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28D, 0x0062 };
    uint32_t const ces[9] = { 0x4280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_189)
{
    // A28E 0021;	
    // (ꊎ) YI SYLLABLE ZIX	[4281 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28E, 0x0021 };
    uint32_t const ces[9] = { 0x4281, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_190)
{
    // A28E 003F;	
    // (ꊎ) YI SYLLABLE ZIX	[4281 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28E, 0x003F };
    uint32_t const ces[9] = { 0x4281, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_191)
{
    // A28E 0061;	
    // (ꊎ) YI SYLLABLE ZIX	[4281 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28E, 0x0061 };
    uint32_t const ces[9] = { 0x4281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_192)
{
    // A28E 0041;	
    // (ꊎ) YI SYLLABLE ZIX	[4281 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28E, 0x0041 };
    uint32_t const ces[9] = { 0x4281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_193)
{
    // A28E 0062;	
    // (ꊎ) YI SYLLABLE ZIX	[4281 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28E, 0x0062 };
    uint32_t const ces[9] = { 0x4281, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_194)
{
    // A28F 0021;	
    // (ꊏ) YI SYLLABLE ZI	[4282 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28F, 0x0021 };
    uint32_t const ces[9] = { 0x4282, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_195)
{
    // A28F 003F;	
    // (ꊏ) YI SYLLABLE ZI	[4282 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28F, 0x003F };
    uint32_t const ces[9] = { 0x4282, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_196)
{
    // A28F 0061;	
    // (ꊏ) YI SYLLABLE ZI	[4282 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28F, 0x0061 };
    uint32_t const ces[9] = { 0x4282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_197)
{
    // A28F 0041;	
    // (ꊏ) YI SYLLABLE ZI	[4282 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA28F, 0x0041 };
    uint32_t const ces[9] = { 0x4282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_198)
{
    // A28F 0062;	
    // (ꊏ) YI SYLLABLE ZI	[4282 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA28F, 0x0062 };
    uint32_t const ces[9] = { 0x4282, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_199)
{
    // A290 0021;	
    // (ꊐ) YI SYLLABLE ZIP	[4283 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA290, 0x0021 };
    uint32_t const ces[9] = { 0x4283, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_200)
{
    // A290 003F;	
    // (ꊐ) YI SYLLABLE ZIP	[4283 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA290, 0x003F };
    uint32_t const ces[9] = { 0x4283, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_201)
{
    // A290 0061;	
    // (ꊐ) YI SYLLABLE ZIP	[4283 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA290, 0x0061 };
    uint32_t const ces[9] = { 0x4283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_202)
{
    // A290 0041;	
    // (ꊐ) YI SYLLABLE ZIP	[4283 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA290, 0x0041 };
    uint32_t const ces[9] = { 0x4283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_203)
{
    // A290 0062;	
    // (ꊐ) YI SYLLABLE ZIP	[4283 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA290, 0x0062 };
    uint32_t const ces[9] = { 0x4283, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_204)
{
    // A291 0021;	
    // (ꊑ) YI SYLLABLE ZIEX	[4284 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA291, 0x0021 };
    uint32_t const ces[9] = { 0x4284, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_205)
{
    // A291 003F;	
    // (ꊑ) YI SYLLABLE ZIEX	[4284 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA291, 0x003F };
    uint32_t const ces[9] = { 0x4284, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_206)
{
    // A291 0061;	
    // (ꊑ) YI SYLLABLE ZIEX	[4284 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA291, 0x0061 };
    uint32_t const ces[9] = { 0x4284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_207)
{
    // A291 0041;	
    // (ꊑ) YI SYLLABLE ZIEX	[4284 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA291, 0x0041 };
    uint32_t const ces[9] = { 0x4284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_208)
{
    // A291 0062;	
    // (ꊑ) YI SYLLABLE ZIEX	[4284 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA291, 0x0062 };
    uint32_t const ces[9] = { 0x4284, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_209)
{
    // A292 0021;	
    // (ꊒ) YI SYLLABLE ZIE	[4285 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA292, 0x0021 };
    uint32_t const ces[9] = { 0x4285, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_210)
{
    // A292 003F;	
    // (ꊒ) YI SYLLABLE ZIE	[4285 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA292, 0x003F };
    uint32_t const ces[9] = { 0x4285, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_211)
{
    // A292 0061;	
    // (ꊒ) YI SYLLABLE ZIE	[4285 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA292, 0x0061 };
    uint32_t const ces[9] = { 0x4285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_212)
{
    // A292 0041;	
    // (ꊒ) YI SYLLABLE ZIE	[4285 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA292, 0x0041 };
    uint32_t const ces[9] = { 0x4285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_213)
{
    // A292 0062;	
    // (ꊒ) YI SYLLABLE ZIE	[4285 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA292, 0x0062 };
    uint32_t const ces[9] = { 0x4285, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_214)
{
    // A293 0021;	
    // (ꊓ) YI SYLLABLE ZIEP	[4286 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA293, 0x0021 };
    uint32_t const ces[9] = { 0x4286, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_215)
{
    // A293 003F;	
    // (ꊓ) YI SYLLABLE ZIEP	[4286 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA293, 0x003F };
    uint32_t const ces[9] = { 0x4286, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_216)
{
    // A293 0061;	
    // (ꊓ) YI SYLLABLE ZIEP	[4286 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA293, 0x0061 };
    uint32_t const ces[9] = { 0x4286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_217)
{
    // A293 0041;	
    // (ꊓ) YI SYLLABLE ZIEP	[4286 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA293, 0x0041 };
    uint32_t const ces[9] = { 0x4286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_218)
{
    // A293 0062;	
    // (ꊓ) YI SYLLABLE ZIEP	[4286 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA293, 0x0062 };
    uint32_t const ces[9] = { 0x4286, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_219)
{
    // A294 0021;	
    // (ꊔ) YI SYLLABLE ZAT	[4287 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA294, 0x0021 };
    uint32_t const ces[9] = { 0x4287, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_220)
{
    // A294 003F;	
    // (ꊔ) YI SYLLABLE ZAT	[4287 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA294, 0x003F };
    uint32_t const ces[9] = { 0x4287, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_221)
{
    // A294 0061;	
    // (ꊔ) YI SYLLABLE ZAT	[4287 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA294, 0x0061 };
    uint32_t const ces[9] = { 0x4287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_222)
{
    // A294 0041;	
    // (ꊔ) YI SYLLABLE ZAT	[4287 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA294, 0x0041 };
    uint32_t const ces[9] = { 0x4287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_223)
{
    // A294 0062;	
    // (ꊔ) YI SYLLABLE ZAT	[4287 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA294, 0x0062 };
    uint32_t const ces[9] = { 0x4287, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_224)
{
    // A295 0021;	
    // (ꊕ) YI SYLLABLE ZAX	[4288 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA295, 0x0021 };
    uint32_t const ces[9] = { 0x4288, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_225)
{
    // A295 003F;	
    // (ꊕ) YI SYLLABLE ZAX	[4288 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA295, 0x003F };
    uint32_t const ces[9] = { 0x4288, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_226)
{
    // A295 0061;	
    // (ꊕ) YI SYLLABLE ZAX	[4288 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA295, 0x0061 };
    uint32_t const ces[9] = { 0x4288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_227)
{
    // A295 0041;	
    // (ꊕ) YI SYLLABLE ZAX	[4288 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA295, 0x0041 };
    uint32_t const ces[9] = { 0x4288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_228)
{
    // A295 0062;	
    // (ꊕ) YI SYLLABLE ZAX	[4288 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA295, 0x0062 };
    uint32_t const ces[9] = { 0x4288, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_229)
{
    // A296 0021;	
    // (ꊖ) YI SYLLABLE ZA	[4289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA296, 0x0021 };
    uint32_t const ces[9] = { 0x4289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_230)
{
    // A296 003F;	
    // (ꊖ) YI SYLLABLE ZA	[4289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA296, 0x003F };
    uint32_t const ces[9] = { 0x4289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_231)
{
    // A296 0061;	
    // (ꊖ) YI SYLLABLE ZA	[4289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA296, 0x0061 };
    uint32_t const ces[9] = { 0x4289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_232)
{
    // A296 0041;	
    // (ꊖ) YI SYLLABLE ZA	[4289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA296, 0x0041 };
    uint32_t const ces[9] = { 0x4289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_233)
{
    // A296 0062;	
    // (ꊖ) YI SYLLABLE ZA	[4289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA296, 0x0062 };
    uint32_t const ces[9] = { 0x4289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_234)
{
    // A297 0021;	
    // (ꊗ) YI SYLLABLE ZAP	[428A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA297, 0x0021 };
    uint32_t const ces[9] = { 0x428A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_235)
{
    // A297 003F;	
    // (ꊗ) YI SYLLABLE ZAP	[428A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA297, 0x003F };
    uint32_t const ces[9] = { 0x428A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_236)
{
    // A297 0061;	
    // (ꊗ) YI SYLLABLE ZAP	[428A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA297, 0x0061 };
    uint32_t const ces[9] = { 0x428A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_237)
{
    // A297 0041;	
    // (ꊗ) YI SYLLABLE ZAP	[428A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA297, 0x0041 };
    uint32_t const ces[9] = { 0x428A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_238)
{
    // A297 0062;	
    // (ꊗ) YI SYLLABLE ZAP	[428A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA297, 0x0062 };
    uint32_t const ces[9] = { 0x428A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_239)
{
    // A298 0021;	
    // (ꊘ) YI SYLLABLE ZUOX	[428B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA298, 0x0021 };
    uint32_t const ces[9] = { 0x428B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_240)
{
    // A298 003F;	
    // (ꊘ) YI SYLLABLE ZUOX	[428B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA298, 0x003F };
    uint32_t const ces[9] = { 0x428B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_241)
{
    // A298 0061;	
    // (ꊘ) YI SYLLABLE ZUOX	[428B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA298, 0x0061 };
    uint32_t const ces[9] = { 0x428B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_242)
{
    // A298 0041;	
    // (ꊘ) YI SYLLABLE ZUOX	[428B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA298, 0x0041 };
    uint32_t const ces[9] = { 0x428B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_243)
{
    // A298 0062;	
    // (ꊘ) YI SYLLABLE ZUOX	[428B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA298, 0x0062 };
    uint32_t const ces[9] = { 0x428B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_244)
{
    // A299 0021;	
    // (ꊙ) YI SYLLABLE ZUO	[428C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA299, 0x0021 };
    uint32_t const ces[9] = { 0x428C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_245)
{
    // A299 003F;	
    // (ꊙ) YI SYLLABLE ZUO	[428C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA299, 0x003F };
    uint32_t const ces[9] = { 0x428C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_246)
{
    // A299 0061;	
    // (ꊙ) YI SYLLABLE ZUO	[428C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA299, 0x0061 };
    uint32_t const ces[9] = { 0x428C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_247)
{
    // A299 0041;	
    // (ꊙ) YI SYLLABLE ZUO	[428C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA299, 0x0041 };
    uint32_t const ces[9] = { 0x428C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_248)
{
    // A299 0062;	
    // (ꊙ) YI SYLLABLE ZUO	[428C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA299, 0x0062 };
    uint32_t const ces[9] = { 0x428C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_249)
{
    // A29A 0021;	
    // (ꊚ) YI SYLLABLE ZUOP	[428D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29A, 0x0021 };
    uint32_t const ces[9] = { 0x428D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_250)
{
    // A29A 003F;	
    // (ꊚ) YI SYLLABLE ZUOP	[428D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29A, 0x003F };
    uint32_t const ces[9] = { 0x428D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_251)
{
    // A29A 0061;	
    // (ꊚ) YI SYLLABLE ZUOP	[428D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29A, 0x0061 };
    uint32_t const ces[9] = { 0x428D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_252)
{
    // A29A 0041;	
    // (ꊚ) YI SYLLABLE ZUOP	[428D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29A, 0x0041 };
    uint32_t const ces[9] = { 0x428D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_253)
{
    // A29A 0062;	
    // (ꊚ) YI SYLLABLE ZUOP	[428D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29A, 0x0062 };
    uint32_t const ces[9] = { 0x428D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_254)
{
    // A29B 0021;	
    // (ꊛ) YI SYLLABLE ZOT	[428E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29B, 0x0021 };
    uint32_t const ces[9] = { 0x428E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_255)
{
    // A29B 003F;	
    // (ꊛ) YI SYLLABLE ZOT	[428E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29B, 0x003F };
    uint32_t const ces[9] = { 0x428E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_256)
{
    // A29B 0061;	
    // (ꊛ) YI SYLLABLE ZOT	[428E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29B, 0x0061 };
    uint32_t const ces[9] = { 0x428E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_257)
{
    // A29B 0041;	
    // (ꊛ) YI SYLLABLE ZOT	[428E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29B, 0x0041 };
    uint32_t const ces[9] = { 0x428E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_258)
{
    // A29B 0062;	
    // (ꊛ) YI SYLLABLE ZOT	[428E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29B, 0x0062 };
    uint32_t const ces[9] = { 0x428E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_259)
{
    // A29C 0021;	
    // (ꊜ) YI SYLLABLE ZOX	[428F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29C, 0x0021 };
    uint32_t const ces[9] = { 0x428F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_260)
{
    // A29C 003F;	
    // (ꊜ) YI SYLLABLE ZOX	[428F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29C, 0x003F };
    uint32_t const ces[9] = { 0x428F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_261)
{
    // A29C 0061;	
    // (ꊜ) YI SYLLABLE ZOX	[428F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29C, 0x0061 };
    uint32_t const ces[9] = { 0x428F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_262)
{
    // A29C 0041;	
    // (ꊜ) YI SYLLABLE ZOX	[428F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29C, 0x0041 };
    uint32_t const ces[9] = { 0x428F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_263)
{
    // A29C 0062;	
    // (ꊜ) YI SYLLABLE ZOX	[428F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29C, 0x0062 };
    uint32_t const ces[9] = { 0x428F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_264)
{
    // A29D 0021;	
    // (ꊝ) YI SYLLABLE ZO	[4290 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29D, 0x0021 };
    uint32_t const ces[9] = { 0x4290, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_265)
{
    // A29D 003F;	
    // (ꊝ) YI SYLLABLE ZO	[4290 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29D, 0x003F };
    uint32_t const ces[9] = { 0x4290, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_266)
{
    // A29D 0061;	
    // (ꊝ) YI SYLLABLE ZO	[4290 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29D, 0x0061 };
    uint32_t const ces[9] = { 0x4290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_267)
{
    // A29D 0041;	
    // (ꊝ) YI SYLLABLE ZO	[4290 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29D, 0x0041 };
    uint32_t const ces[9] = { 0x4290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_268)
{
    // A29D 0062;	
    // (ꊝ) YI SYLLABLE ZO	[4290 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29D, 0x0062 };
    uint32_t const ces[9] = { 0x4290, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_269)
{
    // A29E 0021;	
    // (ꊞ) YI SYLLABLE ZOP	[4291 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29E, 0x0021 };
    uint32_t const ces[9] = { 0x4291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_270)
{
    // A29E 003F;	
    // (ꊞ) YI SYLLABLE ZOP	[4291 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29E, 0x003F };
    uint32_t const ces[9] = { 0x4291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_271)
{
    // A29E 0061;	
    // (ꊞ) YI SYLLABLE ZOP	[4291 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29E, 0x0061 };
    uint32_t const ces[9] = { 0x4291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_272)
{
    // A29E 0041;	
    // (ꊞ) YI SYLLABLE ZOP	[4291 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29E, 0x0041 };
    uint32_t const ces[9] = { 0x4291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_273)
{
    // A29E 0062;	
    // (ꊞ) YI SYLLABLE ZOP	[4291 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29E, 0x0062 };
    uint32_t const ces[9] = { 0x4291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_274)
{
    // A29F 0021;	
    // (ꊟ) YI SYLLABLE ZEX	[4292 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29F, 0x0021 };
    uint32_t const ces[9] = { 0x4292, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_275)
{
    // A29F 003F;	
    // (ꊟ) YI SYLLABLE ZEX	[4292 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29F, 0x003F };
    uint32_t const ces[9] = { 0x4292, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_276)
{
    // A29F 0061;	
    // (ꊟ) YI SYLLABLE ZEX	[4292 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29F, 0x0061 };
    uint32_t const ces[9] = { 0x4292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_277)
{
    // A29F 0041;	
    // (ꊟ) YI SYLLABLE ZEX	[4292 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA29F, 0x0041 };
    uint32_t const ces[9] = { 0x4292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_278)
{
    // A29F 0062;	
    // (ꊟ) YI SYLLABLE ZEX	[4292 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA29F, 0x0062 };
    uint32_t const ces[9] = { 0x4292, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_279)
{
    // A2A0 0021;	
    // (ꊠ) YI SYLLABLE ZE	[4293 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A0, 0x0021 };
    uint32_t const ces[9] = { 0x4293, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_280)
{
    // A2A0 003F;	
    // (ꊠ) YI SYLLABLE ZE	[4293 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A0, 0x003F };
    uint32_t const ces[9] = { 0x4293, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_281)
{
    // A2A0 0061;	
    // (ꊠ) YI SYLLABLE ZE	[4293 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A0, 0x0061 };
    uint32_t const ces[9] = { 0x4293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_282)
{
    // A2A0 0041;	
    // (ꊠ) YI SYLLABLE ZE	[4293 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A0, 0x0041 };
    uint32_t const ces[9] = { 0x4293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_283)
{
    // A2A0 0062;	
    // (ꊠ) YI SYLLABLE ZE	[4293 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A0, 0x0062 };
    uint32_t const ces[9] = { 0x4293, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_284)
{
    // A2A1 0021;	
    // (ꊡ) YI SYLLABLE ZEP	[4294 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A1, 0x0021 };
    uint32_t const ces[9] = { 0x4294, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_285)
{
    // A2A1 003F;	
    // (ꊡ) YI SYLLABLE ZEP	[4294 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A1, 0x003F };
    uint32_t const ces[9] = { 0x4294, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_286)
{
    // A2A1 0061;	
    // (ꊡ) YI SYLLABLE ZEP	[4294 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A1, 0x0061 };
    uint32_t const ces[9] = { 0x4294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_287)
{
    // A2A1 0041;	
    // (ꊡ) YI SYLLABLE ZEP	[4294 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A1, 0x0041 };
    uint32_t const ces[9] = { 0x4294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_288)
{
    // A2A1 0062;	
    // (ꊡ) YI SYLLABLE ZEP	[4294 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A1, 0x0062 };
    uint32_t const ces[9] = { 0x4294, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_289)
{
    // A2A2 0021;	
    // (ꊢ) YI SYLLABLE ZUT	[4295 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A2, 0x0021 };
    uint32_t const ces[9] = { 0x4295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_290)
{
    // A2A2 003F;	
    // (ꊢ) YI SYLLABLE ZUT	[4295 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A2, 0x003F };
    uint32_t const ces[9] = { 0x4295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_291)
{
    // A2A2 0061;	
    // (ꊢ) YI SYLLABLE ZUT	[4295 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A2, 0x0061 };
    uint32_t const ces[9] = { 0x4295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_292)
{
    // A2A2 0041;	
    // (ꊢ) YI SYLLABLE ZUT	[4295 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A2, 0x0041 };
    uint32_t const ces[9] = { 0x4295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_293)
{
    // A2A2 0062;	
    // (ꊢ) YI SYLLABLE ZUT	[4295 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A2, 0x0062 };
    uint32_t const ces[9] = { 0x4295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_294)
{
    // A2A3 0021;	
    // (ꊣ) YI SYLLABLE ZUX	[4296 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A3, 0x0021 };
    uint32_t const ces[9] = { 0x4296, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_295)
{
    // A2A3 003F;	
    // (ꊣ) YI SYLLABLE ZUX	[4296 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A3, 0x003F };
    uint32_t const ces[9] = { 0x4296, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_296)
{
    // A2A3 0061;	
    // (ꊣ) YI SYLLABLE ZUX	[4296 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A3, 0x0061 };
    uint32_t const ces[9] = { 0x4296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_297)
{
    // A2A3 0041;	
    // (ꊣ) YI SYLLABLE ZUX	[4296 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A3, 0x0041 };
    uint32_t const ces[9] = { 0x4296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_298)
{
    // A2A3 0062;	
    // (ꊣ) YI SYLLABLE ZUX	[4296 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A3, 0x0062 };
    uint32_t const ces[9] = { 0x4296, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_299)
{
    // A2A4 0021;	
    // (ꊤ) YI SYLLABLE ZU	[4297 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A4, 0x0021 };
    uint32_t const ces[9] = { 0x4297, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_300)
{
    // A2A4 003F;	
    // (ꊤ) YI SYLLABLE ZU	[4297 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A4, 0x003F };
    uint32_t const ces[9] = { 0x4297, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_301)
{
    // A2A4 0061;	
    // (ꊤ) YI SYLLABLE ZU	[4297 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A4, 0x0061 };
    uint32_t const ces[9] = { 0x4297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_302)
{
    // A2A4 0041;	
    // (ꊤ) YI SYLLABLE ZU	[4297 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A4, 0x0041 };
    uint32_t const ces[9] = { 0x4297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_303)
{
    // A2A4 0062;	
    // (ꊤ) YI SYLLABLE ZU	[4297 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A4, 0x0062 };
    uint32_t const ces[9] = { 0x4297, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_304)
{
    // A2A5 0021;	
    // (ꊥ) YI SYLLABLE ZUP	[4298 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A5, 0x0021 };
    uint32_t const ces[9] = { 0x4298, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_305)
{
    // A2A5 003F;	
    // (ꊥ) YI SYLLABLE ZUP	[4298 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A5, 0x003F };
    uint32_t const ces[9] = { 0x4298, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_306)
{
    // A2A5 0061;	
    // (ꊥ) YI SYLLABLE ZUP	[4298 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A5, 0x0061 };
    uint32_t const ces[9] = { 0x4298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_307)
{
    // A2A5 0041;	
    // (ꊥ) YI SYLLABLE ZUP	[4298 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A5, 0x0041 };
    uint32_t const ces[9] = { 0x4298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_308)
{
    // A2A5 0062;	
    // (ꊥ) YI SYLLABLE ZUP	[4298 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A5, 0x0062 };
    uint32_t const ces[9] = { 0x4298, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_309)
{
    // A2A6 0021;	
    // (ꊦ) YI SYLLABLE ZURX	[4299 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A6, 0x0021 };
    uint32_t const ces[9] = { 0x4299, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_310)
{
    // A2A6 003F;	
    // (ꊦ) YI SYLLABLE ZURX	[4299 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A6, 0x003F };
    uint32_t const ces[9] = { 0x4299, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_311)
{
    // A2A6 0061;	
    // (ꊦ) YI SYLLABLE ZURX	[4299 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A6, 0x0061 };
    uint32_t const ces[9] = { 0x4299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_312)
{
    // A2A6 0041;	
    // (ꊦ) YI SYLLABLE ZURX	[4299 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A6, 0x0041 };
    uint32_t const ces[9] = { 0x4299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_313)
{
    // A2A6 0062;	
    // (ꊦ) YI SYLLABLE ZURX	[4299 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A6, 0x0062 };
    uint32_t const ces[9] = { 0x4299, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_314)
{
    // A2A7 0021;	
    // (ꊧ) YI SYLLABLE ZUR	[429A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A7, 0x0021 };
    uint32_t const ces[9] = { 0x429A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_315)
{
    // A2A7 003F;	
    // (ꊧ) YI SYLLABLE ZUR	[429A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A7, 0x003F };
    uint32_t const ces[9] = { 0x429A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_316)
{
    // A2A7 0061;	
    // (ꊧ) YI SYLLABLE ZUR	[429A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A7, 0x0061 };
    uint32_t const ces[9] = { 0x429A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_317)
{
    // A2A7 0041;	
    // (ꊧ) YI SYLLABLE ZUR	[429A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A7, 0x0041 };
    uint32_t const ces[9] = { 0x429A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_318)
{
    // A2A7 0062;	
    // (ꊧ) YI SYLLABLE ZUR	[429A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A7, 0x0062 };
    uint32_t const ces[9] = { 0x429A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_319)
{
    // A2A8 0021;	
    // (ꊨ) YI SYLLABLE ZYT	[429B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A8, 0x0021 };
    uint32_t const ces[9] = { 0x429B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_320)
{
    // A2A8 003F;	
    // (ꊨ) YI SYLLABLE ZYT	[429B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A8, 0x003F };
    uint32_t const ces[9] = { 0x429B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_321)
{
    // A2A8 0061;	
    // (ꊨ) YI SYLLABLE ZYT	[429B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A8, 0x0061 };
    uint32_t const ces[9] = { 0x429B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_322)
{
    // A2A8 0041;	
    // (ꊨ) YI SYLLABLE ZYT	[429B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A8, 0x0041 };
    uint32_t const ces[9] = { 0x429B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_323)
{
    // A2A8 0062;	
    // (ꊨ) YI SYLLABLE ZYT	[429B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A8, 0x0062 };
    uint32_t const ces[9] = { 0x429B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_324)
{
    // A2A9 0021;	
    // (ꊩ) YI SYLLABLE ZYX	[429C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A9, 0x0021 };
    uint32_t const ces[9] = { 0x429C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_325)
{
    // A2A9 003F;	
    // (ꊩ) YI SYLLABLE ZYX	[429C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A9, 0x003F };
    uint32_t const ces[9] = { 0x429C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_326)
{
    // A2A9 0061;	
    // (ꊩ) YI SYLLABLE ZYX	[429C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A9, 0x0061 };
    uint32_t const ces[9] = { 0x429C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_327)
{
    // A2A9 0041;	
    // (ꊩ) YI SYLLABLE ZYX	[429C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2A9, 0x0041 };
    uint32_t const ces[9] = { 0x429C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_328)
{
    // A2A9 0062;	
    // (ꊩ) YI SYLLABLE ZYX	[429C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2A9, 0x0062 };
    uint32_t const ces[9] = { 0x429C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_329)
{
    // A2AA 0021;	
    // (ꊪ) YI SYLLABLE ZY	[429D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AA, 0x0021 };
    uint32_t const ces[9] = { 0x429D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_330)
{
    // A2AA 003F;	
    // (ꊪ) YI SYLLABLE ZY	[429D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AA, 0x003F };
    uint32_t const ces[9] = { 0x429D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_331)
{
    // A2AA 0061;	
    // (ꊪ) YI SYLLABLE ZY	[429D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AA, 0x0061 };
    uint32_t const ces[9] = { 0x429D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_332)
{
    // A2AA 0041;	
    // (ꊪ) YI SYLLABLE ZY	[429D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AA, 0x0041 };
    uint32_t const ces[9] = { 0x429D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_333)
{
    // A2AA 0062;	
    // (ꊪ) YI SYLLABLE ZY	[429D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AA, 0x0062 };
    uint32_t const ces[9] = { 0x429D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_334)
{
    // A2AB 0021;	
    // (ꊫ) YI SYLLABLE ZYP	[429E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AB, 0x0021 };
    uint32_t const ces[9] = { 0x429E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_335)
{
    // A2AB 003F;	
    // (ꊫ) YI SYLLABLE ZYP	[429E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AB, 0x003F };
    uint32_t const ces[9] = { 0x429E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_336)
{
    // A2AB 0061;	
    // (ꊫ) YI SYLLABLE ZYP	[429E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AB, 0x0061 };
    uint32_t const ces[9] = { 0x429E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_337)
{
    // A2AB 0041;	
    // (ꊫ) YI SYLLABLE ZYP	[429E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AB, 0x0041 };
    uint32_t const ces[9] = { 0x429E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_338)
{
    // A2AB 0062;	
    // (ꊫ) YI SYLLABLE ZYP	[429E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AB, 0x0062 };
    uint32_t const ces[9] = { 0x429E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_339)
{
    // A2AC 0021;	
    // (ꊬ) YI SYLLABLE ZYRX	[429F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AC, 0x0021 };
    uint32_t const ces[9] = { 0x429F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_340)
{
    // A2AC 003F;	
    // (ꊬ) YI SYLLABLE ZYRX	[429F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AC, 0x003F };
    uint32_t const ces[9] = { 0x429F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_341)
{
    // A2AC 0061;	
    // (ꊬ) YI SYLLABLE ZYRX	[429F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AC, 0x0061 };
    uint32_t const ces[9] = { 0x429F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_342)
{
    // A2AC 0041;	
    // (ꊬ) YI SYLLABLE ZYRX	[429F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AC, 0x0041 };
    uint32_t const ces[9] = { 0x429F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_343)
{
    // A2AC 0062;	
    // (ꊬ) YI SYLLABLE ZYRX	[429F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AC, 0x0062 };
    uint32_t const ces[9] = { 0x429F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_344)
{
    // A2AD 0021;	
    // (ꊭ) YI SYLLABLE ZYR	[42A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AD, 0x0021 };
    uint32_t const ces[9] = { 0x42A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_345)
{
    // A2AD 003F;	
    // (ꊭ) YI SYLLABLE ZYR	[42A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AD, 0x003F };
    uint32_t const ces[9] = { 0x42A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_346)
{
    // A2AD 0061;	
    // (ꊭ) YI SYLLABLE ZYR	[42A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AD, 0x0061 };
    uint32_t const ces[9] = { 0x42A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_347)
{
    // A2AD 0041;	
    // (ꊭ) YI SYLLABLE ZYR	[42A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AD, 0x0041 };
    uint32_t const ces[9] = { 0x42A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_348)
{
    // A2AD 0062;	
    // (ꊭ) YI SYLLABLE ZYR	[42A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AD, 0x0062 };
    uint32_t const ces[9] = { 0x42A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_349)
{
    // A2AE 0021;	
    // (ꊮ) YI SYLLABLE CIT	[42A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AE, 0x0021 };
    uint32_t const ces[9] = { 0x42A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_350)
{
    // A2AE 003F;	
    // (ꊮ) YI SYLLABLE CIT	[42A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AE, 0x003F };
    uint32_t const ces[9] = { 0x42A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_351)
{
    // A2AE 0061;	
    // (ꊮ) YI SYLLABLE CIT	[42A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AE, 0x0061 };
    uint32_t const ces[9] = { 0x42A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_352)
{
    // A2AE 0041;	
    // (ꊮ) YI SYLLABLE CIT	[42A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AE, 0x0041 };
    uint32_t const ces[9] = { 0x42A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_353)
{
    // A2AE 0062;	
    // (ꊮ) YI SYLLABLE CIT	[42A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AE, 0x0062 };
    uint32_t const ces[9] = { 0x42A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_354)
{
    // A2AF 0021;	
    // (ꊯ) YI SYLLABLE CIX	[42A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AF, 0x0021 };
    uint32_t const ces[9] = { 0x42A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_355)
{
    // A2AF 003F;	
    // (ꊯ) YI SYLLABLE CIX	[42A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AF, 0x003F };
    uint32_t const ces[9] = { 0x42A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_356)
{
    // A2AF 0061;	
    // (ꊯ) YI SYLLABLE CIX	[42A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AF, 0x0061 };
    uint32_t const ces[9] = { 0x42A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_357)
{
    // A2AF 0041;	
    // (ꊯ) YI SYLLABLE CIX	[42A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2AF, 0x0041 };
    uint32_t const ces[9] = { 0x42A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_358)
{
    // A2AF 0062;	
    // (ꊯ) YI SYLLABLE CIX	[42A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2AF, 0x0062 };
    uint32_t const ces[9] = { 0x42A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_359)
{
    // A2B0 0021;	
    // (ꊰ) YI SYLLABLE CI	[42A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B0, 0x0021 };
    uint32_t const ces[9] = { 0x42A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_360)
{
    // A2B0 003F;	
    // (ꊰ) YI SYLLABLE CI	[42A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B0, 0x003F };
    uint32_t const ces[9] = { 0x42A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_361)
{
    // A2B0 0061;	
    // (ꊰ) YI SYLLABLE CI	[42A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B0, 0x0061 };
    uint32_t const ces[9] = { 0x42A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_362)
{
    // A2B0 0041;	
    // (ꊰ) YI SYLLABLE CI	[42A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B0, 0x0041 };
    uint32_t const ces[9] = { 0x42A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_363)
{
    // A2B0 0062;	
    // (ꊰ) YI SYLLABLE CI	[42A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B0, 0x0062 };
    uint32_t const ces[9] = { 0x42A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_364)
{
    // A2B1 0021;	
    // (ꊱ) YI SYLLABLE CIP	[42A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B1, 0x0021 };
    uint32_t const ces[9] = { 0x42A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_365)
{
    // A2B1 003F;	
    // (ꊱ) YI SYLLABLE CIP	[42A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B1, 0x003F };
    uint32_t const ces[9] = { 0x42A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_366)
{
    // A2B1 0061;	
    // (ꊱ) YI SYLLABLE CIP	[42A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B1, 0x0061 };
    uint32_t const ces[9] = { 0x42A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_367)
{
    // A2B1 0041;	
    // (ꊱ) YI SYLLABLE CIP	[42A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B1, 0x0041 };
    uint32_t const ces[9] = { 0x42A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_368)
{
    // A2B1 0062;	
    // (ꊱ) YI SYLLABLE CIP	[42A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B1, 0x0062 };
    uint32_t const ces[9] = { 0x42A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_369)
{
    // A2B2 0021;	
    // (ꊲ) YI SYLLABLE CIET	[42A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B2, 0x0021 };
    uint32_t const ces[9] = { 0x42A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_370)
{
    // A2B2 003F;	
    // (ꊲ) YI SYLLABLE CIET	[42A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B2, 0x003F };
    uint32_t const ces[9] = { 0x42A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_371)
{
    // A2B2 0061;	
    // (ꊲ) YI SYLLABLE CIET	[42A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B2, 0x0061 };
    uint32_t const ces[9] = { 0x42A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_372)
{
    // A2B2 0041;	
    // (ꊲ) YI SYLLABLE CIET	[42A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B2, 0x0041 };
    uint32_t const ces[9] = { 0x42A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_373)
{
    // A2B2 0062;	
    // (ꊲ) YI SYLLABLE CIET	[42A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B2, 0x0062 };
    uint32_t const ces[9] = { 0x42A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_374)
{
    // A2B3 0021;	
    // (ꊳ) YI SYLLABLE CIEX	[42A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B3, 0x0021 };
    uint32_t const ces[9] = { 0x42A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_375)
{
    // A2B3 003F;	
    // (ꊳ) YI SYLLABLE CIEX	[42A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B3, 0x003F };
    uint32_t const ces[9] = { 0x42A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_376)
{
    // A2B3 0061;	
    // (ꊳ) YI SYLLABLE CIEX	[42A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B3, 0x0061 };
    uint32_t const ces[9] = { 0x42A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_377)
{
    // A2B3 0041;	
    // (ꊳ) YI SYLLABLE CIEX	[42A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B3, 0x0041 };
    uint32_t const ces[9] = { 0x42A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_378)
{
    // A2B3 0062;	
    // (ꊳ) YI SYLLABLE CIEX	[42A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B3, 0x0062 };
    uint32_t const ces[9] = { 0x42A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_379)
{
    // A2B4 0021;	
    // (ꊴ) YI SYLLABLE CIE	[42A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B4, 0x0021 };
    uint32_t const ces[9] = { 0x42A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_380)
{
    // A2B4 003F;	
    // (ꊴ) YI SYLLABLE CIE	[42A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B4, 0x003F };
    uint32_t const ces[9] = { 0x42A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_381)
{
    // A2B4 0061;	
    // (ꊴ) YI SYLLABLE CIE	[42A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B4, 0x0061 };
    uint32_t const ces[9] = { 0x42A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_382)
{
    // A2B4 0041;	
    // (ꊴ) YI SYLLABLE CIE	[42A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B4, 0x0041 };
    uint32_t const ces[9] = { 0x42A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_383)
{
    // A2B4 0062;	
    // (ꊴ) YI SYLLABLE CIE	[42A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B4, 0x0062 };
    uint32_t const ces[9] = { 0x42A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_384)
{
    // A2B5 0021;	
    // (ꊵ) YI SYLLABLE CIEP	[42A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B5, 0x0021 };
    uint32_t const ces[9] = { 0x42A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_385)
{
    // A2B5 003F;	
    // (ꊵ) YI SYLLABLE CIEP	[42A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B5, 0x003F };
    uint32_t const ces[9] = { 0x42A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_386)
{
    // A2B5 0061;	
    // (ꊵ) YI SYLLABLE CIEP	[42A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B5, 0x0061 };
    uint32_t const ces[9] = { 0x42A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_387)
{
    // A2B5 0041;	
    // (ꊵ) YI SYLLABLE CIEP	[42A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B5, 0x0041 };
    uint32_t const ces[9] = { 0x42A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_388)
{
    // A2B5 0062;	
    // (ꊵ) YI SYLLABLE CIEP	[42A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B5, 0x0062 };
    uint32_t const ces[9] = { 0x42A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_389)
{
    // A2B6 0021;	
    // (ꊶ) YI SYLLABLE CAT	[42A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B6, 0x0021 };
    uint32_t const ces[9] = { 0x42A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_390)
{
    // A2B6 003F;	
    // (ꊶ) YI SYLLABLE CAT	[42A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B6, 0x003F };
    uint32_t const ces[9] = { 0x42A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_391)
{
    // A2B6 0061;	
    // (ꊶ) YI SYLLABLE CAT	[42A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B6, 0x0061 };
    uint32_t const ces[9] = { 0x42A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_392)
{
    // A2B6 0041;	
    // (ꊶ) YI SYLLABLE CAT	[42A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B6, 0x0041 };
    uint32_t const ces[9] = { 0x42A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_393)
{
    // A2B6 0062;	
    // (ꊶ) YI SYLLABLE CAT	[42A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B6, 0x0062 };
    uint32_t const ces[9] = { 0x42A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_394)
{
    // A2B7 0021;	
    // (ꊷ) YI SYLLABLE CAX	[42AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B7, 0x0021 };
    uint32_t const ces[9] = { 0x42AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_395)
{
    // A2B7 003F;	
    // (ꊷ) YI SYLLABLE CAX	[42AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B7, 0x003F };
    uint32_t const ces[9] = { 0x42AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_396)
{
    // A2B7 0061;	
    // (ꊷ) YI SYLLABLE CAX	[42AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B7, 0x0061 };
    uint32_t const ces[9] = { 0x42AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_397)
{
    // A2B7 0041;	
    // (ꊷ) YI SYLLABLE CAX	[42AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B7, 0x0041 };
    uint32_t const ces[9] = { 0x42AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_398)
{
    // A2B7 0062;	
    // (ꊷ) YI SYLLABLE CAX	[42AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B7, 0x0062 };
    uint32_t const ces[9] = { 0x42AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_399)
{
    // A2B8 0021;	
    // (ꊸ) YI SYLLABLE CA	[42AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B8, 0x0021 };
    uint32_t const ces[9] = { 0x42AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_400)
{
    // A2B8 003F;	
    // (ꊸ) YI SYLLABLE CA	[42AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B8, 0x003F };
    uint32_t const ces[9] = { 0x42AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_401)
{
    // A2B8 0061;	
    // (ꊸ) YI SYLLABLE CA	[42AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B8, 0x0061 };
    uint32_t const ces[9] = { 0x42AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_402)
{
    // A2B8 0041;	
    // (ꊸ) YI SYLLABLE CA	[42AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B8, 0x0041 };
    uint32_t const ces[9] = { 0x42AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_403)
{
    // A2B8 0062;	
    // (ꊸ) YI SYLLABLE CA	[42AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B8, 0x0062 };
    uint32_t const ces[9] = { 0x42AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_404)
{
    // A2B9 0021;	
    // (ꊹ) YI SYLLABLE CAP	[42AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B9, 0x0021 };
    uint32_t const ces[9] = { 0x42AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_405)
{
    // A2B9 003F;	
    // (ꊹ) YI SYLLABLE CAP	[42AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B9, 0x003F };
    uint32_t const ces[9] = { 0x42AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_406)
{
    // A2B9 0061;	
    // (ꊹ) YI SYLLABLE CAP	[42AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B9, 0x0061 };
    uint32_t const ces[9] = { 0x42AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_407)
{
    // A2B9 0041;	
    // (ꊹ) YI SYLLABLE CAP	[42AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2B9, 0x0041 };
    uint32_t const ces[9] = { 0x42AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_408)
{
    // A2B9 0062;	
    // (ꊹ) YI SYLLABLE CAP	[42AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2B9, 0x0062 };
    uint32_t const ces[9] = { 0x42AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_409)
{
    // A2BA 0021;	
    // (ꊺ) YI SYLLABLE CUOX	[42AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BA, 0x0021 };
    uint32_t const ces[9] = { 0x42AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_410)
{
    // A2BA 003F;	
    // (ꊺ) YI SYLLABLE CUOX	[42AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BA, 0x003F };
    uint32_t const ces[9] = { 0x42AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_411)
{
    // A2BA 0061;	
    // (ꊺ) YI SYLLABLE CUOX	[42AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BA, 0x0061 };
    uint32_t const ces[9] = { 0x42AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_412)
{
    // A2BA 0041;	
    // (ꊺ) YI SYLLABLE CUOX	[42AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BA, 0x0041 };
    uint32_t const ces[9] = { 0x42AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_413)
{
    // A2BA 0062;	
    // (ꊺ) YI SYLLABLE CUOX	[42AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BA, 0x0062 };
    uint32_t const ces[9] = { 0x42AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_414)
{
    // A2BB 0021;	
    // (ꊻ) YI SYLLABLE CUO	[42AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BB, 0x0021 };
    uint32_t const ces[9] = { 0x42AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_415)
{
    // A2BB 003F;	
    // (ꊻ) YI SYLLABLE CUO	[42AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BB, 0x003F };
    uint32_t const ces[9] = { 0x42AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_416)
{
    // A2BB 0061;	
    // (ꊻ) YI SYLLABLE CUO	[42AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BB, 0x0061 };
    uint32_t const ces[9] = { 0x42AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_417)
{
    // A2BB 0041;	
    // (ꊻ) YI SYLLABLE CUO	[42AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BB, 0x0041 };
    uint32_t const ces[9] = { 0x42AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_418)
{
    // A2BB 0062;	
    // (ꊻ) YI SYLLABLE CUO	[42AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BB, 0x0062 };
    uint32_t const ces[9] = { 0x42AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_419)
{
    // A2BC 0021;	
    // (ꊼ) YI SYLLABLE CUOP	[42AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BC, 0x0021 };
    uint32_t const ces[9] = { 0x42AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_420)
{
    // A2BC 003F;	
    // (ꊼ) YI SYLLABLE CUOP	[42AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BC, 0x003F };
    uint32_t const ces[9] = { 0x42AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_421)
{
    // A2BC 0061;	
    // (ꊼ) YI SYLLABLE CUOP	[42AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BC, 0x0061 };
    uint32_t const ces[9] = { 0x42AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_422)
{
    // A2BC 0041;	
    // (ꊼ) YI SYLLABLE CUOP	[42AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BC, 0x0041 };
    uint32_t const ces[9] = { 0x42AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_423)
{
    // A2BC 0062;	
    // (ꊼ) YI SYLLABLE CUOP	[42AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BC, 0x0062 };
    uint32_t const ces[9] = { 0x42AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_424)
{
    // A2BD 0021;	
    // (ꊽ) YI SYLLABLE COT	[42B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BD, 0x0021 };
    uint32_t const ces[9] = { 0x42B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_425)
{
    // A2BD 003F;	
    // (ꊽ) YI SYLLABLE COT	[42B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BD, 0x003F };
    uint32_t const ces[9] = { 0x42B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_426)
{
    // A2BD 0061;	
    // (ꊽ) YI SYLLABLE COT	[42B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BD, 0x0061 };
    uint32_t const ces[9] = { 0x42B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_427)
{
    // A2BD 0041;	
    // (ꊽ) YI SYLLABLE COT	[42B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BD, 0x0041 };
    uint32_t const ces[9] = { 0x42B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_428)
{
    // A2BD 0062;	
    // (ꊽ) YI SYLLABLE COT	[42B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BD, 0x0062 };
    uint32_t const ces[9] = { 0x42B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_429)
{
    // A2BE 0021;	
    // (ꊾ) YI SYLLABLE COX	[42B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BE, 0x0021 };
    uint32_t const ces[9] = { 0x42B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_430)
{
    // A2BE 003F;	
    // (ꊾ) YI SYLLABLE COX	[42B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BE, 0x003F };
    uint32_t const ces[9] = { 0x42B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_431)
{
    // A2BE 0061;	
    // (ꊾ) YI SYLLABLE COX	[42B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BE, 0x0061 };
    uint32_t const ces[9] = { 0x42B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_432)
{
    // A2BE 0041;	
    // (ꊾ) YI SYLLABLE COX	[42B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BE, 0x0041 };
    uint32_t const ces[9] = { 0x42B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_433)
{
    // A2BE 0062;	
    // (ꊾ) YI SYLLABLE COX	[42B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BE, 0x0062 };
    uint32_t const ces[9] = { 0x42B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_434)
{
    // A2BF 0021;	
    // (ꊿ) YI SYLLABLE CO	[42B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BF, 0x0021 };
    uint32_t const ces[9] = { 0x42B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_435)
{
    // A2BF 003F;	
    // (ꊿ) YI SYLLABLE CO	[42B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BF, 0x003F };
    uint32_t const ces[9] = { 0x42B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_436)
{
    // A2BF 0061;	
    // (ꊿ) YI SYLLABLE CO	[42B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BF, 0x0061 };
    uint32_t const ces[9] = { 0x42B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_437)
{
    // A2BF 0041;	
    // (ꊿ) YI SYLLABLE CO	[42B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2BF, 0x0041 };
    uint32_t const ces[9] = { 0x42B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_438)
{
    // A2BF 0062;	
    // (ꊿ) YI SYLLABLE CO	[42B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2BF, 0x0062 };
    uint32_t const ces[9] = { 0x42B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_439)
{
    // A2C0 0021;	
    // (ꋀ) YI SYLLABLE COP	[42B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C0, 0x0021 };
    uint32_t const ces[9] = { 0x42B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_440)
{
    // A2C0 003F;	
    // (ꋀ) YI SYLLABLE COP	[42B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C0, 0x003F };
    uint32_t const ces[9] = { 0x42B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_441)
{
    // A2C0 0061;	
    // (ꋀ) YI SYLLABLE COP	[42B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C0, 0x0061 };
    uint32_t const ces[9] = { 0x42B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_442)
{
    // A2C0 0041;	
    // (ꋀ) YI SYLLABLE COP	[42B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C0, 0x0041 };
    uint32_t const ces[9] = { 0x42B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_443)
{
    // A2C0 0062;	
    // (ꋀ) YI SYLLABLE COP	[42B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C0, 0x0062 };
    uint32_t const ces[9] = { 0x42B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_444)
{
    // A2C1 0021;	
    // (ꋁ) YI SYLLABLE CEX	[42B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C1, 0x0021 };
    uint32_t const ces[9] = { 0x42B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_445)
{
    // A2C1 003F;	
    // (ꋁ) YI SYLLABLE CEX	[42B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C1, 0x003F };
    uint32_t const ces[9] = { 0x42B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_446)
{
    // A2C1 0061;	
    // (ꋁ) YI SYLLABLE CEX	[42B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C1, 0x0061 };
    uint32_t const ces[9] = { 0x42B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_447)
{
    // A2C1 0041;	
    // (ꋁ) YI SYLLABLE CEX	[42B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C1, 0x0041 };
    uint32_t const ces[9] = { 0x42B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_448)
{
    // A2C1 0062;	
    // (ꋁ) YI SYLLABLE CEX	[42B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C1, 0x0062 };
    uint32_t const ces[9] = { 0x42B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_449)
{
    // A2C2 0021;	
    // (ꋂ) YI SYLLABLE CE	[42B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C2, 0x0021 };
    uint32_t const ces[9] = { 0x42B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_450)
{
    // A2C2 003F;	
    // (ꋂ) YI SYLLABLE CE	[42B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C2, 0x003F };
    uint32_t const ces[9] = { 0x42B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_451)
{
    // A2C2 0061;	
    // (ꋂ) YI SYLLABLE CE	[42B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C2, 0x0061 };
    uint32_t const ces[9] = { 0x42B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_452)
{
    // A2C2 0041;	
    // (ꋂ) YI SYLLABLE CE	[42B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C2, 0x0041 };
    uint32_t const ces[9] = { 0x42B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_453)
{
    // A2C2 0062;	
    // (ꋂ) YI SYLLABLE CE	[42B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C2, 0x0062 };
    uint32_t const ces[9] = { 0x42B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_454)
{
    // A2C3 0021;	
    // (ꋃ) YI SYLLABLE CEP	[42B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C3, 0x0021 };
    uint32_t const ces[9] = { 0x42B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_455)
{
    // A2C3 003F;	
    // (ꋃ) YI SYLLABLE CEP	[42B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C3, 0x003F };
    uint32_t const ces[9] = { 0x42B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_456)
{
    // A2C3 0061;	
    // (ꋃ) YI SYLLABLE CEP	[42B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C3, 0x0061 };
    uint32_t const ces[9] = { 0x42B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_457)
{
    // A2C3 0041;	
    // (ꋃ) YI SYLLABLE CEP	[42B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C3, 0x0041 };
    uint32_t const ces[9] = { 0x42B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_458)
{
    // A2C3 0062;	
    // (ꋃ) YI SYLLABLE CEP	[42B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C3, 0x0062 };
    uint32_t const ces[9] = { 0x42B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_459)
{
    // A2C4 0021;	
    // (ꋄ) YI SYLLABLE CUT	[42B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C4, 0x0021 };
    uint32_t const ces[9] = { 0x42B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_460)
{
    // A2C4 003F;	
    // (ꋄ) YI SYLLABLE CUT	[42B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C4, 0x003F };
    uint32_t const ces[9] = { 0x42B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_461)
{
    // A2C4 0061;	
    // (ꋄ) YI SYLLABLE CUT	[42B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C4, 0x0061 };
    uint32_t const ces[9] = { 0x42B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_462)
{
    // A2C4 0041;	
    // (ꋄ) YI SYLLABLE CUT	[42B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C4, 0x0041 };
    uint32_t const ces[9] = { 0x42B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_463)
{
    // A2C4 0062;	
    // (ꋄ) YI SYLLABLE CUT	[42B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C4, 0x0062 };
    uint32_t const ces[9] = { 0x42B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_464)
{
    // A2C5 0021;	
    // (ꋅ) YI SYLLABLE CUX	[42B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C5, 0x0021 };
    uint32_t const ces[9] = { 0x42B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_465)
{
    // A2C5 003F;	
    // (ꋅ) YI SYLLABLE CUX	[42B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C5, 0x003F };
    uint32_t const ces[9] = { 0x42B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_466)
{
    // A2C5 0061;	
    // (ꋅ) YI SYLLABLE CUX	[42B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C5, 0x0061 };
    uint32_t const ces[9] = { 0x42B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_467)
{
    // A2C5 0041;	
    // (ꋅ) YI SYLLABLE CUX	[42B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C5, 0x0041 };
    uint32_t const ces[9] = { 0x42B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_468)
{
    // A2C5 0062;	
    // (ꋅ) YI SYLLABLE CUX	[42B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C5, 0x0062 };
    uint32_t const ces[9] = { 0x42B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_469)
{
    // A2C6 0021;	
    // (ꋆ) YI SYLLABLE CU	[42B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C6, 0x0021 };
    uint32_t const ces[9] = { 0x42B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_470)
{
    // A2C6 003F;	
    // (ꋆ) YI SYLLABLE CU	[42B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C6, 0x003F };
    uint32_t const ces[9] = { 0x42B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_471)
{
    // A2C6 0061;	
    // (ꋆ) YI SYLLABLE CU	[42B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C6, 0x0061 };
    uint32_t const ces[9] = { 0x42B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_472)
{
    // A2C6 0041;	
    // (ꋆ) YI SYLLABLE CU	[42B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C6, 0x0041 };
    uint32_t const ces[9] = { 0x42B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_473)
{
    // A2C6 0062;	
    // (ꋆ) YI SYLLABLE CU	[42B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C6, 0x0062 };
    uint32_t const ces[9] = { 0x42B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_474)
{
    // A2C7 0021;	
    // (ꋇ) YI SYLLABLE CUP	[42BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C7, 0x0021 };
    uint32_t const ces[9] = { 0x42BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_475)
{
    // A2C7 003F;	
    // (ꋇ) YI SYLLABLE CUP	[42BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C7, 0x003F };
    uint32_t const ces[9] = { 0x42BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_476)
{
    // A2C7 0061;	
    // (ꋇ) YI SYLLABLE CUP	[42BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C7, 0x0061 };
    uint32_t const ces[9] = { 0x42BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_477)
{
    // A2C7 0041;	
    // (ꋇ) YI SYLLABLE CUP	[42BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C7, 0x0041 };
    uint32_t const ces[9] = { 0x42BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_478)
{
    // A2C7 0062;	
    // (ꋇ) YI SYLLABLE CUP	[42BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C7, 0x0062 };
    uint32_t const ces[9] = { 0x42BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_479)
{
    // A2C8 0021;	
    // (ꋈ) YI SYLLABLE CURX	[42BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C8, 0x0021 };
    uint32_t const ces[9] = { 0x42BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_480)
{
    // A2C8 003F;	
    // (ꋈ) YI SYLLABLE CURX	[42BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C8, 0x003F };
    uint32_t const ces[9] = { 0x42BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_481)
{
    // A2C8 0061;	
    // (ꋈ) YI SYLLABLE CURX	[42BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C8, 0x0061 };
    uint32_t const ces[9] = { 0x42BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_482)
{
    // A2C8 0041;	
    // (ꋈ) YI SYLLABLE CURX	[42BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C8, 0x0041 };
    uint32_t const ces[9] = { 0x42BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_483)
{
    // A2C8 0062;	
    // (ꋈ) YI SYLLABLE CURX	[42BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C8, 0x0062 };
    uint32_t const ces[9] = { 0x42BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_484)
{
    // A2C9 0021;	
    // (ꋉ) YI SYLLABLE CUR	[42BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C9, 0x0021 };
    uint32_t const ces[9] = { 0x42BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_485)
{
    // A2C9 003F;	
    // (ꋉ) YI SYLLABLE CUR	[42BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C9, 0x003F };
    uint32_t const ces[9] = { 0x42BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_486)
{
    // A2C9 0061;	
    // (ꋉ) YI SYLLABLE CUR	[42BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C9, 0x0061 };
    uint32_t const ces[9] = { 0x42BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_487)
{
    // A2C9 0041;	
    // (ꋉ) YI SYLLABLE CUR	[42BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2C9, 0x0041 };
    uint32_t const ces[9] = { 0x42BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_488)
{
    // A2C9 0062;	
    // (ꋉ) YI SYLLABLE CUR	[42BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2C9, 0x0062 };
    uint32_t const ces[9] = { 0x42BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_489)
{
    // A2CA 0021;	
    // (ꋊ) YI SYLLABLE CYT	[42BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CA, 0x0021 };
    uint32_t const ces[9] = { 0x42BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_490)
{
    // A2CA 003F;	
    // (ꋊ) YI SYLLABLE CYT	[42BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CA, 0x003F };
    uint32_t const ces[9] = { 0x42BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_491)
{
    // A2CA 0061;	
    // (ꋊ) YI SYLLABLE CYT	[42BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CA, 0x0061 };
    uint32_t const ces[9] = { 0x42BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_492)
{
    // A2CA 0041;	
    // (ꋊ) YI SYLLABLE CYT	[42BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2CA, 0x0041 };
    uint32_t const ces[9] = { 0x42BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_493)
{
    // A2CA 0062;	
    // (ꋊ) YI SYLLABLE CYT	[42BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CA, 0x0062 };
    uint32_t const ces[9] = { 0x42BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_494)
{
    // A2CB 0021;	
    // (ꋋ) YI SYLLABLE CYX	[42BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CB, 0x0021 };
    uint32_t const ces[9] = { 0x42BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_495)
{
    // A2CB 003F;	
    // (ꋋ) YI SYLLABLE CYX	[42BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CB, 0x003F };
    uint32_t const ces[9] = { 0x42BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_496)
{
    // A2CB 0061;	
    // (ꋋ) YI SYLLABLE CYX	[42BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CB, 0x0061 };
    uint32_t const ces[9] = { 0x42BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_497)
{
    // A2CB 0041;	
    // (ꋋ) YI SYLLABLE CYX	[42BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA2CB, 0x0041 };
    uint32_t const ces[9] = { 0x42BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_498)
{
    // A2CB 0062;	
    // (ꋋ) YI SYLLABLE CYX	[42BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CB, 0x0062 };
    uint32_t const ces[9] = { 0x42BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_260_499)
{
    // A2CC 0021;	
    // (ꋌ) YI SYLLABLE CY	[42BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA2CC, 0x0021 };
    uint32_t const ces[9] = { 0x42BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

