// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_183_000)
{
    // 1B93 0061;	
    // (ᮓ) SUNDANESE LETTER DA	[2D56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B93, 0x0061 };
    uint32_t const ces[9] = { 0x2D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_001)
{
    // 1B93 0041;	
    // (ᮓ) SUNDANESE LETTER DA	[2D56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B93, 0x0041 };
    uint32_t const ces[9] = { 0x2D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_002)
{
    // 1B93 0062;	
    // (ᮓ) SUNDANESE LETTER DA	[2D56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B93, 0x0062 };
    uint32_t const ces[9] = { 0x2D56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_003)
{
    // 1B94 0021;	
    // (ᮔ) SUNDANESE LETTER NA	[2D57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B94, 0x0021 };
    uint32_t const ces[9] = { 0x2D57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_004)
{
    // 1B94 003F;	
    // (ᮔ) SUNDANESE LETTER NA	[2D57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B94, 0x003F };
    uint32_t const ces[9] = { 0x2D57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_005)
{
    // 1B94 0061;	
    // (ᮔ) SUNDANESE LETTER NA	[2D57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B94, 0x0061 };
    uint32_t const ces[9] = { 0x2D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_006)
{
    // 1B94 0041;	
    // (ᮔ) SUNDANESE LETTER NA	[2D57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B94, 0x0041 };
    uint32_t const ces[9] = { 0x2D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_007)
{
    // 1B94 0062;	
    // (ᮔ) SUNDANESE LETTER NA	[2D57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B94, 0x0062 };
    uint32_t const ces[9] = { 0x2D57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_008)
{
    // 1B95 0021;	
    // (ᮕ) SUNDANESE LETTER PA	[2D58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B95, 0x0021 };
    uint32_t const ces[9] = { 0x2D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_009)
{
    // 1B95 003F;	
    // (ᮕ) SUNDANESE LETTER PA	[2D58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B95, 0x003F };
    uint32_t const ces[9] = { 0x2D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_010)
{
    // 1B95 0061;	
    // (ᮕ) SUNDANESE LETTER PA	[2D58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B95, 0x0061 };
    uint32_t const ces[9] = { 0x2D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_011)
{
    // 1B95 0041;	
    // (ᮕ) SUNDANESE LETTER PA	[2D58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B95, 0x0041 };
    uint32_t const ces[9] = { 0x2D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_012)
{
    // 1B95 0062;	
    // (ᮕ) SUNDANESE LETTER PA	[2D58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B95, 0x0062 };
    uint32_t const ces[9] = { 0x2D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_013)
{
    // 1B96 0021;	
    // (ᮖ) SUNDANESE LETTER FA	[2D59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B96, 0x0021 };
    uint32_t const ces[9] = { 0x2D59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_014)
{
    // 1B96 003F;	
    // (ᮖ) SUNDANESE LETTER FA	[2D59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B96, 0x003F };
    uint32_t const ces[9] = { 0x2D59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_015)
{
    // 1B96 0061;	
    // (ᮖ) SUNDANESE LETTER FA	[2D59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B96, 0x0061 };
    uint32_t const ces[9] = { 0x2D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_016)
{
    // 1B96 0041;	
    // (ᮖ) SUNDANESE LETTER FA	[2D59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B96, 0x0041 };
    uint32_t const ces[9] = { 0x2D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_017)
{
    // 1B96 0062;	
    // (ᮖ) SUNDANESE LETTER FA	[2D59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B96, 0x0062 };
    uint32_t const ces[9] = { 0x2D59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_018)
{
    // 1B97 0021;	
    // (ᮗ) SUNDANESE LETTER VA	[2D5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B97, 0x0021 };
    uint32_t const ces[9] = { 0x2D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_019)
{
    // 1B97 003F;	
    // (ᮗ) SUNDANESE LETTER VA	[2D5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B97, 0x003F };
    uint32_t const ces[9] = { 0x2D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_020)
{
    // 1B97 0061;	
    // (ᮗ) SUNDANESE LETTER VA	[2D5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B97, 0x0061 };
    uint32_t const ces[9] = { 0x2D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_021)
{
    // 1B97 0041;	
    // (ᮗ) SUNDANESE LETTER VA	[2D5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B97, 0x0041 };
    uint32_t const ces[9] = { 0x2D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_022)
{
    // 1B97 0062;	
    // (ᮗ) SUNDANESE LETTER VA	[2D5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B97, 0x0062 };
    uint32_t const ces[9] = { 0x2D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_023)
{
    // 1B98 0021;	
    // (ᮘ) SUNDANESE LETTER BA	[2D5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B98, 0x0021 };
    uint32_t const ces[9] = { 0x2D5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_024)
{
    // 1B98 003F;	
    // (ᮘ) SUNDANESE LETTER BA	[2D5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B98, 0x003F };
    uint32_t const ces[9] = { 0x2D5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_025)
{
    // 1B98 0061;	
    // (ᮘ) SUNDANESE LETTER BA	[2D5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B98, 0x0061 };
    uint32_t const ces[9] = { 0x2D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_026)
{
    // 1B98 0041;	
    // (ᮘ) SUNDANESE LETTER BA	[2D5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B98, 0x0041 };
    uint32_t const ces[9] = { 0x2D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_027)
{
    // 1B98 0062;	
    // (ᮘ) SUNDANESE LETTER BA	[2D5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B98, 0x0062 };
    uint32_t const ces[9] = { 0x2D5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_028)
{
    // 1BBD 0021;	
    // (ᮽ) SUNDANESE LETTER BHA	[2D5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBD, 0x0021 };
    uint32_t const ces[9] = { 0x2D5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_029)
{
    // 1BBD 003F;	
    // (ᮽ) SUNDANESE LETTER BHA	[2D5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBD, 0x003F };
    uint32_t const ces[9] = { 0x2D5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_030)
{
    // 1BBD 0061;	
    // (ᮽ) SUNDANESE LETTER BHA	[2D5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBD, 0x0061 };
    uint32_t const ces[9] = { 0x2D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_031)
{
    // 1BBD 0041;	
    // (ᮽ) SUNDANESE LETTER BHA	[2D5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BBD, 0x0041 };
    uint32_t const ces[9] = { 0x2D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_032)
{
    // 1BBD 0062;	
    // (ᮽ) SUNDANESE LETTER BHA	[2D5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBD, 0x0062 };
    uint32_t const ces[9] = { 0x2D5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_033)
{
    // 1B99 0021;	
    // (ᮙ) SUNDANESE LETTER MA	[2D5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B99, 0x0021 };
    uint32_t const ces[9] = { 0x2D5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_034)
{
    // 1BBF 0021;	
    // (ᮿ) SUNDANESE LETTER FINAL M	[2D5D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1BBF, 0x0021 };
    uint32_t const ces[9] = { 0x2D5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_035)
{
    // 1B99 003F;	
    // (ᮙ) SUNDANESE LETTER MA	[2D5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B99, 0x003F };
    uint32_t const ces[9] = { 0x2D5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_036)
{
    // 1BBF 003F;	
    // (ᮿ) SUNDANESE LETTER FINAL M	[2D5D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1BBF, 0x003F };
    uint32_t const ces[9] = { 0x2D5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_037)
{
    // 1B99 0061;	
    // (ᮙ) SUNDANESE LETTER MA	[2D5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B99, 0x0061 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_038)
{
    // 1B99 0041;	
    // (ᮙ) SUNDANESE LETTER MA	[2D5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B99, 0x0041 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_039)
{
    // 1BBF 0061;	
    // (ᮿ) SUNDANESE LETTER FINAL M	[2D5D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1BBF, 0x0061 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_040)
{
    // 1BBF 0041;	
    // (ᮿ) SUNDANESE LETTER FINAL M	[2D5D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x1BBF, 0x0041 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_041)
{
    // 1B99 0062;	
    // (ᮙ) SUNDANESE LETTER MA	[2D5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B99, 0x0062 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_042)
{
    // 1BBF 0062;	
    // (ᮿ) SUNDANESE LETTER FINAL M	[2D5D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1BBF, 0x0062 };
    uint32_t const ces[9] = { 0x2D5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_043)
{
    // 1BAC 0021;	
    // (ᮬ) SUNDANESE CONSONANT SIGN PASANGAN MA	[2D5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAC, 0x0021 };
    uint32_t const ces[9] = { 0x2D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_044)
{
    // 1BAC 003F;	
    // (ᮬ) SUNDANESE CONSONANT SIGN PASANGAN MA	[2D5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAC, 0x003F };
    uint32_t const ces[9] = { 0x2D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_045)
{
    // 1BAC 0061;	
    // (ᮬ) SUNDANESE CONSONANT SIGN PASANGAN MA	[2D5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAC, 0x0061 };
    uint32_t const ces[9] = { 0x2D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_046)
{
    // 1BAC 0041;	
    // (ᮬ) SUNDANESE CONSONANT SIGN PASANGAN MA	[2D5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BAC, 0x0041 };
    uint32_t const ces[9] = { 0x2D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_047)
{
    // 1BAC 0062;	
    // (ᮬ) SUNDANESE CONSONANT SIGN PASANGAN MA	[2D5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAC, 0x0062 };
    uint32_t const ces[9] = { 0x2D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_048)
{
    // 1B9A 0021;	
    // (ᮚ) SUNDANESE LETTER YA	[2D5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9A, 0x0021 };
    uint32_t const ces[9] = { 0x2D5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_049)
{
    // 1B9A 003F;	
    // (ᮚ) SUNDANESE LETTER YA	[2D5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9A, 0x003F };
    uint32_t const ces[9] = { 0x2D5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_050)
{
    // 1B9A 0061;	
    // (ᮚ) SUNDANESE LETTER YA	[2D5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9A, 0x0061 };
    uint32_t const ces[9] = { 0x2D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_051)
{
    // 1B9A 0041;	
    // (ᮚ) SUNDANESE LETTER YA	[2D5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9A, 0x0041 };
    uint32_t const ces[9] = { 0x2D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_052)
{
    // 1B9A 0062;	
    // (ᮚ) SUNDANESE LETTER YA	[2D5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9A, 0x0062 };
    uint32_t const ces[9] = { 0x2D5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_053)
{
    // 1BA1 0021;	
    // (ᮡ) SUNDANESE CONSONANT SIGN PAMINGKAL	[2D60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA1, 0x0021 };
    uint32_t const ces[9] = { 0x2D60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_054)
{
    // 1BA1 003F;	
    // (ᮡ) SUNDANESE CONSONANT SIGN PAMINGKAL	[2D60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA1, 0x003F };
    uint32_t const ces[9] = { 0x2D60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_055)
{
    // 1BA1 0061;	
    // (ᮡ) SUNDANESE CONSONANT SIGN PAMINGKAL	[2D60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA1, 0x0061 };
    uint32_t const ces[9] = { 0x2D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_056)
{
    // 1BA1 0041;	
    // (ᮡ) SUNDANESE CONSONANT SIGN PAMINGKAL	[2D60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA1, 0x0041 };
    uint32_t const ces[9] = { 0x2D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_057)
{
    // 1BA1 0062;	
    // (ᮡ) SUNDANESE CONSONANT SIGN PAMINGKAL	[2D60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA1, 0x0062 };
    uint32_t const ces[9] = { 0x2D60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_058)
{
    // 1B9B 0021;	
    // (ᮛ) SUNDANESE LETTER RA	[2D61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9B, 0x0021 };
    uint32_t const ces[9] = { 0x2D61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_059)
{
    // 1B9B 003F;	
    // (ᮛ) SUNDANESE LETTER RA	[2D61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9B, 0x003F };
    uint32_t const ces[9] = { 0x2D61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_060)
{
    // 1B9B 0061;	
    // (ᮛ) SUNDANESE LETTER RA	[2D61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9B, 0x0061 };
    uint32_t const ces[9] = { 0x2D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_061)
{
    // 1B9B 0041;	
    // (ᮛ) SUNDANESE LETTER RA	[2D61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9B, 0x0041 };
    uint32_t const ces[9] = { 0x2D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_062)
{
    // 1B9B 0062;	
    // (ᮛ) SUNDANESE LETTER RA	[2D61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9B, 0x0062 };
    uint32_t const ces[9] = { 0x2D61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_063)
{
    // 1BA2 0021;	
    // (ᮢ) SUNDANESE CONSONANT SIGN PANYAKRA	[2D62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA2, 0x0021 };
    uint32_t const ces[9] = { 0x2D62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_064)
{
    // 1BA2 003F;	
    // (ᮢ) SUNDANESE CONSONANT SIGN PANYAKRA	[2D62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA2, 0x003F };
    uint32_t const ces[9] = { 0x2D62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_065)
{
    // 1BA2 0061;	
    // (ᮢ) SUNDANESE CONSONANT SIGN PANYAKRA	[2D62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA2, 0x0061 };
    uint32_t const ces[9] = { 0x2D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_066)
{
    // 1BA2 0041;	
    // (ᮢ) SUNDANESE CONSONANT SIGN PANYAKRA	[2D62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA2, 0x0041 };
    uint32_t const ces[9] = { 0x2D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_067)
{
    // 1BA2 0062;	
    // (ᮢ) SUNDANESE CONSONANT SIGN PANYAKRA	[2D62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA2, 0x0062 };
    uint32_t const ces[9] = { 0x2D62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_068)
{
    // 1BBB 0021;	
    // (ᮻ) SUNDANESE LETTER REU	[2D63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBB, 0x0021 };
    uint32_t const ces[9] = { 0x2D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_069)
{
    // 1BBB 003F;	
    // (ᮻ) SUNDANESE LETTER REU	[2D63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBB, 0x003F };
    uint32_t const ces[9] = { 0x2D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_070)
{
    // 1BBB 0061;	
    // (ᮻ) SUNDANESE LETTER REU	[2D63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBB, 0x0061 };
    uint32_t const ces[9] = { 0x2D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_071)
{
    // 1BBB 0041;	
    // (ᮻ) SUNDANESE LETTER REU	[2D63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BBB, 0x0041 };
    uint32_t const ces[9] = { 0x2D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_072)
{
    // 1BBB 0062;	
    // (ᮻ) SUNDANESE LETTER REU	[2D63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBB, 0x0062 };
    uint32_t const ces[9] = { 0x2D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_073)
{
    // 1B9C 0021;	
    // (ᮜ) SUNDANESE LETTER LA	[2D64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9C, 0x0021 };
    uint32_t const ces[9] = { 0x2D64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_074)
{
    // 1B9C 003F;	
    // (ᮜ) SUNDANESE LETTER LA	[2D64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9C, 0x003F };
    uint32_t const ces[9] = { 0x2D64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_075)
{
    // 1B9C 0061;	
    // (ᮜ) SUNDANESE LETTER LA	[2D64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9C, 0x0061 };
    uint32_t const ces[9] = { 0x2D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_076)
{
    // 1B9C 0041;	
    // (ᮜ) SUNDANESE LETTER LA	[2D64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9C, 0x0041 };
    uint32_t const ces[9] = { 0x2D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_077)
{
    // 1B9C 0062;	
    // (ᮜ) SUNDANESE LETTER LA	[2D64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9C, 0x0062 };
    uint32_t const ces[9] = { 0x2D64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_078)
{
    // 1BA3 0021;	
    // (ᮣ) SUNDANESE CONSONANT SIGN PANYIKU	[2D65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA3, 0x0021 };
    uint32_t const ces[9] = { 0x2D65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_079)
{
    // 1BA3 003F;	
    // (ᮣ) SUNDANESE CONSONANT SIGN PANYIKU	[2D65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA3, 0x003F };
    uint32_t const ces[9] = { 0x2D65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_080)
{
    // 1BA3 0061;	
    // (ᮣ) SUNDANESE CONSONANT SIGN PANYIKU	[2D65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA3, 0x0061 };
    uint32_t const ces[9] = { 0x2D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_081)
{
    // 1BA3 0041;	
    // (ᮣ) SUNDANESE CONSONANT SIGN PANYIKU	[2D65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA3, 0x0041 };
    uint32_t const ces[9] = { 0x2D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_082)
{
    // 1BA3 0062;	
    // (ᮣ) SUNDANESE CONSONANT SIGN PANYIKU	[2D65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA3, 0x0062 };
    uint32_t const ces[9] = { 0x2D65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_083)
{
    // 1BBC 0021;	
    // (ᮼ) SUNDANESE LETTER LEU	[2D66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBC, 0x0021 };
    uint32_t const ces[9] = { 0x2D66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_084)
{
    // 1BBC 003F;	
    // (ᮼ) SUNDANESE LETTER LEU	[2D66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBC, 0x003F };
    uint32_t const ces[9] = { 0x2D66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_085)
{
    // 1BBC 0061;	
    // (ᮼ) SUNDANESE LETTER LEU	[2D66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBC, 0x0061 };
    uint32_t const ces[9] = { 0x2D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_086)
{
    // 1BBC 0041;	
    // (ᮼ) SUNDANESE LETTER LEU	[2D66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BBC, 0x0041 };
    uint32_t const ces[9] = { 0x2D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_087)
{
    // 1BBC 0062;	
    // (ᮼ) SUNDANESE LETTER LEU	[2D66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BBC, 0x0062 };
    uint32_t const ces[9] = { 0x2D66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_088)
{
    // 1B9D 0021;	
    // (ᮝ) SUNDANESE LETTER WA	[2D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9D, 0x0021 };
    uint32_t const ces[9] = { 0x2D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_089)
{
    // 1B9D 003F;	
    // (ᮝ) SUNDANESE LETTER WA	[2D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9D, 0x003F };
    uint32_t const ces[9] = { 0x2D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_090)
{
    // 1B9D 0061;	
    // (ᮝ) SUNDANESE LETTER WA	[2D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9D, 0x0061 };
    uint32_t const ces[9] = { 0x2D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_091)
{
    // 1B9D 0041;	
    // (ᮝ) SUNDANESE LETTER WA	[2D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9D, 0x0041 };
    uint32_t const ces[9] = { 0x2D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_092)
{
    // 1B9D 0062;	
    // (ᮝ) SUNDANESE LETTER WA	[2D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9D, 0x0062 };
    uint32_t const ces[9] = { 0x2D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_093)
{
    // 1BAD 0021;	
    // (ᮭ) SUNDANESE CONSONANT SIGN PASANGAN WA	[2D68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAD, 0x0021 };
    uint32_t const ces[9] = { 0x2D68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_094)
{
    // 1BAD 003F;	
    // (ᮭ) SUNDANESE CONSONANT SIGN PASANGAN WA	[2D68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAD, 0x003F };
    uint32_t const ces[9] = { 0x2D68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_095)
{
    // 1BAD 0061;	
    // (ᮭ) SUNDANESE CONSONANT SIGN PASANGAN WA	[2D68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAD, 0x0061 };
    uint32_t const ces[9] = { 0x2D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_096)
{
    // 1BAD 0041;	
    // (ᮭ) SUNDANESE CONSONANT SIGN PASANGAN WA	[2D68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BAD, 0x0041 };
    uint32_t const ces[9] = { 0x2D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_097)
{
    // 1BAD 0062;	
    // (ᮭ) SUNDANESE CONSONANT SIGN PASANGAN WA	[2D68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAD, 0x0062 };
    uint32_t const ces[9] = { 0x2D68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_098)
{
    // 1B9E 0021;	
    // (ᮞ) SUNDANESE LETTER SA	[2D69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9E, 0x0021 };
    uint32_t const ces[9] = { 0x2D69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_099)
{
    // 1B9E 003F;	
    // (ᮞ) SUNDANESE LETTER SA	[2D69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9E, 0x003F };
    uint32_t const ces[9] = { 0x2D69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_100)
{
    // 1B9E 0061;	
    // (ᮞ) SUNDANESE LETTER SA	[2D69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9E, 0x0061 };
    uint32_t const ces[9] = { 0x2D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_101)
{
    // 1B9E 0041;	
    // (ᮞ) SUNDANESE LETTER SA	[2D69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9E, 0x0041 };
    uint32_t const ces[9] = { 0x2D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_102)
{
    // 1B9E 0062;	
    // (ᮞ) SUNDANESE LETTER SA	[2D69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9E, 0x0062 };
    uint32_t const ces[9] = { 0x2D69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_103)
{
    // 1B9F 0021;	
    // (ᮟ) SUNDANESE LETTER XA	[2D6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9F, 0x0021 };
    uint32_t const ces[9] = { 0x2D6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_104)
{
    // 1B9F 003F;	
    // (ᮟ) SUNDANESE LETTER XA	[2D6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9F, 0x003F };
    uint32_t const ces[9] = { 0x2D6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_105)
{
    // 1B9F 0061;	
    // (ᮟ) SUNDANESE LETTER XA	[2D6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9F, 0x0061 };
    uint32_t const ces[9] = { 0x2D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_106)
{
    // 1B9F 0041;	
    // (ᮟ) SUNDANESE LETTER XA	[2D6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B9F, 0x0041 };
    uint32_t const ces[9] = { 0x2D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_107)
{
    // 1B9F 0062;	
    // (ᮟ) SUNDANESE LETTER XA	[2D6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B9F, 0x0062 };
    uint32_t const ces[9] = { 0x2D6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_108)
{
    // 1BAF 0021;	
    // (ᮯ) SUNDANESE LETTER SYA	[2D6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAF, 0x0021 };
    uint32_t const ces[9] = { 0x2D6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_109)
{
    // 1BAF 003F;	
    // (ᮯ) SUNDANESE LETTER SYA	[2D6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAF, 0x003F };
    uint32_t const ces[9] = { 0x2D6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_110)
{
    // 1BAF 0061;	
    // (ᮯ) SUNDANESE LETTER SYA	[2D6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAF, 0x0061 };
    uint32_t const ces[9] = { 0x2D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_111)
{
    // 1BAF 0041;	
    // (ᮯ) SUNDANESE LETTER SYA	[2D6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BAF, 0x0041 };
    uint32_t const ces[9] = { 0x2D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_112)
{
    // 1BAF 0062;	
    // (ᮯ) SUNDANESE LETTER SYA	[2D6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAF, 0x0062 };
    uint32_t const ces[9] = { 0x2D6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_113)
{
    // 1BA0 0021;	
    // (ᮠ) SUNDANESE LETTER HA	[2D6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA0, 0x0021 };
    uint32_t const ces[9] = { 0x2D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_114)
{
    // 1BA0 003F;	
    // (ᮠ) SUNDANESE LETTER HA	[2D6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA0, 0x003F };
    uint32_t const ces[9] = { 0x2D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_115)
{
    // 1BA0 0061;	
    // (ᮠ) SUNDANESE LETTER HA	[2D6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA0, 0x0061 };
    uint32_t const ces[9] = { 0x2D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_116)
{
    // 1BA0 0041;	
    // (ᮠ) SUNDANESE LETTER HA	[2D6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA0, 0x0041 };
    uint32_t const ces[9] = { 0x2D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_117)
{
    // 1BA0 0062;	
    // (ᮠ) SUNDANESE LETTER HA	[2D6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA0, 0x0062 };
    uint32_t const ces[9] = { 0x2D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_118)
{
    // 1BA4 0021;	
    // (ᮤ) SUNDANESE VOWEL SIGN PANGHULU	[2D6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA4, 0x0021 };
    uint32_t const ces[9] = { 0x2D6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_119)
{
    // 1BA4 003F;	
    // (ᮤ) SUNDANESE VOWEL SIGN PANGHULU	[2D6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA4, 0x003F };
    uint32_t const ces[9] = { 0x2D6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_120)
{
    // 1BA4 0061;	
    // (ᮤ) SUNDANESE VOWEL SIGN PANGHULU	[2D6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA4, 0x0061 };
    uint32_t const ces[9] = { 0x2D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_121)
{
    // 1BA4 0041;	
    // (ᮤ) SUNDANESE VOWEL SIGN PANGHULU	[2D6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA4, 0x0041 };
    uint32_t const ces[9] = { 0x2D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_122)
{
    // 1BA4 0062;	
    // (ᮤ) SUNDANESE VOWEL SIGN PANGHULU	[2D6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA4, 0x0062 };
    uint32_t const ces[9] = { 0x2D6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_123)
{
    // 1BA5 0021;	
    // (ᮥ) SUNDANESE VOWEL SIGN PANYUKU	[2D6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA5, 0x0021 };
    uint32_t const ces[9] = { 0x2D6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_124)
{
    // 1BA5 003F;	
    // (ᮥ) SUNDANESE VOWEL SIGN PANYUKU	[2D6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA5, 0x003F };
    uint32_t const ces[9] = { 0x2D6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_125)
{
    // 1BA5 0061;	
    // (ᮥ) SUNDANESE VOWEL SIGN PANYUKU	[2D6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA5, 0x0061 };
    uint32_t const ces[9] = { 0x2D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_126)
{
    // 1BA5 0041;	
    // (ᮥ) SUNDANESE VOWEL SIGN PANYUKU	[2D6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA5, 0x0041 };
    uint32_t const ces[9] = { 0x2D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_127)
{
    // 1BA5 0062;	
    // (ᮥ) SUNDANESE VOWEL SIGN PANYUKU	[2D6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA5, 0x0062 };
    uint32_t const ces[9] = { 0x2D6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_128)
{
    // 1BA6 0021;	
    // (ᮦ) SUNDANESE VOWEL SIGN PANAELAENG	[2D6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA6, 0x0021 };
    uint32_t const ces[9] = { 0x2D6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_129)
{
    // 1BA6 003F;	
    // (ᮦ) SUNDANESE VOWEL SIGN PANAELAENG	[2D6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA6, 0x003F };
    uint32_t const ces[9] = { 0x2D6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_130)
{
    // 1BA6 0061;	
    // (ᮦ) SUNDANESE VOWEL SIGN PANAELAENG	[2D6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA6, 0x0061 };
    uint32_t const ces[9] = { 0x2D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_131)
{
    // 1BA6 0041;	
    // (ᮦ) SUNDANESE VOWEL SIGN PANAELAENG	[2D6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA6, 0x0041 };
    uint32_t const ces[9] = { 0x2D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_132)
{
    // 1BA6 0062;	
    // (ᮦ) SUNDANESE VOWEL SIGN PANAELAENG	[2D6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA6, 0x0062 };
    uint32_t const ces[9] = { 0x2D6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_133)
{
    // 1BA7 0021;	
    // (ᮧ) SUNDANESE VOWEL SIGN PANOLONG	[2D70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA7, 0x0021 };
    uint32_t const ces[9] = { 0x2D70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_134)
{
    // 1BA7 003F;	
    // (ᮧ) SUNDANESE VOWEL SIGN PANOLONG	[2D70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA7, 0x003F };
    uint32_t const ces[9] = { 0x2D70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_135)
{
    // 1BA7 0061;	
    // (ᮧ) SUNDANESE VOWEL SIGN PANOLONG	[2D70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA7, 0x0061 };
    uint32_t const ces[9] = { 0x2D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_136)
{
    // 1BA7 0041;	
    // (ᮧ) SUNDANESE VOWEL SIGN PANOLONG	[2D70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA7, 0x0041 };
    uint32_t const ces[9] = { 0x2D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_137)
{
    // 1BA7 0062;	
    // (ᮧ) SUNDANESE VOWEL SIGN PANOLONG	[2D70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA7, 0x0062 };
    uint32_t const ces[9] = { 0x2D70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_138)
{
    // 1BA8 0021;	
    // (ᮨ) SUNDANESE VOWEL SIGN PAMEPET	[2D71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA8, 0x0021 };
    uint32_t const ces[9] = { 0x2D71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_139)
{
    // 1BA8 003F;	
    // (ᮨ) SUNDANESE VOWEL SIGN PAMEPET	[2D71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA8, 0x003F };
    uint32_t const ces[9] = { 0x2D71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_140)
{
    // 1BA8 0061;	
    // (ᮨ) SUNDANESE VOWEL SIGN PAMEPET	[2D71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA8, 0x0061 };
    uint32_t const ces[9] = { 0x2D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_141)
{
    // 1BA8 0041;	
    // (ᮨ) SUNDANESE VOWEL SIGN PAMEPET	[2D71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA8, 0x0041 };
    uint32_t const ces[9] = { 0x2D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_142)
{
    // 1BA8 0062;	
    // (ᮨ) SUNDANESE VOWEL SIGN PAMEPET	[2D71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA8, 0x0062 };
    uint32_t const ces[9] = { 0x2D71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_143)
{
    // 1BA9 0021;	
    // (ᮩ) SUNDANESE VOWEL SIGN PANEULEUNG	[2D72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA9, 0x0021 };
    uint32_t const ces[9] = { 0x2D72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_144)
{
    // 1BA9 003F;	
    // (ᮩ) SUNDANESE VOWEL SIGN PANEULEUNG	[2D72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA9, 0x003F };
    uint32_t const ces[9] = { 0x2D72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_145)
{
    // 1BA9 0061;	
    // (ᮩ) SUNDANESE VOWEL SIGN PANEULEUNG	[2D72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA9, 0x0061 };
    uint32_t const ces[9] = { 0x2D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_146)
{
    // 1BA9 0041;	
    // (ᮩ) SUNDANESE VOWEL SIGN PANEULEUNG	[2D72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BA9, 0x0041 };
    uint32_t const ces[9] = { 0x2D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_147)
{
    // 1BA9 0062;	
    // (ᮩ) SUNDANESE VOWEL SIGN PANEULEUNG	[2D72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BA9, 0x0062 };
    uint32_t const ces[9] = { 0x2D72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_148)
{
    // 0334 1BAA;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1BAA };
    uint32_t const ces[8] = { 0x2D73, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_149)
{
    // 1BAA 0334;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAA, 0x0334 };
    uint32_t const ces[8] = { 0x2D73, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_150)
{
    // 1BAA 0021;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAA, 0x0021 };
    uint32_t const ces[9] = { 0x2D73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_151)
{
    // 1BAA 003F;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAA, 0x003F };
    uint32_t const ces[9] = { 0x2D73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_152)
{
    // 1BAA 0061;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAA, 0x0061 };
    uint32_t const ces[9] = { 0x2D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_153)
{
    // 1BAA 0041;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BAA, 0x0041 };
    uint32_t const ces[9] = { 0x2D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_154)
{
    // 1BAA 0062;	
    // (᮪) SUNDANESE SIGN PAMAAEH	[2D73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAA, 0x0062 };
    uint32_t const ces[9] = { 0x2D73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_155)
{
    // 0334 1BAB;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1BAB };
    uint32_t const ces[8] = { 0x2D74, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_156)
{
    // 1BAB 0334;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAB, 0x0334 };
    uint32_t const ces[8] = { 0x2D74, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_157)
{
    // 1BAB 0021;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAB, 0x0021 };
    uint32_t const ces[9] = { 0x2D74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_158)
{
    // 1BAB 003F;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAB, 0x003F };
    uint32_t const ces[9] = { 0x2D74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_159)
{
    // 1BAB 0061;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAB, 0x0061 };
    uint32_t const ces[9] = { 0x2D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_160)
{
    // 1BAB 0041;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BAB, 0x0041 };
    uint32_t const ces[9] = { 0x2D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_161)
{
    // 1BAB 0062;	
    // (᮫) SUNDANESE SIGN VIRAMA	[2D74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BAB, 0x0062 };
    uint32_t const ces[9] = { 0x2D74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_162)
{
    // 11005 0021;	
    // (𑀅) BRAHMI LETTER A	[2D75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11005, 0x0021 };
    uint32_t const ces[9] = { 0x2D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_163)
{
    // 11005 003F;	
    // (𑀅) BRAHMI LETTER A	[2D75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11005, 0x003F };
    uint32_t const ces[9] = { 0x2D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_164)
{
    // 11005 0061;	
    // (𑀅) BRAHMI LETTER A	[2D75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11005, 0x0061 };
    uint32_t const ces[9] = { 0x2D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_165)
{
    // 11005 0041;	
    // (𑀅) BRAHMI LETTER A	[2D75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11005, 0x0041 };
    uint32_t const ces[9] = { 0x2D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_166)
{
    // 11005 0062;	
    // (𑀅) BRAHMI LETTER A	[2D75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11005, 0x0062 };
    uint32_t const ces[9] = { 0x2D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_167)
{
    // 11006 0021;	
    // (𑀆) BRAHMI LETTER AA	[2D76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11006, 0x0021 };
    uint32_t const ces[9] = { 0x2D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_168)
{
    // 11006 003F;	
    // (𑀆) BRAHMI LETTER AA	[2D76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11006, 0x003F };
    uint32_t const ces[9] = { 0x2D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_169)
{
    // 11006 0061;	
    // (𑀆) BRAHMI LETTER AA	[2D76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11006, 0x0061 };
    uint32_t const ces[9] = { 0x2D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_170)
{
    // 11006 0041;	
    // (𑀆) BRAHMI LETTER AA	[2D76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11006, 0x0041 };
    uint32_t const ces[9] = { 0x2D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_171)
{
    // 11006 0062;	
    // (𑀆) BRAHMI LETTER AA	[2D76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11006, 0x0062 };
    uint32_t const ces[9] = { 0x2D76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_172)
{
    // 11007 0021;	
    // (𑀇) BRAHMI LETTER I	[2D77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11007, 0x0021 };
    uint32_t const ces[9] = { 0x2D77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_173)
{
    // 11007 003F;	
    // (𑀇) BRAHMI LETTER I	[2D77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11007, 0x003F };
    uint32_t const ces[9] = { 0x2D77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_174)
{
    // 11007 0061;	
    // (𑀇) BRAHMI LETTER I	[2D77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11007, 0x0061 };
    uint32_t const ces[9] = { 0x2D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_175)
{
    // 11007 0041;	
    // (𑀇) BRAHMI LETTER I	[2D77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11007, 0x0041 };
    uint32_t const ces[9] = { 0x2D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_176)
{
    // 11007 0062;	
    // (𑀇) BRAHMI LETTER I	[2D77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11007, 0x0062 };
    uint32_t const ces[9] = { 0x2D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_177)
{
    // 11008 0021;	
    // (𑀈) BRAHMI LETTER II	[2D78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11008, 0x0021 };
    uint32_t const ces[9] = { 0x2D78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_178)
{
    // 11008 003F;	
    // (𑀈) BRAHMI LETTER II	[2D78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11008, 0x003F };
    uint32_t const ces[9] = { 0x2D78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_179)
{
    // 11008 0061;	
    // (𑀈) BRAHMI LETTER II	[2D78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11008, 0x0061 };
    uint32_t const ces[9] = { 0x2D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_180)
{
    // 11008 0041;	
    // (𑀈) BRAHMI LETTER II	[2D78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11008, 0x0041 };
    uint32_t const ces[9] = { 0x2D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_181)
{
    // 11008 0062;	
    // (𑀈) BRAHMI LETTER II	[2D78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11008, 0x0062 };
    uint32_t const ces[9] = { 0x2D78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_182)
{
    // 11009 0021;	
    // (𑀉) BRAHMI LETTER U	[2D79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11009, 0x0021 };
    uint32_t const ces[9] = { 0x2D79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_183)
{
    // 11009 003F;	
    // (𑀉) BRAHMI LETTER U	[2D79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11009, 0x003F };
    uint32_t const ces[9] = { 0x2D79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_184)
{
    // 11009 0061;	
    // (𑀉) BRAHMI LETTER U	[2D79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11009, 0x0061 };
    uint32_t const ces[9] = { 0x2D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_185)
{
    // 11009 0041;	
    // (𑀉) BRAHMI LETTER U	[2D79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11009, 0x0041 };
    uint32_t const ces[9] = { 0x2D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_186)
{
    // 11009 0062;	
    // (𑀉) BRAHMI LETTER U	[2D79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11009, 0x0062 };
    uint32_t const ces[9] = { 0x2D79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_187)
{
    // 1100A 0021;	
    // (𑀊) BRAHMI LETTER UU	[2D7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100A, 0x0021 };
    uint32_t const ces[9] = { 0x2D7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_188)
{
    // 1100A 003F;	
    // (𑀊) BRAHMI LETTER UU	[2D7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100A, 0x003F };
    uint32_t const ces[9] = { 0x2D7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_189)
{
    // 1100A 0061;	
    // (𑀊) BRAHMI LETTER UU	[2D7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100A, 0x0061 };
    uint32_t const ces[9] = { 0x2D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_190)
{
    // 1100A 0041;	
    // (𑀊) BRAHMI LETTER UU	[2D7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100A, 0x0041 };
    uint32_t const ces[9] = { 0x2D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_191)
{
    // 1100A 0062;	
    // (𑀊) BRAHMI LETTER UU	[2D7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100A, 0x0062 };
    uint32_t const ces[9] = { 0x2D7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_192)
{
    // 1100B 0021;	
    // (𑀋) BRAHMI LETTER VOCALIC R	[2D7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100B, 0x0021 };
    uint32_t const ces[9] = { 0x2D7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_193)
{
    // 1100B 003F;	
    // (𑀋) BRAHMI LETTER VOCALIC R	[2D7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100B, 0x003F };
    uint32_t const ces[9] = { 0x2D7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_194)
{
    // 1100B 0061;	
    // (𑀋) BRAHMI LETTER VOCALIC R	[2D7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100B, 0x0061 };
    uint32_t const ces[9] = { 0x2D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_195)
{
    // 1100B 0041;	
    // (𑀋) BRAHMI LETTER VOCALIC R	[2D7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100B, 0x0041 };
    uint32_t const ces[9] = { 0x2D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_196)
{
    // 1100B 0062;	
    // (𑀋) BRAHMI LETTER VOCALIC R	[2D7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100B, 0x0062 };
    uint32_t const ces[9] = { 0x2D7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_197)
{
    // 1100C 0021;	
    // (𑀌) BRAHMI LETTER VOCALIC RR	[2D7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100C, 0x0021 };
    uint32_t const ces[9] = { 0x2D7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_198)
{
    // 1100C 003F;	
    // (𑀌) BRAHMI LETTER VOCALIC RR	[2D7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100C, 0x003F };
    uint32_t const ces[9] = { 0x2D7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_199)
{
    // 1100C 0061;	
    // (𑀌) BRAHMI LETTER VOCALIC RR	[2D7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100C, 0x0061 };
    uint32_t const ces[9] = { 0x2D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_200)
{
    // 1100C 0041;	
    // (𑀌) BRAHMI LETTER VOCALIC RR	[2D7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100C, 0x0041 };
    uint32_t const ces[9] = { 0x2D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_201)
{
    // 1100C 0062;	
    // (𑀌) BRAHMI LETTER VOCALIC RR	[2D7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100C, 0x0062 };
    uint32_t const ces[9] = { 0x2D7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_202)
{
    // 1100D 0021;	
    // (𑀍) BRAHMI LETTER VOCALIC L	[2D7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100D, 0x0021 };
    uint32_t const ces[9] = { 0x2D7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_203)
{
    // 1100D 003F;	
    // (𑀍) BRAHMI LETTER VOCALIC L	[2D7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100D, 0x003F };
    uint32_t const ces[9] = { 0x2D7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_204)
{
    // 1100D 0061;	
    // (𑀍) BRAHMI LETTER VOCALIC L	[2D7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100D, 0x0061 };
    uint32_t const ces[9] = { 0x2D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_205)
{
    // 1100D 0041;	
    // (𑀍) BRAHMI LETTER VOCALIC L	[2D7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100D, 0x0041 };
    uint32_t const ces[9] = { 0x2D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_206)
{
    // 1100D 0062;	
    // (𑀍) BRAHMI LETTER VOCALIC L	[2D7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100D, 0x0062 };
    uint32_t const ces[9] = { 0x2D7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_207)
{
    // 1100E 0021;	
    // (𑀎) BRAHMI LETTER VOCALIC LL	[2D7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100E, 0x0021 };
    uint32_t const ces[9] = { 0x2D7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_208)
{
    // 1100E 003F;	
    // (𑀎) BRAHMI LETTER VOCALIC LL	[2D7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100E, 0x003F };
    uint32_t const ces[9] = { 0x2D7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_209)
{
    // 1100E 0061;	
    // (𑀎) BRAHMI LETTER VOCALIC LL	[2D7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100E, 0x0061 };
    uint32_t const ces[9] = { 0x2D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_210)
{
    // 1100E 0041;	
    // (𑀎) BRAHMI LETTER VOCALIC LL	[2D7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100E, 0x0041 };
    uint32_t const ces[9] = { 0x2D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_211)
{
    // 1100E 0062;	
    // (𑀎) BRAHMI LETTER VOCALIC LL	[2D7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100E, 0x0062 };
    uint32_t const ces[9] = { 0x2D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_212)
{
    // 1100F 0021;	
    // (𑀏) BRAHMI LETTER E	[2D7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100F, 0x0021 };
    uint32_t const ces[9] = { 0x2D7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_213)
{
    // 1100F 003F;	
    // (𑀏) BRAHMI LETTER E	[2D7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100F, 0x003F };
    uint32_t const ces[9] = { 0x2D7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_214)
{
    // 1100F 0061;	
    // (𑀏) BRAHMI LETTER E	[2D7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100F, 0x0061 };
    uint32_t const ces[9] = { 0x2D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_215)
{
    // 1100F 0041;	
    // (𑀏) BRAHMI LETTER E	[2D7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1100F, 0x0041 };
    uint32_t const ces[9] = { 0x2D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_216)
{
    // 1100F 0062;	
    // (𑀏) BRAHMI LETTER E	[2D7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1100F, 0x0062 };
    uint32_t const ces[9] = { 0x2D7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_217)
{
    // 11010 0021;	
    // (𑀐) BRAHMI LETTER AI	[2D80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11010, 0x0021 };
    uint32_t const ces[9] = { 0x2D80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_218)
{
    // 11010 003F;	
    // (𑀐) BRAHMI LETTER AI	[2D80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11010, 0x003F };
    uint32_t const ces[9] = { 0x2D80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_219)
{
    // 11010 0061;	
    // (𑀐) BRAHMI LETTER AI	[2D80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11010, 0x0061 };
    uint32_t const ces[9] = { 0x2D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_220)
{
    // 11010 0041;	
    // (𑀐) BRAHMI LETTER AI	[2D80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11010, 0x0041 };
    uint32_t const ces[9] = { 0x2D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_221)
{
    // 11010 0062;	
    // (𑀐) BRAHMI LETTER AI	[2D80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11010, 0x0062 };
    uint32_t const ces[9] = { 0x2D80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_222)
{
    // 11011 0021;	
    // (𑀑) BRAHMI LETTER O	[2D81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11011, 0x0021 };
    uint32_t const ces[9] = { 0x2D81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_223)
{
    // 11011 003F;	
    // (𑀑) BRAHMI LETTER O	[2D81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11011, 0x003F };
    uint32_t const ces[9] = { 0x2D81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_224)
{
    // 11011 0061;	
    // (𑀑) BRAHMI LETTER O	[2D81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11011, 0x0061 };
    uint32_t const ces[9] = { 0x2D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_225)
{
    // 11011 0041;	
    // (𑀑) BRAHMI LETTER O	[2D81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11011, 0x0041 };
    uint32_t const ces[9] = { 0x2D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_226)
{
    // 11011 0062;	
    // (𑀑) BRAHMI LETTER O	[2D81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11011, 0x0062 };
    uint32_t const ces[9] = { 0x2D81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_227)
{
    // 11012 0021;	
    // (𑀒) BRAHMI LETTER AU	[2D82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11012, 0x0021 };
    uint32_t const ces[9] = { 0x2D82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_228)
{
    // 11012 003F;	
    // (𑀒) BRAHMI LETTER AU	[2D82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11012, 0x003F };
    uint32_t const ces[9] = { 0x2D82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_229)
{
    // 11012 0061;	
    // (𑀒) BRAHMI LETTER AU	[2D82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11012, 0x0061 };
    uint32_t const ces[9] = { 0x2D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_230)
{
    // 11012 0041;	
    // (𑀒) BRAHMI LETTER AU	[2D82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11012, 0x0041 };
    uint32_t const ces[9] = { 0x2D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_231)
{
    // 11012 0062;	
    // (𑀒) BRAHMI LETTER AU	[2D82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11012, 0x0062 };
    uint32_t const ces[9] = { 0x2D82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_232)
{
    // 11013 0021;	
    // (𑀓) BRAHMI LETTER KA	[2D83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11013, 0x0021 };
    uint32_t const ces[9] = { 0x2D83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_233)
{
    // 11013 003F;	
    // (𑀓) BRAHMI LETTER KA	[2D83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11013, 0x003F };
    uint32_t const ces[9] = { 0x2D83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_234)
{
    // 11013 0061;	
    // (𑀓) BRAHMI LETTER KA	[2D83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11013, 0x0061 };
    uint32_t const ces[9] = { 0x2D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_235)
{
    // 11013 0041;	
    // (𑀓) BRAHMI LETTER KA	[2D83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11013, 0x0041 };
    uint32_t const ces[9] = { 0x2D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_236)
{
    // 11013 0062;	
    // (𑀓) BRAHMI LETTER KA	[2D83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11013, 0x0062 };
    uint32_t const ces[9] = { 0x2D83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_237)
{
    // 11014 0021;	
    // (𑀔) BRAHMI LETTER KHA	[2D84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11014, 0x0021 };
    uint32_t const ces[9] = { 0x2D84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_238)
{
    // 11014 003F;	
    // (𑀔) BRAHMI LETTER KHA	[2D84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11014, 0x003F };
    uint32_t const ces[9] = { 0x2D84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_239)
{
    // 11014 0061;	
    // (𑀔) BRAHMI LETTER KHA	[2D84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11014, 0x0061 };
    uint32_t const ces[9] = { 0x2D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_240)
{
    // 11014 0041;	
    // (𑀔) BRAHMI LETTER KHA	[2D84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11014, 0x0041 };
    uint32_t const ces[9] = { 0x2D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_241)
{
    // 11014 0062;	
    // (𑀔) BRAHMI LETTER KHA	[2D84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11014, 0x0062 };
    uint32_t const ces[9] = { 0x2D84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_242)
{
    // 11015 0021;	
    // (𑀕) BRAHMI LETTER GA	[2D85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11015, 0x0021 };
    uint32_t const ces[9] = { 0x2D85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_243)
{
    // 11015 003F;	
    // (𑀕) BRAHMI LETTER GA	[2D85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11015, 0x003F };
    uint32_t const ces[9] = { 0x2D85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_244)
{
    // 11015 0061;	
    // (𑀕) BRAHMI LETTER GA	[2D85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11015, 0x0061 };
    uint32_t const ces[9] = { 0x2D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_245)
{
    // 11015 0041;	
    // (𑀕) BRAHMI LETTER GA	[2D85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11015, 0x0041 };
    uint32_t const ces[9] = { 0x2D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_246)
{
    // 11015 0062;	
    // (𑀕) BRAHMI LETTER GA	[2D85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11015, 0x0062 };
    uint32_t const ces[9] = { 0x2D85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_247)
{
    // 11016 0021;	
    // (𑀖) BRAHMI LETTER GHA	[2D86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11016, 0x0021 };
    uint32_t const ces[9] = { 0x2D86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_248)
{
    // 11016 003F;	
    // (𑀖) BRAHMI LETTER GHA	[2D86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11016, 0x003F };
    uint32_t const ces[9] = { 0x2D86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_249)
{
    // 11016 0061;	
    // (𑀖) BRAHMI LETTER GHA	[2D86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11016, 0x0061 };
    uint32_t const ces[9] = { 0x2D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_250)
{
    // 11016 0041;	
    // (𑀖) BRAHMI LETTER GHA	[2D86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11016, 0x0041 };
    uint32_t const ces[9] = { 0x2D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_251)
{
    // 11016 0062;	
    // (𑀖) BRAHMI LETTER GHA	[2D86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11016, 0x0062 };
    uint32_t const ces[9] = { 0x2D86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_252)
{
    // 11017 0021;	
    // (𑀗) BRAHMI LETTER NGA	[2D87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11017, 0x0021 };
    uint32_t const ces[9] = { 0x2D87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_253)
{
    // 11017 003F;	
    // (𑀗) BRAHMI LETTER NGA	[2D87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11017, 0x003F };
    uint32_t const ces[9] = { 0x2D87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_254)
{
    // 11017 0061;	
    // (𑀗) BRAHMI LETTER NGA	[2D87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11017, 0x0061 };
    uint32_t const ces[9] = { 0x2D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_255)
{
    // 11017 0041;	
    // (𑀗) BRAHMI LETTER NGA	[2D87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11017, 0x0041 };
    uint32_t const ces[9] = { 0x2D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_256)
{
    // 11017 0062;	
    // (𑀗) BRAHMI LETTER NGA	[2D87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11017, 0x0062 };
    uint32_t const ces[9] = { 0x2D87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_257)
{
    // 11018 0021;	
    // (𑀘) BRAHMI LETTER CA	[2D88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11018, 0x0021 };
    uint32_t const ces[9] = { 0x2D88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_258)
{
    // 11018 003F;	
    // (𑀘) BRAHMI LETTER CA	[2D88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11018, 0x003F };
    uint32_t const ces[9] = { 0x2D88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_259)
{
    // 11018 0061;	
    // (𑀘) BRAHMI LETTER CA	[2D88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11018, 0x0061 };
    uint32_t const ces[9] = { 0x2D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_260)
{
    // 11018 0041;	
    // (𑀘) BRAHMI LETTER CA	[2D88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11018, 0x0041 };
    uint32_t const ces[9] = { 0x2D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_261)
{
    // 11018 0062;	
    // (𑀘) BRAHMI LETTER CA	[2D88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11018, 0x0062 };
    uint32_t const ces[9] = { 0x2D88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_262)
{
    // 11019 0021;	
    // (𑀙) BRAHMI LETTER CHA	[2D89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11019, 0x0021 };
    uint32_t const ces[9] = { 0x2D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_263)
{
    // 11019 003F;	
    // (𑀙) BRAHMI LETTER CHA	[2D89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11019, 0x003F };
    uint32_t const ces[9] = { 0x2D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_264)
{
    // 11019 0061;	
    // (𑀙) BRAHMI LETTER CHA	[2D89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11019, 0x0061 };
    uint32_t const ces[9] = { 0x2D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_265)
{
    // 11019 0041;	
    // (𑀙) BRAHMI LETTER CHA	[2D89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11019, 0x0041 };
    uint32_t const ces[9] = { 0x2D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_266)
{
    // 11019 0062;	
    // (𑀙) BRAHMI LETTER CHA	[2D89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11019, 0x0062 };
    uint32_t const ces[9] = { 0x2D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_267)
{
    // 1101A 0021;	
    // (𑀚) BRAHMI LETTER JA	[2D8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101A, 0x0021 };
    uint32_t const ces[9] = { 0x2D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_268)
{
    // 1101A 003F;	
    // (𑀚) BRAHMI LETTER JA	[2D8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101A, 0x003F };
    uint32_t const ces[9] = { 0x2D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_269)
{
    // 1101A 0061;	
    // (𑀚) BRAHMI LETTER JA	[2D8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101A, 0x0061 };
    uint32_t const ces[9] = { 0x2D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_270)
{
    // 1101A 0041;	
    // (𑀚) BRAHMI LETTER JA	[2D8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101A, 0x0041 };
    uint32_t const ces[9] = { 0x2D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_271)
{
    // 1101A 0062;	
    // (𑀚) BRAHMI LETTER JA	[2D8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101A, 0x0062 };
    uint32_t const ces[9] = { 0x2D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_272)
{
    // 1101B 0021;	
    // (𑀛) BRAHMI LETTER JHA	[2D8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101B, 0x0021 };
    uint32_t const ces[9] = { 0x2D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_273)
{
    // 1101B 003F;	
    // (𑀛) BRAHMI LETTER JHA	[2D8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101B, 0x003F };
    uint32_t const ces[9] = { 0x2D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_274)
{
    // 1101B 0061;	
    // (𑀛) BRAHMI LETTER JHA	[2D8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101B, 0x0061 };
    uint32_t const ces[9] = { 0x2D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_275)
{
    // 1101B 0041;	
    // (𑀛) BRAHMI LETTER JHA	[2D8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101B, 0x0041 };
    uint32_t const ces[9] = { 0x2D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_276)
{
    // 1101B 0062;	
    // (𑀛) BRAHMI LETTER JHA	[2D8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101B, 0x0062 };
    uint32_t const ces[9] = { 0x2D8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_277)
{
    // 1101C 0021;	
    // (𑀜) BRAHMI LETTER NYA	[2D8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101C, 0x0021 };
    uint32_t const ces[9] = { 0x2D8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_278)
{
    // 1101C 003F;	
    // (𑀜) BRAHMI LETTER NYA	[2D8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101C, 0x003F };
    uint32_t const ces[9] = { 0x2D8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_279)
{
    // 1101C 0061;	
    // (𑀜) BRAHMI LETTER NYA	[2D8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101C, 0x0061 };
    uint32_t const ces[9] = { 0x2D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_280)
{
    // 1101C 0041;	
    // (𑀜) BRAHMI LETTER NYA	[2D8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101C, 0x0041 };
    uint32_t const ces[9] = { 0x2D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_281)
{
    // 1101C 0062;	
    // (𑀜) BRAHMI LETTER NYA	[2D8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101C, 0x0062 };
    uint32_t const ces[9] = { 0x2D8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_282)
{
    // 1101D 0021;	
    // (𑀝) BRAHMI LETTER TTA	[2D8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101D, 0x0021 };
    uint32_t const ces[9] = { 0x2D8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_283)
{
    // 1101D 003F;	
    // (𑀝) BRAHMI LETTER TTA	[2D8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101D, 0x003F };
    uint32_t const ces[9] = { 0x2D8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_284)
{
    // 1101D 0061;	
    // (𑀝) BRAHMI LETTER TTA	[2D8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101D, 0x0061 };
    uint32_t const ces[9] = { 0x2D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_285)
{
    // 1101D 0041;	
    // (𑀝) BRAHMI LETTER TTA	[2D8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101D, 0x0041 };
    uint32_t const ces[9] = { 0x2D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_286)
{
    // 1101D 0062;	
    // (𑀝) BRAHMI LETTER TTA	[2D8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101D, 0x0062 };
    uint32_t const ces[9] = { 0x2D8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_287)
{
    // 1101E 0021;	
    // (𑀞) BRAHMI LETTER TTHA	[2D8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101E, 0x0021 };
    uint32_t const ces[9] = { 0x2D8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_288)
{
    // 1101E 003F;	
    // (𑀞) BRAHMI LETTER TTHA	[2D8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101E, 0x003F };
    uint32_t const ces[9] = { 0x2D8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_289)
{
    // 1101E 0061;	
    // (𑀞) BRAHMI LETTER TTHA	[2D8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101E, 0x0061 };
    uint32_t const ces[9] = { 0x2D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_290)
{
    // 1101E 0041;	
    // (𑀞) BRAHMI LETTER TTHA	[2D8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101E, 0x0041 };
    uint32_t const ces[9] = { 0x2D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_291)
{
    // 1101E 0062;	
    // (𑀞) BRAHMI LETTER TTHA	[2D8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101E, 0x0062 };
    uint32_t const ces[9] = { 0x2D8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_292)
{
    // 1101F 0021;	
    // (𑀟) BRAHMI LETTER DDA	[2D8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101F, 0x0021 };
    uint32_t const ces[9] = { 0x2D8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_293)
{
    // 1101F 003F;	
    // (𑀟) BRAHMI LETTER DDA	[2D8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101F, 0x003F };
    uint32_t const ces[9] = { 0x2D8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_294)
{
    // 1101F 0061;	
    // (𑀟) BRAHMI LETTER DDA	[2D8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101F, 0x0061 };
    uint32_t const ces[9] = { 0x2D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_295)
{
    // 1101F 0041;	
    // (𑀟) BRAHMI LETTER DDA	[2D8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1101F, 0x0041 };
    uint32_t const ces[9] = { 0x2D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_296)
{
    // 1101F 0062;	
    // (𑀟) BRAHMI LETTER DDA	[2D8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1101F, 0x0062 };
    uint32_t const ces[9] = { 0x2D8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_297)
{
    // 11020 0021;	
    // (𑀠) BRAHMI LETTER DDHA	[2D90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11020, 0x0021 };
    uint32_t const ces[9] = { 0x2D90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_298)
{
    // 11020 003F;	
    // (𑀠) BRAHMI LETTER DDHA	[2D90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11020, 0x003F };
    uint32_t const ces[9] = { 0x2D90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_299)
{
    // 11020 0061;	
    // (𑀠) BRAHMI LETTER DDHA	[2D90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11020, 0x0061 };
    uint32_t const ces[9] = { 0x2D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_300)
{
    // 11020 0041;	
    // (𑀠) BRAHMI LETTER DDHA	[2D90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11020, 0x0041 };
    uint32_t const ces[9] = { 0x2D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_301)
{
    // 11020 0062;	
    // (𑀠) BRAHMI LETTER DDHA	[2D90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11020, 0x0062 };
    uint32_t const ces[9] = { 0x2D90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_302)
{
    // 11021 0021;	
    // (𑀡) BRAHMI LETTER NNA	[2D91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11021, 0x0021 };
    uint32_t const ces[9] = { 0x2D91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_303)
{
    // 11021 003F;	
    // (𑀡) BRAHMI LETTER NNA	[2D91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11021, 0x003F };
    uint32_t const ces[9] = { 0x2D91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_304)
{
    // 11021 0061;	
    // (𑀡) BRAHMI LETTER NNA	[2D91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11021, 0x0061 };
    uint32_t const ces[9] = { 0x2D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_305)
{
    // 11021 0041;	
    // (𑀡) BRAHMI LETTER NNA	[2D91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11021, 0x0041 };
    uint32_t const ces[9] = { 0x2D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_306)
{
    // 11021 0062;	
    // (𑀡) BRAHMI LETTER NNA	[2D91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11021, 0x0062 };
    uint32_t const ces[9] = { 0x2D91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_307)
{
    // 11022 0021;	
    // (𑀢) BRAHMI LETTER TA	[2D92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11022, 0x0021 };
    uint32_t const ces[9] = { 0x2D92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_308)
{
    // 11022 003F;	
    // (𑀢) BRAHMI LETTER TA	[2D92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11022, 0x003F };
    uint32_t const ces[9] = { 0x2D92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_309)
{
    // 11022 0061;	
    // (𑀢) BRAHMI LETTER TA	[2D92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11022, 0x0061 };
    uint32_t const ces[9] = { 0x2D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_310)
{
    // 11022 0041;	
    // (𑀢) BRAHMI LETTER TA	[2D92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11022, 0x0041 };
    uint32_t const ces[9] = { 0x2D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_311)
{
    // 11022 0062;	
    // (𑀢) BRAHMI LETTER TA	[2D92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11022, 0x0062 };
    uint32_t const ces[9] = { 0x2D92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_312)
{
    // 11023 0021;	
    // (𑀣) BRAHMI LETTER THA	[2D93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11023, 0x0021 };
    uint32_t const ces[9] = { 0x2D93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_313)
{
    // 11023 003F;	
    // (𑀣) BRAHMI LETTER THA	[2D93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11023, 0x003F };
    uint32_t const ces[9] = { 0x2D93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_314)
{
    // 11023 0061;	
    // (𑀣) BRAHMI LETTER THA	[2D93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11023, 0x0061 };
    uint32_t const ces[9] = { 0x2D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_315)
{
    // 11023 0041;	
    // (𑀣) BRAHMI LETTER THA	[2D93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11023, 0x0041 };
    uint32_t const ces[9] = { 0x2D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_316)
{
    // 11023 0062;	
    // (𑀣) BRAHMI LETTER THA	[2D93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11023, 0x0062 };
    uint32_t const ces[9] = { 0x2D93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_317)
{
    // 11024 0021;	
    // (𑀤) BRAHMI LETTER DA	[2D94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11024, 0x0021 };
    uint32_t const ces[9] = { 0x2D94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_318)
{
    // 11024 003F;	
    // (𑀤) BRAHMI LETTER DA	[2D94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11024, 0x003F };
    uint32_t const ces[9] = { 0x2D94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_319)
{
    // 11024 0061;	
    // (𑀤) BRAHMI LETTER DA	[2D94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11024, 0x0061 };
    uint32_t const ces[9] = { 0x2D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_320)
{
    // 11024 0041;	
    // (𑀤) BRAHMI LETTER DA	[2D94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11024, 0x0041 };
    uint32_t const ces[9] = { 0x2D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_321)
{
    // 11024 0062;	
    // (𑀤) BRAHMI LETTER DA	[2D94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11024, 0x0062 };
    uint32_t const ces[9] = { 0x2D94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_322)
{
    // 11025 0021;	
    // (𑀥) BRAHMI LETTER DHA	[2D95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11025, 0x0021 };
    uint32_t const ces[9] = { 0x2D95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_323)
{
    // 11025 003F;	
    // (𑀥) BRAHMI LETTER DHA	[2D95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11025, 0x003F };
    uint32_t const ces[9] = { 0x2D95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_324)
{
    // 11025 0061;	
    // (𑀥) BRAHMI LETTER DHA	[2D95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11025, 0x0061 };
    uint32_t const ces[9] = { 0x2D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_325)
{
    // 11025 0041;	
    // (𑀥) BRAHMI LETTER DHA	[2D95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11025, 0x0041 };
    uint32_t const ces[9] = { 0x2D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_326)
{
    // 11025 0062;	
    // (𑀥) BRAHMI LETTER DHA	[2D95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11025, 0x0062 };
    uint32_t const ces[9] = { 0x2D95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_327)
{
    // 11026 0021;	
    // (𑀦) BRAHMI LETTER NA	[2D96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11026, 0x0021 };
    uint32_t const ces[9] = { 0x2D96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_328)
{
    // 11026 003F;	
    // (𑀦) BRAHMI LETTER NA	[2D96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11026, 0x003F };
    uint32_t const ces[9] = { 0x2D96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_329)
{
    // 11026 0061;	
    // (𑀦) BRAHMI LETTER NA	[2D96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11026, 0x0061 };
    uint32_t const ces[9] = { 0x2D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_330)
{
    // 11026 0041;	
    // (𑀦) BRAHMI LETTER NA	[2D96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11026, 0x0041 };
    uint32_t const ces[9] = { 0x2D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_331)
{
    // 11026 0062;	
    // (𑀦) BRAHMI LETTER NA	[2D96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11026, 0x0062 };
    uint32_t const ces[9] = { 0x2D96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_332)
{
    // 11027 0021;	
    // (𑀧) BRAHMI LETTER PA	[2D97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11027, 0x0021 };
    uint32_t const ces[9] = { 0x2D97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_333)
{
    // 11027 003F;	
    // (𑀧) BRAHMI LETTER PA	[2D97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11027, 0x003F };
    uint32_t const ces[9] = { 0x2D97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_334)
{
    // 11027 0061;	
    // (𑀧) BRAHMI LETTER PA	[2D97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11027, 0x0061 };
    uint32_t const ces[9] = { 0x2D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_335)
{
    // 11027 0041;	
    // (𑀧) BRAHMI LETTER PA	[2D97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11027, 0x0041 };
    uint32_t const ces[9] = { 0x2D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_336)
{
    // 11027 0062;	
    // (𑀧) BRAHMI LETTER PA	[2D97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11027, 0x0062 };
    uint32_t const ces[9] = { 0x2D97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_337)
{
    // 11028 0021;	
    // (𑀨) BRAHMI LETTER PHA	[2D98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11028, 0x0021 };
    uint32_t const ces[9] = { 0x2D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_338)
{
    // 11028 003F;	
    // (𑀨) BRAHMI LETTER PHA	[2D98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11028, 0x003F };
    uint32_t const ces[9] = { 0x2D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_339)
{
    // 11028 0061;	
    // (𑀨) BRAHMI LETTER PHA	[2D98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11028, 0x0061 };
    uint32_t const ces[9] = { 0x2D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_340)
{
    // 11028 0041;	
    // (𑀨) BRAHMI LETTER PHA	[2D98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11028, 0x0041 };
    uint32_t const ces[9] = { 0x2D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_341)
{
    // 11028 0062;	
    // (𑀨) BRAHMI LETTER PHA	[2D98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11028, 0x0062 };
    uint32_t const ces[9] = { 0x2D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_342)
{
    // 11029 0021;	
    // (𑀩) BRAHMI LETTER BA	[2D99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11029, 0x0021 };
    uint32_t const ces[9] = { 0x2D99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_343)
{
    // 11029 003F;	
    // (𑀩) BRAHMI LETTER BA	[2D99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11029, 0x003F };
    uint32_t const ces[9] = { 0x2D99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_344)
{
    // 11029 0061;	
    // (𑀩) BRAHMI LETTER BA	[2D99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11029, 0x0061 };
    uint32_t const ces[9] = { 0x2D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_345)
{
    // 11029 0041;	
    // (𑀩) BRAHMI LETTER BA	[2D99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11029, 0x0041 };
    uint32_t const ces[9] = { 0x2D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_346)
{
    // 11029 0062;	
    // (𑀩) BRAHMI LETTER BA	[2D99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11029, 0x0062 };
    uint32_t const ces[9] = { 0x2D99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_347)
{
    // 1102A 0021;	
    // (𑀪) BRAHMI LETTER BHA	[2D9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102A, 0x0021 };
    uint32_t const ces[9] = { 0x2D9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_348)
{
    // 1102A 003F;	
    // (𑀪) BRAHMI LETTER BHA	[2D9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102A, 0x003F };
    uint32_t const ces[9] = { 0x2D9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_349)
{
    // 1102A 0061;	
    // (𑀪) BRAHMI LETTER BHA	[2D9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102A, 0x0061 };
    uint32_t const ces[9] = { 0x2D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_350)
{
    // 1102A 0041;	
    // (𑀪) BRAHMI LETTER BHA	[2D9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102A, 0x0041 };
    uint32_t const ces[9] = { 0x2D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_351)
{
    // 1102A 0062;	
    // (𑀪) BRAHMI LETTER BHA	[2D9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102A, 0x0062 };
    uint32_t const ces[9] = { 0x2D9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_352)
{
    // 1102B 0021;	
    // (𑀫) BRAHMI LETTER MA	[2D9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102B, 0x0021 };
    uint32_t const ces[9] = { 0x2D9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_353)
{
    // 1102B 003F;	
    // (𑀫) BRAHMI LETTER MA	[2D9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102B, 0x003F };
    uint32_t const ces[9] = { 0x2D9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_354)
{
    // 1102B 0061;	
    // (𑀫) BRAHMI LETTER MA	[2D9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102B, 0x0061 };
    uint32_t const ces[9] = { 0x2D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_355)
{
    // 1102B 0041;	
    // (𑀫) BRAHMI LETTER MA	[2D9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102B, 0x0041 };
    uint32_t const ces[9] = { 0x2D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_356)
{
    // 1102B 0062;	
    // (𑀫) BRAHMI LETTER MA	[2D9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102B, 0x0062 };
    uint32_t const ces[9] = { 0x2D9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_357)
{
    // 1102C 0021;	
    // (𑀬) BRAHMI LETTER YA	[2D9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102C, 0x0021 };
    uint32_t const ces[9] = { 0x2D9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_358)
{
    // 1102C 003F;	
    // (𑀬) BRAHMI LETTER YA	[2D9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102C, 0x003F };
    uint32_t const ces[9] = { 0x2D9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_359)
{
    // 1102C 0061;	
    // (𑀬) BRAHMI LETTER YA	[2D9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102C, 0x0061 };
    uint32_t const ces[9] = { 0x2D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_360)
{
    // 1102C 0041;	
    // (𑀬) BRAHMI LETTER YA	[2D9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102C, 0x0041 };
    uint32_t const ces[9] = { 0x2D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_361)
{
    // 1102C 0062;	
    // (𑀬) BRAHMI LETTER YA	[2D9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102C, 0x0062 };
    uint32_t const ces[9] = { 0x2D9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_362)
{
    // 1102D 0021;	
    // (𑀭) BRAHMI LETTER RA	[2D9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102D, 0x0021 };
    uint32_t const ces[9] = { 0x2D9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_363)
{
    // 1102D 003F;	
    // (𑀭) BRAHMI LETTER RA	[2D9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102D, 0x003F };
    uint32_t const ces[9] = { 0x2D9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_364)
{
    // 1102D 0061;	
    // (𑀭) BRAHMI LETTER RA	[2D9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102D, 0x0061 };
    uint32_t const ces[9] = { 0x2D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_365)
{
    // 1102D 0041;	
    // (𑀭) BRAHMI LETTER RA	[2D9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102D, 0x0041 };
    uint32_t const ces[9] = { 0x2D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_366)
{
    // 1102D 0062;	
    // (𑀭) BRAHMI LETTER RA	[2D9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102D, 0x0062 };
    uint32_t const ces[9] = { 0x2D9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_367)
{
    // 1102E 0021;	
    // (𑀮) BRAHMI LETTER LA	[2D9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102E, 0x0021 };
    uint32_t const ces[9] = { 0x2D9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_368)
{
    // 1102E 003F;	
    // (𑀮) BRAHMI LETTER LA	[2D9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102E, 0x003F };
    uint32_t const ces[9] = { 0x2D9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_369)
{
    // 1102E 0061;	
    // (𑀮) BRAHMI LETTER LA	[2D9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102E, 0x0061 };
    uint32_t const ces[9] = { 0x2D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_370)
{
    // 1102E 0041;	
    // (𑀮) BRAHMI LETTER LA	[2D9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102E, 0x0041 };
    uint32_t const ces[9] = { 0x2D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_371)
{
    // 1102E 0062;	
    // (𑀮) BRAHMI LETTER LA	[2D9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102E, 0x0062 };
    uint32_t const ces[9] = { 0x2D9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_372)
{
    // 1102F 0021;	
    // (𑀯) BRAHMI LETTER VA	[2D9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102F, 0x0021 };
    uint32_t const ces[9] = { 0x2D9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_373)
{
    // 1102F 003F;	
    // (𑀯) BRAHMI LETTER VA	[2D9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102F, 0x003F };
    uint32_t const ces[9] = { 0x2D9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_374)
{
    // 1102F 0061;	
    // (𑀯) BRAHMI LETTER VA	[2D9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102F, 0x0061 };
    uint32_t const ces[9] = { 0x2D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_375)
{
    // 1102F 0041;	
    // (𑀯) BRAHMI LETTER VA	[2D9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1102F, 0x0041 };
    uint32_t const ces[9] = { 0x2D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_376)
{
    // 1102F 0062;	
    // (𑀯) BRAHMI LETTER VA	[2D9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1102F, 0x0062 };
    uint32_t const ces[9] = { 0x2D9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_377)
{
    // 11030 0021;	
    // (𑀰) BRAHMI LETTER SHA	[2DA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11030, 0x0021 };
    uint32_t const ces[9] = { 0x2DA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_378)
{
    // 11030 003F;	
    // (𑀰) BRAHMI LETTER SHA	[2DA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11030, 0x003F };
    uint32_t const ces[9] = { 0x2DA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_379)
{
    // 11030 0061;	
    // (𑀰) BRAHMI LETTER SHA	[2DA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11030, 0x0061 };
    uint32_t const ces[9] = { 0x2DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_380)
{
    // 11030 0041;	
    // (𑀰) BRAHMI LETTER SHA	[2DA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11030, 0x0041 };
    uint32_t const ces[9] = { 0x2DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_381)
{
    // 11030 0062;	
    // (𑀰) BRAHMI LETTER SHA	[2DA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11030, 0x0062 };
    uint32_t const ces[9] = { 0x2DA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_382)
{
    // 11031 0021;	
    // (𑀱) BRAHMI LETTER SSA	[2DA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11031, 0x0021 };
    uint32_t const ces[9] = { 0x2DA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_383)
{
    // 11031 003F;	
    // (𑀱) BRAHMI LETTER SSA	[2DA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11031, 0x003F };
    uint32_t const ces[9] = { 0x2DA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_384)
{
    // 11031 0061;	
    // (𑀱) BRAHMI LETTER SSA	[2DA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11031, 0x0061 };
    uint32_t const ces[9] = { 0x2DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_385)
{
    // 11031 0041;	
    // (𑀱) BRAHMI LETTER SSA	[2DA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11031, 0x0041 };
    uint32_t const ces[9] = { 0x2DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_386)
{
    // 11031 0062;	
    // (𑀱) BRAHMI LETTER SSA	[2DA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11031, 0x0062 };
    uint32_t const ces[9] = { 0x2DA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_387)
{
    // 11032 0021;	
    // (𑀲) BRAHMI LETTER SA	[2DA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11032, 0x0021 };
    uint32_t const ces[9] = { 0x2DA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_388)
{
    // 11032 003F;	
    // (𑀲) BRAHMI LETTER SA	[2DA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11032, 0x003F };
    uint32_t const ces[9] = { 0x2DA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_389)
{
    // 11032 0061;	
    // (𑀲) BRAHMI LETTER SA	[2DA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11032, 0x0061 };
    uint32_t const ces[9] = { 0x2DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_390)
{
    // 11032 0041;	
    // (𑀲) BRAHMI LETTER SA	[2DA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11032, 0x0041 };
    uint32_t const ces[9] = { 0x2DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_391)
{
    // 11032 0062;	
    // (𑀲) BRAHMI LETTER SA	[2DA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11032, 0x0062 };
    uint32_t const ces[9] = { 0x2DA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_392)
{
    // 11033 0021;	
    // (𑀳) BRAHMI LETTER HA	[2DA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11033, 0x0021 };
    uint32_t const ces[9] = { 0x2DA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_393)
{
    // 11033 003F;	
    // (𑀳) BRAHMI LETTER HA	[2DA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11033, 0x003F };
    uint32_t const ces[9] = { 0x2DA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_394)
{
    // 11033 0061;	
    // (𑀳) BRAHMI LETTER HA	[2DA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11033, 0x0061 };
    uint32_t const ces[9] = { 0x2DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_395)
{
    // 11033 0041;	
    // (𑀳) BRAHMI LETTER HA	[2DA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11033, 0x0041 };
    uint32_t const ces[9] = { 0x2DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_396)
{
    // 11033 0062;	
    // (𑀳) BRAHMI LETTER HA	[2DA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11033, 0x0062 };
    uint32_t const ces[9] = { 0x2DA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_397)
{
    // 11003 0021;	
    // (𑀃) BRAHMI SIGN JIHVAMULIYA	[2DA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11003, 0x0021 };
    uint32_t const ces[9] = { 0x2DA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_398)
{
    // 11003 003F;	
    // (𑀃) BRAHMI SIGN JIHVAMULIYA	[2DA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11003, 0x003F };
    uint32_t const ces[9] = { 0x2DA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_399)
{
    // 11003 0061;	
    // (𑀃) BRAHMI SIGN JIHVAMULIYA	[2DA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11003, 0x0061 };
    uint32_t const ces[9] = { 0x2DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_400)
{
    // 11003 0041;	
    // (𑀃) BRAHMI SIGN JIHVAMULIYA	[2DA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11003, 0x0041 };
    uint32_t const ces[9] = { 0x2DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_401)
{
    // 11003 0062;	
    // (𑀃) BRAHMI SIGN JIHVAMULIYA	[2DA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11003, 0x0062 };
    uint32_t const ces[9] = { 0x2DA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_402)
{
    // 11004 0021;	
    // (𑀄) BRAHMI SIGN UPADHMANIYA	[2DA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11004, 0x0021 };
    uint32_t const ces[9] = { 0x2DA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_403)
{
    // 11004 003F;	
    // (𑀄) BRAHMI SIGN UPADHMANIYA	[2DA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11004, 0x003F };
    uint32_t const ces[9] = { 0x2DA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_404)
{
    // 11004 0061;	
    // (𑀄) BRAHMI SIGN UPADHMANIYA	[2DA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11004, 0x0061 };
    uint32_t const ces[9] = { 0x2DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_405)
{
    // 11004 0041;	
    // (𑀄) BRAHMI SIGN UPADHMANIYA	[2DA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11004, 0x0041 };
    uint32_t const ces[9] = { 0x2DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_406)
{
    // 11004 0062;	
    // (𑀄) BRAHMI SIGN UPADHMANIYA	[2DA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11004, 0x0062 };
    uint32_t const ces[9] = { 0x2DA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_407)
{
    // 11034 0021;	
    // (𑀴) BRAHMI LETTER LLA	[2DA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11034, 0x0021 };
    uint32_t const ces[9] = { 0x2DA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_408)
{
    // 11034 003F;	
    // (𑀴) BRAHMI LETTER LLA	[2DA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11034, 0x003F };
    uint32_t const ces[9] = { 0x2DA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_409)
{
    // 11034 0061;	
    // (𑀴) BRAHMI LETTER LLA	[2DA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11034, 0x0061 };
    uint32_t const ces[9] = { 0x2DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_410)
{
    // 11034 0041;	
    // (𑀴) BRAHMI LETTER LLA	[2DA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11034, 0x0041 };
    uint32_t const ces[9] = { 0x2DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_411)
{
    // 11034 0062;	
    // (𑀴) BRAHMI LETTER LLA	[2DA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11034, 0x0062 };
    uint32_t const ces[9] = { 0x2DA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_412)
{
    // 11035 0021;	
    // (𑀵) BRAHMI LETTER OLD TAMIL LLLA	[2DA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11035, 0x0021 };
    uint32_t const ces[9] = { 0x2DA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_413)
{
    // 11035 003F;	
    // (𑀵) BRAHMI LETTER OLD TAMIL LLLA	[2DA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11035, 0x003F };
    uint32_t const ces[9] = { 0x2DA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_414)
{
    // 11035 0061;	
    // (𑀵) BRAHMI LETTER OLD TAMIL LLLA	[2DA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11035, 0x0061 };
    uint32_t const ces[9] = { 0x2DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_415)
{
    // 11035 0041;	
    // (𑀵) BRAHMI LETTER OLD TAMIL LLLA	[2DA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11035, 0x0041 };
    uint32_t const ces[9] = { 0x2DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_416)
{
    // 11035 0062;	
    // (𑀵) BRAHMI LETTER OLD TAMIL LLLA	[2DA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11035, 0x0062 };
    uint32_t const ces[9] = { 0x2DA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_417)
{
    // 11036 0021;	
    // (𑀶) BRAHMI LETTER OLD TAMIL RRA	[2DA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11036, 0x0021 };
    uint32_t const ces[9] = { 0x2DA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_418)
{
    // 11036 003F;	
    // (𑀶) BRAHMI LETTER OLD TAMIL RRA	[2DA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11036, 0x003F };
    uint32_t const ces[9] = { 0x2DA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_419)
{
    // 11036 0061;	
    // (𑀶) BRAHMI LETTER OLD TAMIL RRA	[2DA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11036, 0x0061 };
    uint32_t const ces[9] = { 0x2DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_420)
{
    // 11036 0041;	
    // (𑀶) BRAHMI LETTER OLD TAMIL RRA	[2DA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11036, 0x0041 };
    uint32_t const ces[9] = { 0x2DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_421)
{
    // 11036 0062;	
    // (𑀶) BRAHMI LETTER OLD TAMIL RRA	[2DA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11036, 0x0062 };
    uint32_t const ces[9] = { 0x2DA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_422)
{
    // 11037 0021;	
    // (𑀷) BRAHMI LETTER OLD TAMIL NNNA	[2DA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11037, 0x0021 };
    uint32_t const ces[9] = { 0x2DA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_423)
{
    // 11037 003F;	
    // (𑀷) BRAHMI LETTER OLD TAMIL NNNA	[2DA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11037, 0x003F };
    uint32_t const ces[9] = { 0x2DA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_424)
{
    // 11037 0061;	
    // (𑀷) BRAHMI LETTER OLD TAMIL NNNA	[2DA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11037, 0x0061 };
    uint32_t const ces[9] = { 0x2DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_425)
{
    // 11037 0041;	
    // (𑀷) BRAHMI LETTER OLD TAMIL NNNA	[2DA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11037, 0x0041 };
    uint32_t const ces[9] = { 0x2DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_426)
{
    // 11037 0062;	
    // (𑀷) BRAHMI LETTER OLD TAMIL NNNA	[2DA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11037, 0x0062 };
    uint32_t const ces[9] = { 0x2DA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_427)
{
    // 11038 0021;	
    // (𑀸) BRAHMI VOWEL SIGN AA	[2DAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11038, 0x0021 };
    uint32_t const ces[9] = { 0x2DAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_428)
{
    // 11038 003F;	
    // (𑀸) BRAHMI VOWEL SIGN AA	[2DAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11038, 0x003F };
    uint32_t const ces[9] = { 0x2DAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_429)
{
    // 11038 0061;	
    // (𑀸) BRAHMI VOWEL SIGN AA	[2DAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11038, 0x0061 };
    uint32_t const ces[9] = { 0x2DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_430)
{
    // 11038 0041;	
    // (𑀸) BRAHMI VOWEL SIGN AA	[2DAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11038, 0x0041 };
    uint32_t const ces[9] = { 0x2DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_431)
{
    // 11038 0062;	
    // (𑀸) BRAHMI VOWEL SIGN AA	[2DAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11038, 0x0062 };
    uint32_t const ces[9] = { 0x2DAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_432)
{
    // 11039 0021;	
    // (𑀹) BRAHMI VOWEL SIGN BHATTIPROLU AA	[2DAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11039, 0x0021 };
    uint32_t const ces[9] = { 0x2DAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_433)
{
    // 11039 003F;	
    // (𑀹) BRAHMI VOWEL SIGN BHATTIPROLU AA	[2DAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11039, 0x003F };
    uint32_t const ces[9] = { 0x2DAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_434)
{
    // 11039 0061;	
    // (𑀹) BRAHMI VOWEL SIGN BHATTIPROLU AA	[2DAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11039, 0x0061 };
    uint32_t const ces[9] = { 0x2DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_435)
{
    // 11039 0041;	
    // (𑀹) BRAHMI VOWEL SIGN BHATTIPROLU AA	[2DAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11039, 0x0041 };
    uint32_t const ces[9] = { 0x2DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_436)
{
    // 11039 0062;	
    // (𑀹) BRAHMI VOWEL SIGN BHATTIPROLU AA	[2DAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11039, 0x0062 };
    uint32_t const ces[9] = { 0x2DAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_437)
{
    // 1103A 0021;	
    // (𑀺) BRAHMI VOWEL SIGN I	[2DAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103A, 0x0021 };
    uint32_t const ces[9] = { 0x2DAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_438)
{
    // 1103A 003F;	
    // (𑀺) BRAHMI VOWEL SIGN I	[2DAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103A, 0x003F };
    uint32_t const ces[9] = { 0x2DAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_439)
{
    // 1103A 0061;	
    // (𑀺) BRAHMI VOWEL SIGN I	[2DAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103A, 0x0061 };
    uint32_t const ces[9] = { 0x2DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_440)
{
    // 1103A 0041;	
    // (𑀺) BRAHMI VOWEL SIGN I	[2DAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103A, 0x0041 };
    uint32_t const ces[9] = { 0x2DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_441)
{
    // 1103A 0062;	
    // (𑀺) BRAHMI VOWEL SIGN I	[2DAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103A, 0x0062 };
    uint32_t const ces[9] = { 0x2DAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_442)
{
    // 1103B 0021;	
    // (𑀻) BRAHMI VOWEL SIGN II	[2DAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103B, 0x0021 };
    uint32_t const ces[9] = { 0x2DAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_443)
{
    // 1103B 003F;	
    // (𑀻) BRAHMI VOWEL SIGN II	[2DAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103B, 0x003F };
    uint32_t const ces[9] = { 0x2DAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_444)
{
    // 1103B 0061;	
    // (𑀻) BRAHMI VOWEL SIGN II	[2DAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103B, 0x0061 };
    uint32_t const ces[9] = { 0x2DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_445)
{
    // 1103B 0041;	
    // (𑀻) BRAHMI VOWEL SIGN II	[2DAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103B, 0x0041 };
    uint32_t const ces[9] = { 0x2DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_446)
{
    // 1103B 0062;	
    // (𑀻) BRAHMI VOWEL SIGN II	[2DAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103B, 0x0062 };
    uint32_t const ces[9] = { 0x2DAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_447)
{
    // 1103C 0021;	
    // (𑀼) BRAHMI VOWEL SIGN U	[2DAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103C, 0x0021 };
    uint32_t const ces[9] = { 0x2DAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_448)
{
    // 1103C 003F;	
    // (𑀼) BRAHMI VOWEL SIGN U	[2DAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103C, 0x003F };
    uint32_t const ces[9] = { 0x2DAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_449)
{
    // 1103C 0061;	
    // (𑀼) BRAHMI VOWEL SIGN U	[2DAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103C, 0x0061 };
    uint32_t const ces[9] = { 0x2DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_450)
{
    // 1103C 0041;	
    // (𑀼) BRAHMI VOWEL SIGN U	[2DAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103C, 0x0041 };
    uint32_t const ces[9] = { 0x2DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_451)
{
    // 1103C 0062;	
    // (𑀼) BRAHMI VOWEL SIGN U	[2DAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103C, 0x0062 };
    uint32_t const ces[9] = { 0x2DAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_452)
{
    // 1103D 0021;	
    // (𑀽) BRAHMI VOWEL SIGN UU	[2DAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103D, 0x0021 };
    uint32_t const ces[9] = { 0x2DAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_453)
{
    // 1103D 003F;	
    // (𑀽) BRAHMI VOWEL SIGN UU	[2DAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103D, 0x003F };
    uint32_t const ces[9] = { 0x2DAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_454)
{
    // 1103D 0061;	
    // (𑀽) BRAHMI VOWEL SIGN UU	[2DAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103D, 0x0061 };
    uint32_t const ces[9] = { 0x2DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_455)
{
    // 1103D 0041;	
    // (𑀽) BRAHMI VOWEL SIGN UU	[2DAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103D, 0x0041 };
    uint32_t const ces[9] = { 0x2DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_456)
{
    // 1103D 0062;	
    // (𑀽) BRAHMI VOWEL SIGN UU	[2DAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103D, 0x0062 };
    uint32_t const ces[9] = { 0x2DAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_457)
{
    // 1103E 0021;	
    // (𑀾) BRAHMI VOWEL SIGN VOCALIC R	[2DB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103E, 0x0021 };
    uint32_t const ces[9] = { 0x2DB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_458)
{
    // 1103E 003F;	
    // (𑀾) BRAHMI VOWEL SIGN VOCALIC R	[2DB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103E, 0x003F };
    uint32_t const ces[9] = { 0x2DB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_459)
{
    // 1103E 0061;	
    // (𑀾) BRAHMI VOWEL SIGN VOCALIC R	[2DB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103E, 0x0061 };
    uint32_t const ces[9] = { 0x2DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_460)
{
    // 1103E 0041;	
    // (𑀾) BRAHMI VOWEL SIGN VOCALIC R	[2DB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103E, 0x0041 };
    uint32_t const ces[9] = { 0x2DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_461)
{
    // 1103E 0062;	
    // (𑀾) BRAHMI VOWEL SIGN VOCALIC R	[2DB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103E, 0x0062 };
    uint32_t const ces[9] = { 0x2DB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_462)
{
    // 1103F 0021;	
    // (𑀿) BRAHMI VOWEL SIGN VOCALIC RR	[2DB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103F, 0x0021 };
    uint32_t const ces[9] = { 0x2DB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_463)
{
    // 1103F 003F;	
    // (𑀿) BRAHMI VOWEL SIGN VOCALIC RR	[2DB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103F, 0x003F };
    uint32_t const ces[9] = { 0x2DB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_464)
{
    // 1103F 0061;	
    // (𑀿) BRAHMI VOWEL SIGN VOCALIC RR	[2DB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103F, 0x0061 };
    uint32_t const ces[9] = { 0x2DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_465)
{
    // 1103F 0041;	
    // (𑀿) BRAHMI VOWEL SIGN VOCALIC RR	[2DB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1103F, 0x0041 };
    uint32_t const ces[9] = { 0x2DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_466)
{
    // 1103F 0062;	
    // (𑀿) BRAHMI VOWEL SIGN VOCALIC RR	[2DB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1103F, 0x0062 };
    uint32_t const ces[9] = { 0x2DB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_467)
{
    // 11040 0021;	
    // (𑁀) BRAHMI VOWEL SIGN VOCALIC L	[2DB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11040, 0x0021 };
    uint32_t const ces[9] = { 0x2DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_468)
{
    // 11040 003F;	
    // (𑁀) BRAHMI VOWEL SIGN VOCALIC L	[2DB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11040, 0x003F };
    uint32_t const ces[9] = { 0x2DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_469)
{
    // 11040 0061;	
    // (𑁀) BRAHMI VOWEL SIGN VOCALIC L	[2DB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11040, 0x0061 };
    uint32_t const ces[9] = { 0x2DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_470)
{
    // 11040 0041;	
    // (𑁀) BRAHMI VOWEL SIGN VOCALIC L	[2DB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11040, 0x0041 };
    uint32_t const ces[9] = { 0x2DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_471)
{
    // 11040 0062;	
    // (𑁀) BRAHMI VOWEL SIGN VOCALIC L	[2DB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11040, 0x0062 };
    uint32_t const ces[9] = { 0x2DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_472)
{
    // 11041 0021;	
    // (𑁁) BRAHMI VOWEL SIGN VOCALIC LL	[2DB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11041, 0x0021 };
    uint32_t const ces[9] = { 0x2DB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_473)
{
    // 11041 003F;	
    // (𑁁) BRAHMI VOWEL SIGN VOCALIC LL	[2DB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11041, 0x003F };
    uint32_t const ces[9] = { 0x2DB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_474)
{
    // 11041 0061;	
    // (𑁁) BRAHMI VOWEL SIGN VOCALIC LL	[2DB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11041, 0x0061 };
    uint32_t const ces[9] = { 0x2DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_475)
{
    // 11041 0041;	
    // (𑁁) BRAHMI VOWEL SIGN VOCALIC LL	[2DB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11041, 0x0041 };
    uint32_t const ces[9] = { 0x2DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_476)
{
    // 11041 0062;	
    // (𑁁) BRAHMI VOWEL SIGN VOCALIC LL	[2DB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11041, 0x0062 };
    uint32_t const ces[9] = { 0x2DB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_477)
{
    // 11042 0021;	
    // (𑁂) BRAHMI VOWEL SIGN E	[2DB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11042, 0x0021 };
    uint32_t const ces[9] = { 0x2DB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_478)
{
    // 11042 003F;	
    // (𑁂) BRAHMI VOWEL SIGN E	[2DB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11042, 0x003F };
    uint32_t const ces[9] = { 0x2DB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_479)
{
    // 11042 0061;	
    // (𑁂) BRAHMI VOWEL SIGN E	[2DB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11042, 0x0061 };
    uint32_t const ces[9] = { 0x2DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_480)
{
    // 11042 0041;	
    // (𑁂) BRAHMI VOWEL SIGN E	[2DB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11042, 0x0041 };
    uint32_t const ces[9] = { 0x2DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_481)
{
    // 11042 0062;	
    // (𑁂) BRAHMI VOWEL SIGN E	[2DB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11042, 0x0062 };
    uint32_t const ces[9] = { 0x2DB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_482)
{
    // 11043 0021;	
    // (𑁃) BRAHMI VOWEL SIGN AI	[2DB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11043, 0x0021 };
    uint32_t const ces[9] = { 0x2DB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_483)
{
    // 11043 003F;	
    // (𑁃) BRAHMI VOWEL SIGN AI	[2DB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11043, 0x003F };
    uint32_t const ces[9] = { 0x2DB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_484)
{
    // 11043 0061;	
    // (𑁃) BRAHMI VOWEL SIGN AI	[2DB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11043, 0x0061 };
    uint32_t const ces[9] = { 0x2DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_485)
{
    // 11043 0041;	
    // (𑁃) BRAHMI VOWEL SIGN AI	[2DB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11043, 0x0041 };
    uint32_t const ces[9] = { 0x2DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_486)
{
    // 11043 0062;	
    // (𑁃) BRAHMI VOWEL SIGN AI	[2DB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11043, 0x0062 };
    uint32_t const ces[9] = { 0x2DB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_487)
{
    // 11044 0021;	
    // (𑁄) BRAHMI VOWEL SIGN O	[2DB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11044, 0x0021 };
    uint32_t const ces[9] = { 0x2DB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_488)
{
    // 11044 003F;	
    // (𑁄) BRAHMI VOWEL SIGN O	[2DB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11044, 0x003F };
    uint32_t const ces[9] = { 0x2DB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_489)
{
    // 11044 0061;	
    // (𑁄) BRAHMI VOWEL SIGN O	[2DB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11044, 0x0061 };
    uint32_t const ces[9] = { 0x2DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_490)
{
    // 11044 0041;	
    // (𑁄) BRAHMI VOWEL SIGN O	[2DB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11044, 0x0041 };
    uint32_t const ces[9] = { 0x2DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_491)
{
    // 11044 0062;	
    // (𑁄) BRAHMI VOWEL SIGN O	[2DB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11044, 0x0062 };
    uint32_t const ces[9] = { 0x2DB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_492)
{
    // 11045 0021;	
    // (𑁅) BRAHMI VOWEL SIGN AU	[2DB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11045, 0x0021 };
    uint32_t const ces[9] = { 0x2DB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_493)
{
    // 11045 003F;	
    // (𑁅) BRAHMI VOWEL SIGN AU	[2DB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11045, 0x003F };
    uint32_t const ces[9] = { 0x2DB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_494)
{
    // 11045 0061;	
    // (𑁅) BRAHMI VOWEL SIGN AU	[2DB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11045, 0x0061 };
    uint32_t const ces[9] = { 0x2DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_495)
{
    // 11045 0041;	
    // (𑁅) BRAHMI VOWEL SIGN AU	[2DB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11045, 0x0041 };
    uint32_t const ces[9] = { 0x2DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_496)
{
    // 11045 0062;	
    // (𑁅) BRAHMI VOWEL SIGN AU	[2DB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11045, 0x0062 };
    uint32_t const ces[9] = { 0x2DB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_497)
{
    // 0334 11046;	
    // (𑁆) BRAHMI VIRAMA	[2DB8 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11046 };
    uint32_t const ces[8] = { 0x2DB8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_498)
{
    // 11046 0334;	
    // (𑁆) BRAHMI VIRAMA	[2DB8 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11046, 0x0334 };
    uint32_t const ces[8] = { 0x2DB8, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_183_499)
{
    // 11046 0021;	
    // (𑁆) BRAHMI VIRAMA	[2DB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11046, 0x0021 };
    uint32_t const ces[9] = { 0x2DB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

