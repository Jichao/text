// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_330_000)
{
    // 3542 003F;	
    // (㕂) CJK UNIFIED IDEOGRAPH-3542	[FB80 B542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3542, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_001)
{
    // 3542 0061;	
    // (㕂) CJK UNIFIED IDEOGRAPH-3542	[FB80 B542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3542, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_002)
{
    // 3542 0041;	
    // (㕂) CJK UNIFIED IDEOGRAPH-3542	[FB80 B542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3542, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_003)
{
    // 3542 0062;	
    // (㕂) CJK UNIFIED IDEOGRAPH-3542	[FB80 B542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3542, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_004)
{
    // 3543 0021;	
    // (㕃) CJK UNIFIED IDEOGRAPH-3543	[FB80 B543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3543, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_005)
{
    // 3543 003F;	
    // (㕃) CJK UNIFIED IDEOGRAPH-3543	[FB80 B543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3543, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_006)
{
    // 3543 0061;	
    // (㕃) CJK UNIFIED IDEOGRAPH-3543	[FB80 B543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3543, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_007)
{
    // 3543 0041;	
    // (㕃) CJK UNIFIED IDEOGRAPH-3543	[FB80 B543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3543, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_008)
{
    // 3543 0062;	
    // (㕃) CJK UNIFIED IDEOGRAPH-3543	[FB80 B543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3543, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_009)
{
    // 3544 0021;	
    // (㕄) CJK UNIFIED IDEOGRAPH-3544	[FB80 B544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3544, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_010)
{
    // 3544 003F;	
    // (㕄) CJK UNIFIED IDEOGRAPH-3544	[FB80 B544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3544, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_011)
{
    // 3544 0061;	
    // (㕄) CJK UNIFIED IDEOGRAPH-3544	[FB80 B544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3544, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_012)
{
    // 3544 0041;	
    // (㕄) CJK UNIFIED IDEOGRAPH-3544	[FB80 B544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3544, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_013)
{
    // 3544 0062;	
    // (㕄) CJK UNIFIED IDEOGRAPH-3544	[FB80 B544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3544, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_014)
{
    // 3545 0021;	
    // (㕅) CJK UNIFIED IDEOGRAPH-3545	[FB80 B545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3545, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_015)
{
    // 3545 003F;	
    // (㕅) CJK UNIFIED IDEOGRAPH-3545	[FB80 B545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3545, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_016)
{
    // 3545 0061;	
    // (㕅) CJK UNIFIED IDEOGRAPH-3545	[FB80 B545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3545, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_017)
{
    // 3545 0041;	
    // (㕅) CJK UNIFIED IDEOGRAPH-3545	[FB80 B545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3545, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_018)
{
    // 3545 0062;	
    // (㕅) CJK UNIFIED IDEOGRAPH-3545	[FB80 B545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3545, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_019)
{
    // 3546 0021;	
    // (㕆) CJK UNIFIED IDEOGRAPH-3546	[FB80 B546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3546, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_020)
{
    // 3546 003F;	
    // (㕆) CJK UNIFIED IDEOGRAPH-3546	[FB80 B546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3546, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_021)
{
    // 3546 0061;	
    // (㕆) CJK UNIFIED IDEOGRAPH-3546	[FB80 B546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3546, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_022)
{
    // 3546 0041;	
    // (㕆) CJK UNIFIED IDEOGRAPH-3546	[FB80 B546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3546, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_023)
{
    // 3546 0062;	
    // (㕆) CJK UNIFIED IDEOGRAPH-3546	[FB80 B546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3546, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_024)
{
    // 3547 0021;	
    // (㕇) CJK UNIFIED IDEOGRAPH-3547	[FB80 B547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3547, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_025)
{
    // 3547 003F;	
    // (㕇) CJK UNIFIED IDEOGRAPH-3547	[FB80 B547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3547, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_026)
{
    // 3547 0061;	
    // (㕇) CJK UNIFIED IDEOGRAPH-3547	[FB80 B547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3547, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_027)
{
    // 3547 0041;	
    // (㕇) CJK UNIFIED IDEOGRAPH-3547	[FB80 B547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3547, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_028)
{
    // 3547 0062;	
    // (㕇) CJK UNIFIED IDEOGRAPH-3547	[FB80 B547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3547, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_029)
{
    // 3548 0021;	
    // (㕈) CJK UNIFIED IDEOGRAPH-3548	[FB80 B548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3548, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_030)
{
    // 3548 003F;	
    // (㕈) CJK UNIFIED IDEOGRAPH-3548	[FB80 B548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3548, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_031)
{
    // 3548 0061;	
    // (㕈) CJK UNIFIED IDEOGRAPH-3548	[FB80 B548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3548, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_032)
{
    // 3548 0041;	
    // (㕈) CJK UNIFIED IDEOGRAPH-3548	[FB80 B548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3548, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_033)
{
    // 3548 0062;	
    // (㕈) CJK UNIFIED IDEOGRAPH-3548	[FB80 B548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3548, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_034)
{
    // 3549 0021;	
    // (㕉) CJK UNIFIED IDEOGRAPH-3549	[FB80 B549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3549, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_035)
{
    // 3549 003F;	
    // (㕉) CJK UNIFIED IDEOGRAPH-3549	[FB80 B549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3549, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_036)
{
    // 3549 0061;	
    // (㕉) CJK UNIFIED IDEOGRAPH-3549	[FB80 B549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3549, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_037)
{
    // 3549 0041;	
    // (㕉) CJK UNIFIED IDEOGRAPH-3549	[FB80 B549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3549, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_038)
{
    // 3549 0062;	
    // (㕉) CJK UNIFIED IDEOGRAPH-3549	[FB80 B549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3549, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_039)
{
    // 354A 0021;	
    // (㕊) CJK UNIFIED IDEOGRAPH-354A	[FB80 B54A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_040)
{
    // 354A 003F;	
    // (㕊) CJK UNIFIED IDEOGRAPH-354A	[FB80 B54A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_041)
{
    // 354A 0061;	
    // (㕊) CJK UNIFIED IDEOGRAPH-354A	[FB80 B54A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_042)
{
    // 354A 0041;	
    // (㕊) CJK UNIFIED IDEOGRAPH-354A	[FB80 B54A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_043)
{
    // 354A 0062;	
    // (㕊) CJK UNIFIED IDEOGRAPH-354A	[FB80 B54A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_044)
{
    // 354B 0021;	
    // (㕋) CJK UNIFIED IDEOGRAPH-354B	[FB80 B54B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_045)
{
    // 354B 003F;	
    // (㕋) CJK UNIFIED IDEOGRAPH-354B	[FB80 B54B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_046)
{
    // 354B 0061;	
    // (㕋) CJK UNIFIED IDEOGRAPH-354B	[FB80 B54B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_047)
{
    // 354B 0041;	
    // (㕋) CJK UNIFIED IDEOGRAPH-354B	[FB80 B54B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_048)
{
    // 354B 0062;	
    // (㕋) CJK UNIFIED IDEOGRAPH-354B	[FB80 B54B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_049)
{
    // 354C 0021;	
    // (㕌) CJK UNIFIED IDEOGRAPH-354C	[FB80 B54C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_050)
{
    // 354C 003F;	
    // (㕌) CJK UNIFIED IDEOGRAPH-354C	[FB80 B54C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_051)
{
    // 354C 0061;	
    // (㕌) CJK UNIFIED IDEOGRAPH-354C	[FB80 B54C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_052)
{
    // 354C 0041;	
    // (㕌) CJK UNIFIED IDEOGRAPH-354C	[FB80 B54C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_053)
{
    // 354C 0062;	
    // (㕌) CJK UNIFIED IDEOGRAPH-354C	[FB80 B54C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_054)
{
    // 354D 0021;	
    // (㕍) CJK UNIFIED IDEOGRAPH-354D	[FB80 B54D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_055)
{
    // 354D 003F;	
    // (㕍) CJK UNIFIED IDEOGRAPH-354D	[FB80 B54D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_056)
{
    // 354D 0061;	
    // (㕍) CJK UNIFIED IDEOGRAPH-354D	[FB80 B54D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_057)
{
    // 354D 0041;	
    // (㕍) CJK UNIFIED IDEOGRAPH-354D	[FB80 B54D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_058)
{
    // 354D 0062;	
    // (㕍) CJK UNIFIED IDEOGRAPH-354D	[FB80 B54D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_059)
{
    // 354E 0021;	
    // (㕎) CJK UNIFIED IDEOGRAPH-354E	[FB80 B54E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_060)
{
    // 354E 003F;	
    // (㕎) CJK UNIFIED IDEOGRAPH-354E	[FB80 B54E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_061)
{
    // 354E 0061;	
    // (㕎) CJK UNIFIED IDEOGRAPH-354E	[FB80 B54E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_062)
{
    // 354E 0041;	
    // (㕎) CJK UNIFIED IDEOGRAPH-354E	[FB80 B54E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_063)
{
    // 354E 0062;	
    // (㕎) CJK UNIFIED IDEOGRAPH-354E	[FB80 B54E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_064)
{
    // 354F 0021;	
    // (㕏) CJK UNIFIED IDEOGRAPH-354F	[FB80 B54F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB54F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_065)
{
    // 354F 003F;	
    // (㕏) CJK UNIFIED IDEOGRAPH-354F	[FB80 B54F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB54F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_066)
{
    // 354F 0061;	
    // (㕏) CJK UNIFIED IDEOGRAPH-354F	[FB80 B54F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_067)
{
    // 354F 0041;	
    // (㕏) CJK UNIFIED IDEOGRAPH-354F	[FB80 B54F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x354F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB54F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_068)
{
    // 354F 0062;	
    // (㕏) CJK UNIFIED IDEOGRAPH-354F	[FB80 B54F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x354F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB54F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_069)
{
    // 3550 0021;	
    // (㕐) CJK UNIFIED IDEOGRAPH-3550	[FB80 B550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3550, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_070)
{
    // 3550 003F;	
    // (㕐) CJK UNIFIED IDEOGRAPH-3550	[FB80 B550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3550, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_071)
{
    // 3550 0061;	
    // (㕐) CJK UNIFIED IDEOGRAPH-3550	[FB80 B550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3550, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_072)
{
    // 3550 0041;	
    // (㕐) CJK UNIFIED IDEOGRAPH-3550	[FB80 B550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3550, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_073)
{
    // 3550 0062;	
    // (㕐) CJK UNIFIED IDEOGRAPH-3550	[FB80 B550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3550, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_074)
{
    // 3551 0021;	
    // (㕑) CJK UNIFIED IDEOGRAPH-3551	[FB80 B551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3551, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_075)
{
    // 3551 003F;	
    // (㕑) CJK UNIFIED IDEOGRAPH-3551	[FB80 B551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3551, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_076)
{
    // 3551 0061;	
    // (㕑) CJK UNIFIED IDEOGRAPH-3551	[FB80 B551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3551, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_077)
{
    // 3551 0041;	
    // (㕑) CJK UNIFIED IDEOGRAPH-3551	[FB80 B551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3551, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_078)
{
    // 3551 0062;	
    // (㕑) CJK UNIFIED IDEOGRAPH-3551	[FB80 B551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3551, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_079)
{
    // 3552 0021;	
    // (㕒) CJK UNIFIED IDEOGRAPH-3552	[FB80 B552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3552, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_080)
{
    // 3552 003F;	
    // (㕒) CJK UNIFIED IDEOGRAPH-3552	[FB80 B552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3552, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_081)
{
    // 3552 0061;	
    // (㕒) CJK UNIFIED IDEOGRAPH-3552	[FB80 B552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3552, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_082)
{
    // 3552 0041;	
    // (㕒) CJK UNIFIED IDEOGRAPH-3552	[FB80 B552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3552, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_083)
{
    // 3552 0062;	
    // (㕒) CJK UNIFIED IDEOGRAPH-3552	[FB80 B552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3552, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_084)
{
    // 3553 0021;	
    // (㕓) CJK UNIFIED IDEOGRAPH-3553	[FB80 B553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3553, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_085)
{
    // 3553 003F;	
    // (㕓) CJK UNIFIED IDEOGRAPH-3553	[FB80 B553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3553, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_086)
{
    // 3553 0061;	
    // (㕓) CJK UNIFIED IDEOGRAPH-3553	[FB80 B553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3553, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_087)
{
    // 3553 0041;	
    // (㕓) CJK UNIFIED IDEOGRAPH-3553	[FB80 B553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3553, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_088)
{
    // 3553 0062;	
    // (㕓) CJK UNIFIED IDEOGRAPH-3553	[FB80 B553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3553, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_089)
{
    // 3554 0021;	
    // (㕔) CJK UNIFIED IDEOGRAPH-3554	[FB80 B554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3554, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_090)
{
    // 3554 003F;	
    // (㕔) CJK UNIFIED IDEOGRAPH-3554	[FB80 B554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3554, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_091)
{
    // 3554 0061;	
    // (㕔) CJK UNIFIED IDEOGRAPH-3554	[FB80 B554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3554, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_092)
{
    // 3554 0041;	
    // (㕔) CJK UNIFIED IDEOGRAPH-3554	[FB80 B554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3554, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_093)
{
    // 3554 0062;	
    // (㕔) CJK UNIFIED IDEOGRAPH-3554	[FB80 B554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3554, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_094)
{
    // 3555 0021;	
    // (㕕) CJK UNIFIED IDEOGRAPH-3555	[FB80 B555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3555, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_095)
{
    // 3555 003F;	
    // (㕕) CJK UNIFIED IDEOGRAPH-3555	[FB80 B555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3555, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_096)
{
    // 3555 0061;	
    // (㕕) CJK UNIFIED IDEOGRAPH-3555	[FB80 B555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3555, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_097)
{
    // 3555 0041;	
    // (㕕) CJK UNIFIED IDEOGRAPH-3555	[FB80 B555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3555, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_098)
{
    // 3555 0062;	
    // (㕕) CJK UNIFIED IDEOGRAPH-3555	[FB80 B555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3555, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_099)
{
    // 3556 0021;	
    // (㕖) CJK UNIFIED IDEOGRAPH-3556	[FB80 B556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3556, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_100)
{
    // 3556 003F;	
    // (㕖) CJK UNIFIED IDEOGRAPH-3556	[FB80 B556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3556, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_101)
{
    // 3556 0061;	
    // (㕖) CJK UNIFIED IDEOGRAPH-3556	[FB80 B556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3556, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_102)
{
    // 3556 0041;	
    // (㕖) CJK UNIFIED IDEOGRAPH-3556	[FB80 B556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3556, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_103)
{
    // 3556 0062;	
    // (㕖) CJK UNIFIED IDEOGRAPH-3556	[FB80 B556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3556, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_104)
{
    // 3557 0021;	
    // (㕗) CJK UNIFIED IDEOGRAPH-3557	[FB80 B557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3557, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_105)
{
    // 3557 003F;	
    // (㕗) CJK UNIFIED IDEOGRAPH-3557	[FB80 B557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3557, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_106)
{
    // 3557 0061;	
    // (㕗) CJK UNIFIED IDEOGRAPH-3557	[FB80 B557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3557, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_107)
{
    // 3557 0041;	
    // (㕗) CJK UNIFIED IDEOGRAPH-3557	[FB80 B557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3557, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_108)
{
    // 3557 0062;	
    // (㕗) CJK UNIFIED IDEOGRAPH-3557	[FB80 B557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3557, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_109)
{
    // 3558 0021;	
    // (㕘) CJK UNIFIED IDEOGRAPH-3558	[FB80 B558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3558, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_110)
{
    // 3558 003F;	
    // (㕘) CJK UNIFIED IDEOGRAPH-3558	[FB80 B558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3558, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_111)
{
    // 3558 0061;	
    // (㕘) CJK UNIFIED IDEOGRAPH-3558	[FB80 B558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3558, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_112)
{
    // 3558 0041;	
    // (㕘) CJK UNIFIED IDEOGRAPH-3558	[FB80 B558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3558, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_113)
{
    // 3558 0062;	
    // (㕘) CJK UNIFIED IDEOGRAPH-3558	[FB80 B558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3558, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_114)
{
    // 3559 0021;	
    // (㕙) CJK UNIFIED IDEOGRAPH-3559	[FB80 B559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3559, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_115)
{
    // 3559 003F;	
    // (㕙) CJK UNIFIED IDEOGRAPH-3559	[FB80 B559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3559, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_116)
{
    // 3559 0061;	
    // (㕙) CJK UNIFIED IDEOGRAPH-3559	[FB80 B559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3559, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_117)
{
    // 3559 0041;	
    // (㕙) CJK UNIFIED IDEOGRAPH-3559	[FB80 B559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3559, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_118)
{
    // 3559 0062;	
    // (㕙) CJK UNIFIED IDEOGRAPH-3559	[FB80 B559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3559, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_119)
{
    // 355A 0021;	
    // (㕚) CJK UNIFIED IDEOGRAPH-355A	[FB80 B55A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_120)
{
    // 355A 003F;	
    // (㕚) CJK UNIFIED IDEOGRAPH-355A	[FB80 B55A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_121)
{
    // 355A 0061;	
    // (㕚) CJK UNIFIED IDEOGRAPH-355A	[FB80 B55A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_122)
{
    // 355A 0041;	
    // (㕚) CJK UNIFIED IDEOGRAPH-355A	[FB80 B55A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_123)
{
    // 355A 0062;	
    // (㕚) CJK UNIFIED IDEOGRAPH-355A	[FB80 B55A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_124)
{
    // 355B 0021;	
    // (㕛) CJK UNIFIED IDEOGRAPH-355B	[FB80 B55B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_125)
{
    // 355B 003F;	
    // (㕛) CJK UNIFIED IDEOGRAPH-355B	[FB80 B55B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_126)
{
    // 355B 0061;	
    // (㕛) CJK UNIFIED IDEOGRAPH-355B	[FB80 B55B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_127)
{
    // 355B 0041;	
    // (㕛) CJK UNIFIED IDEOGRAPH-355B	[FB80 B55B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_128)
{
    // 355B 0062;	
    // (㕛) CJK UNIFIED IDEOGRAPH-355B	[FB80 B55B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_129)
{
    // 355C 0021;	
    // (㕜) CJK UNIFIED IDEOGRAPH-355C	[FB80 B55C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_130)
{
    // 355C 003F;	
    // (㕜) CJK UNIFIED IDEOGRAPH-355C	[FB80 B55C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_131)
{
    // 355C 0061;	
    // (㕜) CJK UNIFIED IDEOGRAPH-355C	[FB80 B55C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_132)
{
    // 355C 0041;	
    // (㕜) CJK UNIFIED IDEOGRAPH-355C	[FB80 B55C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_133)
{
    // 355C 0062;	
    // (㕜) CJK UNIFIED IDEOGRAPH-355C	[FB80 B55C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_134)
{
    // 355D 0021;	
    // (㕝) CJK UNIFIED IDEOGRAPH-355D	[FB80 B55D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_135)
{
    // 355D 003F;	
    // (㕝) CJK UNIFIED IDEOGRAPH-355D	[FB80 B55D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_136)
{
    // 355D 0061;	
    // (㕝) CJK UNIFIED IDEOGRAPH-355D	[FB80 B55D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_137)
{
    // 355D 0041;	
    // (㕝) CJK UNIFIED IDEOGRAPH-355D	[FB80 B55D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_138)
{
    // 355D 0062;	
    // (㕝) CJK UNIFIED IDEOGRAPH-355D	[FB80 B55D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_139)
{
    // 355E 0021;	
    // (㕞) CJK UNIFIED IDEOGRAPH-355E	[FB80 B55E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_140)
{
    // 355E 003F;	
    // (㕞) CJK UNIFIED IDEOGRAPH-355E	[FB80 B55E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_141)
{
    // 355E 0061;	
    // (㕞) CJK UNIFIED IDEOGRAPH-355E	[FB80 B55E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_142)
{
    // 355E 0041;	
    // (㕞) CJK UNIFIED IDEOGRAPH-355E	[FB80 B55E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_143)
{
    // 355E 0062;	
    // (㕞) CJK UNIFIED IDEOGRAPH-355E	[FB80 B55E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_144)
{
    // 355F 0021;	
    // (㕟) CJK UNIFIED IDEOGRAPH-355F	[FB80 B55F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB55F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_145)
{
    // 355F 003F;	
    // (㕟) CJK UNIFIED IDEOGRAPH-355F	[FB80 B55F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB55F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_146)
{
    // 355F 0061;	
    // (㕟) CJK UNIFIED IDEOGRAPH-355F	[FB80 B55F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB55F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_147)
{
    // 355F 0041;	
    // (㕟) CJK UNIFIED IDEOGRAPH-355F	[FB80 B55F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x355F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB55F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_148)
{
    // 355F 0062;	
    // (㕟) CJK UNIFIED IDEOGRAPH-355F	[FB80 B55F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x355F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB55F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_149)
{
    // 3560 0021;	
    // (㕠) CJK UNIFIED IDEOGRAPH-3560	[FB80 B560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3560, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_150)
{
    // 3560 003F;	
    // (㕠) CJK UNIFIED IDEOGRAPH-3560	[FB80 B560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3560, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_151)
{
    // 3560 0061;	
    // (㕠) CJK UNIFIED IDEOGRAPH-3560	[FB80 B560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3560, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_152)
{
    // 3560 0041;	
    // (㕠) CJK UNIFIED IDEOGRAPH-3560	[FB80 B560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3560, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_153)
{
    // 3560 0062;	
    // (㕠) CJK UNIFIED IDEOGRAPH-3560	[FB80 B560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3560, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_154)
{
    // 3561 0021;	
    // (㕡) CJK UNIFIED IDEOGRAPH-3561	[FB80 B561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3561, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_155)
{
    // 3561 003F;	
    // (㕡) CJK UNIFIED IDEOGRAPH-3561	[FB80 B561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3561, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_156)
{
    // 3561 0061;	
    // (㕡) CJK UNIFIED IDEOGRAPH-3561	[FB80 B561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3561, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_157)
{
    // 3561 0041;	
    // (㕡) CJK UNIFIED IDEOGRAPH-3561	[FB80 B561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3561, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_158)
{
    // 3561 0062;	
    // (㕡) CJK UNIFIED IDEOGRAPH-3561	[FB80 B561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3561, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_159)
{
    // 3562 0021;	
    // (㕢) CJK UNIFIED IDEOGRAPH-3562	[FB80 B562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3562, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_160)
{
    // 3562 003F;	
    // (㕢) CJK UNIFIED IDEOGRAPH-3562	[FB80 B562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3562, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_161)
{
    // 3562 0061;	
    // (㕢) CJK UNIFIED IDEOGRAPH-3562	[FB80 B562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3562, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_162)
{
    // 3562 0041;	
    // (㕢) CJK UNIFIED IDEOGRAPH-3562	[FB80 B562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3562, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_163)
{
    // 3562 0062;	
    // (㕢) CJK UNIFIED IDEOGRAPH-3562	[FB80 B562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3562, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_164)
{
    // 3563 0021;	
    // (㕣) CJK UNIFIED IDEOGRAPH-3563	[FB80 B563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3563, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_165)
{
    // 3563 003F;	
    // (㕣) CJK UNIFIED IDEOGRAPH-3563	[FB80 B563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3563, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_166)
{
    // 3563 0061;	
    // (㕣) CJK UNIFIED IDEOGRAPH-3563	[FB80 B563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3563, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_167)
{
    // 3563 0041;	
    // (㕣) CJK UNIFIED IDEOGRAPH-3563	[FB80 B563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3563, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_168)
{
    // 3563 0062;	
    // (㕣) CJK UNIFIED IDEOGRAPH-3563	[FB80 B563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3563, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_169)
{
    // 3564 0021;	
    // (㕤) CJK UNIFIED IDEOGRAPH-3564	[FB80 B564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3564, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_170)
{
    // 3564 003F;	
    // (㕤) CJK UNIFIED IDEOGRAPH-3564	[FB80 B564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3564, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_171)
{
    // 3564 0061;	
    // (㕤) CJK UNIFIED IDEOGRAPH-3564	[FB80 B564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3564, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_172)
{
    // 3564 0041;	
    // (㕤) CJK UNIFIED IDEOGRAPH-3564	[FB80 B564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3564, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_173)
{
    // 3564 0062;	
    // (㕤) CJK UNIFIED IDEOGRAPH-3564	[FB80 B564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3564, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_174)
{
    // 3565 0021;	
    // (㕥) CJK UNIFIED IDEOGRAPH-3565	[FB80 B565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3565, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_175)
{
    // 3565 003F;	
    // (㕥) CJK UNIFIED IDEOGRAPH-3565	[FB80 B565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3565, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_176)
{
    // 3565 0061;	
    // (㕥) CJK UNIFIED IDEOGRAPH-3565	[FB80 B565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3565, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_177)
{
    // 3565 0041;	
    // (㕥) CJK UNIFIED IDEOGRAPH-3565	[FB80 B565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3565, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_178)
{
    // 3565 0062;	
    // (㕥) CJK UNIFIED IDEOGRAPH-3565	[FB80 B565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3565, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_179)
{
    // 3566 0021;	
    // (㕦) CJK UNIFIED IDEOGRAPH-3566	[FB80 B566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3566, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_180)
{
    // 3566 003F;	
    // (㕦) CJK UNIFIED IDEOGRAPH-3566	[FB80 B566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3566, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_181)
{
    // 3566 0061;	
    // (㕦) CJK UNIFIED IDEOGRAPH-3566	[FB80 B566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3566, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_182)
{
    // 3566 0041;	
    // (㕦) CJK UNIFIED IDEOGRAPH-3566	[FB80 B566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3566, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_183)
{
    // 3566 0062;	
    // (㕦) CJK UNIFIED IDEOGRAPH-3566	[FB80 B566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3566, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_184)
{
    // 3567 0021;	
    // (㕧) CJK UNIFIED IDEOGRAPH-3567	[FB80 B567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3567, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_185)
{
    // 3567 003F;	
    // (㕧) CJK UNIFIED IDEOGRAPH-3567	[FB80 B567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3567, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_186)
{
    // 3567 0061;	
    // (㕧) CJK UNIFIED IDEOGRAPH-3567	[FB80 B567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3567, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_187)
{
    // 3567 0041;	
    // (㕧) CJK UNIFIED IDEOGRAPH-3567	[FB80 B567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3567, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_188)
{
    // 3567 0062;	
    // (㕧) CJK UNIFIED IDEOGRAPH-3567	[FB80 B567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3567, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_189)
{
    // 3568 0021;	
    // (㕨) CJK UNIFIED IDEOGRAPH-3568	[FB80 B568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3568, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_190)
{
    // 3568 003F;	
    // (㕨) CJK UNIFIED IDEOGRAPH-3568	[FB80 B568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3568, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_191)
{
    // 3568 0061;	
    // (㕨) CJK UNIFIED IDEOGRAPH-3568	[FB80 B568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3568, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_192)
{
    // 3568 0041;	
    // (㕨) CJK UNIFIED IDEOGRAPH-3568	[FB80 B568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3568, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_193)
{
    // 3568 0062;	
    // (㕨) CJK UNIFIED IDEOGRAPH-3568	[FB80 B568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3568, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_194)
{
    // 3569 0021;	
    // (㕩) CJK UNIFIED IDEOGRAPH-3569	[FB80 B569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3569, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_195)
{
    // 3569 003F;	
    // (㕩) CJK UNIFIED IDEOGRAPH-3569	[FB80 B569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3569, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_196)
{
    // 3569 0061;	
    // (㕩) CJK UNIFIED IDEOGRAPH-3569	[FB80 B569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3569, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_197)
{
    // 3569 0041;	
    // (㕩) CJK UNIFIED IDEOGRAPH-3569	[FB80 B569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3569, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_198)
{
    // 3569 0062;	
    // (㕩) CJK UNIFIED IDEOGRAPH-3569	[FB80 B569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3569, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_199)
{
    // 356A 0021;	
    // (㕪) CJK UNIFIED IDEOGRAPH-356A	[FB80 B56A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_200)
{
    // 356A 003F;	
    // (㕪) CJK UNIFIED IDEOGRAPH-356A	[FB80 B56A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_201)
{
    // 356A 0061;	
    // (㕪) CJK UNIFIED IDEOGRAPH-356A	[FB80 B56A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_202)
{
    // 356A 0041;	
    // (㕪) CJK UNIFIED IDEOGRAPH-356A	[FB80 B56A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_203)
{
    // 356A 0062;	
    // (㕪) CJK UNIFIED IDEOGRAPH-356A	[FB80 B56A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_204)
{
    // 356B 0021;	
    // (㕫) CJK UNIFIED IDEOGRAPH-356B	[FB80 B56B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_205)
{
    // 356B 003F;	
    // (㕫) CJK UNIFIED IDEOGRAPH-356B	[FB80 B56B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_206)
{
    // 356B 0061;	
    // (㕫) CJK UNIFIED IDEOGRAPH-356B	[FB80 B56B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_207)
{
    // 356B 0041;	
    // (㕫) CJK UNIFIED IDEOGRAPH-356B	[FB80 B56B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_208)
{
    // 356B 0062;	
    // (㕫) CJK UNIFIED IDEOGRAPH-356B	[FB80 B56B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_209)
{
    // 356C 0021;	
    // (㕬) CJK UNIFIED IDEOGRAPH-356C	[FB80 B56C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_210)
{
    // 356C 003F;	
    // (㕬) CJK UNIFIED IDEOGRAPH-356C	[FB80 B56C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_211)
{
    // 356C 0061;	
    // (㕬) CJK UNIFIED IDEOGRAPH-356C	[FB80 B56C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_212)
{
    // 356C 0041;	
    // (㕬) CJK UNIFIED IDEOGRAPH-356C	[FB80 B56C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_213)
{
    // 356C 0062;	
    // (㕬) CJK UNIFIED IDEOGRAPH-356C	[FB80 B56C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_214)
{
    // 356D 0021;	
    // (㕭) CJK UNIFIED IDEOGRAPH-356D	[FB80 B56D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_215)
{
    // 356D 003F;	
    // (㕭) CJK UNIFIED IDEOGRAPH-356D	[FB80 B56D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_216)
{
    // 356D 0061;	
    // (㕭) CJK UNIFIED IDEOGRAPH-356D	[FB80 B56D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_217)
{
    // 356D 0041;	
    // (㕭) CJK UNIFIED IDEOGRAPH-356D	[FB80 B56D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_218)
{
    // 356D 0062;	
    // (㕭) CJK UNIFIED IDEOGRAPH-356D	[FB80 B56D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_219)
{
    // 356E 0021;	
    // (㕮) CJK UNIFIED IDEOGRAPH-356E	[FB80 B56E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_220)
{
    // 356E 003F;	
    // (㕮) CJK UNIFIED IDEOGRAPH-356E	[FB80 B56E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_221)
{
    // 356E 0061;	
    // (㕮) CJK UNIFIED IDEOGRAPH-356E	[FB80 B56E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_222)
{
    // 356E 0041;	
    // (㕮) CJK UNIFIED IDEOGRAPH-356E	[FB80 B56E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_223)
{
    // 356E 0062;	
    // (㕮) CJK UNIFIED IDEOGRAPH-356E	[FB80 B56E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_224)
{
    // 356F 0021;	
    // (㕯) CJK UNIFIED IDEOGRAPH-356F	[FB80 B56F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB56F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_225)
{
    // 356F 003F;	
    // (㕯) CJK UNIFIED IDEOGRAPH-356F	[FB80 B56F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB56F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_226)
{
    // 356F 0061;	
    // (㕯) CJK UNIFIED IDEOGRAPH-356F	[FB80 B56F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB56F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_227)
{
    // 356F 0041;	
    // (㕯) CJK UNIFIED IDEOGRAPH-356F	[FB80 B56F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x356F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB56F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_228)
{
    // 356F 0062;	
    // (㕯) CJK UNIFIED IDEOGRAPH-356F	[FB80 B56F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x356F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB56F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_229)
{
    // 3570 0021;	
    // (㕰) CJK UNIFIED IDEOGRAPH-3570	[FB80 B570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3570, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_230)
{
    // 3570 003F;	
    // (㕰) CJK UNIFIED IDEOGRAPH-3570	[FB80 B570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3570, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_231)
{
    // 3570 0061;	
    // (㕰) CJK UNIFIED IDEOGRAPH-3570	[FB80 B570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3570, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_232)
{
    // 3570 0041;	
    // (㕰) CJK UNIFIED IDEOGRAPH-3570	[FB80 B570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3570, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_233)
{
    // 3570 0062;	
    // (㕰) CJK UNIFIED IDEOGRAPH-3570	[FB80 B570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3570, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_234)
{
    // 3571 0021;	
    // (㕱) CJK UNIFIED IDEOGRAPH-3571	[FB80 B571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3571, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_235)
{
    // 3571 003F;	
    // (㕱) CJK UNIFIED IDEOGRAPH-3571	[FB80 B571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3571, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_236)
{
    // 3571 0061;	
    // (㕱) CJK UNIFIED IDEOGRAPH-3571	[FB80 B571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3571, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_237)
{
    // 3571 0041;	
    // (㕱) CJK UNIFIED IDEOGRAPH-3571	[FB80 B571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3571, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_238)
{
    // 3571 0062;	
    // (㕱) CJK UNIFIED IDEOGRAPH-3571	[FB80 B571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3571, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_239)
{
    // 3572 0021;	
    // (㕲) CJK UNIFIED IDEOGRAPH-3572	[FB80 B572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3572, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_240)
{
    // 3572 003F;	
    // (㕲) CJK UNIFIED IDEOGRAPH-3572	[FB80 B572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3572, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_241)
{
    // 3572 0061;	
    // (㕲) CJK UNIFIED IDEOGRAPH-3572	[FB80 B572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3572, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_242)
{
    // 3572 0041;	
    // (㕲) CJK UNIFIED IDEOGRAPH-3572	[FB80 B572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3572, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_243)
{
    // 3572 0062;	
    // (㕲) CJK UNIFIED IDEOGRAPH-3572	[FB80 B572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3572, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_244)
{
    // 3573 0021;	
    // (㕳) CJK UNIFIED IDEOGRAPH-3573	[FB80 B573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3573, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_245)
{
    // 3573 003F;	
    // (㕳) CJK UNIFIED IDEOGRAPH-3573	[FB80 B573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3573, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_246)
{
    // 3573 0061;	
    // (㕳) CJK UNIFIED IDEOGRAPH-3573	[FB80 B573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3573, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_247)
{
    // 3573 0041;	
    // (㕳) CJK UNIFIED IDEOGRAPH-3573	[FB80 B573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3573, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_248)
{
    // 3573 0062;	
    // (㕳) CJK UNIFIED IDEOGRAPH-3573	[FB80 B573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3573, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_249)
{
    // 3574 0021;	
    // (㕴) CJK UNIFIED IDEOGRAPH-3574	[FB80 B574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3574, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_250)
{
    // 3574 003F;	
    // (㕴) CJK UNIFIED IDEOGRAPH-3574	[FB80 B574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3574, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_251)
{
    // 3574 0061;	
    // (㕴) CJK UNIFIED IDEOGRAPH-3574	[FB80 B574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3574, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_252)
{
    // 3574 0041;	
    // (㕴) CJK UNIFIED IDEOGRAPH-3574	[FB80 B574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3574, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_253)
{
    // 3574 0062;	
    // (㕴) CJK UNIFIED IDEOGRAPH-3574	[FB80 B574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3574, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_254)
{
    // 3575 0021;	
    // (㕵) CJK UNIFIED IDEOGRAPH-3575	[FB80 B575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3575, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_255)
{
    // 3575 003F;	
    // (㕵) CJK UNIFIED IDEOGRAPH-3575	[FB80 B575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3575, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_256)
{
    // 3575 0061;	
    // (㕵) CJK UNIFIED IDEOGRAPH-3575	[FB80 B575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3575, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_257)
{
    // 3575 0041;	
    // (㕵) CJK UNIFIED IDEOGRAPH-3575	[FB80 B575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3575, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_258)
{
    // 3575 0062;	
    // (㕵) CJK UNIFIED IDEOGRAPH-3575	[FB80 B575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3575, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_259)
{
    // 3576 0021;	
    // (㕶) CJK UNIFIED IDEOGRAPH-3576	[FB80 B576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3576, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_260)
{
    // 3576 003F;	
    // (㕶) CJK UNIFIED IDEOGRAPH-3576	[FB80 B576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3576, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_261)
{
    // 3576 0061;	
    // (㕶) CJK UNIFIED IDEOGRAPH-3576	[FB80 B576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3576, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_262)
{
    // 3576 0041;	
    // (㕶) CJK UNIFIED IDEOGRAPH-3576	[FB80 B576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3576, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_263)
{
    // 3576 0062;	
    // (㕶) CJK UNIFIED IDEOGRAPH-3576	[FB80 B576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3576, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_264)
{
    // 3577 0021;	
    // (㕷) CJK UNIFIED IDEOGRAPH-3577	[FB80 B577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3577, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_265)
{
    // 3577 003F;	
    // (㕷) CJK UNIFIED IDEOGRAPH-3577	[FB80 B577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3577, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_266)
{
    // 3577 0061;	
    // (㕷) CJK UNIFIED IDEOGRAPH-3577	[FB80 B577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3577, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_267)
{
    // 3577 0041;	
    // (㕷) CJK UNIFIED IDEOGRAPH-3577	[FB80 B577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3577, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_268)
{
    // 3577 0062;	
    // (㕷) CJK UNIFIED IDEOGRAPH-3577	[FB80 B577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3577, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_269)
{
    // 3578 0021;	
    // (㕸) CJK UNIFIED IDEOGRAPH-3578	[FB80 B578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3578, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_270)
{
    // 3578 003F;	
    // (㕸) CJK UNIFIED IDEOGRAPH-3578	[FB80 B578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3578, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_271)
{
    // 3578 0061;	
    // (㕸) CJK UNIFIED IDEOGRAPH-3578	[FB80 B578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3578, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_272)
{
    // 3578 0041;	
    // (㕸) CJK UNIFIED IDEOGRAPH-3578	[FB80 B578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3578, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_273)
{
    // 3578 0062;	
    // (㕸) CJK UNIFIED IDEOGRAPH-3578	[FB80 B578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3578, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_274)
{
    // 3579 0021;	
    // (㕹) CJK UNIFIED IDEOGRAPH-3579	[FB80 B579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3579, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_275)
{
    // 3579 003F;	
    // (㕹) CJK UNIFIED IDEOGRAPH-3579	[FB80 B579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3579, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_276)
{
    // 3579 0061;	
    // (㕹) CJK UNIFIED IDEOGRAPH-3579	[FB80 B579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3579, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_277)
{
    // 3579 0041;	
    // (㕹) CJK UNIFIED IDEOGRAPH-3579	[FB80 B579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3579, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_278)
{
    // 3579 0062;	
    // (㕹) CJK UNIFIED IDEOGRAPH-3579	[FB80 B579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3579, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_279)
{
    // 357A 0021;	
    // (㕺) CJK UNIFIED IDEOGRAPH-357A	[FB80 B57A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_280)
{
    // 357A 003F;	
    // (㕺) CJK UNIFIED IDEOGRAPH-357A	[FB80 B57A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_281)
{
    // 357A 0061;	
    // (㕺) CJK UNIFIED IDEOGRAPH-357A	[FB80 B57A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_282)
{
    // 357A 0041;	
    // (㕺) CJK UNIFIED IDEOGRAPH-357A	[FB80 B57A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_283)
{
    // 357A 0062;	
    // (㕺) CJK UNIFIED IDEOGRAPH-357A	[FB80 B57A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_284)
{
    // 357B 0021;	
    // (㕻) CJK UNIFIED IDEOGRAPH-357B	[FB80 B57B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_285)
{
    // 357B 003F;	
    // (㕻) CJK UNIFIED IDEOGRAPH-357B	[FB80 B57B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_286)
{
    // 357B 0061;	
    // (㕻) CJK UNIFIED IDEOGRAPH-357B	[FB80 B57B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_287)
{
    // 357B 0041;	
    // (㕻) CJK UNIFIED IDEOGRAPH-357B	[FB80 B57B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_288)
{
    // 357B 0062;	
    // (㕻) CJK UNIFIED IDEOGRAPH-357B	[FB80 B57B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_289)
{
    // 357C 0021;	
    // (㕼) CJK UNIFIED IDEOGRAPH-357C	[FB80 B57C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_290)
{
    // 357C 003F;	
    // (㕼) CJK UNIFIED IDEOGRAPH-357C	[FB80 B57C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_291)
{
    // 357C 0061;	
    // (㕼) CJK UNIFIED IDEOGRAPH-357C	[FB80 B57C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_292)
{
    // 357C 0041;	
    // (㕼) CJK UNIFIED IDEOGRAPH-357C	[FB80 B57C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_293)
{
    // 357C 0062;	
    // (㕼) CJK UNIFIED IDEOGRAPH-357C	[FB80 B57C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_294)
{
    // 357D 0021;	
    // (㕽) CJK UNIFIED IDEOGRAPH-357D	[FB80 B57D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_295)
{
    // 357D 003F;	
    // (㕽) CJK UNIFIED IDEOGRAPH-357D	[FB80 B57D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_296)
{
    // 357D 0061;	
    // (㕽) CJK UNIFIED IDEOGRAPH-357D	[FB80 B57D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_297)
{
    // 357D 0041;	
    // (㕽) CJK UNIFIED IDEOGRAPH-357D	[FB80 B57D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_298)
{
    // 357D 0062;	
    // (㕽) CJK UNIFIED IDEOGRAPH-357D	[FB80 B57D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_299)
{
    // 357E 0021;	
    // (㕾) CJK UNIFIED IDEOGRAPH-357E	[FB80 B57E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_300)
{
    // 357E 003F;	
    // (㕾) CJK UNIFIED IDEOGRAPH-357E	[FB80 B57E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_301)
{
    // 357E 0061;	
    // (㕾) CJK UNIFIED IDEOGRAPH-357E	[FB80 B57E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_302)
{
    // 357E 0041;	
    // (㕾) CJK UNIFIED IDEOGRAPH-357E	[FB80 B57E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_303)
{
    // 357E 0062;	
    // (㕾) CJK UNIFIED IDEOGRAPH-357E	[FB80 B57E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_304)
{
    // 357F 0021;	
    // (㕿) CJK UNIFIED IDEOGRAPH-357F	[FB80 B57F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB57F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_305)
{
    // 357F 003F;	
    // (㕿) CJK UNIFIED IDEOGRAPH-357F	[FB80 B57F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB57F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_306)
{
    // 357F 0061;	
    // (㕿) CJK UNIFIED IDEOGRAPH-357F	[FB80 B57F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB57F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_307)
{
    // 357F 0041;	
    // (㕿) CJK UNIFIED IDEOGRAPH-357F	[FB80 B57F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x357F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB57F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_308)
{
    // 357F 0062;	
    // (㕿) CJK UNIFIED IDEOGRAPH-357F	[FB80 B57F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x357F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB57F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_309)
{
    // 3580 0021;	
    // (㖀) CJK UNIFIED IDEOGRAPH-3580	[FB80 B580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3580, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_310)
{
    // 3580 003F;	
    // (㖀) CJK UNIFIED IDEOGRAPH-3580	[FB80 B580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3580, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_311)
{
    // 3580 0061;	
    // (㖀) CJK UNIFIED IDEOGRAPH-3580	[FB80 B580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3580, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_312)
{
    // 3580 0041;	
    // (㖀) CJK UNIFIED IDEOGRAPH-3580	[FB80 B580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3580, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_313)
{
    // 3580 0062;	
    // (㖀) CJK UNIFIED IDEOGRAPH-3580	[FB80 B580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3580, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_314)
{
    // 3581 0021;	
    // (㖁) CJK UNIFIED IDEOGRAPH-3581	[FB80 B581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3581, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_315)
{
    // 3581 003F;	
    // (㖁) CJK UNIFIED IDEOGRAPH-3581	[FB80 B581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3581, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_316)
{
    // 3581 0061;	
    // (㖁) CJK UNIFIED IDEOGRAPH-3581	[FB80 B581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3581, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_317)
{
    // 3581 0041;	
    // (㖁) CJK UNIFIED IDEOGRAPH-3581	[FB80 B581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3581, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_318)
{
    // 3581 0062;	
    // (㖁) CJK UNIFIED IDEOGRAPH-3581	[FB80 B581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3581, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_319)
{
    // 3582 0021;	
    // (㖂) CJK UNIFIED IDEOGRAPH-3582	[FB80 B582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3582, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_320)
{
    // 3582 003F;	
    // (㖂) CJK UNIFIED IDEOGRAPH-3582	[FB80 B582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3582, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_321)
{
    // 3582 0061;	
    // (㖂) CJK UNIFIED IDEOGRAPH-3582	[FB80 B582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3582, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_322)
{
    // 3582 0041;	
    // (㖂) CJK UNIFIED IDEOGRAPH-3582	[FB80 B582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3582, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_323)
{
    // 3582 0062;	
    // (㖂) CJK UNIFIED IDEOGRAPH-3582	[FB80 B582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3582, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_324)
{
    // 3583 0021;	
    // (㖃) CJK UNIFIED IDEOGRAPH-3583	[FB80 B583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3583, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_325)
{
    // 3583 003F;	
    // (㖃) CJK UNIFIED IDEOGRAPH-3583	[FB80 B583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3583, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_326)
{
    // 3583 0061;	
    // (㖃) CJK UNIFIED IDEOGRAPH-3583	[FB80 B583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3583, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_327)
{
    // 3583 0041;	
    // (㖃) CJK UNIFIED IDEOGRAPH-3583	[FB80 B583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3583, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_328)
{
    // 3583 0062;	
    // (㖃) CJK UNIFIED IDEOGRAPH-3583	[FB80 B583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3583, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_329)
{
    // 3584 0021;	
    // (㖄) CJK UNIFIED IDEOGRAPH-3584	[FB80 B584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3584, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_330)
{
    // 3584 003F;	
    // (㖄) CJK UNIFIED IDEOGRAPH-3584	[FB80 B584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3584, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_331)
{
    // 3584 0061;	
    // (㖄) CJK UNIFIED IDEOGRAPH-3584	[FB80 B584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3584, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_332)
{
    // 3584 0041;	
    // (㖄) CJK UNIFIED IDEOGRAPH-3584	[FB80 B584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3584, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_333)
{
    // 3584 0062;	
    // (㖄) CJK UNIFIED IDEOGRAPH-3584	[FB80 B584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3584, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_334)
{
    // 3585 0021;	
    // (㖅) CJK UNIFIED IDEOGRAPH-3585	[FB80 B585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3585, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_335)
{
    // 3585 003F;	
    // (㖅) CJK UNIFIED IDEOGRAPH-3585	[FB80 B585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3585, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_336)
{
    // 3585 0061;	
    // (㖅) CJK UNIFIED IDEOGRAPH-3585	[FB80 B585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3585, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_337)
{
    // 3585 0041;	
    // (㖅) CJK UNIFIED IDEOGRAPH-3585	[FB80 B585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3585, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_338)
{
    // 3585 0062;	
    // (㖅) CJK UNIFIED IDEOGRAPH-3585	[FB80 B585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3585, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_339)
{
    // 3586 0021;	
    // (㖆) CJK UNIFIED IDEOGRAPH-3586	[FB80 B586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3586, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_340)
{
    // 3586 003F;	
    // (㖆) CJK UNIFIED IDEOGRAPH-3586	[FB80 B586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3586, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_341)
{
    // 3586 0061;	
    // (㖆) CJK UNIFIED IDEOGRAPH-3586	[FB80 B586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3586, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_342)
{
    // 3586 0041;	
    // (㖆) CJK UNIFIED IDEOGRAPH-3586	[FB80 B586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3586, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_343)
{
    // 3586 0062;	
    // (㖆) CJK UNIFIED IDEOGRAPH-3586	[FB80 B586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3586, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_344)
{
    // 3587 0021;	
    // (㖇) CJK UNIFIED IDEOGRAPH-3587	[FB80 B587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3587, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_345)
{
    // 3587 003F;	
    // (㖇) CJK UNIFIED IDEOGRAPH-3587	[FB80 B587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3587, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_346)
{
    // 3587 0061;	
    // (㖇) CJK UNIFIED IDEOGRAPH-3587	[FB80 B587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3587, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_347)
{
    // 3587 0041;	
    // (㖇) CJK UNIFIED IDEOGRAPH-3587	[FB80 B587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3587, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_348)
{
    // 3587 0062;	
    // (㖇) CJK UNIFIED IDEOGRAPH-3587	[FB80 B587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3587, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_349)
{
    // 3588 0021;	
    // (㖈) CJK UNIFIED IDEOGRAPH-3588	[FB80 B588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3588, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_350)
{
    // 3588 003F;	
    // (㖈) CJK UNIFIED IDEOGRAPH-3588	[FB80 B588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3588, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_351)
{
    // 3588 0061;	
    // (㖈) CJK UNIFIED IDEOGRAPH-3588	[FB80 B588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3588, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_352)
{
    // 3588 0041;	
    // (㖈) CJK UNIFIED IDEOGRAPH-3588	[FB80 B588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3588, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_353)
{
    // 3588 0062;	
    // (㖈) CJK UNIFIED IDEOGRAPH-3588	[FB80 B588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3588, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_354)
{
    // 3589 0021;	
    // (㖉) CJK UNIFIED IDEOGRAPH-3589	[FB80 B589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3589, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_355)
{
    // 3589 003F;	
    // (㖉) CJK UNIFIED IDEOGRAPH-3589	[FB80 B589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3589, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_356)
{
    // 3589 0061;	
    // (㖉) CJK UNIFIED IDEOGRAPH-3589	[FB80 B589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3589, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_357)
{
    // 3589 0041;	
    // (㖉) CJK UNIFIED IDEOGRAPH-3589	[FB80 B589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3589, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_358)
{
    // 3589 0062;	
    // (㖉) CJK UNIFIED IDEOGRAPH-3589	[FB80 B589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3589, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_359)
{
    // 358A 0021;	
    // (㖊) CJK UNIFIED IDEOGRAPH-358A	[FB80 B58A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_360)
{
    // 358A 003F;	
    // (㖊) CJK UNIFIED IDEOGRAPH-358A	[FB80 B58A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_361)
{
    // 358A 0061;	
    // (㖊) CJK UNIFIED IDEOGRAPH-358A	[FB80 B58A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_362)
{
    // 358A 0041;	
    // (㖊) CJK UNIFIED IDEOGRAPH-358A	[FB80 B58A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_363)
{
    // 358A 0062;	
    // (㖊) CJK UNIFIED IDEOGRAPH-358A	[FB80 B58A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_364)
{
    // 358B 0021;	
    // (㖋) CJK UNIFIED IDEOGRAPH-358B	[FB80 B58B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_365)
{
    // 358B 003F;	
    // (㖋) CJK UNIFIED IDEOGRAPH-358B	[FB80 B58B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_366)
{
    // 358B 0061;	
    // (㖋) CJK UNIFIED IDEOGRAPH-358B	[FB80 B58B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_367)
{
    // 358B 0041;	
    // (㖋) CJK UNIFIED IDEOGRAPH-358B	[FB80 B58B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_368)
{
    // 358B 0062;	
    // (㖋) CJK UNIFIED IDEOGRAPH-358B	[FB80 B58B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_369)
{
    // 358C 0021;	
    // (㖌) CJK UNIFIED IDEOGRAPH-358C	[FB80 B58C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_370)
{
    // 358C 003F;	
    // (㖌) CJK UNIFIED IDEOGRAPH-358C	[FB80 B58C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_371)
{
    // 358C 0061;	
    // (㖌) CJK UNIFIED IDEOGRAPH-358C	[FB80 B58C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_372)
{
    // 358C 0041;	
    // (㖌) CJK UNIFIED IDEOGRAPH-358C	[FB80 B58C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_373)
{
    // 358C 0062;	
    // (㖌) CJK UNIFIED IDEOGRAPH-358C	[FB80 B58C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_374)
{
    // 358D 0021;	
    // (㖍) CJK UNIFIED IDEOGRAPH-358D	[FB80 B58D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_375)
{
    // 358D 003F;	
    // (㖍) CJK UNIFIED IDEOGRAPH-358D	[FB80 B58D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_376)
{
    // 358D 0061;	
    // (㖍) CJK UNIFIED IDEOGRAPH-358D	[FB80 B58D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_377)
{
    // 358D 0041;	
    // (㖍) CJK UNIFIED IDEOGRAPH-358D	[FB80 B58D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_378)
{
    // 358D 0062;	
    // (㖍) CJK UNIFIED IDEOGRAPH-358D	[FB80 B58D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_379)
{
    // 358E 0021;	
    // (㖎) CJK UNIFIED IDEOGRAPH-358E	[FB80 B58E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_380)
{
    // 358E 003F;	
    // (㖎) CJK UNIFIED IDEOGRAPH-358E	[FB80 B58E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_381)
{
    // 358E 0061;	
    // (㖎) CJK UNIFIED IDEOGRAPH-358E	[FB80 B58E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_382)
{
    // 358E 0041;	
    // (㖎) CJK UNIFIED IDEOGRAPH-358E	[FB80 B58E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_383)
{
    // 358E 0062;	
    // (㖎) CJK UNIFIED IDEOGRAPH-358E	[FB80 B58E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_384)
{
    // 358F 0021;	
    // (㖏) CJK UNIFIED IDEOGRAPH-358F	[FB80 B58F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB58F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_385)
{
    // 358F 003F;	
    // (㖏) CJK UNIFIED IDEOGRAPH-358F	[FB80 B58F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB58F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_386)
{
    // 358F 0061;	
    // (㖏) CJK UNIFIED IDEOGRAPH-358F	[FB80 B58F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB58F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_387)
{
    // 358F 0041;	
    // (㖏) CJK UNIFIED IDEOGRAPH-358F	[FB80 B58F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x358F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB58F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_388)
{
    // 358F 0062;	
    // (㖏) CJK UNIFIED IDEOGRAPH-358F	[FB80 B58F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x358F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB58F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_389)
{
    // 3590 0021;	
    // (㖐) CJK UNIFIED IDEOGRAPH-3590	[FB80 B590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3590, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_390)
{
    // 3590 003F;	
    // (㖐) CJK UNIFIED IDEOGRAPH-3590	[FB80 B590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3590, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_391)
{
    // 3590 0061;	
    // (㖐) CJK UNIFIED IDEOGRAPH-3590	[FB80 B590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3590, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_392)
{
    // 3590 0041;	
    // (㖐) CJK UNIFIED IDEOGRAPH-3590	[FB80 B590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3590, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_393)
{
    // 3590 0062;	
    // (㖐) CJK UNIFIED IDEOGRAPH-3590	[FB80 B590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3590, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_394)
{
    // 3591 0021;	
    // (㖑) CJK UNIFIED IDEOGRAPH-3591	[FB80 B591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3591, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_395)
{
    // 3591 003F;	
    // (㖑) CJK UNIFIED IDEOGRAPH-3591	[FB80 B591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3591, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_396)
{
    // 3591 0061;	
    // (㖑) CJK UNIFIED IDEOGRAPH-3591	[FB80 B591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3591, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_397)
{
    // 3591 0041;	
    // (㖑) CJK UNIFIED IDEOGRAPH-3591	[FB80 B591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3591, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_398)
{
    // 3591 0062;	
    // (㖑) CJK UNIFIED IDEOGRAPH-3591	[FB80 B591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3591, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_399)
{
    // 3592 0021;	
    // (㖒) CJK UNIFIED IDEOGRAPH-3592	[FB80 B592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3592, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_400)
{
    // 3592 003F;	
    // (㖒) CJK UNIFIED IDEOGRAPH-3592	[FB80 B592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3592, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_401)
{
    // 3592 0061;	
    // (㖒) CJK UNIFIED IDEOGRAPH-3592	[FB80 B592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3592, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_402)
{
    // 3592 0041;	
    // (㖒) CJK UNIFIED IDEOGRAPH-3592	[FB80 B592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3592, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_403)
{
    // 3592 0062;	
    // (㖒) CJK UNIFIED IDEOGRAPH-3592	[FB80 B592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3592, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_404)
{
    // 3593 0021;	
    // (㖓) CJK UNIFIED IDEOGRAPH-3593	[FB80 B593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3593, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_405)
{
    // 3593 003F;	
    // (㖓) CJK UNIFIED IDEOGRAPH-3593	[FB80 B593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3593, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_406)
{
    // 3593 0061;	
    // (㖓) CJK UNIFIED IDEOGRAPH-3593	[FB80 B593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3593, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_407)
{
    // 3593 0041;	
    // (㖓) CJK UNIFIED IDEOGRAPH-3593	[FB80 B593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3593, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_408)
{
    // 3593 0062;	
    // (㖓) CJK UNIFIED IDEOGRAPH-3593	[FB80 B593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3593, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_409)
{
    // 3594 0021;	
    // (㖔) CJK UNIFIED IDEOGRAPH-3594	[FB80 B594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3594, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_410)
{
    // 3594 003F;	
    // (㖔) CJK UNIFIED IDEOGRAPH-3594	[FB80 B594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3594, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_411)
{
    // 3594 0061;	
    // (㖔) CJK UNIFIED IDEOGRAPH-3594	[FB80 B594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3594, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_412)
{
    // 3594 0041;	
    // (㖔) CJK UNIFIED IDEOGRAPH-3594	[FB80 B594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3594, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_413)
{
    // 3594 0062;	
    // (㖔) CJK UNIFIED IDEOGRAPH-3594	[FB80 B594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3594, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_414)
{
    // 3595 0021;	
    // (㖕) CJK UNIFIED IDEOGRAPH-3595	[FB80 B595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3595, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_415)
{
    // 3595 003F;	
    // (㖕) CJK UNIFIED IDEOGRAPH-3595	[FB80 B595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3595, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_416)
{
    // 3595 0061;	
    // (㖕) CJK UNIFIED IDEOGRAPH-3595	[FB80 B595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3595, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_417)
{
    // 3595 0041;	
    // (㖕) CJK UNIFIED IDEOGRAPH-3595	[FB80 B595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3595, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_418)
{
    // 3595 0062;	
    // (㖕) CJK UNIFIED IDEOGRAPH-3595	[FB80 B595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3595, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_419)
{
    // 3596 0021;	
    // (㖖) CJK UNIFIED IDEOGRAPH-3596	[FB80 B596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3596, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_420)
{
    // 3596 003F;	
    // (㖖) CJK UNIFIED IDEOGRAPH-3596	[FB80 B596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3596, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_421)
{
    // 3596 0061;	
    // (㖖) CJK UNIFIED IDEOGRAPH-3596	[FB80 B596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3596, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_422)
{
    // 3596 0041;	
    // (㖖) CJK UNIFIED IDEOGRAPH-3596	[FB80 B596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3596, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_423)
{
    // 3596 0062;	
    // (㖖) CJK UNIFIED IDEOGRAPH-3596	[FB80 B596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3596, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_424)
{
    // 3597 0021;	
    // (㖗) CJK UNIFIED IDEOGRAPH-3597	[FB80 B597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3597, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_425)
{
    // 3597 003F;	
    // (㖗) CJK UNIFIED IDEOGRAPH-3597	[FB80 B597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3597, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_426)
{
    // 3597 0061;	
    // (㖗) CJK UNIFIED IDEOGRAPH-3597	[FB80 B597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3597, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_427)
{
    // 3597 0041;	
    // (㖗) CJK UNIFIED IDEOGRAPH-3597	[FB80 B597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3597, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_428)
{
    // 3597 0062;	
    // (㖗) CJK UNIFIED IDEOGRAPH-3597	[FB80 B597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3597, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_429)
{
    // 3598 0021;	
    // (㖘) CJK UNIFIED IDEOGRAPH-3598	[FB80 B598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3598, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_430)
{
    // 3598 003F;	
    // (㖘) CJK UNIFIED IDEOGRAPH-3598	[FB80 B598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3598, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_431)
{
    // 3598 0061;	
    // (㖘) CJK UNIFIED IDEOGRAPH-3598	[FB80 B598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3598, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_432)
{
    // 3598 0041;	
    // (㖘) CJK UNIFIED IDEOGRAPH-3598	[FB80 B598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3598, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_433)
{
    // 3598 0062;	
    // (㖘) CJK UNIFIED IDEOGRAPH-3598	[FB80 B598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3598, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_434)
{
    // 3599 0021;	
    // (㖙) CJK UNIFIED IDEOGRAPH-3599	[FB80 B599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3599, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_435)
{
    // 3599 003F;	
    // (㖙) CJK UNIFIED IDEOGRAPH-3599	[FB80 B599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3599, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_436)
{
    // 3599 0061;	
    // (㖙) CJK UNIFIED IDEOGRAPH-3599	[FB80 B599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3599, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_437)
{
    // 3599 0041;	
    // (㖙) CJK UNIFIED IDEOGRAPH-3599	[FB80 B599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3599, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_438)
{
    // 3599 0062;	
    // (㖙) CJK UNIFIED IDEOGRAPH-3599	[FB80 B599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3599, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_439)
{
    // 359A 0021;	
    // (㖚) CJK UNIFIED IDEOGRAPH-359A	[FB80 B59A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_440)
{
    // 359A 003F;	
    // (㖚) CJK UNIFIED IDEOGRAPH-359A	[FB80 B59A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_441)
{
    // 359A 0061;	
    // (㖚) CJK UNIFIED IDEOGRAPH-359A	[FB80 B59A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_442)
{
    // 359A 0041;	
    // (㖚) CJK UNIFIED IDEOGRAPH-359A	[FB80 B59A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_443)
{
    // 359A 0062;	
    // (㖚) CJK UNIFIED IDEOGRAPH-359A	[FB80 B59A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_444)
{
    // 359B 0021;	
    // (㖛) CJK UNIFIED IDEOGRAPH-359B	[FB80 B59B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_445)
{
    // 359B 003F;	
    // (㖛) CJK UNIFIED IDEOGRAPH-359B	[FB80 B59B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_446)
{
    // 359B 0061;	
    // (㖛) CJK UNIFIED IDEOGRAPH-359B	[FB80 B59B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_447)
{
    // 359B 0041;	
    // (㖛) CJK UNIFIED IDEOGRAPH-359B	[FB80 B59B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_448)
{
    // 359B 0062;	
    // (㖛) CJK UNIFIED IDEOGRAPH-359B	[FB80 B59B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_449)
{
    // 359C 0021;	
    // (㖜) CJK UNIFIED IDEOGRAPH-359C	[FB80 B59C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_450)
{
    // 359C 003F;	
    // (㖜) CJK UNIFIED IDEOGRAPH-359C	[FB80 B59C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_451)
{
    // 359C 0061;	
    // (㖜) CJK UNIFIED IDEOGRAPH-359C	[FB80 B59C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_452)
{
    // 359C 0041;	
    // (㖜) CJK UNIFIED IDEOGRAPH-359C	[FB80 B59C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_453)
{
    // 359C 0062;	
    // (㖜) CJK UNIFIED IDEOGRAPH-359C	[FB80 B59C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_454)
{
    // 359D 0021;	
    // (㖝) CJK UNIFIED IDEOGRAPH-359D	[FB80 B59D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_455)
{
    // 359D 003F;	
    // (㖝) CJK UNIFIED IDEOGRAPH-359D	[FB80 B59D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_456)
{
    // 359D 0061;	
    // (㖝) CJK UNIFIED IDEOGRAPH-359D	[FB80 B59D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_457)
{
    // 359D 0041;	
    // (㖝) CJK UNIFIED IDEOGRAPH-359D	[FB80 B59D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_458)
{
    // 359D 0062;	
    // (㖝) CJK UNIFIED IDEOGRAPH-359D	[FB80 B59D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_459)
{
    // 359E 0021;	
    // (㖞) CJK UNIFIED IDEOGRAPH-359E	[FB80 B59E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_460)
{
    // 359E 003F;	
    // (㖞) CJK UNIFIED IDEOGRAPH-359E	[FB80 B59E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_461)
{
    // 359E 0061;	
    // (㖞) CJK UNIFIED IDEOGRAPH-359E	[FB80 B59E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_462)
{
    // 359E 0041;	
    // (㖞) CJK UNIFIED IDEOGRAPH-359E	[FB80 B59E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_463)
{
    // 359E 0062;	
    // (㖞) CJK UNIFIED IDEOGRAPH-359E	[FB80 B59E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_464)
{
    // 359F 0021;	
    // (㖟) CJK UNIFIED IDEOGRAPH-359F	[FB80 B59F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB59F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_465)
{
    // 359F 003F;	
    // (㖟) CJK UNIFIED IDEOGRAPH-359F	[FB80 B59F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB59F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_466)
{
    // 359F 0061;	
    // (㖟) CJK UNIFIED IDEOGRAPH-359F	[FB80 B59F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB59F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_467)
{
    // 359F 0041;	
    // (㖟) CJK UNIFIED IDEOGRAPH-359F	[FB80 B59F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x359F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB59F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_468)
{
    // 359F 0062;	
    // (㖟) CJK UNIFIED IDEOGRAPH-359F	[FB80 B59F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x359F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB59F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_469)
{
    // 35A0 0021;	
    // (㖠) CJK UNIFIED IDEOGRAPH-35A0	[FB80 B5A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_470)
{
    // 35A0 003F;	
    // (㖠) CJK UNIFIED IDEOGRAPH-35A0	[FB80 B5A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_471)
{
    // 35A0 0061;	
    // (㖠) CJK UNIFIED IDEOGRAPH-35A0	[FB80 B5A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_472)
{
    // 35A0 0041;	
    // (㖠) CJK UNIFIED IDEOGRAPH-35A0	[FB80 B5A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_473)
{
    // 35A0 0062;	
    // (㖠) CJK UNIFIED IDEOGRAPH-35A0	[FB80 B5A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_474)
{
    // 35A1 0021;	
    // (㖡) CJK UNIFIED IDEOGRAPH-35A1	[FB80 B5A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_475)
{
    // 35A1 003F;	
    // (㖡) CJK UNIFIED IDEOGRAPH-35A1	[FB80 B5A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_476)
{
    // 35A1 0061;	
    // (㖡) CJK UNIFIED IDEOGRAPH-35A1	[FB80 B5A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_477)
{
    // 35A1 0041;	
    // (㖡) CJK UNIFIED IDEOGRAPH-35A1	[FB80 B5A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_478)
{
    // 35A1 0062;	
    // (㖡) CJK UNIFIED IDEOGRAPH-35A1	[FB80 B5A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_479)
{
    // 35A2 0021;	
    // (㖢) CJK UNIFIED IDEOGRAPH-35A2	[FB80 B5A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_480)
{
    // 35A2 003F;	
    // (㖢) CJK UNIFIED IDEOGRAPH-35A2	[FB80 B5A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_481)
{
    // 35A2 0061;	
    // (㖢) CJK UNIFIED IDEOGRAPH-35A2	[FB80 B5A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_482)
{
    // 35A2 0041;	
    // (㖢) CJK UNIFIED IDEOGRAPH-35A2	[FB80 B5A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_483)
{
    // 35A2 0062;	
    // (㖢) CJK UNIFIED IDEOGRAPH-35A2	[FB80 B5A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_484)
{
    // 35A3 0021;	
    // (㖣) CJK UNIFIED IDEOGRAPH-35A3	[FB80 B5A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_485)
{
    // 35A3 003F;	
    // (㖣) CJK UNIFIED IDEOGRAPH-35A3	[FB80 B5A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_486)
{
    // 35A3 0061;	
    // (㖣) CJK UNIFIED IDEOGRAPH-35A3	[FB80 B5A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_487)
{
    // 35A3 0041;	
    // (㖣) CJK UNIFIED IDEOGRAPH-35A3	[FB80 B5A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_488)
{
    // 35A3 0062;	
    // (㖣) CJK UNIFIED IDEOGRAPH-35A3	[FB80 B5A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_489)
{
    // 35A4 0021;	
    // (㖤) CJK UNIFIED IDEOGRAPH-35A4	[FB80 B5A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_490)
{
    // 35A4 003F;	
    // (㖤) CJK UNIFIED IDEOGRAPH-35A4	[FB80 B5A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_491)
{
    // 35A4 0061;	
    // (㖤) CJK UNIFIED IDEOGRAPH-35A4	[FB80 B5A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_492)
{
    // 35A4 0041;	
    // (㖤) CJK UNIFIED IDEOGRAPH-35A4	[FB80 B5A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_493)
{
    // 35A4 0062;	
    // (㖤) CJK UNIFIED IDEOGRAPH-35A4	[FB80 B5A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_494)
{
    // 35A5 0021;	
    // (㖥) CJK UNIFIED IDEOGRAPH-35A5	[FB80 B5A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_495)
{
    // 35A5 003F;	
    // (㖥) CJK UNIFIED IDEOGRAPH-35A5	[FB80 B5A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB5A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_496)
{
    // 35A5 0061;	
    // (㖥) CJK UNIFIED IDEOGRAPH-35A5	[FB80 B5A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_497)
{
    // 35A5 0041;	
    // (㖥) CJK UNIFIED IDEOGRAPH-35A5	[FB80 B5A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x35A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_498)
{
    // 35A5 0062;	
    // (㖥) CJK UNIFIED IDEOGRAPH-35A5	[FB80 B5A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_330_499)
{
    // 35A6 0021;	
    // (㖦) CJK UNIFIED IDEOGRAPH-35A6	[FB80 B5A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x35A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB5A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

