// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_115_000)
{
    // FF35  ; [.1F1B.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER U

    uint32_t const cps[1] = { 0xff35 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_001)
{
    // FF36  ; [.1F49.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER V

    uint32_t const cps[1] = { 0xff36 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_002)
{
    // FF37  ; [.1F5B.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER W

    uint32_t const cps[1] = { 0xff37 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_003)
{
    // FF38  ; [.1F65.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER X

    uint32_t const cps[1] = { 0xff38 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_004)
{
    // FF39  ; [.1F71.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER Y

    uint32_t const cps[1] = { 0xff39 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_005)
{
    // FF3A  ; [.1F87.0020.0009] 
    // FULLWIDTH LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0xff3a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0x9)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_006)
{
    // FF3B  ; [*031A.0020.0003] 
    // FULLWIDTH LEFT SQUARE BRACKET

    uint32_t const cps[1] = { 0xff3b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x31a), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_007)
{
    // FF3C  ; [*0396.0020.0003] 
    // FULLWIDTH REVERSE SOLIDUS

    uint32_t const cps[1] = { 0xff3c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x396), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_008)
{
    // FF3D  ; [*031B.0020.0003] 
    // FULLWIDTH RIGHT SQUARE BRACKET

    uint32_t const cps[1] = { 0xff3d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x31b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_009)
{
    // FF3E  ; [*049B.0020.0003] 
    // FULLWIDTH CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0xff3e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x49b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_010)
{
    // FF3F  ; [*020B.0020.0003] 
    // FULLWIDTH LOW LINE

    uint32_t const cps[1] = { 0xff3f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_011)
{
    // FF40  ; [*0498.0020.0003] 
    // FULLWIDTH GRAVE ACCENT

    uint32_t const cps[1] = { 0xff40 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x498), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_012)
{
    // FF41  ; [.1CAD.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER A

    uint32_t const cps[1] = { 0xff41 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_013)
{
    // FF42  ; [.1CC6.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER B

    uint32_t const cps[1] = { 0xff42 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_014)
{
    // FF43  ; [.1CE0.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER C

    uint32_t const cps[1] = { 0xff43 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_015)
{
    // FF44  ; [.1CF5.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER D

    uint32_t const cps[1] = { 0xff44 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_016)
{
    // FF45  ; [.1D10.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER E

    uint32_t const cps[1] = { 0xff45 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_017)
{
    // FF46  ; [.1D4B.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER F

    uint32_t const cps[1] = { 0xff46 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_018)
{
    // FF47  ; [.1D5A.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER G

    uint32_t const cps[1] = { 0xff47 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_019)
{
    // FF48  ; [.1D7E.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER H

    uint32_t const cps[1] = { 0xff48 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_020)
{
    // FF49  ; [.1D98.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER I

    uint32_t const cps[1] = { 0xff49 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_021)
{
    // FF4A  ; [.1DB2.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER J

    uint32_t const cps[1] = { 0xff4a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_022)
{
    // FF4B  ; [.1DCB.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER K

    uint32_t const cps[1] = { 0xff4b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_023)
{
    // FF4C  ; [.1DDD.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER L

    uint32_t const cps[1] = { 0xff4c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_024)
{
    // FF4D  ; [.1E10.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER M

    uint32_t const cps[1] = { 0xff4d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_025)
{
    // FF4E  ; [.1E1F.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER N

    uint32_t const cps[1] = { 0xff4e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_026)
{
    // FF4F  ; [.1E43.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER O

    uint32_t const cps[1] = { 0xff4f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_027)
{
    // FF50  ; [.1E72.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER P

    uint32_t const cps[1] = { 0xff50 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_028)
{
    // FF51  ; [.1E87.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER Q

    uint32_t const cps[1] = { 0xff51 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_029)
{
    // FF52  ; [.1E99.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER R

    uint32_t const cps[1] = { 0xff52 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_030)
{
    // FF53  ; [.1ED7.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER S

    uint32_t const cps[1] = { 0xff53 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_031)
{
    // FF54  ; [.1EFB.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER T

    uint32_t const cps[1] = { 0xff54 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_032)
{
    // FF55  ; [.1F1B.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER U

    uint32_t const cps[1] = { 0xff55 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_033)
{
    // FF56  ; [.1F49.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER V

    uint32_t const cps[1] = { 0xff56 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_034)
{
    // FF57  ; [.1F5B.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER W

    uint32_t const cps[1] = { 0xff57 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_035)
{
    // FF58  ; [.1F65.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER X

    uint32_t const cps[1] = { 0xff58 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_036)
{
    // FF59  ; [.1F71.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER Y

    uint32_t const cps[1] = { 0xff59 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_037)
{
    // FF5A  ; [.1F87.0020.0003] 
    // FULLWIDTH LATIN SMALL LETTER Z

    uint32_t const cps[1] = { 0xff5a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_038)
{
    // FF5B  ; [*031C.0020.0003] 
    // FULLWIDTH LEFT CURLY BRACKET

    uint32_t const cps[1] = { 0xff5b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x31c), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_039)
{
    // FF5C  ; [*0634.0020.0003] 
    // FULLWIDTH VERTICAL LINE

    uint32_t const cps[1] = { 0xff5c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x634), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_040)
{
    // FF5D  ; [*031D.0020.0003] 
    // FULLWIDTH RIGHT CURLY BRACKET

    uint32_t const cps[1] = { 0xff5d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x31d), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_041)
{
    // FF5E  ; [*0636.0020.0003] 
    // FULLWIDTH TILDE

    uint32_t const cps[1] = { 0xff5e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x636), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_042)
{
    // FF5F  ; [*032E.0020.0003] 
    // FULLWIDTH LEFT WHITE PARENTHESIS

    uint32_t const cps[1] = { 0xff5f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x32e), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_043)
{
    // FF60  ; [*032F.0020.0003] 
    // FULLWIDTH RIGHT WHITE PARENTHESIS

    uint32_t const cps[1] = { 0xff60 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x32f), uint8_t(0x1), uint8_t(0x3)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_044)
{
    // FF61  ; [*028B.0020.0012] 
    // HALFWIDTH IDEOGRAPHIC FULL STOP

    uint32_t const cps[1] = { 0xff61 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x28b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_045)
{
    // FF62  ; [*0374.0020.0012] 
    // HALFWIDTH LEFT CORNER BRACKET

    uint32_t const cps[1] = { 0xff62 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x374), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_046)
{
    // FF63  ; [*0375.0020.0012] 
    // HALFWIDTH RIGHT CORNER BRACKET

    uint32_t const cps[1] = { 0xff63 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x375), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_047)
{
    // FF64  ; [*0231.0020.0012] 
    // HALFWIDTH IDEOGRAPHIC COMMA

    uint32_t const cps[1] = { 0xff64 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x231), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_048)
{
    // FF65  ; [*0221.0020.0012] 
    // HALFWIDTH KATAKANA MIDDLE DOT

    uint32_t const cps[1] = { 0xff65 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x221), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_049)
{
    // FF66  ; [.3EA0.0020.0012] 
    // HALFWIDTH KATAKANA LETTER WO

    uint32_t const cps[1] = { 0xff66 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ea0), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_050)
{
    // FF67  ; [.3E71.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL A

    uint32_t const cps[1] = { 0xff67 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_051)
{
    // FF68  ; [.3E72.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL I

    uint32_t const cps[1] = { 0xff68 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_052)
{
    // FF69  ; [.3E73.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL U

    uint32_t const cps[1] = { 0xff69 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e73), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_053)
{
    // FF6A  ; [.3E75.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL E

    uint32_t const cps[1] = { 0xff6a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_054)
{
    // FF6B  ; [.3E76.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL O

    uint32_t const cps[1] = { 0xff6b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_055)
{
    // FF6C  ; [.3E95.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL YA

    uint32_t const cps[1] = { 0xff6c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e95), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_056)
{
    // FF6D  ; [.3E96.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL YU

    uint32_t const cps[1] = { 0xff6d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e96), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_057)
{
    // FF6E  ; [.3E97.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL YO

    uint32_t const cps[1] = { 0xff6e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e97), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_058)
{
    // FF6F  ; [.3E83.0020.0010] 
    // HALFWIDTH KATAKANA LETTER SMALL TU

    uint32_t const cps[1] = { 0xff6f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x10)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_059)
{
    // FF70  ; [.1C73.0020.0012] 
    // HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK

    uint32_t const cps[1] = { 0xff70 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_060)
{
    // FF71  ; [.3E71.0020.0012] 
    // HALFWIDTH KATAKANA LETTER A

    uint32_t const cps[1] = { 0xff71 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_061)
{
    // FF72  ; [.3E72.0020.0012] 
    // HALFWIDTH KATAKANA LETTER I

    uint32_t const cps[1] = { 0xff72 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_062)
{
    // FF73  ; [.3E73.0020.0012] 
    // HALFWIDTH KATAKANA LETTER U

    uint32_t const cps[1] = { 0xff73 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e73), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_063)
{
    // FF74  ; [.3E75.0020.0012] 
    // HALFWIDTH KATAKANA LETTER E

    uint32_t const cps[1] = { 0xff74 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_064)
{
    // FF75  ; [.3E76.0020.0012] 
    // HALFWIDTH KATAKANA LETTER O

    uint32_t const cps[1] = { 0xff75 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_065)
{
    // FF76  ; [.3E77.0020.0012] 
    // HALFWIDTH KATAKANA LETTER KA

    uint32_t const cps[1] = { 0xff76 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_066)
{
    // FF77  ; [.3E78.0020.0012] 
    // HALFWIDTH KATAKANA LETTER KI

    uint32_t const cps[1] = { 0xff77 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_067)
{
    // FF78  ; [.3E79.0020.0012] 
    // HALFWIDTH KATAKANA LETTER KU

    uint32_t const cps[1] = { 0xff78 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_068)
{
    // FF79  ; [.3E7A.0020.0012] 
    // HALFWIDTH KATAKANA LETTER KE

    uint32_t const cps[1] = { 0xff79 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7a), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_069)
{
    // FF7A  ; [.3E7B.0020.0012] 
    // HALFWIDTH KATAKANA LETTER KO

    uint32_t const cps[1] = { 0xff7a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_070)
{
    // FF7B  ; [.3E7C.0020.0012] 
    // HALFWIDTH KATAKANA LETTER SA

    uint32_t const cps[1] = { 0xff7b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_071)
{
    // FF7C  ; [.3E7D.0020.0012] 
    // HALFWIDTH KATAKANA LETTER SI

    uint32_t const cps[1] = { 0xff7c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_072)
{
    // FF7D  ; [.3E7E.0020.0012] 
    // HALFWIDTH KATAKANA LETTER SU

    uint32_t const cps[1] = { 0xff7d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_073)
{
    // FF7E  ; [.3E7F.0020.0012] 
    // HALFWIDTH KATAKANA LETTER SE

    uint32_t const cps[1] = { 0xff7e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_074)
{
    // FF7F  ; [.3E80.0020.0012] 
    // HALFWIDTH KATAKANA LETTER SO

    uint32_t const cps[1] = { 0xff7f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e80), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_075)
{
    // FF80  ; [.3E81.0020.0012] 
    // HALFWIDTH KATAKANA LETTER TA

    uint32_t const cps[1] = { 0xff80 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_076)
{
    // FF81  ; [.3E82.0020.0012] 
    // HALFWIDTH KATAKANA LETTER TI

    uint32_t const cps[1] = { 0xff81 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e82), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_077)
{
    // FF82  ; [.3E83.0020.0012] 
    // HALFWIDTH KATAKANA LETTER TU

    uint32_t const cps[1] = { 0xff82 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_078)
{
    // FF83  ; [.3E84.0020.0012] 
    // HALFWIDTH KATAKANA LETTER TE

    uint32_t const cps[1] = { 0xff83 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e84), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_079)
{
    // FF84  ; [.3E85.0020.0012] 
    // HALFWIDTH KATAKANA LETTER TO

    uint32_t const cps[1] = { 0xff84 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_080)
{
    // FF85  ; [.3E86.0020.0012] 
    // HALFWIDTH KATAKANA LETTER NA

    uint32_t const cps[1] = { 0xff85 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e86), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_081)
{
    // FF86  ; [.3E87.0020.0012] 
    // HALFWIDTH KATAKANA LETTER NI

    uint32_t const cps[1] = { 0xff86 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e87), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_082)
{
    // FF87  ; [.3E88.0020.0012] 
    // HALFWIDTH KATAKANA LETTER NU

    uint32_t const cps[1] = { 0xff87 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e88), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_083)
{
    // FF88  ; [.3E89.0020.0012] 
    // HALFWIDTH KATAKANA LETTER NE

    uint32_t const cps[1] = { 0xff88 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e89), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_084)
{
    // FF89  ; [.3E8A.0020.0012] 
    // HALFWIDTH KATAKANA LETTER NO

    uint32_t const cps[1] = { 0xff89 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8a), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_085)
{
    // FF8A  ; [.3E8B.0020.0012] 
    // HALFWIDTH KATAKANA LETTER HA

    uint32_t const cps[1] = { 0xff8a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_086)
{
    // FF8B  ; [.3E8C.0020.0012] 
    // HALFWIDTH KATAKANA LETTER HI

    uint32_t const cps[1] = { 0xff8b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_087)
{
    // FF8C  ; [.3E8D.0020.0012] 
    // HALFWIDTH KATAKANA LETTER HU

    uint32_t const cps[1] = { 0xff8c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_088)
{
    // FF8D  ; [.3E8E.0020.0012] 
    // HALFWIDTH KATAKANA LETTER HE

    uint32_t const cps[1] = { 0xff8d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_089)
{
    // FF8E  ; [.3E8F.0020.0012] 
    // HALFWIDTH KATAKANA LETTER HO

    uint32_t const cps[1] = { 0xff8e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_090)
{
    // FF8F  ; [.3E90.0020.0012] 
    // HALFWIDTH KATAKANA LETTER MA

    uint32_t const cps[1] = { 0xff8f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_091)
{
    // FF90  ; [.3E91.0020.0012] 
    // HALFWIDTH KATAKANA LETTER MI

    uint32_t const cps[1] = { 0xff90 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e91), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_092)
{
    // FF91  ; [.3E92.0020.0012] 
    // HALFWIDTH KATAKANA LETTER MU

    uint32_t const cps[1] = { 0xff91 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_093)
{
    // FF92  ; [.3E93.0020.0012] 
    // HALFWIDTH KATAKANA LETTER ME

    uint32_t const cps[1] = { 0xff92 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_094)
{
    // FF93  ; [.3E94.0020.0012] 
    // HALFWIDTH KATAKANA LETTER MO

    uint32_t const cps[1] = { 0xff93 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e94), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_095)
{
    // FF94  ; [.3E95.0020.0012] 
    // HALFWIDTH KATAKANA LETTER YA

    uint32_t const cps[1] = { 0xff94 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e95), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_096)
{
    // FF95  ; [.3E96.0020.0012] 
    // HALFWIDTH KATAKANA LETTER YU

    uint32_t const cps[1] = { 0xff95 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e96), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_097)
{
    // FF96  ; [.3E97.0020.0012] 
    // HALFWIDTH KATAKANA LETTER YO

    uint32_t const cps[1] = { 0xff96 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e97), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_098)
{
    // FF97  ; [.3E98.0020.0012] 
    // HALFWIDTH KATAKANA LETTER RA

    uint32_t const cps[1] = { 0xff97 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_099)
{
    // FF98  ; [.3E99.0020.0012] 
    // HALFWIDTH KATAKANA LETTER RI

    uint32_t const cps[1] = { 0xff98 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_100)
{
    // FF99  ; [.3E9A.0020.0012] 
    // HALFWIDTH KATAKANA LETTER RU

    uint32_t const cps[1] = { 0xff99 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_101)
{
    // FF9A  ; [.3E9B.0020.0012] 
    // HALFWIDTH KATAKANA LETTER RE

    uint32_t const cps[1] = { 0xff9a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_102)
{
    // FF9B  ; [.3E9C.0020.0012] 
    // HALFWIDTH KATAKANA LETTER RO

    uint32_t const cps[1] = { 0xff9b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_103)
{
    // FF9C  ; [.3E9D.0020.0012] 
    // HALFWIDTH KATAKANA LETTER WA

    uint32_t const cps[1] = { 0xff9c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_104)
{
    // FF9D  ; [.3EA1.0020.0012] 
    // HALFWIDTH KATAKANA LETTER N

    uint32_t const cps[1] = { 0xff9d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_105)
{
    // FF9E  ; [.0000.0037.0012] 
    // HALFWIDTH KATAKANA VOICED SOUND MARK

    uint32_t const cps[1] = { 0xff9e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x18), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_106)
{
    // FF9F  ; [.0000.0038.0012] 
    // HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK

    uint32_t const cps[1] = { 0xff9f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x19), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_107)
{
    // FFA0  ; [.3D89.0020.0012] 
    // HALFWIDTH HANGUL FILLER

    uint32_t const cps[1] = { 0xffa0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d89), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_108)
{
    // FFA1  ; [.3D0C.0020.0012] 
    // HALFWIDTH HANGUL LETTER KIYEOK

    uint32_t const cps[1] = { 0xffa1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_109)
{
    // FFA2  ; [.3D0D.0020.0012] 
    // HALFWIDTH HANGUL LETTER SSANGKIYEOK

    uint32_t const cps[1] = { 0xffa2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_110)
{
    // FFA3  ; [.3DEA.0020.0012] 
    // HALFWIDTH HANGUL LETTER KIYEOK-SIOS

    uint32_t const cps[1] = { 0xffa3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dea), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_111)
{
    // FFA4  ; [.3D0E.0020.0012] 
    // HALFWIDTH HANGUL LETTER NIEUN

    uint32_t const cps[1] = { 0xffa4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0e), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_112)
{
    // FFA5  ; [.3DEC.0020.0012] 
    // HALFWIDTH HANGUL LETTER NIEUN-CIEUC

    uint32_t const cps[1] = { 0xffa5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3dec), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_113)
{
    // FFA6  ; [.3DED.0020.0012] 
    // HALFWIDTH HANGUL LETTER NIEUN-HIEUH

    uint32_t const cps[1] = { 0xffa6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ded), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_114)
{
    // FFA7  ; [.3D0F.0020.0012] 
    // HALFWIDTH HANGUL LETTER TIKEUT

    uint32_t const cps[1] = { 0xffa7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0f), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_115)
{
    // FFA8  ; [.3D10.0020.0012] 
    // HALFWIDTH HANGUL LETTER SSANGTIKEUT

    uint32_t const cps[1] = { 0xffa8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d10), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_116)
{
    // FFA9  ; [.3D11.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL

    uint32_t const cps[1] = { 0xffa9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d11), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_117)
{
    // FFAA  ; [.3DF0.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-KIYEOK

    uint32_t const cps[1] = { 0xffaa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df0), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_118)
{
    // FFAB  ; [.3DF1.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-MIEUM

    uint32_t const cps[1] = { 0xffab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df1), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_119)
{
    // FFAC  ; [.3DF2.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-PIEUP

    uint32_t const cps[1] = { 0xffac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df2), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_120)
{
    // FFAD  ; [.3DF3.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-SIOS

    uint32_t const cps[1] = { 0xffad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df3), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_121)
{
    // FFAE  ; [.3DF4.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-THIEUTH

    uint32_t const cps[1] = { 0xffae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df4), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_122)
{
    // FFAF  ; [.3DF5.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-PHIEUPH

    uint32_t const cps[1] = { 0xffaf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3df5), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_123)
{
    // FFB0  ; [.3D26.0020.0012] 
    // HALFWIDTH HANGUL LETTER RIEUL-HIEUH

    uint32_t const cps[1] = { 0xffb0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d26), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_124)
{
    // FFB1  ; [.3D12.0020.0012] 
    // HALFWIDTH HANGUL LETTER MIEUM

    uint32_t const cps[1] = { 0xffb1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d12), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_125)
{
    // FFB2  ; [.3D13.0020.0012] 
    // HALFWIDTH HANGUL LETTER PIEUP

    uint32_t const cps[1] = { 0xffb2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d13), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_126)
{
    // FFB3  ; [.3D14.0020.0012] 
    // HALFWIDTH HANGUL LETTER SSANGPIEUP

    uint32_t const cps[1] = { 0xffb3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d14), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_127)
{
    // FFB4  ; [.3D2D.0020.0012] 
    // HALFWIDTH HANGUL LETTER PIEUP-SIOS

    uint32_t const cps[1] = { 0xffb4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d2d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_128)
{
    // FFB5  ; [.3D15.0020.0012] 
    // HALFWIDTH HANGUL LETTER SIOS

    uint32_t const cps[1] = { 0xffb5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d15), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_129)
{
    // FFB6  ; [.3D16.0020.0012] 
    // HALFWIDTH HANGUL LETTER SSANGSIOS

    uint32_t const cps[1] = { 0xffb6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d16), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_130)
{
    // FFB7  ; [.3D17.0020.0012] 
    // HALFWIDTH HANGUL LETTER IEUNG

    uint32_t const cps[1] = { 0xffb7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_131)
{
    // FFB8  ; [.3D18.0020.0012] 
    // HALFWIDTH HANGUL LETTER CIEUC

    uint32_t const cps[1] = { 0xffb8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d18), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_132)
{
    // FFB9  ; [.3D19.0020.0012] 
    // HALFWIDTH HANGUL LETTER SSANGCIEUC

    uint32_t const cps[1] = { 0xffb9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d19), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_133)
{
    // FFBA  ; [.3D1A.0020.0012] 
    // HALFWIDTH HANGUL LETTER CHIEUCH

    uint32_t const cps[1] = { 0xffba };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1a), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_134)
{
    // FFBB  ; [.3D1B.0020.0012] 
    // HALFWIDTH HANGUL LETTER KHIEUKH

    uint32_t const cps[1] = { 0xffbb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_135)
{
    // FFBC  ; [.3D1C.0020.0012] 
    // HALFWIDTH HANGUL LETTER THIEUTH

    uint32_t const cps[1] = { 0xffbc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_136)
{
    // FFBD  ; [.3D1D.0020.0012] 
    // HALFWIDTH HANGUL LETTER PHIEUPH

    uint32_t const cps[1] = { 0xffbd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_137)
{
    // FFBE  ; [.3D1E.0020.0012] 
    // HALFWIDTH HANGUL LETTER HIEUH

    uint32_t const cps[1] = { 0xffbe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1e), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_138)
{
    // FFC2  ; [.3D8A.0020.0012] 
    // HALFWIDTH HANGUL LETTER A

    uint32_t const cps[1] = { 0xffc2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_139)
{
    // FFC3  ; [.3D8B.0020.0012] 
    // HALFWIDTH HANGUL LETTER AE

    uint32_t const cps[1] = { 0xffc3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8b), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_140)
{
    // FFC4  ; [.3D8C.0020.0012] 
    // HALFWIDTH HANGUL LETTER YA

    uint32_t const cps[1] = { 0xffc4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8c), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_141)
{
    // FFC5  ; [.3D8D.0020.0012] 
    // HALFWIDTH HANGUL LETTER YAE

    uint32_t const cps[1] = { 0xffc5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8d), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_142)
{
    // FFC6  ; [.3D8E.0020.0012] 
    // HALFWIDTH HANGUL LETTER EO

    uint32_t const cps[1] = { 0xffc6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8e), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_143)
{
    // FFC7  ; [.3D8F.0020.0012] 
    // HALFWIDTH HANGUL LETTER E

    uint32_t const cps[1] = { 0xffc7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d8f), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_144)
{
    // FFCA  ; [.3D90.0020.0012] 
    // HALFWIDTH HANGUL LETTER YEO

    uint32_t const cps[1] = { 0xffca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d90), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_145)
{
    // FFCB  ; [.3D91.0020.0012] 
    // HALFWIDTH HANGUL LETTER YE

    uint32_t const cps[1] = { 0xffcb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d91), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_146)
{
    // FFCC  ; [.3D92.0020.0012] 
    // HALFWIDTH HANGUL LETTER O

    uint32_t const cps[1] = { 0xffcc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d92), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_147)
{
    // FFCD  ; [.3D93.0020.0012] 
    // HALFWIDTH HANGUL LETTER WA

    uint32_t const cps[1] = { 0xffcd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d93), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_148)
{
    // FFCE  ; [.3D94.0020.0012] 
    // HALFWIDTH HANGUL LETTER WAE

    uint32_t const cps[1] = { 0xffce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d94), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_115_149)
{
    // FFCF  ; [.3D95.0020.0012] 
    // HALFWIDTH HANGUL LETTER OE

    uint32_t const cps[1] = { 0xffcf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d95), uint8_t(0x1), uint8_t(0x12)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

