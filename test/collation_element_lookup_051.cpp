// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_051_000)
{
    // 1F59  ; [.2042.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH DASIA

    uint32_t const cps[1] = { 0x1f59 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_001)
{
    // 1F5B  ; [.2042.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f5b };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_002)
{
    // 1F5D  ; [.2042.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f5d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_003)
{
    // 1F5F  ; [.2042.0020.0008][.0000.0023.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f5f };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_004)
{
    // 1F60  ; [.2047.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI

    uint32_t const cps[1] = { 0x1f60 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_005)
{
    // 1F61  ; [.2047.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA

    uint32_t const cps[1] = { 0x1f61 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_006)
{
    // 1F62  ; [.2047.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f62 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_007)
{
    // 1F63  ; [.2047.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f63 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_008)
{
    // 1F64  ; [.2047.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f64 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_009)
{
    // 1F65  ; [.2047.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f65 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_010)
{
    // 1F66  ; [.2047.0020.0002][.0000.0022.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f66 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_011)
{
    // 1F67  ; [.2047.0020.0002][.0000.0023.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f67 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_012)
{
    // 1F68  ; [.2047.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI

    uint32_t const cps[1] = { 0x1f68 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_013)
{
    // 1F69  ; [.2047.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA

    uint32_t const cps[1] = { 0x1f69 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_014)
{
    // 1F6A  ; [.2047.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f6a };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_015)
{
    // 1F6B  ; [.2047.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f6b };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_016)
{
    // 1F6C  ; [.2047.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f6c };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_017)
{
    // 1F6D  ; [.2047.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f6d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_018)
{
    // 1F6E  ; [.2047.0020.0008][.0000.0022.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f6e };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_019)
{
    // 1F6F  ; [.2047.0020.0008][.0000.0023.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f6f };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_020)
{
    // 1F70  ; [.201F.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ALPHA WITH VARIA

    uint32_t const cps[1] = { 0x1f70 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_021)
{
    // 1F71  ; [.201F.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ALPHA WITH OXIA

    uint32_t const cps[1] = { 0x1f71 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_022)
{
    // 1F72  ; [.2024.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER EPSILON WITH VARIA

    uint32_t const cps[1] = { 0x1f72 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_023)
{
    // 1F73  ; [.2024.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER EPSILON WITH OXIA

    uint32_t const cps[1] = { 0x1f73 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_024)
{
    // 1F74  ; [.202A.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ETA WITH VARIA

    uint32_t const cps[1] = { 0x1f74 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_025)
{
    // 1F75  ; [.202A.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ETA WITH OXIA

    uint32_t const cps[1] = { 0x1f75 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_026)
{
    // 1F76  ; [.202C.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER IOTA WITH VARIA

    uint32_t const cps[1] = { 0x1f76 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_027)
{
    // 1F77  ; [.202C.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH OXIA

    uint32_t const cps[1] = { 0x1f77 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_028)
{
    // 1F78  ; [.2034.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMICRON WITH VARIA

    uint32_t const cps[1] = { 0x1f78 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_029)
{
    // 1F79  ; [.2034.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMICRON WITH OXIA

    uint32_t const cps[1] = { 0x1f79 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_030)
{
    // 1F7A  ; [.2042.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER UPSILON WITH VARIA

    uint32_t const cps[1] = { 0x1f7a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_031)
{
    // 1F7B  ; [.2042.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH OXIA

    uint32_t const cps[1] = { 0x1f7b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_032)
{
    // 1F7C  ; [.2047.0020.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMEGA WITH VARIA

    uint32_t const cps[1] = { 0x1f7c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_033)
{
    // 1F7D  ; [.2047.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMEGA WITH OXIA

    uint32_t const cps[1] = { 0x1f7d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_034)
{
    // 1F80  ; [.201F.0020.0002][.0000.0022.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f80 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_035)
{
    // 1F81  ; [.201F.0020.0002][.0000.0023.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f81 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_036)
{
    // 1F82  ; [.201F.0020.0002][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f82 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_037)
{
    // 1F83  ; [.201F.0020.0002][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f83 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_038)
{
    // 1F84  ; [.201F.0020.0002][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f84 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_039)
{
    // 1F85  ; [.201F.0020.0002][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f85 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_040)
{
    // 1F86  ; [.201F.0020.0002][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f86 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_041)
{
    // 1F87  ; [.201F.0020.0002][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f87 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_042)
{
    // 1F88  ; [.201F.0020.0008][.0000.0022.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f88 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_043)
{
    // 1F89  ; [.201F.0020.0008][.0000.0023.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f89 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_044)
{
    // 1F8A  ; [.201F.0020.0008][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8a };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_045)
{
    // 1F8B  ; [.201F.0020.0008][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8b };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_046)
{
    // 1F8C  ; [.201F.0020.0008][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8c };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_047)
{
    // 1F8D  ; [.201F.0020.0008][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8d };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_048)
{
    // 1F8E  ; [.201F.0020.0008][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8e };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_049)
{
    // 1F8F  ; [.201F.0020.0008][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f8f };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_050)
{
    // 1F90  ; [.202A.0020.0002][.0000.0022.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f90 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_051)
{
    // 1F91  ; [.202A.0020.0002][.0000.0023.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f91 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_052)
{
    // 1F92  ; [.202A.0020.0002][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f92 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_053)
{
    // 1F93  ; [.202A.0020.0002][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f93 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_054)
{
    // 1F94  ; [.202A.0020.0002][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f94 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_055)
{
    // 1F95  ; [.202A.0020.0002][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f95 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_056)
{
    // 1F96  ; [.202A.0020.0002][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f96 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_057)
{
    // 1F97  ; [.202A.0020.0002][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1f97 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_058)
{
    // 1F98  ; [.202A.0020.0008][.0000.0022.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f98 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_059)
{
    // 1F99  ; [.202A.0020.0008][.0000.0023.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f99 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_060)
{
    // 1F9A  ; [.202A.0020.0008][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9a };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_061)
{
    // 1F9B  ; [.202A.0020.0008][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9b };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_062)
{
    // 1F9C  ; [.202A.0020.0008][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9c };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_063)
{
    // 1F9D  ; [.202A.0020.0008][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9d };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_064)
{
    // 1F9E  ; [.202A.0020.0008][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9e };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_065)
{
    // 1F9F  ; [.202A.0020.0008][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1f9f };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_066)
{
    // 1FA0  ; [.2047.0020.0002][.0000.0022.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa0 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_067)
{
    // 1FA1  ; [.2047.0020.0002][.0000.0023.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa1 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_068)
{
    // 1FA2  ; [.2047.0020.0002][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa2 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_069)
{
    // 1FA3  ; [.2047.0020.0002][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa3 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_070)
{
    // 1FA4  ; [.2047.0020.0002][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa4 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_071)
{
    // 1FA5  ; [.2047.0020.0002][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa5 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_072)
{
    // 1FA6  ; [.2047.0020.0002][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa6 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_073)
{
    // 1FA7  ; [.2047.0020.0002][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa7 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_074)
{
    // 1FA8  ; [.2047.0020.0008][.0000.0022.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa8 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_075)
{
    // 1FA9  ; [.2047.0020.0008][.0000.0023.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fa9 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_076)
{
    // 1FAA  ; [.2047.0020.0008][.0000.0022.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1faa };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_077)
{
    // 1FAB  ; [.2047.0020.0008][.0000.0023.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fab };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_078)
{
    // 1FAC  ; [.2047.0020.0008][.0000.0022.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fac };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_079)
{
    // 1FAD  ; [.2047.0020.0008][.0000.0023.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fad };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_080)
{
    // 1FAE  ; [.2047.0020.0008][.0000.0022.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fae };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_081)
{
    // 1FAF  ; [.2047.0020.0008][.0000.0023.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1faf };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_051_082)
{
    // 1FB0  ; [.201F.0020.0002][.0000.0026.0002] 
    // GREEK SMALL LETTER ALPHA WITH VRACHY

    uint32_t const cps[1] = { 0x1fb0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_083)
{
    // 1FB1  ; [.201F.0020.0002][.0000.0032.0002] 
    // GREEK SMALL LETTER ALPHA WITH MACRON

    uint32_t const cps[1] = { 0x1fb1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_084)
{
    // 1FB2  ; [.201F.0020.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fb2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_085)
{
    // 1FB3  ; [.201F.0020.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fb3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_086)
{
    // 1FB4  ; [.201F.0020.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fb4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_087)
{
    // 1FB6  ; [.201F.0020.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ALPHA WITH PERISPOMENI

    uint32_t const cps[1] = { 0x1fb6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_088)
{
    // 1FB7  ; [.201F.0020.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fb7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_089)
{
    // 1FB8  ; [.201F.0020.0008][.0000.0026.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH VRACHY

    uint32_t const cps[1] = { 0x1fb8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_090)
{
    // 1FB9  ; [.201F.0020.0008][.0000.0032.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH MACRON

    uint32_t const cps[1] = { 0x1fb9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_091)
{
    // 1FBA  ; [.201F.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH VARIA

    uint32_t const cps[1] = { 0x1fba };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_092)
{
    // 1FBB  ; [.201F.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH OXIA

    uint32_t const cps[1] = { 0x1fbb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_093)
{
    // 1FBC  ; [.201F.0020.0008][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fbc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_094)
{
    // 1FBD  ; [*04A4.0020.0002] 
    // GREEK KORONIS

    uint32_t const cps[1] = { 0x1fbd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_051_095)
{
    // 1FBE  ; [.202C.0020.0002] 
    // GREEK PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_051_096)
{
    // 1FBF  ; [*04A4.0020.0002] 
    // GREEK PSILI

    uint32_t const cps[1] = { 0x1fbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_051_097)
{
    // 1FC0  ; [*04A6.0020.0002] 
    // GREEK PERISPOMENI

    uint32_t const cps[1] = { 0x1fc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_051_098)
{
    // 1FC1  ; [*049F.0020.0002][.0000.002A.0002] 
    // GREEK DIALYTIKA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1fc1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x49f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_099)
{
    // 1FC2  ; [.202A.0020.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fc2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_100)
{
    // 1FC3  ; [.202A.0020.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fc3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_101)
{
    // 1FC4  ; [.202A.0020.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fc4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_102)
{
    // 1FC6  ; [.202A.0020.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ETA WITH PERISPOMENI

    uint32_t const cps[1] = { 0x1fc6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_103)
{
    // 1FC7  ; [.202A.0020.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1fc7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_104)
{
    // 1FC8  ; [.2024.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH VARIA

    uint32_t const cps[1] = { 0x1fc8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_105)
{
    // 1FC9  ; [.2024.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH OXIA

    uint32_t const cps[1] = { 0x1fc9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_106)
{
    // 1FCA  ; [.202A.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ETA WITH VARIA

    uint32_t const cps[1] = { 0x1fca };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_107)
{
    // 1FCB  ; [.202A.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ETA WITH OXIA

    uint32_t const cps[1] = { 0x1fcb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_108)
{
    // 1FCC  ; [.202A.0020.0008][.0000.004C.0002] 
    // GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1fcc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_109)
{
    // 1FCD  ; [*04A4.0020.0002][.0000.0025.0002] 
    // GREEK PSILI AND VARIA

    uint32_t const cps[1] = { 0x1fcd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_110)
{
    // 1FCE  ; [*04A4.0020.0002][.0000.0024.0002] 
    // GREEK PSILI AND OXIA

    uint32_t const cps[1] = { 0x1fce };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_111)
{
    // 1FCF  ; [*04A4.0020.0002][.0000.002A.0002] 
    // GREEK PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1fcf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_112)
{
    // 1FD0  ; [.202C.0020.0002][.0000.0026.0002] 
    // GREEK SMALL LETTER IOTA WITH VRACHY

    uint32_t const cps[1] = { 0x1fd0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_113)
{
    // 1FD1  ; [.202C.0020.0002][.0000.0032.0002] 
    // GREEK SMALL LETTER IOTA WITH MACRON

    uint32_t const cps[1] = { 0x1fd1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_114)
{
    // 1FD2  ; [.202C.0020.0002][.0000.002B.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA

    uint32_t const cps[1] = { 0x1fd2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_115)
{
    // 1FD3  ; [.202C.0020.0002][.0000.002B.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA

    uint32_t const cps[1] = { 0x1fd3 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_116)
{
    // 1FD6  ; [.202C.0020.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER IOTA WITH PERISPOMENI

    uint32_t const cps[1] = { 0x1fd6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_117)
{
    // 1FD7  ; [.202C.0020.0002][.0000.002B.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1fd7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_118)
{
    // 1FD8  ; [.202C.0020.0008][.0000.0026.0002] 
    // GREEK CAPITAL LETTER IOTA WITH VRACHY

    uint32_t const cps[1] = { 0x1fd8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_119)
{
    // 1FD9  ; [.202C.0020.0008][.0000.0032.0002] 
    // GREEK CAPITAL LETTER IOTA WITH MACRON

    uint32_t const cps[1] = { 0x1fd9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_120)
{
    // 1FDA  ; [.202C.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER IOTA WITH VARIA

    uint32_t const cps[1] = { 0x1fda };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_121)
{
    // 1FDB  ; [.202C.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER IOTA WITH OXIA

    uint32_t const cps[1] = { 0x1fdb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_122)
{
    // 1FDD  ; [*04A5.0020.0002][.0000.0025.0002] 
    // GREEK DASIA AND VARIA

    uint32_t const cps[1] = { 0x1fdd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_123)
{
    // 1FDE  ; [*04A5.0020.0002][.0000.0024.0002] 
    // GREEK DASIA AND OXIA

    uint32_t const cps[1] = { 0x1fde };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_124)
{
    // 1FDF  ; [*04A5.0020.0002][.0000.002A.0002] 
    // GREEK DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1fdf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_125)
{
    // 1FE0  ; [.2042.0020.0002][.0000.0026.0002] 
    // GREEK SMALL LETTER UPSILON WITH VRACHY

    uint32_t const cps[1] = { 0x1fe0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_126)
{
    // 1FE1  ; [.2042.0020.0002][.0000.0032.0002] 
    // GREEK SMALL LETTER UPSILON WITH MACRON

    uint32_t const cps[1] = { 0x1fe1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_127)
{
    // 1FE2  ; [.2042.0020.0002][.0000.002B.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA

    uint32_t const cps[1] = { 0x1fe2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_128)
{
    // 1FE3  ; [.2042.0020.0002][.0000.002B.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA

    uint32_t const cps[1] = { 0x1fe3 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_129)
{
    // 1FE4  ; [.203A.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER RHO WITH PSILI

    uint32_t const cps[1] = { 0x1fe4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_130)
{
    // 1FE5  ; [.203A.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER RHO WITH DASIA

    uint32_t const cps[1] = { 0x1fe5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_131)
{
    // 1FE6  ; [.2042.0020.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER UPSILON WITH PERISPOMENI

    uint32_t const cps[1] = { 0x1fe6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_132)
{
    // 1FE7  ; [.2042.0020.0002][.0000.002B.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1fe7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_133)
{
    // 1FE8  ; [.2042.0020.0008][.0000.0026.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH VRACHY

    uint32_t const cps[1] = { 0x1fe8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_134)
{
    // 1FE9  ; [.2042.0020.0008][.0000.0032.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH MACRON

    uint32_t const cps[1] = { 0x1fe9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_135)
{
    // 1FEA  ; [.2042.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH VARIA

    uint32_t const cps[1] = { 0x1fea };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_136)
{
    // 1FEB  ; [.2042.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH OXIA

    uint32_t const cps[1] = { 0x1feb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_137)
{
    // 1FEC  ; [.203A.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER RHO WITH DASIA

    uint32_t const cps[1] = { 0x1fec };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_138)
{
    // 1FED  ; [*049F.0020.0002][.0000.0025.0002] 
    // GREEK DIALYTIKA AND VARIA

    uint32_t const cps[1] = { 0x1fed };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x49f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_139)
{
    // 1FEE  ; [*049F.0020.0002][.0000.0024.0002] 
    // GREEK DIALYTIKA AND OXIA

    uint32_t const cps[1] = { 0x1fee };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x49f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_140)
{
    // 1FEF  ; [*0498.0020.0002] 
    // GREEK VARIA

    uint32_t const cps[1] = { 0x1fef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x498), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_051_141)
{
    // 1FF2  ; [.2047.0020.0002][.0000.0025.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1ff2 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_142)
{
    // 1FF3  ; [.2047.0020.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1ff3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_143)
{
    // 1FF4  ; [.2047.0020.0002][.0000.0024.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1ff4 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_144)
{
    // 1FF6  ; [.2047.0020.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER OMEGA WITH PERISPOMENI

    uint32_t const cps[1] = { 0x1ff6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_145)
{
    // 1FF7  ; [.2047.0020.0002][.0000.002A.0002][.0000.004C.0002] 
    // GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x1ff7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_051_146)
{
    // 1FF8  ; [.2034.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH VARIA

    uint32_t const cps[1] = { 0x1ff8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_147)
{
    // 1FF9  ; [.2034.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH OXIA

    uint32_t const cps[1] = { 0x1ff9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_148)
{
    // 1FFA  ; [.2047.0020.0008][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH VARIA

    uint32_t const cps[1] = { 0x1ffa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_051_149)
{
    // 1FFB  ; [.2047.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH OXIA

    uint32_t const cps[1] = { 0x1ffb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

