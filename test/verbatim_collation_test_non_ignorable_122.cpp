// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_122_000)
{
    // 1E78 0021;	
    // (Ṹ) LATIN CAPITAL LETTER U WITH TILDE AND ACUTE	[1F1B 0261 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E78, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_001)
{
    // 0173 0021;	
    // (ų) LATIN SMALL LETTER U WITH OGONEK	[1F1B 0261 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0173, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_002)
{
    // 0172 0021;	
    // (Ų) LATIN CAPITAL LETTER U WITH OGONEK	[1F1B 0261 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0172, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_003)
{
    // 016B 0021;	
    // (ū) LATIN SMALL LETTER U WITH MACRON	[1F1B 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016B, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_004)
{
    // 016A 0021;	
    // (Ū) LATIN CAPITAL LETTER U WITH MACRON	[1F1B 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016A, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_005)
{
    // 1E7B 0021;	
    // (ṻ) LATIN SMALL LETTER U WITH MACRON AND DIAERESIS	[1F1B 0261 | 0020 0032 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7B, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_006)
{
    // 1E7A 0021;	
    // (Ṻ) LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS	[1F1B 0261 | 0020 0032 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7A, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_007)
{
    // 1DF0 0021;	
    // (ᷰ) COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE	[1F1B 0261 | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF0, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_008)
{
    // 1EE7 0021;	
    // (ủ) LATIN SMALL LETTER U WITH HOOK ABOVE	[1F1B 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE7, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_009)
{
    // 1EE6 0021;	
    // (Ủ) LATIN CAPITAL LETTER U WITH HOOK ABOVE	[1F1B 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE6, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_010)
{
    // 0215 0021;	
    // (ȕ) LATIN SMALL LETTER U WITH DOUBLE GRAVE	[1F1B 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0215, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_011)
{
    // 0214 0021;	
    // (Ȕ) LATIN CAPITAL LETTER U WITH DOUBLE GRAVE	[1F1B 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0214, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_012)
{
    // 0217 0021;	
    // (ȗ) LATIN SMALL LETTER U WITH INVERTED BREVE	[1F1B 0261 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0217, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_013)
{
    // 0216 0021;	
    // (Ȗ) LATIN CAPITAL LETTER U WITH INVERTED BREVE	[1F1B 0261 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0216, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_014)
{
    // 01B0 0021;	
    // (ư) LATIN SMALL LETTER U WITH HORN	[1F1B 0261 | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01B0, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_015)
{
    // 01AF 0021;	
    // (Ư) LATIN CAPITAL LETTER U WITH HORN	[1F1B 0261 | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01AF, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_016)
{
    // 1EE9 0021;	
    // (ứ) LATIN SMALL LETTER U WITH HORN AND ACUTE	[1F1B 0261 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE9, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_017)
{
    // 1EE8 0021;	
    // (Ứ) LATIN CAPITAL LETTER U WITH HORN AND ACUTE	[1F1B 0261 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE8, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_018)
{
    // 1EEB 0021;	
    // (ừ) LATIN SMALL LETTER U WITH HORN AND GRAVE	[1F1B 0261 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEB, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_019)
{
    // 1EEA 0021;	
    // (Ừ) LATIN CAPITAL LETTER U WITH HORN AND GRAVE	[1F1B 0261 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEA, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_020)
{
    // 1EEF 0021;	
    // (ữ) LATIN SMALL LETTER U WITH HORN AND TILDE	[1F1B 0261 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEF, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_021)
{
    // 1EEE 0021;	
    // (Ữ) LATIN CAPITAL LETTER U WITH HORN AND TILDE	[1F1B 0261 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEE, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_022)
{
    // 1EED 0021;	
    // (ử) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 0261 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EED, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_023)
{
    // 1EEC 0021;	
    // (Ử) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 0261 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEC, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_024)
{
    // 1EF1 0021;	
    // (ự) LATIN SMALL LETTER U WITH HORN AND DOT BELOW	[1F1B 0261 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF1, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_025)
{
    // 1EF0 0021;	
    // (Ự) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW	[1F1B 0261 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF0, 0x0021 };
    uint32_t const ces[13] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_026)
{
    // 1EE5 0021;	
    // (ụ) LATIN SMALL LETTER U WITH DOT BELOW	[1F1B 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE5, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_027)
{
    // 1EE4 0021;	
    // (Ụ) LATIN CAPITAL LETTER U WITH DOT BELOW	[1F1B 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE4, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_028)
{
    // 1E73 0021;	
    // (ṳ) LATIN SMALL LETTER U WITH DIAERESIS BELOW	[1F1B 0261 | 0020 0043 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E73, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_029)
{
    // 1E72 0021;	
    // (Ṳ) LATIN CAPITAL LETTER U WITH DIAERESIS BELOW	[1F1B 0261 | 0020 0043 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E72, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_030)
{
    // 1E77 0021;	
    // (ṷ) LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 0261 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E77, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_031)
{
    // 1E76 0021;	
    // (Ṷ) LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 0261 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E76, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_032)
{
    // 1E75 0021;	
    // (ṵ) LATIN SMALL LETTER U WITH TILDE BELOW	[1F1B 0261 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E75, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_033)
{
    // 1E74 0021;	
    // (Ṵ) LATIN CAPITAL LETTER U WITH TILDE BELOW	[1F1B 0261 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E74, 0x0021 };
    uint32_t const ces[11] = { 0x1F1B, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_034)
{
    // 0075 003F;	
    // (u) LATIN SMALL LETTER U	[1F1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0075, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_035)
{
    // FF55 003F;	
    // (ｕ) FULLWIDTH LATIN SMALL LETTER U	[1F1B 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF55, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_036)
{
    // 0367 003F;	
    // (ͧ) COMBINING LATIN SMALL LETTER U	[1F1B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0367, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_037)
{
    // 1D42E 003F;	
    // (𝐮) MATHEMATICAL BOLD SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42E, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_038)
{
    // 1D462 003F;	
    // (𝑢) MATHEMATICAL ITALIC SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D462, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_039)
{
    // 1D496 003F;	
    // (𝒖) MATHEMATICAL BOLD ITALIC SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D496, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_040)
{
    // 1D4CA 003F;	
    // (𝓊) MATHEMATICAL SCRIPT SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CA, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_041)
{
    // 1D4FE 003F;	
    // (𝓾) MATHEMATICAL BOLD SCRIPT SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FE, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_042)
{
    // 1D532 003F;	
    // (𝔲) MATHEMATICAL FRAKTUR SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D532, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_043)
{
    // 1D566 003F;	
    // (𝕦) MATHEMATICAL DOUBLE-STRUCK SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D566, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_044)
{
    // 1D59A 003F;	
    // (𝖚) MATHEMATICAL BOLD FRAKTUR SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59A, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_045)
{
    // 1D5CE 003F;	
    // (𝗎) MATHEMATICAL SANS-SERIF SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CE, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_046)
{
    // 1D602 003F;	
    // (𝘂) MATHEMATICAL SANS-SERIF BOLD SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D602, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_047)
{
    // 1D636 003F;	
    // (𝘶) MATHEMATICAL SANS-SERIF ITALIC SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D636, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_048)
{
    // 1D66A 003F;	
    // (𝙪) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66A, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_049)
{
    // 1D69E 003F;	
    // (𝚞) MATHEMATICAL MONOSPACE SMALL U	[1F1B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69E, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_050)
{
    // 24E4 003F;	
    // (ⓤ) CIRCLED LATIN SMALL LETTER U	[1F1B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E4, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_051)
{
    // 0055 003F;	
    // (U) LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0055, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_052)
{
    // FF35 003F;	
    // (Ｕ) FULLWIDTH LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF35, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_053)
{
    // 1D414 003F;	
    // (𝐔) MATHEMATICAL BOLD CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D414, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_054)
{
    // 1D448 003F;	
    // (𝑈) MATHEMATICAL ITALIC CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D448, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_055)
{
    // 1D47C 003F;	
    // (𝑼) MATHEMATICAL BOLD ITALIC CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47C, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_056)
{
    // 1D4B0 003F;	
    // (𝒰) MATHEMATICAL SCRIPT CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B0, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_057)
{
    // 1D4E4 003F;	
    // (𝓤) MATHEMATICAL BOLD SCRIPT CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E4, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_058)
{
    // 1D518 003F;	
    // (𝔘) MATHEMATICAL FRAKTUR CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D518, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_059)
{
    // 1D54C 003F;	
    // (𝕌) MATHEMATICAL DOUBLE-STRUCK CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54C, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_060)
{
    // 1D580 003F;	
    // (𝖀) MATHEMATICAL BOLD FRAKTUR CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D580, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_061)
{
    // 1D5B4 003F;	
    // (𝖴) MATHEMATICAL SANS-SERIF CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B4, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_062)
{
    // 1D5E8 003F;	
    // (𝗨) MATHEMATICAL SANS-SERIF BOLD CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E8, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_063)
{
    // 1D61C 003F;	
    // (𝘜) MATHEMATICAL SANS-SERIF ITALIC CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61C, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_064)
{
    // 1D650 003F;	
    // (𝙐) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D650, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_065)
{
    // 1D684 003F;	
    // (𝚄) MATHEMATICAL MONOSPACE CAPITAL U	[1F1B 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D684, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_066)
{
    // 24CA 003F;	
    // (Ⓤ) CIRCLED LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CA, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_067)
{
    // 1F164 003F;	
    // (🅤) NEGATIVE CIRCLED LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F164, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_068)
{
    // 1D58 003F;	
    // (ᵘ) MODIFIER LETTER SMALL U	[1F1B 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D58, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_069)
{
    // 1D64 003F;	
    // (ᵤ) LATIN SUBSCRIPT SMALL LETTER U	[1F1B 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D64, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_070)
{
    // 1D41 003F;	
    // (ᵁ) MODIFIER LETTER CAPITAL U	[1F1B 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D41, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_071)
{
    // 1F144 003F;	
    // (🅄) SQUARED LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F144, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_072)
{
    // 1F184 003F;	
    // (🆄) NEGATIVE SQUARED LATIN CAPITAL LETTER U	[1F1B 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F184, 0x003F };
    uint32_t const ces[9] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_073)
{
    // 00FA 003F;	
    // (ú) LATIN SMALL LETTER U WITH ACUTE	[1F1B 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FA, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_074)
{
    // 00DA 003F;	
    // (Ú) LATIN CAPITAL LETTER U WITH ACUTE	[1F1B 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DA, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_075)
{
    // 00F9 003F;	
    // (ù) LATIN SMALL LETTER U WITH GRAVE	[1F1B 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F9, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_076)
{
    // 00D9 003F;	
    // (Ù) LATIN CAPITAL LETTER U WITH GRAVE	[1F1B 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D9, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_077)
{
    // 016D 003F;	
    // (ŭ) LATIN SMALL LETTER U WITH BREVE	[1F1B 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016D, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_078)
{
    // 016C 003F;	
    // (Ŭ) LATIN CAPITAL LETTER U WITH BREVE	[1F1B 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016C, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_079)
{
    // 00FB 003F;	
    // (û) LATIN SMALL LETTER U WITH CIRCUMFLEX	[1F1B 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FB, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_080)
{
    // 00DB 003F;	
    // (Û) LATIN CAPITAL LETTER U WITH CIRCUMFLEX	[1F1B 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DB, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_081)
{
    // 01D4 003F;	
    // (ǔ) LATIN SMALL LETTER U WITH CARON	[1F1B 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D4, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_082)
{
    // 01D3 003F;	
    // (Ǔ) LATIN CAPITAL LETTER U WITH CARON	[1F1B 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D3, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_083)
{
    // 016F 003F;	
    // (ů) LATIN SMALL LETTER U WITH RING ABOVE	[1F1B 0267 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016F, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_084)
{
    // 016E 003F;	
    // (Ů) LATIN CAPITAL LETTER U WITH RING ABOVE	[1F1B 0267 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016E, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_085)
{
    // 00FC 003F;	
    // (ü) LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FC, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_086)
{
    // 1DF4 003F;	
    // (ᷴ) COMBINING LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF4, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_087)
{
    // A79F 003F;	
    // (ꞟ) LATIN SMALL LETTER VOLAPUK UE	[1F1B 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79F, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_088)
{
    // 00DC 003F;	
    // (Ü) LATIN CAPITAL LETTER U WITH DIAERESIS	[1F1B 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DC, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_089)
{
    // A79E 003F;	
    // (Ꞟ) LATIN CAPITAL LETTER VOLAPUK UE	[1F1B 0267 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79E, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_090)
{
    // 01D8 003F;	
    // (ǘ) LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D8, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_091)
{
    // 01D7 003F;	
    // (Ǘ) LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 0267 | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D7, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_092)
{
    // 01DC 003F;	
    // (ǜ) LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 0267 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DC, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_093)
{
    // 01DB 003F;	
    // (Ǜ) LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 0267 | 0020 002B 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DB, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_094)
{
    // 01DA 003F;	
    // (ǚ) LATIN SMALL LETTER U WITH DIAERESIS AND CARON	[1F1B 0267 | 0020 002B 0028 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DA, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_095)
{
    // 01D9 003F;	
    // (Ǚ) LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON	[1F1B 0267 | 0020 002B 0028 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D9, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_096)
{
    // 01D6 003F;	
    // (ǖ) LATIN SMALL LETTER U WITH DIAERESIS AND MACRON	[1F1B 0267 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D6, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_097)
{
    // 01D5 003F;	
    // (Ǖ) LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON	[1F1B 0267 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D5, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_098)
{
    // 0171 003F;	
    // (ű) LATIN SMALL LETTER U WITH DOUBLE ACUTE	[1F1B 0267 | 0020 002C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0171, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_099)
{
    // 0170 003F;	
    // (Ű) LATIN CAPITAL LETTER U WITH DOUBLE ACUTE	[1F1B 0267 | 0020 002C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0170, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_100)
{
    // 0169 003F;	
    // (ũ) LATIN SMALL LETTER U WITH TILDE	[1F1B 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0169, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_101)
{
    // 0168 003F;	
    // (Ũ) LATIN CAPITAL LETTER U WITH TILDE	[1F1B 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0168, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_102)
{
    // 1E79 003F;	
    // (ṹ) LATIN SMALL LETTER U WITH TILDE AND ACUTE	[1F1B 0267 | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E79, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_103)
{
    // 1E78 003F;	
    // (Ṹ) LATIN CAPITAL LETTER U WITH TILDE AND ACUTE	[1F1B 0267 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E78, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_104)
{
    // 0173 003F;	
    // (ų) LATIN SMALL LETTER U WITH OGONEK	[1F1B 0267 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0173, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_105)
{
    // 0172 003F;	
    // (Ų) LATIN CAPITAL LETTER U WITH OGONEK	[1F1B 0267 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0172, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_106)
{
    // 016B 003F;	
    // (ū) LATIN SMALL LETTER U WITH MACRON	[1F1B 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016B, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_107)
{
    // 016A 003F;	
    // (Ū) LATIN CAPITAL LETTER U WITH MACRON	[1F1B 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016A, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_108)
{
    // 1E7B 003F;	
    // (ṻ) LATIN SMALL LETTER U WITH MACRON AND DIAERESIS	[1F1B 0267 | 0020 0032 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7B, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_109)
{
    // 1E7A 003F;	
    // (Ṻ) LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS	[1F1B 0267 | 0020 0032 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7A, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_110)
{
    // 1DF0 003F;	
    // (ᷰ) COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE	[1F1B 0267 | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF0, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_111)
{
    // 1EE7 003F;	
    // (ủ) LATIN SMALL LETTER U WITH HOOK ABOVE	[1F1B 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE7, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_112)
{
    // 1EE6 003F;	
    // (Ủ) LATIN CAPITAL LETTER U WITH HOOK ABOVE	[1F1B 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE6, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_113)
{
    // 0215 003F;	
    // (ȕ) LATIN SMALL LETTER U WITH DOUBLE GRAVE	[1F1B 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0215, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_114)
{
    // 0214 003F;	
    // (Ȕ) LATIN CAPITAL LETTER U WITH DOUBLE GRAVE	[1F1B 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0214, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_115)
{
    // 0217 003F;	
    // (ȗ) LATIN SMALL LETTER U WITH INVERTED BREVE	[1F1B 0267 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0217, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_116)
{
    // 0216 003F;	
    // (Ȗ) LATIN CAPITAL LETTER U WITH INVERTED BREVE	[1F1B 0267 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0216, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_117)
{
    // 01B0 003F;	
    // (ư) LATIN SMALL LETTER U WITH HORN	[1F1B 0267 | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01B0, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_118)
{
    // 01AF 003F;	
    // (Ư) LATIN CAPITAL LETTER U WITH HORN	[1F1B 0267 | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01AF, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_119)
{
    // 1EE9 003F;	
    // (ứ) LATIN SMALL LETTER U WITH HORN AND ACUTE	[1F1B 0267 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE9, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_120)
{
    // 1EE8 003F;	
    // (Ứ) LATIN CAPITAL LETTER U WITH HORN AND ACUTE	[1F1B 0267 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE8, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_121)
{
    // 1EEB 003F;	
    // (ừ) LATIN SMALL LETTER U WITH HORN AND GRAVE	[1F1B 0267 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEB, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_122)
{
    // 1EEA 003F;	
    // (Ừ) LATIN CAPITAL LETTER U WITH HORN AND GRAVE	[1F1B 0267 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEA, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_123)
{
    // 1EEF 003F;	
    // (ữ) LATIN SMALL LETTER U WITH HORN AND TILDE	[1F1B 0267 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEF, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_124)
{
    // 1EEE 003F;	
    // (Ữ) LATIN CAPITAL LETTER U WITH HORN AND TILDE	[1F1B 0267 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEE, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_125)
{
    // 1EED 003F;	
    // (ử) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 0267 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EED, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_126)
{
    // 1EEC 003F;	
    // (Ử) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 0267 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEC, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_127)
{
    // 1EF1 003F;	
    // (ự) LATIN SMALL LETTER U WITH HORN AND DOT BELOW	[1F1B 0267 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF1, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_128)
{
    // 1EF0 003F;	
    // (Ự) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW	[1F1B 0267 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF0, 0x003F };
    uint32_t const ces[13] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_129)
{
    // 1EE5 003F;	
    // (ụ) LATIN SMALL LETTER U WITH DOT BELOW	[1F1B 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE5, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_130)
{
    // 1EE4 003F;	
    // (Ụ) LATIN CAPITAL LETTER U WITH DOT BELOW	[1F1B 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE4, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_131)
{
    // 1E73 003F;	
    // (ṳ) LATIN SMALL LETTER U WITH DIAERESIS BELOW	[1F1B 0267 | 0020 0043 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E73, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_132)
{
    // 1E72 003F;	
    // (Ṳ) LATIN CAPITAL LETTER U WITH DIAERESIS BELOW	[1F1B 0267 | 0020 0043 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E72, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_133)
{
    // 1E77 003F;	
    // (ṷ) LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 0267 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E77, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_134)
{
    // 1E76 003F;	
    // (Ṷ) LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 0267 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E76, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_135)
{
    // 1E75 003F;	
    // (ṵ) LATIN SMALL LETTER U WITH TILDE BELOW	[1F1B 0267 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E75, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_136)
{
    // 1E74 003F;	
    // (Ṵ) LATIN CAPITAL LETTER U WITH TILDE BELOW	[1F1B 0267 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E74, 0x003F };
    uint32_t const ces[11] = { 0x1F1B, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_137)
{
    // 0075 0061;	
    // (u) LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0075, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_138)
{
    // 0075 0041;	
    // (u) LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0075, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_139)
{
    // FF55 0061;	
    // (ｕ) FULLWIDTH LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF55, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_140)
{
    // FF55 0041;	
    // (ｕ) FULLWIDTH LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF55, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_141)
{
    // 0367 0061;	
    // (ͧ) COMBINING LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0367, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_142)
{
    // 0367 0041;	
    // (ͧ) COMBINING LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0367, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_143)
{
    // 1D42E 0061;	
    // (𝐮) MATHEMATICAL BOLD SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42E, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_144)
{
    // 1D462 0061;	
    // (𝑢) MATHEMATICAL ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D462, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_145)
{
    // 1D496 0061;	
    // (𝒖) MATHEMATICAL BOLD ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D496, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_146)
{
    // 1D4CA 0061;	
    // (𝓊) MATHEMATICAL SCRIPT SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CA, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_147)
{
    // 1D4FE 0061;	
    // (𝓾) MATHEMATICAL BOLD SCRIPT SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FE, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_148)
{
    // 1D532 0061;	
    // (𝔲) MATHEMATICAL FRAKTUR SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D532, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_149)
{
    // 1D566 0061;	
    // (𝕦) MATHEMATICAL DOUBLE-STRUCK SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D566, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_150)
{
    // 1D59A 0061;	
    // (𝖚) MATHEMATICAL BOLD FRAKTUR SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59A, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_151)
{
    // 1D5CE 0061;	
    // (𝗎) MATHEMATICAL SANS-SERIF SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CE, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_152)
{
    // 1D602 0061;	
    // (𝘂) MATHEMATICAL SANS-SERIF BOLD SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D602, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_153)
{
    // 1D636 0061;	
    // (𝘶) MATHEMATICAL SANS-SERIF ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D636, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_154)
{
    // 1D66A 0061;	
    // (𝙪) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66A, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_155)
{
    // 1D69E 0061;	
    // (𝚞) MATHEMATICAL MONOSPACE SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69E, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_156)
{
    // 1D42E 0041;	
    // (𝐮) MATHEMATICAL BOLD SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D42E, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_157)
{
    // 1D462 0041;	
    // (𝑢) MATHEMATICAL ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D462, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_158)
{
    // 1D496 0041;	
    // (𝒖) MATHEMATICAL BOLD ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D496, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_159)
{
    // 1D4CA 0041;	
    // (𝓊) MATHEMATICAL SCRIPT SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4CA, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_160)
{
    // 1D4FE 0041;	
    // (𝓾) MATHEMATICAL BOLD SCRIPT SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4FE, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_161)
{
    // 1D532 0041;	
    // (𝔲) MATHEMATICAL FRAKTUR SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D532, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_162)
{
    // 1D566 0041;	
    // (𝕦) MATHEMATICAL DOUBLE-STRUCK SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D566, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_163)
{
    // 1D59A 0041;	
    // (𝖚) MATHEMATICAL BOLD FRAKTUR SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D59A, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_164)
{
    // 1D5CE 0041;	
    // (𝗎) MATHEMATICAL SANS-SERIF SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5CE, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_165)
{
    // 1D602 0041;	
    // (𝘂) MATHEMATICAL SANS-SERIF BOLD SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D602, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_166)
{
    // 1D636 0041;	
    // (𝘶) MATHEMATICAL SANS-SERIF ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D636, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_167)
{
    // 1D66A 0041;	
    // (𝙪) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D66A, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_168)
{
    // 1D69E 0041;	
    // (𝚞) MATHEMATICAL MONOSPACE SMALL U	[1F1B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D69E, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_169)
{
    // 24E4 0061;	
    // (ⓤ) CIRCLED LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E4, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_170)
{
    // 24E4 0041;	
    // (ⓤ) CIRCLED LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24E4, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_171)
{
    // 0055 0061;	
    // (U) LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0055, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_172)
{
    // 0055 0041;	
    // (U) LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0055, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_173)
{
    // FF35 0061;	
    // (Ｕ) FULLWIDTH LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF35, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_174)
{
    // FF35 0041;	
    // (Ｕ) FULLWIDTH LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF35, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_175)
{
    // 1D414 0061;	
    // (𝐔) MATHEMATICAL BOLD CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D414, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_176)
{
    // 1D448 0061;	
    // (𝑈) MATHEMATICAL ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D448, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_177)
{
    // 1D47C 0061;	
    // (𝑼) MATHEMATICAL BOLD ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47C, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_178)
{
    // 1D4B0 0061;	
    // (𝒰) MATHEMATICAL SCRIPT CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B0, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_179)
{
    // 1D4E4 0061;	
    // (𝓤) MATHEMATICAL BOLD SCRIPT CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E4, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_180)
{
    // 1D518 0061;	
    // (𝔘) MATHEMATICAL FRAKTUR CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D518, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_181)
{
    // 1D54C 0061;	
    // (𝕌) MATHEMATICAL DOUBLE-STRUCK CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54C, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_182)
{
    // 1D580 0061;	
    // (𝖀) MATHEMATICAL BOLD FRAKTUR CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D580, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_183)
{
    // 1D5B4 0061;	
    // (𝖴) MATHEMATICAL SANS-SERIF CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B4, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_184)
{
    // 1D5E8 0061;	
    // (𝗨) MATHEMATICAL SANS-SERIF BOLD CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E8, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_185)
{
    // 1D61C 0061;	
    // (𝘜) MATHEMATICAL SANS-SERIF ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61C, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_186)
{
    // 1D650 0061;	
    // (𝙐) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D650, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_187)
{
    // 1D684 0061;	
    // (𝚄) MATHEMATICAL MONOSPACE CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D684, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_188)
{
    // 1D414 0041;	
    // (𝐔) MATHEMATICAL BOLD CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D414, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_189)
{
    // 1D448 0041;	
    // (𝑈) MATHEMATICAL ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D448, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_190)
{
    // 1D47C 0041;	
    // (𝑼) MATHEMATICAL BOLD ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D47C, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_191)
{
    // 1D4B0 0041;	
    // (𝒰) MATHEMATICAL SCRIPT CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4B0, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_192)
{
    // 1D4E4 0041;	
    // (𝓤) MATHEMATICAL BOLD SCRIPT CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4E4, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_193)
{
    // 1D518 0041;	
    // (𝔘) MATHEMATICAL FRAKTUR CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D518, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_194)
{
    // 1D54C 0041;	
    // (𝕌) MATHEMATICAL DOUBLE-STRUCK CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D54C, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_195)
{
    // 1D580 0041;	
    // (𝖀) MATHEMATICAL BOLD FRAKTUR CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D580, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_196)
{
    // 1D5B4 0041;	
    // (𝖴) MATHEMATICAL SANS-SERIF CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5B4, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_197)
{
    // 1D5E8 0041;	
    // (𝗨) MATHEMATICAL SANS-SERIF BOLD CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5E8, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_198)
{
    // 1D61C 0041;	
    // (𝘜) MATHEMATICAL SANS-SERIF ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D61C, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_199)
{
    // 1D650 0041;	
    // (𝙐) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D650, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_200)
{
    // 1D684 0041;	
    // (𝚄) MATHEMATICAL MONOSPACE CAPITAL U	[1F1B 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D684, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_201)
{
    // 24CA 0061;	
    // (Ⓤ) CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CA, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_202)
{
    // 1F164 0061;	
    // (🅤) NEGATIVE CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F164, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_203)
{
    // 24CA 0041;	
    // (Ⓤ) CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24CA, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_204)
{
    // 1F164 0041;	
    // (🅤) NEGATIVE CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F164, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_205)
{
    // 1D58 0061;	
    // (ᵘ) MODIFIER LETTER SMALL U	[1F1B 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D58, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_206)
{
    // 1D58 0041;	
    // (ᵘ) MODIFIER LETTER SMALL U	[1F1B 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D58, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_207)
{
    // 1D64 0061;	
    // (ᵤ) LATIN SUBSCRIPT SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D64, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_208)
{
    // 1D64 0041;	
    // (ᵤ) LATIN SUBSCRIPT SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x1D64, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_209)
{
    // 1D41 0061;	
    // (ᵁ) MODIFIER LETTER CAPITAL U	[1F1B 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D41, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_210)
{
    // 1F144 0061;	
    // (🅄) SQUARED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F144, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_211)
{
    // 1F184 0061;	
    // (🆄) NEGATIVE SQUARED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F184, 0x0061 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_212)
{
    // 1D41 0041;	
    // (ᵁ) MODIFIER LETTER CAPITAL U	[1F1B 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D41, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_213)
{
    // 1F144 0041;	
    // (🅄) SQUARED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F144, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_214)
{
    // 1F184 0041;	
    // (🆄) NEGATIVE SQUARED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F184, 0x0041 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_215)
{
    // 00FA 0061;	
    // (ú) LATIN SMALL LETTER U WITH ACUTE	[1F1B 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FA, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_216)
{
    // 00FA 0041;	
    // (ú) LATIN SMALL LETTER U WITH ACUTE	[1F1B 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00FA, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_217)
{
    // 00DA 0061;	
    // (Ú) LATIN CAPITAL LETTER U WITH ACUTE	[1F1B 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DA, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_218)
{
    // 00DA 0041;	
    // (Ú) LATIN CAPITAL LETTER U WITH ACUTE	[1F1B 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00DA, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_219)
{
    // 00F9 0061;	
    // (ù) LATIN SMALL LETTER U WITH GRAVE	[1F1B 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F9, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_220)
{
    // 00F9 0041;	
    // (ù) LATIN SMALL LETTER U WITH GRAVE	[1F1B 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00F9, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_221)
{
    // 00D9 0061;	
    // (Ù) LATIN CAPITAL LETTER U WITH GRAVE	[1F1B 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D9, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_222)
{
    // 00D9 0041;	
    // (Ù) LATIN CAPITAL LETTER U WITH GRAVE	[1F1B 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00D9, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_223)
{
    // 016D 0061;	
    // (ŭ) LATIN SMALL LETTER U WITH BREVE	[1F1B 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016D, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_224)
{
    // 016D 0041;	
    // (ŭ) LATIN SMALL LETTER U WITH BREVE	[1F1B 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x016D, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_225)
{
    // 016C 0061;	
    // (Ŭ) LATIN CAPITAL LETTER U WITH BREVE	[1F1B 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016C, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_226)
{
    // 016C 0041;	
    // (Ŭ) LATIN CAPITAL LETTER U WITH BREVE	[1F1B 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x016C, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_227)
{
    // 00FB 0061;	
    // (û) LATIN SMALL LETTER U WITH CIRCUMFLEX	[1F1B 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FB, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_228)
{
    // 00FB 0041;	
    // (û) LATIN SMALL LETTER U WITH CIRCUMFLEX	[1F1B 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00FB, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_229)
{
    // 00DB 0061;	
    // (Û) LATIN CAPITAL LETTER U WITH CIRCUMFLEX	[1F1B 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DB, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_230)
{
    // 00DB 0041;	
    // (Û) LATIN CAPITAL LETTER U WITH CIRCUMFLEX	[1F1B 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00DB, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_231)
{
    // 01D4 0061;	
    // (ǔ) LATIN SMALL LETTER U WITH CARON	[1F1B 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D4, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_232)
{
    // 01D4 0041;	
    // (ǔ) LATIN SMALL LETTER U WITH CARON	[1F1B 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D4, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_233)
{
    // 01D3 0061;	
    // (Ǔ) LATIN CAPITAL LETTER U WITH CARON	[1F1B 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D3, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_234)
{
    // 01D3 0041;	
    // (Ǔ) LATIN CAPITAL LETTER U WITH CARON	[1F1B 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01D3, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_235)
{
    // 016F 0061;	
    // (ů) LATIN SMALL LETTER U WITH RING ABOVE	[1F1B 1CAD | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016F, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_236)
{
    // 016F 0041;	
    // (ů) LATIN SMALL LETTER U WITH RING ABOVE	[1F1B 1CAD | 0020 0029 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x016F, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_237)
{
    // 016E 0061;	
    // (Ů) LATIN CAPITAL LETTER U WITH RING ABOVE	[1F1B 1CAD | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016E, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_238)
{
    // 016E 0041;	
    // (Ů) LATIN CAPITAL LETTER U WITH RING ABOVE	[1F1B 1CAD | 0020 0029 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x016E, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_239)
{
    // 00FC 0061;	
    // (ü) LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FC, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_240)
{
    // 00FC 0041;	
    // (ü) LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00FC, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_241)
{
    // 1DF4 0061;	
    // (ᷴ) COMBINING LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF4, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_242)
{
    // A79F 0061;	
    // (ꞟ) LATIN SMALL LETTER VOLAPUK UE	[1F1B 1CAD | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79F, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_243)
{
    // 1DF4 0041;	
    // (ᷴ) COMBINING LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1DF4, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_244)
{
    // A79F 0041;	
    // (ꞟ) LATIN SMALL LETTER VOLAPUK UE	[1F1B 1CAD | 0020 002B 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA79F, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_245)
{
    // 00DC 0061;	
    // (Ü) LATIN CAPITAL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DC, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_246)
{
    // 00DC 0041;	
    // (Ü) LATIN CAPITAL LETTER U WITH DIAERESIS	[1F1B 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00DC, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_247)
{
    // A79E 0061;	
    // (Ꞟ) LATIN CAPITAL LETTER VOLAPUK UE	[1F1B 1CAD | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79E, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_248)
{
    // A79E 0041;	
    // (Ꞟ) LATIN CAPITAL LETTER VOLAPUK UE	[1F1B 1CAD | 0020 002B 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0xA79E, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_249)
{
    // 01D8 0061;	
    // (ǘ) LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D8, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_250)
{
    // 01D8 0041;	
    // (ǘ) LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D8, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_251)
{
    // 01D7 0061;	
    // (Ǘ) LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CAD | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D7, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_252)
{
    // 01D7 0041;	
    // (Ǘ) LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CAD | 0020 002B 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D7, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_253)
{
    // 01DC 0061;	
    // (ǜ) LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DC, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_254)
{
    // 01DC 0041;	
    // (ǜ) LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01DC, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_255)
{
    // 01DB 0061;	
    // (Ǜ) LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CAD | 0020 002B 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DB, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_256)
{
    // 01DB 0041;	
    // (Ǜ) LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CAD | 0020 002B 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01DB, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_257)
{
    // 01DA 0061;	
    // (ǚ) LATIN SMALL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CAD | 0020 002B 0028 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DA, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_258)
{
    // 01DA 0041;	
    // (ǚ) LATIN SMALL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CAD | 0020 002B 0028 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01DA, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_259)
{
    // 01D9 0061;	
    // (Ǚ) LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CAD | 0020 002B 0028 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D9, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_260)
{
    // 01D9 0041;	
    // (Ǚ) LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CAD | 0020 002B 0028 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D9, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_261)
{
    // 01D6 0061;	
    // (ǖ) LATIN SMALL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D6, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_262)
{
    // 01D6 0041;	
    // (ǖ) LATIN SMALL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D6, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_263)
{
    // 01D5 0061;	
    // (Ǖ) LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D5, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_264)
{
    // 01D5 0041;	
    // (Ǖ) LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01D5, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_265)
{
    // 0171 0061;	
    // (ű) LATIN SMALL LETTER U WITH DOUBLE ACUTE	[1F1B 1CAD | 0020 002C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0171, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_266)
{
    // 0171 0041;	
    // (ű) LATIN SMALL LETTER U WITH DOUBLE ACUTE	[1F1B 1CAD | 0020 002C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0171, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_267)
{
    // 0170 0061;	
    // (Ű) LATIN CAPITAL LETTER U WITH DOUBLE ACUTE	[1F1B 1CAD | 0020 002C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0170, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_268)
{
    // 0170 0041;	
    // (Ű) LATIN CAPITAL LETTER U WITH DOUBLE ACUTE	[1F1B 1CAD | 0020 002C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0170, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_269)
{
    // 0169 0061;	
    // (ũ) LATIN SMALL LETTER U WITH TILDE	[1F1B 1CAD | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0169, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_270)
{
    // 0169 0041;	
    // (ũ) LATIN SMALL LETTER U WITH TILDE	[1F1B 1CAD | 0020 002D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0169, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_271)
{
    // 0168 0061;	
    // (Ũ) LATIN CAPITAL LETTER U WITH TILDE	[1F1B 1CAD | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0168, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_272)
{
    // 0168 0041;	
    // (Ũ) LATIN CAPITAL LETTER U WITH TILDE	[1F1B 1CAD | 0020 002D 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0168, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_273)
{
    // 1E79 0061;	
    // (ṹ) LATIN SMALL LETTER U WITH TILDE AND ACUTE	[1F1B 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E79, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_274)
{
    // 1E79 0041;	
    // (ṹ) LATIN SMALL LETTER U WITH TILDE AND ACUTE	[1F1B 1CAD | 0020 002D 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E79, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_275)
{
    // 1E78 0061;	
    // (Ṹ) LATIN CAPITAL LETTER U WITH TILDE AND ACUTE	[1F1B 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E78, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_276)
{
    // 1E78 0041;	
    // (Ṹ) LATIN CAPITAL LETTER U WITH TILDE AND ACUTE	[1F1B 1CAD | 0020 002D 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E78, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_277)
{
    // 0173 0061;	
    // (ų) LATIN SMALL LETTER U WITH OGONEK	[1F1B 1CAD | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0173, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_278)
{
    // 0173 0041;	
    // (ų) LATIN SMALL LETTER U WITH OGONEK	[1F1B 1CAD | 0020 0031 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0173, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_279)
{
    // 0172 0061;	
    // (Ų) LATIN CAPITAL LETTER U WITH OGONEK	[1F1B 1CAD | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0172, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_280)
{
    // 0172 0041;	
    // (Ų) LATIN CAPITAL LETTER U WITH OGONEK	[1F1B 1CAD | 0020 0031 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0172, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_281)
{
    // 016B 0061;	
    // (ū) LATIN SMALL LETTER U WITH MACRON	[1F1B 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016B, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_282)
{
    // 016B 0041;	
    // (ū) LATIN SMALL LETTER U WITH MACRON	[1F1B 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x016B, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_283)
{
    // 016A 0061;	
    // (Ū) LATIN CAPITAL LETTER U WITH MACRON	[1F1B 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016A, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_284)
{
    // 016A 0041;	
    // (Ū) LATIN CAPITAL LETTER U WITH MACRON	[1F1B 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x016A, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_285)
{
    // 1E7B 0061;	
    // (ṻ) LATIN SMALL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CAD | 0020 0032 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7B, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_286)
{
    // 1E7B 0041;	
    // (ṻ) LATIN SMALL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CAD | 0020 0032 002B 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E7B, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_287)
{
    // 1E7A 0061;	
    // (Ṻ) LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CAD | 0020 0032 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7A, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_288)
{
    // 1E7A 0041;	
    // (Ṻ) LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CAD | 0020 0032 002B 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E7A, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_289)
{
    // 1DF0 0061;	
    // (ᷰ) COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE	[1F1B 1CAD | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF0, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_290)
{
    // 1DF0 0041;	
    // (ᷰ) COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE	[1F1B 1CAD | 0020 0034 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1DF0, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_291)
{
    // 1EE7 0061;	
    // (ủ) LATIN SMALL LETTER U WITH HOOK ABOVE	[1F1B 1CAD | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE7, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_292)
{
    // 1EE7 0041;	
    // (ủ) LATIN SMALL LETTER U WITH HOOK ABOVE	[1F1B 1CAD | 0020 003B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EE7, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_293)
{
    // 1EE6 0061;	
    // (Ủ) LATIN CAPITAL LETTER U WITH HOOK ABOVE	[1F1B 1CAD | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE6, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_294)
{
    // 1EE6 0041;	
    // (Ủ) LATIN CAPITAL LETTER U WITH HOOK ABOVE	[1F1B 1CAD | 0020 003B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EE6, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_295)
{
    // 0215 0061;	
    // (ȕ) LATIN SMALL LETTER U WITH DOUBLE GRAVE	[1F1B 1CAD | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0215, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_296)
{
    // 0215 0041;	
    // (ȕ) LATIN SMALL LETTER U WITH DOUBLE GRAVE	[1F1B 1CAD | 0020 003C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0215, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_297)
{
    // 0214 0061;	
    // (Ȕ) LATIN CAPITAL LETTER U WITH DOUBLE GRAVE	[1F1B 1CAD | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0214, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_298)
{
    // 0214 0041;	
    // (Ȕ) LATIN CAPITAL LETTER U WITH DOUBLE GRAVE	[1F1B 1CAD | 0020 003C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0214, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_299)
{
    // 0217 0061;	
    // (ȗ) LATIN SMALL LETTER U WITH INVERTED BREVE	[1F1B 1CAD | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0217, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_300)
{
    // 0217 0041;	
    // (ȗ) LATIN SMALL LETTER U WITH INVERTED BREVE	[1F1B 1CAD | 0020 003E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0217, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_301)
{
    // 0216 0061;	
    // (Ȗ) LATIN CAPITAL LETTER U WITH INVERTED BREVE	[1F1B 1CAD | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0216, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_302)
{
    // 0216 0041;	
    // (Ȗ) LATIN CAPITAL LETTER U WITH INVERTED BREVE	[1F1B 1CAD | 0020 003E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0216, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_303)
{
    // 01B0 0061;	
    // (ư) LATIN SMALL LETTER U WITH HORN	[1F1B 1CAD | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01B0, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_304)
{
    // 01B0 0041;	
    // (ư) LATIN SMALL LETTER U WITH HORN	[1F1B 1CAD | 0020 003F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01B0, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_305)
{
    // 01AF 0061;	
    // (Ư) LATIN CAPITAL LETTER U WITH HORN	[1F1B 1CAD | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01AF, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_306)
{
    // 01AF 0041;	
    // (Ư) LATIN CAPITAL LETTER U WITH HORN	[1F1B 1CAD | 0020 003F 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01AF, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_307)
{
    // 1EE9 0061;	
    // (ứ) LATIN SMALL LETTER U WITH HORN AND ACUTE	[1F1B 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE9, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_308)
{
    // 1EE9 0041;	
    // (ứ) LATIN SMALL LETTER U WITH HORN AND ACUTE	[1F1B 1CAD | 0020 003F 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EE9, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_309)
{
    // 1EE8 0061;	
    // (Ứ) LATIN CAPITAL LETTER U WITH HORN AND ACUTE	[1F1B 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE8, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_310)
{
    // 1EE8 0041;	
    // (Ứ) LATIN CAPITAL LETTER U WITH HORN AND ACUTE	[1F1B 1CAD | 0020 003F 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EE8, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_311)
{
    // 1EEB 0061;	
    // (ừ) LATIN SMALL LETTER U WITH HORN AND GRAVE	[1F1B 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEB, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_312)
{
    // 1EEB 0041;	
    // (ừ) LATIN SMALL LETTER U WITH HORN AND GRAVE	[1F1B 1CAD | 0020 003F 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EEB, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_313)
{
    // 1EEA 0061;	
    // (Ừ) LATIN CAPITAL LETTER U WITH HORN AND GRAVE	[1F1B 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEA, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_314)
{
    // 1EEA 0041;	
    // (Ừ) LATIN CAPITAL LETTER U WITH HORN AND GRAVE	[1F1B 1CAD | 0020 003F 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EEA, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_315)
{
    // 1EEF 0061;	
    // (ữ) LATIN SMALL LETTER U WITH HORN AND TILDE	[1F1B 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEF, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_316)
{
    // 1EEF 0041;	
    // (ữ) LATIN SMALL LETTER U WITH HORN AND TILDE	[1F1B 1CAD | 0020 003F 002D 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EEF, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_317)
{
    // 1EEE 0061;	
    // (Ữ) LATIN CAPITAL LETTER U WITH HORN AND TILDE	[1F1B 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEE, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_318)
{
    // 1EEE 0041;	
    // (Ữ) LATIN CAPITAL LETTER U WITH HORN AND TILDE	[1F1B 1CAD | 0020 003F 002D 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EEE, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_319)
{
    // 1EED 0061;	
    // (ử) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EED, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_320)
{
    // 1EED 0041;	
    // (ử) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CAD | 0020 003F 003B 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EED, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_321)
{
    // 1EEC 0061;	
    // (Ử) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEC, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_322)
{
    // 1EEC 0041;	
    // (Ử) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CAD | 0020 003F 003B 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EEC, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_323)
{
    // 1EF1 0061;	
    // (ự) LATIN SMALL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF1, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_324)
{
    // 1EF1 0041;	
    // (ự) LATIN SMALL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CAD | 0020 003F 0042 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF1, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_325)
{
    // 1EF0 0061;	
    // (Ự) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF0, 0x0061 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_326)
{
    // 1EF0 0041;	
    // (Ự) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CAD | 0020 003F 0042 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF0, 0x0041 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_327)
{
    // 1EE5 0061;	
    // (ụ) LATIN SMALL LETTER U WITH DOT BELOW	[1F1B 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE5, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_328)
{
    // 1EE5 0041;	
    // (ụ) LATIN SMALL LETTER U WITH DOT BELOW	[1F1B 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EE5, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_329)
{
    // 1EE4 0061;	
    // (Ụ) LATIN CAPITAL LETTER U WITH DOT BELOW	[1F1B 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE4, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_330)
{
    // 1EE4 0041;	
    // (Ụ) LATIN CAPITAL LETTER U WITH DOT BELOW	[1F1B 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EE4, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_331)
{
    // 1E73 0061;	
    // (ṳ) LATIN SMALL LETTER U WITH DIAERESIS BELOW	[1F1B 1CAD | 0020 0043 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E73, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_332)
{
    // 1E73 0041;	
    // (ṳ) LATIN SMALL LETTER U WITH DIAERESIS BELOW	[1F1B 1CAD | 0020 0043 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E73, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_333)
{
    // 1E72 0061;	
    // (Ṳ) LATIN CAPITAL LETTER U WITH DIAERESIS BELOW	[1F1B 1CAD | 0020 0043 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E72, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_334)
{
    // 1E72 0041;	
    // (Ṳ) LATIN CAPITAL LETTER U WITH DIAERESIS BELOW	[1F1B 1CAD | 0020 0043 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E72, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_335)
{
    // 1E77 0061;	
    // (ṷ) LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CAD | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E77, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_336)
{
    // 1E77 0041;	
    // (ṷ) LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CAD | 0020 0046 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E77, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_337)
{
    // 1E76 0061;	
    // (Ṷ) LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CAD | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E76, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_338)
{
    // 1E76 0041;	
    // (Ṷ) LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CAD | 0020 0046 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E76, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_339)
{
    // 1E75 0061;	
    // (ṵ) LATIN SMALL LETTER U WITH TILDE BELOW	[1F1B 1CAD | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E75, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_340)
{
    // 1E75 0041;	
    // (ṵ) LATIN SMALL LETTER U WITH TILDE BELOW	[1F1B 1CAD | 0020 0048 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E75, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_341)
{
    // 1E74 0061;	
    // (Ṵ) LATIN CAPITAL LETTER U WITH TILDE BELOW	[1F1B 1CAD | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E74, 0x0061 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_342)
{
    // 1E74 0041;	
    // (Ṵ) LATIN CAPITAL LETTER U WITH TILDE BELOW	[1F1B 1CAD | 0020 0048 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E74, 0x0041 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_343)
{
    // 0075 0062;	
    // (u) LATIN SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0075, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_344)
{
    // FF55 0062;	
    // (ｕ) FULLWIDTH LATIN SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF55, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_345)
{
    // 0367 0062;	
    // (ͧ) COMBINING LATIN SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0367, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_346)
{
    // 1D42E 0062;	
    // (𝐮) MATHEMATICAL BOLD SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42E, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_347)
{
    // 1D462 0062;	
    // (𝑢) MATHEMATICAL ITALIC SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D462, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_348)
{
    // 1D496 0062;	
    // (𝒖) MATHEMATICAL BOLD ITALIC SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D496, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_349)
{
    // 1D4CA 0062;	
    // (𝓊) MATHEMATICAL SCRIPT SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CA, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_350)
{
    // 1D4FE 0062;	
    // (𝓾) MATHEMATICAL BOLD SCRIPT SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FE, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_351)
{
    // 1D532 0062;	
    // (𝔲) MATHEMATICAL FRAKTUR SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D532, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_352)
{
    // 1D566 0062;	
    // (𝕦) MATHEMATICAL DOUBLE-STRUCK SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D566, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_353)
{
    // 1D59A 0062;	
    // (𝖚) MATHEMATICAL BOLD FRAKTUR SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59A, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_354)
{
    // 1D5CE 0062;	
    // (𝗎) MATHEMATICAL SANS-SERIF SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CE, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_355)
{
    // 1D602 0062;	
    // (𝘂) MATHEMATICAL SANS-SERIF BOLD SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D602, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_356)
{
    // 1D636 0062;	
    // (𝘶) MATHEMATICAL SANS-SERIF ITALIC SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D636, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_357)
{
    // 1D66A 0062;	
    // (𝙪) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66A, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_358)
{
    // 1D69E 0062;	
    // (𝚞) MATHEMATICAL MONOSPACE SMALL U	[1F1B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69E, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_359)
{
    // 24E4 0062;	
    // (ⓤ) CIRCLED LATIN SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E4, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_360)
{
    // 0055 0062;	
    // (U) LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0055, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_361)
{
    // FF35 0062;	
    // (Ｕ) FULLWIDTH LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF35, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_362)
{
    // 1D414 0062;	
    // (𝐔) MATHEMATICAL BOLD CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D414, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_363)
{
    // 1D448 0062;	
    // (𝑈) MATHEMATICAL ITALIC CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D448, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_364)
{
    // 1D47C 0062;	
    // (𝑼) MATHEMATICAL BOLD ITALIC CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47C, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_365)
{
    // 1D4B0 0062;	
    // (𝒰) MATHEMATICAL SCRIPT CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B0, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_366)
{
    // 1D4E4 0062;	
    // (𝓤) MATHEMATICAL BOLD SCRIPT CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E4, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_367)
{
    // 1D518 0062;	
    // (𝔘) MATHEMATICAL FRAKTUR CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D518, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_368)
{
    // 1D54C 0062;	
    // (𝕌) MATHEMATICAL DOUBLE-STRUCK CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54C, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_369)
{
    // 1D580 0062;	
    // (𝖀) MATHEMATICAL BOLD FRAKTUR CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D580, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_370)
{
    // 1D5B4 0062;	
    // (𝖴) MATHEMATICAL SANS-SERIF CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B4, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_371)
{
    // 1D5E8 0062;	
    // (𝗨) MATHEMATICAL SANS-SERIF BOLD CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E8, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_372)
{
    // 1D61C 0062;	
    // (𝘜) MATHEMATICAL SANS-SERIF ITALIC CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61C, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_373)
{
    // 1D650 0062;	
    // (𝙐) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D650, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_374)
{
    // 1D684 0062;	
    // (𝚄) MATHEMATICAL MONOSPACE CAPITAL U	[1F1B 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D684, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_375)
{
    // 24CA 0062;	
    // (Ⓤ) CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CA, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_376)
{
    // 1F164 0062;	
    // (🅤) NEGATIVE CIRCLED LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F164, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_377)
{
    // 1D58 0062;	
    // (ᵘ) MODIFIER LETTER SMALL U	[1F1B 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D58, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_378)
{
    // 1D64 0062;	
    // (ᵤ) LATIN SUBSCRIPT SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D64, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_379)
{
    // 1D41 0062;	
    // (ᵁ) MODIFIER LETTER CAPITAL U	[1F1B 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D41, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_380)
{
    // 1F144 0062;	
    // (🅄) SQUARED LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F144, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_381)
{
    // 1F184 0062;	
    // (🆄) NEGATIVE SQUARED LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F184, 0x0062 };
    uint32_t const ces[9] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_382)
{
    // 00FA 0062;	
    // (ú) LATIN SMALL LETTER U WITH ACUTE	[1F1B 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FA, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_383)
{
    // 00DA 0062;	
    // (Ú) LATIN CAPITAL LETTER U WITH ACUTE	[1F1B 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DA, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_384)
{
    // 00F9 0062;	
    // (ù) LATIN SMALL LETTER U WITH GRAVE	[1F1B 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00F9, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_385)
{
    // 00D9 0062;	
    // (Ù) LATIN CAPITAL LETTER U WITH GRAVE	[1F1B 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00D9, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_386)
{
    // 016D 0062;	
    // (ŭ) LATIN SMALL LETTER U WITH BREVE	[1F1B 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016D, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_387)
{
    // 016C 0062;	
    // (Ŭ) LATIN CAPITAL LETTER U WITH BREVE	[1F1B 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016C, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_388)
{
    // 00FB 0062;	
    // (û) LATIN SMALL LETTER U WITH CIRCUMFLEX	[1F1B 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FB, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_389)
{
    // 00DB 0062;	
    // (Û) LATIN CAPITAL LETTER U WITH CIRCUMFLEX	[1F1B 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DB, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_390)
{
    // 01D4 0062;	
    // (ǔ) LATIN SMALL LETTER U WITH CARON	[1F1B 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D4, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_391)
{
    // 01D3 0062;	
    // (Ǔ) LATIN CAPITAL LETTER U WITH CARON	[1F1B 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01D3, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_392)
{
    // 016F 0062;	
    // (ů) LATIN SMALL LETTER U WITH RING ABOVE	[1F1B 1CC6 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016F, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_393)
{
    // 016E 0062;	
    // (Ů) LATIN CAPITAL LETTER U WITH RING ABOVE	[1F1B 1CC6 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016E, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_394)
{
    // 00FC 0062;	
    // (ü) LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FC, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_395)
{
    // 1DF4 0062;	
    // (ᷴ) COMBINING LATIN SMALL LETTER U WITH DIAERESIS	[1F1B 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF4, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_396)
{
    // A79F 0062;	
    // (ꞟ) LATIN SMALL LETTER VOLAPUK UE	[1F1B 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79F, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_397)
{
    // 00DC 0062;	
    // (Ü) LATIN CAPITAL LETTER U WITH DIAERESIS	[1F1B 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DC, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_398)
{
    // A79E 0062;	
    // (Ꞟ) LATIN CAPITAL LETTER VOLAPUK UE	[1F1B 1CC6 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79E, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_399)
{
    // 01D8 0062;	
    // (ǘ) LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D8, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_400)
{
    // 01D7 0062;	
    // (Ǘ) LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE	[1F1B 1CC6 | 0020 002B 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D7, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_401)
{
    // 01DC 0062;	
    // (ǜ) LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CC6 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DC, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_402)
{
    // 01DB 0062;	
    // (Ǜ) LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE	[1F1B 1CC6 | 0020 002B 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DB, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_403)
{
    // 01DA 0062;	
    // (ǚ) LATIN SMALL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CC6 | 0020 002B 0028 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DA, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_404)
{
    // 01D9 0062;	
    // (Ǚ) LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON	[1F1B 1CC6 | 0020 002B 0028 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D9, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_405)
{
    // 01D6 0062;	
    // (ǖ) LATIN SMALL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CC6 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D6, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_406)
{
    // 01D5 0062;	
    // (Ǖ) LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON	[1F1B 1CC6 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01D5, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_407)
{
    // 0171 0062;	
    // (ű) LATIN SMALL LETTER U WITH DOUBLE ACUTE	[1F1B 1CC6 | 0020 002C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0171, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_408)
{
    // 0170 0062;	
    // (Ű) LATIN CAPITAL LETTER U WITH DOUBLE ACUTE	[1F1B 1CC6 | 0020 002C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0170, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_409)
{
    // 0169 0062;	
    // (ũ) LATIN SMALL LETTER U WITH TILDE	[1F1B 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0169, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_410)
{
    // 0168 0062;	
    // (Ũ) LATIN CAPITAL LETTER U WITH TILDE	[1F1B 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0168, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_411)
{
    // 1E79 0062;	
    // (ṹ) LATIN SMALL LETTER U WITH TILDE AND ACUTE	[1F1B 1CC6 | 0020 002D 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E79, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_412)
{
    // 1E78 0062;	
    // (Ṹ) LATIN CAPITAL LETTER U WITH TILDE AND ACUTE	[1F1B 1CC6 | 0020 002D 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E78, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_413)
{
    // 0173 0062;	
    // (ų) LATIN SMALL LETTER U WITH OGONEK	[1F1B 1CC6 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0173, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_414)
{
    // 0172 0062;	
    // (Ų) LATIN CAPITAL LETTER U WITH OGONEK	[1F1B 1CC6 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0172, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_415)
{
    // 016B 0062;	
    // (ū) LATIN SMALL LETTER U WITH MACRON	[1F1B 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x016B, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_416)
{
    // 016A 0062;	
    // (Ū) LATIN CAPITAL LETTER U WITH MACRON	[1F1B 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x016A, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_417)
{
    // 1E7B 0062;	
    // (ṻ) LATIN SMALL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CC6 | 0020 0032 002B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7B, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_418)
{
    // 1E7A 0062;	
    // (Ṻ) LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS	[1F1B 1CC6 | 0020 0032 002B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E7A, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_419)
{
    // 1DF0 0062;	
    // (ᷰ) COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE	[1F1B 1CC6 | 0020 0034 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF0, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0034, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_420)
{
    // 1EE7 0062;	
    // (ủ) LATIN SMALL LETTER U WITH HOOK ABOVE	[1F1B 1CC6 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE7, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_421)
{
    // 1EE6 0062;	
    // (Ủ) LATIN CAPITAL LETTER U WITH HOOK ABOVE	[1F1B 1CC6 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE6, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_422)
{
    // 0215 0062;	
    // (ȕ) LATIN SMALL LETTER U WITH DOUBLE GRAVE	[1F1B 1CC6 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0215, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_423)
{
    // 0214 0062;	
    // (Ȕ) LATIN CAPITAL LETTER U WITH DOUBLE GRAVE	[1F1B 1CC6 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0214, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_424)
{
    // 0217 0062;	
    // (ȗ) LATIN SMALL LETTER U WITH INVERTED BREVE	[1F1B 1CC6 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0217, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_425)
{
    // 0216 0062;	
    // (Ȗ) LATIN CAPITAL LETTER U WITH INVERTED BREVE	[1F1B 1CC6 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0216, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_426)
{
    // 01B0 0062;	
    // (ư) LATIN SMALL LETTER U WITH HORN	[1F1B 1CC6 | 0020 003F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01B0, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_427)
{
    // 01AF 0062;	
    // (Ư) LATIN CAPITAL LETTER U WITH HORN	[1F1B 1CC6 | 0020 003F 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01AF, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_428)
{
    // 1EE9 0062;	
    // (ứ) LATIN SMALL LETTER U WITH HORN AND ACUTE	[1F1B 1CC6 | 0020 003F 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE9, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_429)
{
    // 1EE8 0062;	
    // (Ứ) LATIN CAPITAL LETTER U WITH HORN AND ACUTE	[1F1B 1CC6 | 0020 003F 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE8, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_430)
{
    // 1EEB 0062;	
    // (ừ) LATIN SMALL LETTER U WITH HORN AND GRAVE	[1F1B 1CC6 | 0020 003F 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEB, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_431)
{
    // 1EEA 0062;	
    // (Ừ) LATIN CAPITAL LETTER U WITH HORN AND GRAVE	[1F1B 1CC6 | 0020 003F 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEA, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_432)
{
    // 1EEF 0062;	
    // (ữ) LATIN SMALL LETTER U WITH HORN AND TILDE	[1F1B 1CC6 | 0020 003F 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEF, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_433)
{
    // 1EEE 0062;	
    // (Ữ) LATIN CAPITAL LETTER U WITH HORN AND TILDE	[1F1B 1CC6 | 0020 003F 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEE, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_434)
{
    // 1EED 0062;	
    // (ử) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CC6 | 0020 003F 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EED, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_435)
{
    // 1EEC 0062;	
    // (Ử) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE	[1F1B 1CC6 | 0020 003F 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EEC, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_436)
{
    // 1EF1 0062;	
    // (ự) LATIN SMALL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CC6 | 0020 003F 0042 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF1, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_437)
{
    // 1EF0 0062;	
    // (Ự) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW	[1F1B 1CC6 | 0020 003F 0042 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF0, 0x0062 };
    uint32_t const ces[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x003F, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_438)
{
    // 1EE5 0062;	
    // (ụ) LATIN SMALL LETTER U WITH DOT BELOW	[1F1B 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EE5, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_439)
{
    // 1EE4 0062;	
    // (Ụ) LATIN CAPITAL LETTER U WITH DOT BELOW	[1F1B 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EE4, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_440)
{
    // 1E73 0062;	
    // (ṳ) LATIN SMALL LETTER U WITH DIAERESIS BELOW	[1F1B 1CC6 | 0020 0043 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E73, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_441)
{
    // 1E72 0062;	
    // (Ṳ) LATIN CAPITAL LETTER U WITH DIAERESIS BELOW	[1F1B 1CC6 | 0020 0043 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E72, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0043, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_442)
{
    // 1E77 0062;	
    // (ṷ) LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CC6 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E77, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_443)
{
    // 1E76 0062;	
    // (Ṷ) LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW	[1F1B 1CC6 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E76, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_444)
{
    // 1E75 0062;	
    // (ṵ) LATIN SMALL LETTER U WITH TILDE BELOW	[1F1B 1CC6 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E75, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_445)
{
    // 1E74 0062;	
    // (Ṵ) LATIN CAPITAL LETTER U WITH TILDE BELOW	[1F1B 1CC6 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E74, 0x0062 };
    uint32_t const ces[11] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_446)
{
    // 1F1AB 0021;	
    // (🆫) SQUARED UHD	[1F1B 1D7E 1CF5 0261 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F1AB, 0x0021 };
    uint32_t const ces[15] = { 0x1F1B, 0x1D7E, 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_447)
{
    // 1F1AB 003F;	
    // (🆫) SQUARED UHD	[1F1B 1D7E 1CF5 0267 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F1AB, 0x003F };
    uint32_t const ces[15] = { 0x1F1B, 0x1D7E, 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_448)
{
    // 1F1AB 0061;	
    // (🆫) SQUARED UHD	[1F1B 1D7E 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F1AB, 0x0061 };
    uint32_t const ces[15] = { 0x1F1B, 0x1D7E, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_449)
{
    // 1F1AB 0041;	
    // (🆫) SQUARED UHD	[1F1B 1D7E 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F1AB, 0x0041 };
    uint32_t const ces[15] = { 0x1F1B, 0x1D7E, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_450)
{
    // 1F1AB 0062;	
    // (🆫) SQUARED UHD	[1F1B 1D7E 1CF5 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F1AB, 0x0062 };
    uint32_t const ces[15] = { 0x1F1B, 0x1D7E, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_451)
{
    // 1F199 0021;	
    // (🆙) SQUARED UP WITH EXCLAMATION MARK	[1F1B 1E72 0261 0261 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x1F199, 0x0021 };
    uint32_t const ces[15] = { 0x1F1B, 0x1E72, 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_452)
{
    // 1F199 003F;	
    // (🆙) SQUARED UP WITH EXCLAMATION MARK	[1F1B 1E72 0261 0267 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x1F199, 0x003F };
    uint32_t const ces[15] = { 0x1F1B, 0x1E72, 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_453)
{
    // 1F199 0061;	
    // (🆙) SQUARED UP WITH EXCLAMATION MARK	[1F1B 1E72 0261 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x1F199, 0x0061 };
    uint32_t const ces[15] = { 0x1F1B, 0x1E72, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_454)
{
    // 1F199 0041;	
    // (🆙) SQUARED UP WITH EXCLAMATION MARK	[1F1B 1E72 0261 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0008 |]

    uint32_t cps[2] = { 0x1F199, 0x0041 };
    uint32_t const ces[15] = { 0x1F1B, 0x1E72, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_455)
{
    // 1F199 0062;	
    // (🆙) SQUARED UP WITH EXCLAMATION MARK	[1F1B 1E72 0261 1CC6 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x1F199, 0x0062 };
    uint32_t const ces[15] = { 0x1F1B, 0x1E72, 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_456)
{
    // 1D1C 0021;	
    // (ᴜ) LATIN LETTER SMALL CAPITAL U	[1F1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C, 0x0021 };
    uint32_t const ces[9] = { 0x1F1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_457)
{
    // 1DB8 0021;	
    // (ᶸ) MODIFIER LETTER SMALL CAPITAL U	[1F1F 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB8, 0x0021 };
    uint32_t const ces[9] = { 0x1F1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_458)
{
    // 1D1C 003F;	
    // (ᴜ) LATIN LETTER SMALL CAPITAL U	[1F1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C, 0x003F };
    uint32_t const ces[9] = { 0x1F1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_459)
{
    // 1DB8 003F;	
    // (ᶸ) MODIFIER LETTER SMALL CAPITAL U	[1F1F 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB8, 0x003F };
    uint32_t const ces[9] = { 0x1F1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_460)
{
    // 1D1C 0061;	
    // (ᴜ) LATIN LETTER SMALL CAPITAL U	[1F1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C, 0x0061 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_461)
{
    // 1D1C 0041;	
    // (ᴜ) LATIN LETTER SMALL CAPITAL U	[1F1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1C, 0x0041 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_462)
{
    // 1DB8 0061;	
    // (ᶸ) MODIFIER LETTER SMALL CAPITAL U	[1F1F 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB8, 0x0061 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_463)
{
    // 1DB8 0041;	
    // (ᶸ) MODIFIER LETTER SMALL CAPITAL U	[1F1F 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DB8, 0x0041 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_464)
{
    // 1D1C 0062;	
    // (ᴜ) LATIN LETTER SMALL CAPITAL U	[1F1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1C, 0x0062 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_465)
{
    // 1DB8 0062;	
    // (ᶸ) MODIFIER LETTER SMALL CAPITAL U	[1F1F 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB8, 0x0062 };
    uint32_t const ces[9] = { 0x1F1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_466)
{
    // AB4E 0021;	
    // (ꭎ) LATIN SMALL LETTER U WITH SHORT RIGHT LEG	[1F20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4E, 0x0021 };
    uint32_t const ces[9] = { 0x1F20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_467)
{
    // AB4E 003F;	
    // (ꭎ) LATIN SMALL LETTER U WITH SHORT RIGHT LEG	[1F20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4E, 0x003F };
    uint32_t const ces[9] = { 0x1F20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_468)
{
    // AB4E 0061;	
    // (ꭎ) LATIN SMALL LETTER U WITH SHORT RIGHT LEG	[1F20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4E, 0x0061 };
    uint32_t const ces[9] = { 0x1F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_469)
{
    // AB4E 0041;	
    // (ꭎ) LATIN SMALL LETTER U WITH SHORT RIGHT LEG	[1F20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB4E, 0x0041 };
    uint32_t const ces[9] = { 0x1F20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_470)
{
    // AB4E 0062;	
    // (ꭎ) LATIN SMALL LETTER U WITH SHORT RIGHT LEG	[1F20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB4E, 0x0062 };
    uint32_t const ces[9] = { 0x1F20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_471)
{
    // 1D1D 0021;	
    // (ᴝ) LATIN SMALL LETTER SIDEWAYS U	[1F21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D, 0x0021 };
    uint32_t const ces[9] = { 0x1F21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_472)
{
    // 1D59 0021;	
    // (ᵙ) MODIFIER LETTER SMALL SIDEWAYS U	[1F21 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D59, 0x0021 };
    uint32_t const ces[9] = { 0x1F21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_473)
{
    // 1D1D 003F;	
    // (ᴝ) LATIN SMALL LETTER SIDEWAYS U	[1F21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D, 0x003F };
    uint32_t const ces[9] = { 0x1F21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_474)
{
    // 1D59 003F;	
    // (ᵙ) MODIFIER LETTER SMALL SIDEWAYS U	[1F21 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D59, 0x003F };
    uint32_t const ces[9] = { 0x1F21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_475)
{
    // 1D1D 0061;	
    // (ᴝ) LATIN SMALL LETTER SIDEWAYS U	[1F21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D, 0x0061 };
    uint32_t const ces[9] = { 0x1F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_476)
{
    // 1D1D 0041;	
    // (ᴝ) LATIN SMALL LETTER SIDEWAYS U	[1F21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1D, 0x0041 };
    uint32_t const ces[9] = { 0x1F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_477)
{
    // 1D59 0061;	
    // (ᵙ) MODIFIER LETTER SMALL SIDEWAYS U	[1F21 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D59, 0x0061 };
    uint32_t const ces[9] = { 0x1F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_478)
{
    // 1D59 0041;	
    // (ᵙ) MODIFIER LETTER SMALL SIDEWAYS U	[1F21 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D59, 0x0041 };
    uint32_t const ces[9] = { 0x1F21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_479)
{
    // 1D1D 0062;	
    // (ᴝ) LATIN SMALL LETTER SIDEWAYS U	[1F21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1D, 0x0062 };
    uint32_t const ces[9] = { 0x1F21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_480)
{
    // 1D59 0062;	
    // (ᵙ) MODIFIER LETTER SMALL SIDEWAYS U	[1F21 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D59, 0x0062 };
    uint32_t const ces[9] = { 0x1F21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_481)
{
    // 1D1E 0021;	
    // (ᴞ) LATIN SMALL LETTER SIDEWAYS DIAERESIZED U	[1F22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E, 0x0021 };
    uint32_t const ces[9] = { 0x1F22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_482)
{
    // 1D1E 003F;	
    // (ᴞ) LATIN SMALL LETTER SIDEWAYS DIAERESIZED U	[1F22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E, 0x003F };
    uint32_t const ces[9] = { 0x1F22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_483)
{
    // 1D1E 0061;	
    // (ᴞ) LATIN SMALL LETTER SIDEWAYS DIAERESIZED U	[1F22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E, 0x0061 };
    uint32_t const ces[9] = { 0x1F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_484)
{
    // 1D1E 0041;	
    // (ᴞ) LATIN SMALL LETTER SIDEWAYS DIAERESIZED U	[1F22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D1E, 0x0041 };
    uint32_t const ces[9] = { 0x1F22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_485)
{
    // 1D1E 0062;	
    // (ᴞ) LATIN SMALL LETTER SIDEWAYS DIAERESIZED U	[1F22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D1E, 0x0062 };
    uint32_t const ces[9] = { 0x1F22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_486)
{
    // 1D6B 0021;	
    // (ᵫ) LATIN SMALL LETTER UE	[1F23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6B, 0x0021 };
    uint32_t const ces[9] = { 0x1F23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_487)
{
    // 1D6B 003F;	
    // (ᵫ) LATIN SMALL LETTER UE	[1F23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6B, 0x003F };
    uint32_t const ces[9] = { 0x1F23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_488)
{
    // 1D6B 0061;	
    // (ᵫ) LATIN SMALL LETTER UE	[1F23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6B, 0x0061 };
    uint32_t const ces[9] = { 0x1F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_489)
{
    // 1D6B 0041;	
    // (ᵫ) LATIN SMALL LETTER UE	[1F23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D6B, 0x0041 };
    uint32_t const ces[9] = { 0x1F23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_490)
{
    // 1D6B 0062;	
    // (ᵫ) LATIN SMALL LETTER UE	[1F23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6B, 0x0062 };
    uint32_t const ces[9] = { 0x1F23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_491)
{
    // AB50 0021;	
    // (ꭐ) LATIN SMALL LETTER UI	[1F24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB50, 0x0021 };
    uint32_t const ces[9] = { 0x1F24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_492)
{
    // AB50 003F;	
    // (ꭐ) LATIN SMALL LETTER UI	[1F24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB50, 0x003F };
    uint32_t const ces[9] = { 0x1F24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_493)
{
    // AB50 0061;	
    // (ꭐ) LATIN SMALL LETTER UI	[1F24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB50, 0x0061 };
    uint32_t const ces[9] = { 0x1F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_494)
{
    // AB50 0041;	
    // (ꭐ) LATIN SMALL LETTER UI	[1F24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB50, 0x0041 };
    uint32_t const ces[9] = { 0x1F24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_495)
{
    // AB50 0062;	
    // (ꭐ) LATIN SMALL LETTER UI	[1F24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB50, 0x0062 };
    uint32_t const ces[9] = { 0x1F24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_496)
{
    // AB51 0021;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB51, 0x0021 };
    uint32_t const ces[9] = { 0x1F25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_497)
{
    // AB51 003F;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB51, 0x003F };
    uint32_t const ces[9] = { 0x1F25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_498)
{
    // AB51 0061;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB51, 0x0061 };
    uint32_t const ces[9] = { 0x1F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_122_499)
{
    // AB51 0041;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB51, 0x0041 };
    uint32_t const ces[9] = { 0x1F25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

