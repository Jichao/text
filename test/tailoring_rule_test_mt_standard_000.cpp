
// Warning! This file is autogenerated.
#include <boost/text/collation_tailoring.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

tailored_collation_element_table const & table()
{
    static tailored_collation_element_table retval =
        make_tailored_collation_element_table(
            data::mt::standard_collation_tailoring(),
            "mt::standard_collation_tailoring()", error, warning);
    return retval;
}
TEST(tailoring, mt_standard_000_001)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x010b),
        std::vector<uint32_t>(1, 0x010a),
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x010b),
        std::vector<uint32_t>(1, 0x010a),
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0063),
        std::vector<uint32_t>(1, 0x010a),
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0307},
        std::vector<uint32_t>{0x0047, 0x0307},
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0307},
        std::vector<uint32_t>{0x0047, 0x0307},
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0067),
        std::vector<uint32_t>{0x0047, 0x0307},
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0127},
        std::vector<uint32_t>{0x0067, 0x0126},
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0127},
        std::vector<uint32_t>{0x0067, 0x0126},
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0068),
        std::vector<uint32_t>{0x0067, 0x0126},
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0126},
        std::vector<uint32_t>{0x0047, 0x0127},
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0067, 0x0126},
        std::vector<uint32_t>{0x0047, 0x0127},
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0068),
        std::vector<uint32_t>{0x0047, 0x0127},
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0127},
        std::vector<uint32_t>{0x0047, 0x0126},
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0047, 0x0127},
        std::vector<uint32_t>{0x0047, 0x0126},
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0068),
        std::vector<uint32_t>{0x0047, 0x0126},
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0127),
        std::vector<uint32_t>(1, 0x0126),
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0127),
        std::vector<uint32_t>(1, 0x0126),
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0069),
        std::vector<uint32_t>(1, 0x0126),
        table(), collation_strength::quaternary),
        1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0307},
        std::vector<uint32_t>{0x005a, 0x0307},
        table(), collation_strength::tertiary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x007a, 0x0307},
        std::vector<uint32_t>{0x005a, 0x0307},
        table(), collation_strength::secondary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x007a),
        std::vector<uint32_t>{0x005a, 0x0307},
        table(), collation_strength::quaternary),
        1);
}
